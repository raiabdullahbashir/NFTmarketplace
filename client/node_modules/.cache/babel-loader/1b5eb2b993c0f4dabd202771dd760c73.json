{"ast":null,"code":"/*\n    This file is part of web3.js.\n\n    web3.js is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    web3.js is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\n/**\n * @file coder.js\n * @author Marek Kotewicz <marek@ethdev.com>\n * @date 2015\n */\nvar f = require('./formatters');\n\nvar SolidityTypeAddress = require('./address');\n\nvar SolidityTypeBool = require('./bool');\n\nvar SolidityTypeInt = require('./int');\n\nvar SolidityTypeUInt = require('./uint');\n\nvar SolidityTypeDynamicBytes = require('./dynamicbytes');\n\nvar SolidityTypeString = require('./string');\n\nvar SolidityTypeReal = require('./real');\n\nvar SolidityTypeUReal = require('./ureal');\n\nvar SolidityTypeBytes = require('./bytes');\n\nvar isDynamic = function (solidityType, type) {\n  return solidityType.isDynamicType(type) || solidityType.isDynamicArray(type);\n};\n/**\n * SolidityCoder prototype should be used to encode/decode solidity params of any type\n */\n\n\nvar SolidityCoder = function (types) {\n  this._types = types;\n};\n/**\n * This method should be used to transform type to SolidityType\n *\n * @method _requireType\n * @param {String} type\n * @returns {SolidityType}\n * @throws {Error} throws if no matching type is found\n */\n\n\nSolidityCoder.prototype._requireType = function (type) {\n  var solidityType = this._types.filter(function (t) {\n    return t.isType(type);\n  })[0];\n\n  if (!solidityType) {\n    throw Error('invalid solidity type!: ' + type);\n  }\n\n  return solidityType;\n};\n/**\n * Should be used to encode plain param\n *\n * @method encodeParam\n * @param {String} type\n * @param {Object} plain param\n * @return {String} encoded plain param\n */\n\n\nSolidityCoder.prototype.encodeParam = function (type, param) {\n  return this.encodeParams([type], [param]);\n};\n/**\n * Should be used to encode list of params\n *\n * @method encodeParams\n * @param {Array} types\n * @param {Array} params\n * @return {String} encoded list of params\n */\n\n\nSolidityCoder.prototype.encodeParams = function (types, params) {\n  var solidityTypes = this.getSolidityTypes(types);\n  var encodeds = solidityTypes.map(function (solidityType, index) {\n    return solidityType.encode(params[index], types[index]);\n  });\n  var dynamicOffset = solidityTypes.reduce(function (acc, solidityType, index) {\n    var staticPartLength = solidityType.staticPartLength(types[index]);\n    var roundedStaticPartLength = Math.floor((staticPartLength + 31) / 32) * 32;\n    return acc + (isDynamic(solidityTypes[index], types[index]) ? 32 : roundedStaticPartLength);\n  }, 0);\n  var result = this.encodeMultiWithOffset(types, solidityTypes, encodeds, dynamicOffset);\n  return result;\n};\n\nSolidityCoder.prototype.encodeMultiWithOffset = function (types, solidityTypes, encodeds, dynamicOffset) {\n  var result = \"\";\n  var self = this;\n  types.forEach(function (type, i) {\n    if (isDynamic(solidityTypes[i], types[i])) {\n      result += f.formatInputInt(dynamicOffset).encode();\n      var e = self.encodeWithOffset(types[i], solidityTypes[i], encodeds[i], dynamicOffset);\n      dynamicOffset += e.length / 2;\n    } else {\n      // don't add length to dynamicOffset. it's already counted\n      result += self.encodeWithOffset(types[i], solidityTypes[i], encodeds[i], dynamicOffset);\n    } // TODO: figure out nested arrays\n\n  });\n  types.forEach(function (type, i) {\n    if (isDynamic(solidityTypes[i], types[i])) {\n      var e = self.encodeWithOffset(types[i], solidityTypes[i], encodeds[i], dynamicOffset);\n      dynamicOffset += e.length / 2;\n      result += e;\n    }\n  });\n  return result;\n};\n\nSolidityCoder.prototype.encodeWithOffset = function (type, solidityType, encoded, offset) {\n  /* jshint maxcomplexity: 17 */\n\n  /* jshint maxdepth: 5 */\n  var self = this;\n  var encodingMode = {\n    dynamic: 1,\n    static: 2,\n    other: 3\n  };\n  var mode = solidityType.isDynamicArray(type) ? encodingMode.dynamic : solidityType.isStaticArray(type) ? encodingMode.static : encodingMode.other;\n\n  if (mode !== encodingMode.other) {\n    var nestedName = solidityType.nestedName(type);\n    var nestedStaticPartLength = solidityType.staticPartLength(nestedName);\n    var result = mode === encodingMode.dynamic ? encoded[0] : '';\n\n    if (solidityType.isDynamicArray(nestedName)) {\n      var previousLength = mode === encodingMode.dynamic ? 2 : 0;\n\n      for (var i = 0; i < encoded.length; i++) {\n        // calculate length of previous item\n        if (mode === encodingMode.dynamic) {\n          previousLength += +encoded[i - 1][0] || 0;\n        } else if (mode === encodingMode.static) {\n          previousLength += +(encoded[i - 1] || [])[0] || 0;\n        }\n\n        result += f.formatInputInt(offset + i * nestedStaticPartLength + previousLength * 32).encode();\n      }\n    }\n\n    var len = mode === encodingMode.dynamic ? encoded.length - 1 : encoded.length;\n\n    for (var c = 0; c < len; c++) {\n      var additionalOffset = result / 2;\n\n      if (mode === encodingMode.dynamic) {\n        result += self.encodeWithOffset(nestedName, solidityType, encoded[c + 1], offset + additionalOffset);\n      } else if (mode === encodingMode.static) {\n        result += self.encodeWithOffset(nestedName, solidityType, encoded[c], offset + additionalOffset);\n      }\n    }\n\n    return result;\n  }\n\n  return encoded;\n};\n/**\n * Should be used to decode bytes to plain param\n *\n * @method decodeParam\n * @param {String} type\n * @param {String} bytes\n * @return {Object} plain param\n */\n\n\nSolidityCoder.prototype.decodeParam = function (type, bytes) {\n  return this.decodeParams([type], bytes)[0];\n};\n/**\n * Should be used to decode list of params\n *\n * @method decodeParam\n * @param {Array} types\n * @param {String} bytes\n * @return {Array} array of plain params\n */\n\n\nSolidityCoder.prototype.decodeParams = function (types, bytes) {\n  var solidityTypes = this.getSolidityTypes(types);\n  var offsets = this.getOffsets(types, solidityTypes);\n  return solidityTypes.map(function (solidityType, index) {\n    return solidityType.decode(bytes, offsets[index], types[index], index);\n  });\n};\n\nSolidityCoder.prototype.getOffsets = function (types, solidityTypes) {\n  var lengths = solidityTypes.map(function (solidityType, index) {\n    return solidityType.staticPartLength(types[index]);\n  });\n\n  for (var i = 1; i < lengths.length; i++) {\n    // sum with length of previous element\n    lengths[i] += lengths[i - 1];\n  }\n\n  return lengths.map(function (length, index) {\n    // remove the current length, so the length is sum of previous elements\n    var staticPartLength = solidityTypes[index].staticPartLength(types[index]);\n    return length - staticPartLength;\n  });\n};\n\nSolidityCoder.prototype.getSolidityTypes = function (types) {\n  var self = this;\n  return types.map(function (type) {\n    return self._requireType(type);\n  });\n};\n\nvar coder = new SolidityCoder([new SolidityTypeAddress(), new SolidityTypeBool(), new SolidityTypeInt(), new SolidityTypeUInt(), new SolidityTypeDynamicBytes(), new SolidityTypeBytes(), new SolidityTypeString(), new SolidityTypeReal(), new SolidityTypeUReal()]);\nmodule.exports = coder;","map":{"version":3,"names":["f","require","SolidityTypeAddress","SolidityTypeBool","SolidityTypeInt","SolidityTypeUInt","SolidityTypeDynamicBytes","SolidityTypeString","SolidityTypeReal","SolidityTypeUReal","SolidityTypeBytes","isDynamic","solidityType","type","isDynamicType","isDynamicArray","SolidityCoder","types","_types","prototype","_requireType","filter","t","isType","Error","encodeParam","param","encodeParams","params","solidityTypes","getSolidityTypes","encodeds","map","index","encode","dynamicOffset","reduce","acc","staticPartLength","roundedStaticPartLength","Math","floor","result","encodeMultiWithOffset","self","forEach","i","formatInputInt","e","encodeWithOffset","length","encoded","offset","encodingMode","dynamic","static","other","mode","isStaticArray","nestedName","nestedStaticPartLength","previousLength","len","c","additionalOffset","decodeParam","bytes","decodeParams","offsets","getOffsets","decode","lengths","coder","module","exports"],"sources":["C:/Users/raiab/Documents/Logics Yard/NFT code daniyal/NFT code/client/node_modules/@0xproject/assert/node_modules/web3/lib/solidity/coder.js"],"sourcesContent":["/*\n    This file is part of web3.js.\n\n    web3.js is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    web3.js is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n/**\n * @file coder.js\n * @author Marek Kotewicz <marek@ethdev.com>\n * @date 2015\n */\n\nvar f = require('./formatters');\n\nvar SolidityTypeAddress = require('./address');\nvar SolidityTypeBool = require('./bool');\nvar SolidityTypeInt = require('./int');\nvar SolidityTypeUInt = require('./uint');\nvar SolidityTypeDynamicBytes = require('./dynamicbytes');\nvar SolidityTypeString = require('./string');\nvar SolidityTypeReal = require('./real');\nvar SolidityTypeUReal = require('./ureal');\nvar SolidityTypeBytes = require('./bytes');\n\nvar isDynamic = function (solidityType, type) {\n   return solidityType.isDynamicType(type) ||\n          solidityType.isDynamicArray(type);\n};\n\n/**\n * SolidityCoder prototype should be used to encode/decode solidity params of any type\n */\nvar SolidityCoder = function (types) {\n    this._types = types;\n};\n\n/**\n * This method should be used to transform type to SolidityType\n *\n * @method _requireType\n * @param {String} type\n * @returns {SolidityType}\n * @throws {Error} throws if no matching type is found\n */\nSolidityCoder.prototype._requireType = function (type) {\n    var solidityType = this._types.filter(function (t) {\n        return t.isType(type);\n    })[0];\n\n    if (!solidityType) {\n        throw Error('invalid solidity type!: ' + type);\n    }\n\n    return solidityType;\n};\n\n/**\n * Should be used to encode plain param\n *\n * @method encodeParam\n * @param {String} type\n * @param {Object} plain param\n * @return {String} encoded plain param\n */\nSolidityCoder.prototype.encodeParam = function (type, param) {\n    return this.encodeParams([type], [param]);\n};\n\n/**\n * Should be used to encode list of params\n *\n * @method encodeParams\n * @param {Array} types\n * @param {Array} params\n * @return {String} encoded list of params\n */\nSolidityCoder.prototype.encodeParams = function (types, params) {\n    var solidityTypes = this.getSolidityTypes(types);\n\n    var encodeds = solidityTypes.map(function (solidityType, index) {\n        return solidityType.encode(params[index], types[index]);\n    });\n\n    var dynamicOffset = solidityTypes.reduce(function (acc, solidityType, index) {\n        var staticPartLength = solidityType.staticPartLength(types[index]);\n        var roundedStaticPartLength = Math.floor((staticPartLength + 31) / 32) * 32;\n\n        return acc + (isDynamic(solidityTypes[index], types[index]) ?\n            32 :\n            roundedStaticPartLength);\n    }, 0);\n\n    var result = this.encodeMultiWithOffset(types, solidityTypes, encodeds, dynamicOffset);\n\n    return result;\n};\n\nSolidityCoder.prototype.encodeMultiWithOffset = function (types, solidityTypes, encodeds, dynamicOffset) {\n    var result = \"\";\n    var self = this;\n\n    types.forEach(function (type, i) {\n        if (isDynamic(solidityTypes[i], types[i])) {\n            result += f.formatInputInt(dynamicOffset).encode();\n            var e = self.encodeWithOffset(types[i], solidityTypes[i], encodeds[i], dynamicOffset);\n            dynamicOffset += e.length / 2;\n        } else {\n            // don't add length to dynamicOffset. it's already counted\n            result += self.encodeWithOffset(types[i], solidityTypes[i], encodeds[i], dynamicOffset);\n        }\n\n        // TODO: figure out nested arrays\n    });\n\n    types.forEach(function (type, i) {\n        if (isDynamic(solidityTypes[i], types[i])) {\n            var e = self.encodeWithOffset(types[i], solidityTypes[i], encodeds[i], dynamicOffset);\n            dynamicOffset += e.length / 2;\n            result += e;\n        }\n    });\n    return result;\n};\n\nSolidityCoder.prototype.encodeWithOffset = function (type, solidityType, encoded, offset) {\n    /* jshint maxcomplexity: 17 */\n    /* jshint maxdepth: 5 */\n\n    var self = this;\n    var encodingMode={dynamic:1,static:2,other:3};\n\n    var mode=(solidityType.isDynamicArray(type)?encodingMode.dynamic:(solidityType.isStaticArray(type)?encodingMode.static:encodingMode.other));\n\n    if(mode !== encodingMode.other){\n        var nestedName = solidityType.nestedName(type);\n        var nestedStaticPartLength = solidityType.staticPartLength(nestedName);\n        var result = (mode === encodingMode.dynamic ? encoded[0] : '');\n\n        if (solidityType.isDynamicArray(nestedName)) {\n            var previousLength = (mode === encodingMode.dynamic ? 2 : 0);\n\n            for (var i = 0; i < encoded.length; i++) {\n                // calculate length of previous item\n                if(mode === encodingMode.dynamic){\n                    previousLength += +(encoded[i - 1])[0] || 0;\n                }\n                else if(mode === encodingMode.static){\n                    previousLength += +(encoded[i - 1] || [])[0] || 0;\n                }\n                result += f.formatInputInt(offset + i * nestedStaticPartLength + previousLength * 32).encode();\n            }\n        }\n\n        var len= (mode === encodingMode.dynamic ? encoded.length-1 : encoded.length);\n        for (var c = 0; c < len; c++) {\n            var additionalOffset = result / 2;\n            if(mode === encodingMode.dynamic){\n                result += self.encodeWithOffset(nestedName, solidityType, encoded[c + 1], offset +  additionalOffset);\n            }\n            else if(mode === encodingMode.static){\n                result += self.encodeWithOffset(nestedName, solidityType, encoded[c], offset + additionalOffset);\n            }\n        }\n\n        return result;\n    }\n\n    return encoded;\n};\n\n\n/**\n * Should be used to decode bytes to plain param\n *\n * @method decodeParam\n * @param {String} type\n * @param {String} bytes\n * @return {Object} plain param\n */\nSolidityCoder.prototype.decodeParam = function (type, bytes) {\n    return this.decodeParams([type], bytes)[0];\n};\n\n/**\n * Should be used to decode list of params\n *\n * @method decodeParam\n * @param {Array} types\n * @param {String} bytes\n * @return {Array} array of plain params\n */\nSolidityCoder.prototype.decodeParams = function (types, bytes) {\n    var solidityTypes = this.getSolidityTypes(types);\n    var offsets = this.getOffsets(types, solidityTypes);\n\n    return solidityTypes.map(function (solidityType, index) {\n        return solidityType.decode(bytes, offsets[index],  types[index], index);\n    });\n};\n\nSolidityCoder.prototype.getOffsets = function (types, solidityTypes) {\n    var lengths =  solidityTypes.map(function (solidityType, index) {\n        return solidityType.staticPartLength(types[index]);\n    });\n\n    for (var i = 1; i < lengths.length; i++) {\n         // sum with length of previous element\n        lengths[i] += lengths[i - 1];\n    }\n\n    return lengths.map(function (length, index) {\n        // remove the current length, so the length is sum of previous elements\n        var staticPartLength = solidityTypes[index].staticPartLength(types[index]);\n        return length - staticPartLength;\n    });\n};\n\nSolidityCoder.prototype.getSolidityTypes = function (types) {\n    var self = this;\n    return types.map(function (type) {\n        return self._requireType(type);\n    });\n};\n\nvar coder = new SolidityCoder([\n    new SolidityTypeAddress(),\n    new SolidityTypeBool(),\n    new SolidityTypeInt(),\n    new SolidityTypeUInt(),\n    new SolidityTypeDynamicBytes(),\n    new SolidityTypeBytes(),\n    new SolidityTypeString(),\n    new SolidityTypeReal(),\n    new SolidityTypeUReal()\n]);\n\nmodule.exports = coder;\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AAEA,IAAIA,CAAC,GAAGC,OAAO,CAAC,cAAD,CAAf;;AAEA,IAAIC,mBAAmB,GAAGD,OAAO,CAAC,WAAD,CAAjC;;AACA,IAAIE,gBAAgB,GAAGF,OAAO,CAAC,QAAD,CAA9B;;AACA,IAAIG,eAAe,GAAGH,OAAO,CAAC,OAAD,CAA7B;;AACA,IAAII,gBAAgB,GAAGJ,OAAO,CAAC,QAAD,CAA9B;;AACA,IAAIK,wBAAwB,GAAGL,OAAO,CAAC,gBAAD,CAAtC;;AACA,IAAIM,kBAAkB,GAAGN,OAAO,CAAC,UAAD,CAAhC;;AACA,IAAIO,gBAAgB,GAAGP,OAAO,CAAC,QAAD,CAA9B;;AACA,IAAIQ,iBAAiB,GAAGR,OAAO,CAAC,SAAD,CAA/B;;AACA,IAAIS,iBAAiB,GAAGT,OAAO,CAAC,SAAD,CAA/B;;AAEA,IAAIU,SAAS,GAAG,UAAUC,YAAV,EAAwBC,IAAxB,EAA8B;EAC3C,OAAOD,YAAY,CAACE,aAAb,CAA2BD,IAA3B,KACAD,YAAY,CAACG,cAAb,CAA4BF,IAA5B,CADP;AAEF,CAHD;AAKA;AACA;AACA;;;AACA,IAAIG,aAAa,GAAG,UAAUC,KAAV,EAAiB;EACjC,KAAKC,MAAL,GAAcD,KAAd;AACH,CAFD;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAD,aAAa,CAACG,SAAd,CAAwBC,YAAxB,GAAuC,UAAUP,IAAV,EAAgB;EACnD,IAAID,YAAY,GAAG,KAAKM,MAAL,CAAYG,MAAZ,CAAmB,UAAUC,CAAV,EAAa;IAC/C,OAAOA,CAAC,CAACC,MAAF,CAASV,IAAT,CAAP;EACH,CAFkB,EAEhB,CAFgB,CAAnB;;EAIA,IAAI,CAACD,YAAL,EAAmB;IACf,MAAMY,KAAK,CAAC,6BAA6BX,IAA9B,CAAX;EACH;;EAED,OAAOD,YAAP;AACH,CAVD;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAI,aAAa,CAACG,SAAd,CAAwBM,WAAxB,GAAsC,UAAUZ,IAAV,EAAgBa,KAAhB,EAAuB;EACzD,OAAO,KAAKC,YAAL,CAAkB,CAACd,IAAD,CAAlB,EAA0B,CAACa,KAAD,CAA1B,CAAP;AACH,CAFD;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAV,aAAa,CAACG,SAAd,CAAwBQ,YAAxB,GAAuC,UAAUV,KAAV,EAAiBW,MAAjB,EAAyB;EAC5D,IAAIC,aAAa,GAAG,KAAKC,gBAAL,CAAsBb,KAAtB,CAApB;EAEA,IAAIc,QAAQ,GAAGF,aAAa,CAACG,GAAd,CAAkB,UAAUpB,YAAV,EAAwBqB,KAAxB,EAA+B;IAC5D,OAAOrB,YAAY,CAACsB,MAAb,CAAoBN,MAAM,CAACK,KAAD,CAA1B,EAAmChB,KAAK,CAACgB,KAAD,CAAxC,CAAP;EACH,CAFc,CAAf;EAIA,IAAIE,aAAa,GAAGN,aAAa,CAACO,MAAd,CAAqB,UAAUC,GAAV,EAAezB,YAAf,EAA6BqB,KAA7B,EAAoC;IACzE,IAAIK,gBAAgB,GAAG1B,YAAY,CAAC0B,gBAAb,CAA8BrB,KAAK,CAACgB,KAAD,CAAnC,CAAvB;IACA,IAAIM,uBAAuB,GAAGC,IAAI,CAACC,KAAL,CAAW,CAACH,gBAAgB,GAAG,EAApB,IAA0B,EAArC,IAA2C,EAAzE;IAEA,OAAOD,GAAG,IAAI1B,SAAS,CAACkB,aAAa,CAACI,KAAD,CAAd,EAAuBhB,KAAK,CAACgB,KAAD,CAA5B,CAAT,GACV,EADU,GAEVM,uBAFM,CAAV;EAGH,CAPmB,EAOjB,CAPiB,CAApB;EASA,IAAIG,MAAM,GAAG,KAAKC,qBAAL,CAA2B1B,KAA3B,EAAkCY,aAAlC,EAAiDE,QAAjD,EAA2DI,aAA3D,CAAb;EAEA,OAAOO,MAAP;AACH,CAnBD;;AAqBA1B,aAAa,CAACG,SAAd,CAAwBwB,qBAAxB,GAAgD,UAAU1B,KAAV,EAAiBY,aAAjB,EAAgCE,QAAhC,EAA0CI,aAA1C,EAAyD;EACrG,IAAIO,MAAM,GAAG,EAAb;EACA,IAAIE,IAAI,GAAG,IAAX;EAEA3B,KAAK,CAAC4B,OAAN,CAAc,UAAUhC,IAAV,EAAgBiC,CAAhB,EAAmB;IAC7B,IAAInC,SAAS,CAACkB,aAAa,CAACiB,CAAD,CAAd,EAAmB7B,KAAK,CAAC6B,CAAD,CAAxB,CAAb,EAA2C;MACvCJ,MAAM,IAAI1C,CAAC,CAAC+C,cAAF,CAAiBZ,aAAjB,EAAgCD,MAAhC,EAAV;MACA,IAAIc,CAAC,GAAGJ,IAAI,CAACK,gBAAL,CAAsBhC,KAAK,CAAC6B,CAAD,CAA3B,EAAgCjB,aAAa,CAACiB,CAAD,CAA7C,EAAkDf,QAAQ,CAACe,CAAD,CAA1D,EAA+DX,aAA/D,CAAR;MACAA,aAAa,IAAIa,CAAC,CAACE,MAAF,GAAW,CAA5B;IACH,CAJD,MAIO;MACH;MACAR,MAAM,IAAIE,IAAI,CAACK,gBAAL,CAAsBhC,KAAK,CAAC6B,CAAD,CAA3B,EAAgCjB,aAAa,CAACiB,CAAD,CAA7C,EAAkDf,QAAQ,CAACe,CAAD,CAA1D,EAA+DX,aAA/D,CAAV;IACH,CAR4B,CAU7B;;EACH,CAXD;EAaAlB,KAAK,CAAC4B,OAAN,CAAc,UAAUhC,IAAV,EAAgBiC,CAAhB,EAAmB;IAC7B,IAAInC,SAAS,CAACkB,aAAa,CAACiB,CAAD,CAAd,EAAmB7B,KAAK,CAAC6B,CAAD,CAAxB,CAAb,EAA2C;MACvC,IAAIE,CAAC,GAAGJ,IAAI,CAACK,gBAAL,CAAsBhC,KAAK,CAAC6B,CAAD,CAA3B,EAAgCjB,aAAa,CAACiB,CAAD,CAA7C,EAAkDf,QAAQ,CAACe,CAAD,CAA1D,EAA+DX,aAA/D,CAAR;MACAA,aAAa,IAAIa,CAAC,CAACE,MAAF,GAAW,CAA5B;MACAR,MAAM,IAAIM,CAAV;IACH;EACJ,CAND;EAOA,OAAON,MAAP;AACH,CAzBD;;AA2BA1B,aAAa,CAACG,SAAd,CAAwB8B,gBAAxB,GAA2C,UAAUpC,IAAV,EAAgBD,YAAhB,EAA8BuC,OAA9B,EAAuCC,MAAvC,EAA+C;EACtF;;EACA;EAEA,IAAIR,IAAI,GAAG,IAAX;EACA,IAAIS,YAAY,GAAC;IAACC,OAAO,EAAC,CAAT;IAAWC,MAAM,EAAC,CAAlB;IAAoBC,KAAK,EAAC;EAA1B,CAAjB;EAEA,IAAIC,IAAI,GAAE7C,YAAY,CAACG,cAAb,CAA4BF,IAA5B,IAAkCwC,YAAY,CAACC,OAA/C,GAAwD1C,YAAY,CAAC8C,aAAb,CAA2B7C,IAA3B,IAAiCwC,YAAY,CAACE,MAA9C,GAAqDF,YAAY,CAACG,KAApI;;EAEA,IAAGC,IAAI,KAAKJ,YAAY,CAACG,KAAzB,EAA+B;IAC3B,IAAIG,UAAU,GAAG/C,YAAY,CAAC+C,UAAb,CAAwB9C,IAAxB,CAAjB;IACA,IAAI+C,sBAAsB,GAAGhD,YAAY,CAAC0B,gBAAb,CAA8BqB,UAA9B,CAA7B;IACA,IAAIjB,MAAM,GAAIe,IAAI,KAAKJ,YAAY,CAACC,OAAtB,GAAgCH,OAAO,CAAC,CAAD,CAAvC,GAA6C,EAA3D;;IAEA,IAAIvC,YAAY,CAACG,cAAb,CAA4B4C,UAA5B,CAAJ,EAA6C;MACzC,IAAIE,cAAc,GAAIJ,IAAI,KAAKJ,YAAY,CAACC,OAAtB,GAAgC,CAAhC,GAAoC,CAA1D;;MAEA,KAAK,IAAIR,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGK,OAAO,CAACD,MAA5B,EAAoCJ,CAAC,EAArC,EAAyC;QACrC;QACA,IAAGW,IAAI,KAAKJ,YAAY,CAACC,OAAzB,EAAiC;UAC7BO,cAAc,IAAI,CAAEV,OAAO,CAACL,CAAC,GAAG,CAAL,CAAR,CAAiB,CAAjB,CAAD,IAAwB,CAA1C;QACH,CAFD,MAGK,IAAGW,IAAI,KAAKJ,YAAY,CAACE,MAAzB,EAAgC;UACjCM,cAAc,IAAI,CAAC,CAACV,OAAO,CAACL,CAAC,GAAG,CAAL,CAAP,IAAkB,EAAnB,EAAuB,CAAvB,CAAD,IAA8B,CAAhD;QACH;;QACDJ,MAAM,IAAI1C,CAAC,CAAC+C,cAAF,CAAiBK,MAAM,GAAGN,CAAC,GAAGc,sBAAb,GAAsCC,cAAc,GAAG,EAAxE,EAA4E3B,MAA5E,EAAV;MACH;IACJ;;IAED,IAAI4B,GAAG,GAAGL,IAAI,KAAKJ,YAAY,CAACC,OAAtB,GAAgCH,OAAO,CAACD,MAAR,GAAe,CAA/C,GAAmDC,OAAO,CAACD,MAArE;;IACA,KAAK,IAAIa,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,GAApB,EAAyBC,CAAC,EAA1B,EAA8B;MAC1B,IAAIC,gBAAgB,GAAGtB,MAAM,GAAG,CAAhC;;MACA,IAAGe,IAAI,KAAKJ,YAAY,CAACC,OAAzB,EAAiC;QAC7BZ,MAAM,IAAIE,IAAI,CAACK,gBAAL,CAAsBU,UAAtB,EAAkC/C,YAAlC,EAAgDuC,OAAO,CAACY,CAAC,GAAG,CAAL,CAAvD,EAAgEX,MAAM,GAAIY,gBAA1E,CAAV;MACH,CAFD,MAGK,IAAGP,IAAI,KAAKJ,YAAY,CAACE,MAAzB,EAAgC;QACjCb,MAAM,IAAIE,IAAI,CAACK,gBAAL,CAAsBU,UAAtB,EAAkC/C,YAAlC,EAAgDuC,OAAO,CAACY,CAAD,CAAvD,EAA4DX,MAAM,GAAGY,gBAArE,CAAV;MACH;IACJ;;IAED,OAAOtB,MAAP;EACH;;EAED,OAAOS,OAAP;AACH,CA5CD;AA+CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAnC,aAAa,CAACG,SAAd,CAAwB8C,WAAxB,GAAsC,UAAUpD,IAAV,EAAgBqD,KAAhB,EAAuB;EACzD,OAAO,KAAKC,YAAL,CAAkB,CAACtD,IAAD,CAAlB,EAA0BqD,KAA1B,EAAiC,CAAjC,CAAP;AACH,CAFD;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAlD,aAAa,CAACG,SAAd,CAAwBgD,YAAxB,GAAuC,UAAUlD,KAAV,EAAiBiD,KAAjB,EAAwB;EAC3D,IAAIrC,aAAa,GAAG,KAAKC,gBAAL,CAAsBb,KAAtB,CAApB;EACA,IAAImD,OAAO,GAAG,KAAKC,UAAL,CAAgBpD,KAAhB,EAAuBY,aAAvB,CAAd;EAEA,OAAOA,aAAa,CAACG,GAAd,CAAkB,UAAUpB,YAAV,EAAwBqB,KAAxB,EAA+B;IACpD,OAAOrB,YAAY,CAAC0D,MAAb,CAAoBJ,KAApB,EAA2BE,OAAO,CAACnC,KAAD,CAAlC,EAA4ChB,KAAK,CAACgB,KAAD,CAAjD,EAA0DA,KAA1D,CAAP;EACH,CAFM,CAAP;AAGH,CAPD;;AASAjB,aAAa,CAACG,SAAd,CAAwBkD,UAAxB,GAAqC,UAAUpD,KAAV,EAAiBY,aAAjB,EAAgC;EACjE,IAAI0C,OAAO,GAAI1C,aAAa,CAACG,GAAd,CAAkB,UAAUpB,YAAV,EAAwBqB,KAAxB,EAA+B;IAC5D,OAAOrB,YAAY,CAAC0B,gBAAb,CAA8BrB,KAAK,CAACgB,KAAD,CAAnC,CAAP;EACH,CAFc,CAAf;;EAIA,KAAK,IAAIa,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGyB,OAAO,CAACrB,MAA5B,EAAoCJ,CAAC,EAArC,EAAyC;IACpC;IACDyB,OAAO,CAACzB,CAAD,CAAP,IAAcyB,OAAO,CAACzB,CAAC,GAAG,CAAL,CAArB;EACH;;EAED,OAAOyB,OAAO,CAACvC,GAAR,CAAY,UAAUkB,MAAV,EAAkBjB,KAAlB,EAAyB;IACxC;IACA,IAAIK,gBAAgB,GAAGT,aAAa,CAACI,KAAD,CAAb,CAAqBK,gBAArB,CAAsCrB,KAAK,CAACgB,KAAD,CAA3C,CAAvB;IACA,OAAOiB,MAAM,GAAGZ,gBAAhB;EACH,CAJM,CAAP;AAKH,CAfD;;AAiBAtB,aAAa,CAACG,SAAd,CAAwBW,gBAAxB,GAA2C,UAAUb,KAAV,EAAiB;EACxD,IAAI2B,IAAI,GAAG,IAAX;EACA,OAAO3B,KAAK,CAACe,GAAN,CAAU,UAAUnB,IAAV,EAAgB;IAC7B,OAAO+B,IAAI,CAACxB,YAAL,CAAkBP,IAAlB,CAAP;EACH,CAFM,CAAP;AAGH,CALD;;AAOA,IAAI2D,KAAK,GAAG,IAAIxD,aAAJ,CAAkB,CAC1B,IAAId,mBAAJ,EAD0B,EAE1B,IAAIC,gBAAJ,EAF0B,EAG1B,IAAIC,eAAJ,EAH0B,EAI1B,IAAIC,gBAAJ,EAJ0B,EAK1B,IAAIC,wBAAJ,EAL0B,EAM1B,IAAII,iBAAJ,EAN0B,EAO1B,IAAIH,kBAAJ,EAP0B,EAQ1B,IAAIC,gBAAJ,EAR0B,EAS1B,IAAIC,iBAAJ,EAT0B,CAAlB,CAAZ;AAYAgE,MAAM,CAACC,OAAP,GAAiBF,KAAjB"},"metadata":{},"sourceType":"script"}