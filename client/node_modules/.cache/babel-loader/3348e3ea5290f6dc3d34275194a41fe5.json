{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar jsSHA3 = require(\"js-sha3\");\n\nvar BASIC_ADDRESS_REGEX = /^(0x)?[0-9a-f]{40}$/i;\nvar SAME_CASE_ADDRESS_REGEX = /^(0x)?([0-9a-f]{40}|[0-9A-F]{40})$/;\nexports.addressUtils = {\n  isChecksumAddress: function (address) {\n    // Check each case\n    var unprefixedAddress = address.replace('0x', '');\n    var addressHash = jsSHA3.keccak256(unprefixedAddress.toLowerCase());\n\n    for (var i = 0; i < 40; i++) {\n      // The nth letter should be uppercase if the nth digit of casemap is 1\n      if (parseInt(addressHash[i], 16) > 7 && unprefixedAddress[i].toUpperCase() !== unprefixedAddress[i] || parseInt(addressHash[i], 16) <= 7 && unprefixedAddress[i].toLowerCase() !== unprefixedAddress[i]) {\n        return false;\n      }\n    }\n\n    return true;\n  },\n  isAddress: function (address) {\n    if (!BASIC_ADDRESS_REGEX.test(address)) {\n      // Check if it has the basic requirements of an address\n      return false;\n    } else if (SAME_CASE_ADDRESS_REGEX.test(address)) {\n      // If it's all small caps or all all caps, return true\n      return true;\n    } else {\n      // Otherwise check each case\n      var isValidChecksummedAddress = exports.addressUtils.isChecksumAddress(address);\n      return isValidChecksummedAddress;\n    }\n  }\n};","map":{"version":3,"sources":["../src/address_utils.ts"],"names":[],"mappings":";;;;;;AAAA,IAAA,MAAA,GAAA,OAAA,CAAA,SAAA,CAAA;;AAEA,IAAM,mBAAmB,GAAG,sBAA5B;AACA,IAAM,uBAAuB,GAAG,oCAAhC;AAEa,OAAA,CAAA,YAAA,GAAe;EACxB,iBAAiB,EAAjB,UAAkB,OAAlB,EAAiC;IAC7B;IACA,IAAM,iBAAiB,GAAG,OAAO,CAAC,OAAR,CAAgB,IAAhB,EAAsB,EAAtB,CAA1B;IACA,IAAM,WAAW,GAAG,MAAM,CAAC,SAAP,CAAiB,iBAAiB,CAAC,WAAlB,EAAjB,CAApB;;IAEA,KAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,EAApB,EAAwB,CAAC,EAAzB,EAA6B;MACzB;MACA,IACK,QAAQ,CAAC,WAAW,CAAC,CAAD,CAAZ,EAAiB,EAAjB,CAAR,GAA+B,CAA/B,IAAoC,iBAAiB,CAAC,CAAD,CAAjB,CAAqB,WAArB,OAAuC,iBAAiB,CAAC,CAAD,CAA7F,IACC,QAAQ,CAAC,WAAW,CAAC,CAAD,CAAZ,EAAiB,EAAjB,CAAR,IAAgC,CAAhC,IAAqC,iBAAiB,CAAC,CAAD,CAAjB,CAAqB,WAArB,OAAuC,iBAAiB,CAAC,CAAD,CAFlG,EAGE;QACE,OAAO,KAAP;MACH;IACJ;;IACD,OAAO,IAAP;EACH,CAhBuB;EAiBxB,SAAS,EAAT,UAAU,OAAV,EAAyB;IACrB,IAAI,CAAC,mBAAmB,CAAC,IAApB,CAAyB,OAAzB,CAAL,EAAwC;MACpC;MACA,OAAO,KAAP;IACH,CAHD,MAGO,IAAI,uBAAuB,CAAC,IAAxB,CAA6B,OAA7B,CAAJ,EAA2C;MAC9C;MACA,OAAO,IAAP;IACH,CAHM,MAGA;MACH;MACA,IAAM,yBAAyB,GAAG,OAAA,CAAA,YAAA,CAAa,iBAAb,CAA+B,OAA/B,CAAlC;MACA,OAAO,yBAAP;IACH;EACJ;AA7BuB,CAAf","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar jsSHA3 = require(\"js-sha3\");\nvar BASIC_ADDRESS_REGEX = /^(0x)?[0-9a-f]{40}$/i;\nvar SAME_CASE_ADDRESS_REGEX = /^(0x)?([0-9a-f]{40}|[0-9A-F]{40})$/;\nexports.addressUtils = {\n    isChecksumAddress: function (address) {\n        // Check each case\n        var unprefixedAddress = address.replace('0x', '');\n        var addressHash = jsSHA3.keccak256(unprefixedAddress.toLowerCase());\n        for (var i = 0; i < 40; i++) {\n            // The nth letter should be uppercase if the nth digit of casemap is 1\n            if ((parseInt(addressHash[i], 16) > 7 && unprefixedAddress[i].toUpperCase() !== unprefixedAddress[i]) ||\n                (parseInt(addressHash[i], 16) <= 7 && unprefixedAddress[i].toLowerCase() !== unprefixedAddress[i])) {\n                return false;\n            }\n        }\n        return true;\n    },\n    isAddress: function (address) {\n        if (!BASIC_ADDRESS_REGEX.test(address)) {\n            // Check if it has the basic requirements of an address\n            return false;\n        }\n        else if (SAME_CASE_ADDRESS_REGEX.test(address)) {\n            // If it's all small caps or all all caps, return true\n            return true;\n        }\n        else {\n            // Otherwise check each case\n            var isValidChecksummedAddress = exports.addressUtils.isChecksumAddress(address);\n            return isValidChecksummedAddress;\n        }\n    },\n};\n//# sourceMappingURL=address_utils.js.map"]},"metadata":{},"sourceType":"script"}