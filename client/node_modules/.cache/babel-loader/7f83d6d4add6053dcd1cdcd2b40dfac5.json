{"ast":null,"code":"\"use strict\";\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  Object.defineProperty(o, k2, {\n    enumerable: true,\n    get: function () {\n      return m[k];\n    }\n  });\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function () {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n\n        case 7:\n          op = _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n\n            _.ops.push(op);\n\n            break;\n          }\n\n          if (t[2]) _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n      }\n\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.OpenSeaAPI = void 0;\n\nrequire(\"isomorphic-unfetch\");\n\nvar QueryString = __importStar(require(\"query-string\"));\n\nvar constants_1 = require(\"./constants\");\n\nvar types_1 = require(\"./types\");\n\nvar utils_1 = require(\"./utils/utils\");\n\nvar OpenSeaAPI =\n/** @class */\nfunction () {\n  /**\n   * Create an instance of the OpenSea API\n   * @param config OpenSeaAPIConfig for setting up the API, including an optional API key, network name, and base URL\n   * @param logger Optional function for logging debug strings before and after requests are made\n   */\n  function OpenSeaAPI(config, logger) {\n    /**\n     * Page size to use for fetching orders\n     */\n    this.pageSize = 20;\n    this.apiKey = config.apiKey;\n\n    switch (config.networkName) {\n      case types_1.Network.Rinkeby:\n        this.apiBaseUrl = config.apiBaseUrl || constants_1.API_BASE_RINKEBY;\n        this.hostUrl = constants_1.SITE_HOST_RINKEBY;\n        break;\n\n      case types_1.Network.Main:\n      default:\n        this.apiBaseUrl = config.apiBaseUrl || constants_1.API_BASE_MAINNET;\n        this.hostUrl = constants_1.SITE_HOST_MAINNET;\n        break;\n    } // Debugging: default to nothing\n\n\n    this.logger = logger || function (arg) {\n      return arg;\n    };\n  }\n  /**\n   * Send an order to the orderbook.\n   * Throws when the order is invalid.\n   * IN NEXT VERSION: change order input to Order type\n   * @param order Order JSON to post to the orderbook\n   * @param retries Number of times to retry if the service is unavailable for any reason\n   */\n\n\n  OpenSeaAPI.prototype.postOrder = function (order, retries) {\n    if (retries === void 0) {\n      retries = 2;\n    }\n\n    return __awaiter(this, void 0, void 0, function () {\n      var json, error_1;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            _a.trys.push([0, 2,, 4]);\n\n            return [4\n            /*yield*/\n            , this.post(\"\".concat(constants_1.ORDERBOOK_PATH, \"/orders/post/\"), order)];\n\n          case 1:\n            json = _a.sent();\n            return [3\n            /*break*/\n            , 4];\n\n          case 2:\n            error_1 = _a.sent();\n\n            _throwOrContinue(error_1, retries);\n\n            return [4\n            /*yield*/\n            , (0, utils_1.delay)(3000)];\n\n          case 3:\n            _a.sent();\n\n            return [2\n            /*return*/\n            , this.postOrder(order, retries - 1)];\n\n          case 4:\n            return [2\n            /*return*/\n            , (0, utils_1.orderFromJSON)(json)];\n        }\n      });\n    });\n  };\n  /**\n   * Create a whitelist entry for an asset to prevent others from buying.\n   * Buyers will have to have verified at least one of the emails\n   * on an asset in order to buy.\n   * This will throw a 403 if the given API key isn't allowed to create whitelist entries for this contract or asset.\n   * @param tokenAddress Address of the asset's contract\n   * @param tokenId The asset's token ID\n   * @param email The email allowed to buy.\n   */\n\n\n  OpenSeaAPI.prototype.postAssetWhitelist = function (tokenAddress, tokenId, email) {\n    return __awaiter(this, void 0, void 0, function () {\n      var json;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.post(\"\".concat(constants_1.API_PATH, \"/asset/\").concat(tokenAddress, \"/\").concat(tokenId, \"/whitelist/\"), {\n              email: email\n            })];\n\n          case 1:\n            json = _a.sent();\n            return [2\n            /*return*/\n            , !!json.success];\n        }\n      });\n    });\n  };\n  /**\n   * Get an order from the orderbook, throwing if none is found.\n   * @param query Query to use for getting orders. A subset of parameters\n   *  on the `OrderJSON` type is supported\n   */\n\n\n  OpenSeaAPI.prototype.getOrder = function (query) {\n    return __awaiter(this, void 0, void 0, function () {\n      var result, orderJSON, json, json;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.get(\"\".concat(constants_1.ORDERBOOK_PATH, \"/orders/\"), __assign({\n              limit: 1\n            }, query))];\n\n          case 1:\n            result = _a.sent();\n\n            if (constants_1.ORDERBOOK_VERSION == 0) {\n              json = result;\n              orderJSON = json[0];\n            } else {\n              json = result;\n              orderJSON = json.orders[0];\n            }\n\n            if (!orderJSON) {\n              throw new Error(\"Not found: no matching order found\");\n            }\n\n            return [2\n            /*return*/\n            , (0, utils_1.orderFromJSON)(orderJSON)];\n        }\n      });\n    });\n  };\n  /**\n   * Get a list of orders from the orderbook, returning the page of orders\n   *  and the count of total orders found.\n   * @param query Query to use for getting orders. A subset of parameters\n   *  on the `OrderJSON` type is supported\n   * @param page Page number, defaults to 1. Can be overridden by\n   * `limit` and `offset` attributes from OrderQuery\n   */\n\n\n  OpenSeaAPI.prototype.getOrders = function (query, page) {\n    if (query === void 0) {\n      query = {};\n    }\n\n    if (page === void 0) {\n      page = 1;\n    }\n\n    return __awaiter(this, void 0, void 0, function () {\n      var result, json, json;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.get(\"\".concat(constants_1.ORDERBOOK_PATH, \"/orders/\"), __assign({\n              limit: this.pageSize,\n              offset: (page - 1) * this.pageSize\n            }, query))];\n\n          case 1:\n            result = _a.sent();\n\n            if (constants_1.ORDERBOOK_VERSION == 0) {\n              json = result;\n              return [2\n              /*return*/\n              , {\n                orders: json.map(function (j) {\n                  return (0, utils_1.orderFromJSON)(j);\n                }),\n                count: json.length\n              }];\n            } else {\n              json = result;\n              return [2\n              /*return*/\n              , {\n                orders: json.orders.map(function (j) {\n                  return (0, utils_1.orderFromJSON)(j);\n                }),\n                count: json.count\n              }];\n            }\n\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * Fetch an asset from the API, throwing if none is found\n   * @param tokenAddress Address of the asset's contract\n   * @param tokenId The asset's token ID, or null if ERC-20\n   * @param retries Number of times to retry if the service is unavailable for any reason\n   */\n\n\n  OpenSeaAPI.prototype.getAsset = function (_a, retries) {\n    var tokenAddress = _a.tokenAddress,\n        tokenId = _a.tokenId;\n\n    if (retries === void 0) {\n      retries = 1;\n    }\n\n    return __awaiter(this, void 0, void 0, function () {\n      var json, error_2;\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            _b.trys.push([0, 2,, 4]);\n\n            return [4\n            /*yield*/\n            , this.get(\"\".concat(constants_1.API_PATH, \"/asset/\").concat(tokenAddress, \"/\").concat(tokenId || 0, \"/\"))];\n\n          case 1:\n            json = _b.sent();\n            return [3\n            /*break*/\n            , 4];\n\n          case 2:\n            error_2 = _b.sent();\n\n            _throwOrContinue(error_2, retries);\n\n            return [4\n            /*yield*/\n            , (0, utils_1.delay)(1000)];\n\n          case 3:\n            _b.sent();\n\n            return [2\n            /*return*/\n            , this.getAsset({\n              tokenAddress: tokenAddress,\n              tokenId: tokenId\n            }, retries - 1)];\n\n          case 4:\n            return [2\n            /*return*/\n            , (0, utils_1.assetFromJSON)(json)];\n        }\n      });\n    });\n  };\n  /**\n   * Fetch list of assets from the API, returning the page of assets and the count of total assets\n   * @param query Query to use for getting orders. A subset of parameters on the `OpenSeaAssetJSON` type is supported\n   * @param page Page number, defaults to 1. Can be overridden by\n   * `limit` and `offset` attributes from OpenSeaAssetQuery\n   */\n\n\n  OpenSeaAPI.prototype.getAssets = function (query, page) {\n    if (query === void 0) {\n      query = {};\n    }\n\n    if (page === void 0) {\n      page = 1;\n    }\n\n    return __awaiter(this, void 0, void 0, function () {\n      var json;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.get(\"\".concat(constants_1.API_PATH, \"/assets/\"), __assign({\n              limit: this.pageSize,\n              offset: (page - 1) * this.pageSize\n            }, query))];\n\n          case 1:\n            json = _a.sent();\n            return [2\n            /*return*/\n            , {\n              assets: json.assets.map(function (j) {\n                return (0, utils_1.assetFromJSON)(j);\n              }),\n              estimatedCount: json.estimated_count\n            }];\n        }\n      });\n    });\n  };\n  /**\n   * Fetch list of fungible tokens from the API matching parameters\n   * @param query Query to use for getting orders. A subset of parameters on the `OpenSeaAssetJSON` type is supported\n   * @param page Page number, defaults to 1. Can be overridden by\n   * `limit` and `offset` attributes from OpenSeaFungibleTokenQuery\n   * @param retries Number of times to retry if the service is unavailable for any reason\n   */\n\n\n  OpenSeaAPI.prototype.getPaymentTokens = function (query, page, retries) {\n    if (query === void 0) {\n      query = {};\n    }\n\n    if (page === void 0) {\n      page = 1;\n    }\n\n    if (retries === void 0) {\n      retries = 1;\n    }\n\n    return __awaiter(this, void 0, void 0, function () {\n      var json, error_3;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            _a.trys.push([0, 2,, 4]);\n\n            return [4\n            /*yield*/\n            , this.get(\"\".concat(constants_1.API_PATH, \"/tokens/\"), __assign(__assign({}, query), {\n              limit: this.pageSize,\n              offset: (page - 1) * this.pageSize\n            }))];\n\n          case 1:\n            json = _a.sent();\n            return [3\n            /*break*/\n            , 4];\n\n          case 2:\n            error_3 = _a.sent();\n\n            _throwOrContinue(error_3, retries);\n\n            return [4\n            /*yield*/\n            , (0, utils_1.delay)(1000)];\n\n          case 3:\n            _a.sent();\n\n            return [2\n            /*return*/\n            , this.getPaymentTokens(query, page, retries - 1)];\n\n          case 4:\n            return [2\n            /*return*/\n            , {\n              tokens: json.map(function (t) {\n                return (0, utils_1.tokenFromJSON)(t);\n              })\n            }];\n        }\n      });\n    });\n  };\n  /**\n   * Fetch a bundle from the API, return null if it isn't found\n   * @param slug The bundle's identifier\n   */\n\n\n  OpenSeaAPI.prototype.getBundle = function (_a) {\n    var slug = _a.slug;\n    return __awaiter(this, void 0, void 0, function () {\n      var json;\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.get(\"\".concat(constants_1.API_PATH, \"/bundle/\").concat(slug, \"/\"))];\n\n          case 1:\n            json = _b.sent();\n            return [2\n            /*return*/\n            , json ? (0, utils_1.assetBundleFromJSON)(json) : null];\n        }\n      });\n    });\n  };\n  /**\n   * Fetch list of bundles from the API, returning the page of bundles and the count of total bundles\n   * @param query Query to use for getting orders. A subset of parameters on the `OpenSeaAssetBundleJSON` type is supported\n   * @param page Page number, defaults to 1. Can be overridden by\n   * `limit` and `offset` attributes from OpenSeaAssetBundleQuery\n   */\n\n\n  OpenSeaAPI.prototype.getBundles = function (query, page) {\n    if (query === void 0) {\n      query = {};\n    }\n\n    if (page === void 0) {\n      page = 1;\n    }\n\n    return __awaiter(this, void 0, void 0, function () {\n      var json;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.get(\"\".concat(constants_1.API_PATH, \"/bundles/\"), __assign(__assign({}, query), {\n              limit: this.pageSize,\n              offset: (page - 1) * this.pageSize\n            }))];\n\n          case 1:\n            json = _a.sent();\n            return [2\n            /*return*/\n            , {\n              bundles: json.bundles.map(function (j) {\n                return (0, utils_1.assetBundleFromJSON)(j);\n              }),\n              estimatedCount: json.estimated_count\n            }];\n        }\n      });\n    });\n  };\n  /**\n   * Get JSON data from API, sending auth token in headers\n   * @param apiPath Path to URL endpoint under API\n   * @param query Data to send. Will be stringified using QueryString\n   */\n\n\n  OpenSeaAPI.prototype.get = function (apiPath, query) {\n    if (query === void 0) {\n      query = {};\n    }\n\n    return __awaiter(this, void 0, void 0, function () {\n      var qs, url, response;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            qs = QueryString.stringify(query);\n            url = \"\".concat(apiPath, \"?\").concat(qs);\n            return [4\n            /*yield*/\n            , this._fetch(url)];\n\n          case 1:\n            response = _a.sent();\n            return [2\n            /*return*/\n            , response.json()];\n        }\n      });\n    });\n  };\n  /**\n   * POST JSON data to API, sending auth token in headers\n   * @param apiPath Path to URL endpoint under API\n   * @param body Data to send. Will be JSON.stringified\n   * @param opts RequestInit opts, similar to Fetch API. If it contains\n   *  a body, it won't be stringified.\n   */\n\n\n  OpenSeaAPI.prototype.post = function (apiPath, body, opts) {\n    if (opts === void 0) {\n      opts = {};\n    }\n\n    return __awaiter(this, void 0, void 0, function () {\n      var fetchOpts, response;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            fetchOpts = __assign({\n              method: \"POST\",\n              body: body ? JSON.stringify(body) : undefined,\n              headers: {\n                Accept: \"application/json\",\n                \"Content-Type\": \"application/json\"\n              }\n            }, opts);\n            return [4\n            /*yield*/\n            , this._fetch(apiPath, fetchOpts)];\n\n          case 1:\n            response = _a.sent();\n            return [2\n            /*return*/\n            , response.json()];\n        }\n      });\n    });\n  };\n  /**\n   * PUT JSON data to API, sending auth token in headers\n   * @param apiPath Path to URL endpoint under API\n   * @param body Data to send\n   * @param opts RequestInit opts, similar to Fetch API. If it contains\n   *  a body, it won't be stringified.\n   */\n\n\n  OpenSeaAPI.prototype.put = function (apiPath, body, opts) {\n    if (opts === void 0) {\n      opts = {};\n    }\n\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        return [2\n        /*return*/\n        , this.post(apiPath, body, __assign({\n          method: \"PUT\"\n        }, opts))];\n      });\n    });\n  };\n  /**\n   * Get from an API Endpoint, sending auth token in headers\n   * @param apiPath Path to URL endpoint under API\n   * @param opts RequestInit opts, similar to Fetch API\n   */\n\n\n  OpenSeaAPI.prototype._fetch = function (apiPath, opts) {\n    if (opts === void 0) {\n      opts = {};\n    }\n\n    return __awaiter(this, void 0, void 0, function () {\n      var apiBase, apiKey, finalUrl, finalOpts;\n\n      var _this = this;\n\n      return __generator(this, function (_a) {\n        apiBase = this.apiBaseUrl;\n        apiKey = this.apiKey;\n        finalUrl = apiBase + apiPath;\n        finalOpts = __assign(__assign({}, opts), {\n          headers: __assign(__assign({}, apiKey ? {\n            \"X-API-KEY\": apiKey\n          } : {}), opts.headers || {})\n        });\n        this.logger(\"Sending request: \".concat(finalUrl, \" \").concat(JSON.stringify(finalOpts).substr(0, 100), \"...\"));\n        return [2\n        /*return*/\n        , fetch(finalUrl, finalOpts).then(function (res) {\n          return __awaiter(_this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n              return [2\n              /*return*/\n              , this._handleApiResponse(res)];\n            });\n          });\n        })];\n      });\n    });\n  };\n\n  OpenSeaAPI.prototype._handleApiResponse = function (response) {\n    return __awaiter(this, void 0, void 0, function () {\n      var result, errorMessage, _a;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            if (response.ok) {\n              this.logger(\"Got success: \".concat(response.status));\n              return [2\n              /*return*/\n              , response];\n            }\n\n            _b.label = 1;\n\n          case 1:\n            _b.trys.push([1, 3,, 4]);\n\n            return [4\n            /*yield*/\n            , response.text()];\n\n          case 2:\n            result = _b.sent();\n            result = JSON.parse(result);\n            return [3\n            /*break*/\n            , 4];\n\n          case 3:\n            _a = _b.sent();\n            return [3\n            /*break*/\n            , 4];\n\n          case 4:\n            this.logger(\"Got error \".concat(response.status, \": \").concat(JSON.stringify(result)));\n\n            switch (response.status) {\n              case 400:\n                errorMessage = result && result.errors ? result.errors.join(\", \") : \"Invalid request: \".concat(JSON.stringify(result));\n                break;\n\n              case 401:\n              case 403:\n                errorMessage = \"Unauthorized. Full message was '\".concat(JSON.stringify(result), \"'\");\n                break;\n\n              case 404:\n                errorMessage = \"Not found. Full message was '\".concat(JSON.stringify(result), \"'\");\n                break;\n\n              case 500:\n                errorMessage = \"Internal server error. OpenSea has been alerted, but if the problem persists please contact us via Discord: https://discord.gg/ga8EJbv - full message was \".concat(JSON.stringify(result));\n                break;\n\n              case 503:\n                errorMessage = \"Service unavailable. Please try again in a few minutes. If the problem persists please contact us via Discord: https://discord.gg/ga8EJbv - full message was \".concat(JSON.stringify(result));\n                break;\n\n              default:\n                errorMessage = \"Message: \".concat(JSON.stringify(result));\n                break;\n            }\n\n            throw new Error(\"API Error \".concat(response.status, \": \").concat(errorMessage));\n        }\n      });\n    });\n  };\n\n  return OpenSeaAPI;\n}();\n\nexports.OpenSeaAPI = OpenSeaAPI;\n\nfunction _throwOrContinue(error, retries) {\n  var isUnavailable = error instanceof Error && !!error.message && (error.message.includes(\"503\") || error.message.includes(\"429\"));\n\n  if (retries <= 0 || !isUnavailable) {\n    throw error;\n  }\n}","map":{"version":3,"sources":["../src/api.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.OpenSeaAPI = void 0;\nrequire(\"isomorphic-unfetch\");\nvar QueryString = __importStar(require(\"query-string\"));\nvar constants_1 = require(\"./constants\");\nvar types_1 = require(\"./types\");\nvar utils_1 = require(\"./utils/utils\");\nvar OpenSeaAPI = /** @class */ (function () {\n    /**\n     * Create an instance of the OpenSea API\n     * @param config OpenSeaAPIConfig for setting up the API, including an optional API key, network name, and base URL\n     * @param logger Optional function for logging debug strings before and after requests are made\n     */\n    function OpenSeaAPI(config, logger) {\n        /**\n         * Page size to use for fetching orders\n         */\n        this.pageSize = 20;\n        this.apiKey = config.apiKey;\n        switch (config.networkName) {\n            case types_1.Network.Rinkeby:\n                this.apiBaseUrl = config.apiBaseUrl || constants_1.API_BASE_RINKEBY;\n                this.hostUrl = constants_1.SITE_HOST_RINKEBY;\n                break;\n            case types_1.Network.Main:\n            default:\n                this.apiBaseUrl = config.apiBaseUrl || constants_1.API_BASE_MAINNET;\n                this.hostUrl = constants_1.SITE_HOST_MAINNET;\n                break;\n        }\n        // Debugging: default to nothing\n        this.logger = logger || (function (arg) { return arg; });\n    }\n    /**\n     * Send an order to the orderbook.\n     * Throws when the order is invalid.\n     * IN NEXT VERSION: change order input to Order type\n     * @param order Order JSON to post to the orderbook\n     * @param retries Number of times to retry if the service is unavailable for any reason\n     */\n    OpenSeaAPI.prototype.postOrder = function (order, retries) {\n        if (retries === void 0) { retries = 2; }\n        return __awaiter(this, void 0, void 0, function () {\n            var json, error_1;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        _a.trys.push([0, 2, , 4]);\n                        return [4 /*yield*/, this.post(\"\".concat(constants_1.ORDERBOOK_PATH, \"/orders/post/\"), order)];\n                    case 1:\n                        json = (_a.sent());\n                        return [3 /*break*/, 4];\n                    case 2:\n                        error_1 = _a.sent();\n                        _throwOrContinue(error_1, retries);\n                        return [4 /*yield*/, (0, utils_1.delay)(3000)];\n                    case 3:\n                        _a.sent();\n                        return [2 /*return*/, this.postOrder(order, retries - 1)];\n                    case 4: return [2 /*return*/, (0, utils_1.orderFromJSON)(json)];\n                }\n            });\n        });\n    };\n    /**\n     * Create a whitelist entry for an asset to prevent others from buying.\n     * Buyers will have to have verified at least one of the emails\n     * on an asset in order to buy.\n     * This will throw a 403 if the given API key isn't allowed to create whitelist entries for this contract or asset.\n     * @param tokenAddress Address of the asset's contract\n     * @param tokenId The asset's token ID\n     * @param email The email allowed to buy.\n     */\n    OpenSeaAPI.prototype.postAssetWhitelist = function (tokenAddress, tokenId, email) {\n        return __awaiter(this, void 0, void 0, function () {\n            var json;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this.post(\"\".concat(constants_1.API_PATH, \"/asset/\").concat(tokenAddress, \"/\").concat(tokenId, \"/whitelist/\"), {\n                            email: email,\n                        })];\n                    case 1:\n                        json = _a.sent();\n                        return [2 /*return*/, !!json.success];\n                }\n            });\n        });\n    };\n    /**\n     * Get an order from the orderbook, throwing if none is found.\n     * @param query Query to use for getting orders. A subset of parameters\n     *  on the `OrderJSON` type is supported\n     */\n    OpenSeaAPI.prototype.getOrder = function (query) {\n        return __awaiter(this, void 0, void 0, function () {\n            var result, orderJSON, json, json;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this.get(\"\".concat(constants_1.ORDERBOOK_PATH, \"/orders/\"), __assign({ limit: 1 }, query))];\n                    case 1:\n                        result = _a.sent();\n                        if (constants_1.ORDERBOOK_VERSION == 0) {\n                            json = result;\n                            orderJSON = json[0];\n                        }\n                        else {\n                            json = result;\n                            orderJSON = json.orders[0];\n                        }\n                        if (!orderJSON) {\n                            throw new Error(\"Not found: no matching order found\");\n                        }\n                        return [2 /*return*/, (0, utils_1.orderFromJSON)(orderJSON)];\n                }\n            });\n        });\n    };\n    /**\n     * Get a list of orders from the orderbook, returning the page of orders\n     *  and the count of total orders found.\n     * @param query Query to use for getting orders. A subset of parameters\n     *  on the `OrderJSON` type is supported\n     * @param page Page number, defaults to 1. Can be overridden by\n     * `limit` and `offset` attributes from OrderQuery\n     */\n    OpenSeaAPI.prototype.getOrders = function (query, page) {\n        if (query === void 0) { query = {}; }\n        if (page === void 0) { page = 1; }\n        return __awaiter(this, void 0, void 0, function () {\n            var result, json, json;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this.get(\"\".concat(constants_1.ORDERBOOK_PATH, \"/orders/\"), __assign({ limit: this.pageSize, offset: (page - 1) * this.pageSize }, query))];\n                    case 1:\n                        result = _a.sent();\n                        if (constants_1.ORDERBOOK_VERSION == 0) {\n                            json = result;\n                            return [2 /*return*/, {\n                                    orders: json.map(function (j) { return (0, utils_1.orderFromJSON)(j); }),\n                                    count: json.length,\n                                }];\n                        }\n                        else {\n                            json = result;\n                            return [2 /*return*/, {\n                                    orders: json.orders.map(function (j) { return (0, utils_1.orderFromJSON)(j); }),\n                                    count: json.count,\n                                }];\n                        }\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Fetch an asset from the API, throwing if none is found\n     * @param tokenAddress Address of the asset's contract\n     * @param tokenId The asset's token ID, or null if ERC-20\n     * @param retries Number of times to retry if the service is unavailable for any reason\n     */\n    OpenSeaAPI.prototype.getAsset = function (_a, retries) {\n        var tokenAddress = _a.tokenAddress, tokenId = _a.tokenId;\n        if (retries === void 0) { retries = 1; }\n        return __awaiter(this, void 0, void 0, function () {\n            var json, error_2;\n            return __generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0:\n                        _b.trys.push([0, 2, , 4]);\n                        return [4 /*yield*/, this.get(\"\".concat(constants_1.API_PATH, \"/asset/\").concat(tokenAddress, \"/\").concat(tokenId || 0, \"/\"))];\n                    case 1:\n                        json = _b.sent();\n                        return [3 /*break*/, 4];\n                    case 2:\n                        error_2 = _b.sent();\n                        _throwOrContinue(error_2, retries);\n                        return [4 /*yield*/, (0, utils_1.delay)(1000)];\n                    case 3:\n                        _b.sent();\n                        return [2 /*return*/, this.getAsset({ tokenAddress: tokenAddress, tokenId: tokenId }, retries - 1)];\n                    case 4: return [2 /*return*/, (0, utils_1.assetFromJSON)(json)];\n                }\n            });\n        });\n    };\n    /**\n     * Fetch list of assets from the API, returning the page of assets and the count of total assets\n     * @param query Query to use for getting orders. A subset of parameters on the `OpenSeaAssetJSON` type is supported\n     * @param page Page number, defaults to 1. Can be overridden by\n     * `limit` and `offset` attributes from OpenSeaAssetQuery\n     */\n    OpenSeaAPI.prototype.getAssets = function (query, page) {\n        if (query === void 0) { query = {}; }\n        if (page === void 0) { page = 1; }\n        return __awaiter(this, void 0, void 0, function () {\n            var json;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this.get(\"\".concat(constants_1.API_PATH, \"/assets/\"), __assign({ limit: this.pageSize, offset: (page - 1) * this.pageSize }, query))];\n                    case 1:\n                        json = _a.sent();\n                        return [2 /*return*/, {\n                                assets: json.assets.map(function (j) { return (0, utils_1.assetFromJSON)(j); }),\n                                estimatedCount: json.estimated_count,\n                            }];\n                }\n            });\n        });\n    };\n    /**\n     * Fetch list of fungible tokens from the API matching parameters\n     * @param query Query to use for getting orders. A subset of parameters on the `OpenSeaAssetJSON` type is supported\n     * @param page Page number, defaults to 1. Can be overridden by\n     * `limit` and `offset` attributes from OpenSeaFungibleTokenQuery\n     * @param retries Number of times to retry if the service is unavailable for any reason\n     */\n    OpenSeaAPI.prototype.getPaymentTokens = function (query, page, retries) {\n        if (query === void 0) { query = {}; }\n        if (page === void 0) { page = 1; }\n        if (retries === void 0) { retries = 1; }\n        return __awaiter(this, void 0, void 0, function () {\n            var json, error_3;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        _a.trys.push([0, 2, , 4]);\n                        return [4 /*yield*/, this.get(\"\".concat(constants_1.API_PATH, \"/tokens/\"), __assign(__assign({}, query), { limit: this.pageSize, offset: (page - 1) * this.pageSize }))];\n                    case 1:\n                        json = _a.sent();\n                        return [3 /*break*/, 4];\n                    case 2:\n                        error_3 = _a.sent();\n                        _throwOrContinue(error_3, retries);\n                        return [4 /*yield*/, (0, utils_1.delay)(1000)];\n                    case 3:\n                        _a.sent();\n                        return [2 /*return*/, this.getPaymentTokens(query, page, retries - 1)];\n                    case 4: return [2 /*return*/, {\n                            tokens: json.map(function (t) { return (0, utils_1.tokenFromJSON)(t); }),\n                        }];\n                }\n            });\n        });\n    };\n    /**\n     * Fetch a bundle from the API, return null if it isn't found\n     * @param slug The bundle's identifier\n     */\n    OpenSeaAPI.prototype.getBundle = function (_a) {\n        var slug = _a.slug;\n        return __awaiter(this, void 0, void 0, function () {\n            var json;\n            return __generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0: return [4 /*yield*/, this.get(\"\".concat(constants_1.API_PATH, \"/bundle/\").concat(slug, \"/\"))];\n                    case 1:\n                        json = _b.sent();\n                        return [2 /*return*/, json ? (0, utils_1.assetBundleFromJSON)(json) : null];\n                }\n            });\n        });\n    };\n    /**\n     * Fetch list of bundles from the API, returning the page of bundles and the count of total bundles\n     * @param query Query to use for getting orders. A subset of parameters on the `OpenSeaAssetBundleJSON` type is supported\n     * @param page Page number, defaults to 1. Can be overridden by\n     * `limit` and `offset` attributes from OpenSeaAssetBundleQuery\n     */\n    OpenSeaAPI.prototype.getBundles = function (query, page) {\n        if (query === void 0) { query = {}; }\n        if (page === void 0) { page = 1; }\n        return __awaiter(this, void 0, void 0, function () {\n            var json;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this.get(\"\".concat(constants_1.API_PATH, \"/bundles/\"), __assign(__assign({}, query), { limit: this.pageSize, offset: (page - 1) * this.pageSize }))];\n                    case 1:\n                        json = _a.sent();\n                        return [2 /*return*/, {\n                                bundles: json.bundles.map(function (j) { return (0, utils_1.assetBundleFromJSON)(j); }),\n                                estimatedCount: json.estimated_count,\n                            }];\n                }\n            });\n        });\n    };\n    /**\n     * Get JSON data from API, sending auth token in headers\n     * @param apiPath Path to URL endpoint under API\n     * @param query Data to send. Will be stringified using QueryString\n     */\n    OpenSeaAPI.prototype.get = function (apiPath, query) {\n        if (query === void 0) { query = {}; }\n        return __awaiter(this, void 0, void 0, function () {\n            var qs, url, response;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        qs = QueryString.stringify(query);\n                        url = \"\".concat(apiPath, \"?\").concat(qs);\n                        return [4 /*yield*/, this._fetch(url)];\n                    case 1:\n                        response = _a.sent();\n                        return [2 /*return*/, response.json()];\n                }\n            });\n        });\n    };\n    /**\n     * POST JSON data to API, sending auth token in headers\n     * @param apiPath Path to URL endpoint under API\n     * @param body Data to send. Will be JSON.stringified\n     * @param opts RequestInit opts, similar to Fetch API. If it contains\n     *  a body, it won't be stringified.\n     */\n    OpenSeaAPI.prototype.post = function (apiPath, body, opts) {\n        if (opts === void 0) { opts = {}; }\n        return __awaiter(this, void 0, void 0, function () {\n            var fetchOpts, response;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        fetchOpts = __assign({ method: \"POST\", body: body ? JSON.stringify(body) : undefined, headers: {\n                                Accept: \"application/json\",\n                                \"Content-Type\": \"application/json\",\n                            } }, opts);\n                        return [4 /*yield*/, this._fetch(apiPath, fetchOpts)];\n                    case 1:\n                        response = _a.sent();\n                        return [2 /*return*/, response.json()];\n                }\n            });\n        });\n    };\n    /**\n     * PUT JSON data to API, sending auth token in headers\n     * @param apiPath Path to URL endpoint under API\n     * @param body Data to send\n     * @param opts RequestInit opts, similar to Fetch API. If it contains\n     *  a body, it won't be stringified.\n     */\n    OpenSeaAPI.prototype.put = function (apiPath, body, opts) {\n        if (opts === void 0) { opts = {}; }\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                return [2 /*return*/, this.post(apiPath, body, __assign({ method: \"PUT\" }, opts))];\n            });\n        });\n    };\n    /**\n     * Get from an API Endpoint, sending auth token in headers\n     * @param apiPath Path to URL endpoint under API\n     * @param opts RequestInit opts, similar to Fetch API\n     */\n    OpenSeaAPI.prototype._fetch = function (apiPath, opts) {\n        if (opts === void 0) { opts = {}; }\n        return __awaiter(this, void 0, void 0, function () {\n            var apiBase, apiKey, finalUrl, finalOpts;\n            var _this = this;\n            return __generator(this, function (_a) {\n                apiBase = this.apiBaseUrl;\n                apiKey = this.apiKey;\n                finalUrl = apiBase + apiPath;\n                finalOpts = __assign(__assign({}, opts), { headers: __assign(__assign({}, (apiKey ? { \"X-API-KEY\": apiKey } : {})), (opts.headers || {})) });\n                this.logger(\"Sending request: \".concat(finalUrl, \" \").concat(JSON.stringify(finalOpts).substr(0, 100), \"...\"));\n                return [2 /*return*/, fetch(finalUrl, finalOpts).then(function (res) { return __awaiter(_this, void 0, void 0, function () { return __generator(this, function (_a) {\n                        return [2 /*return*/, this._handleApiResponse(res)];\n                    }); }); })];\n            });\n        });\n    };\n    OpenSeaAPI.prototype._handleApiResponse = function (response) {\n        return __awaiter(this, void 0, void 0, function () {\n            var result, errorMessage, _a;\n            return __generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0:\n                        if (response.ok) {\n                            this.logger(\"Got success: \".concat(response.status));\n                            return [2 /*return*/, response];\n                        }\n                        _b.label = 1;\n                    case 1:\n                        _b.trys.push([1, 3, , 4]);\n                        return [4 /*yield*/, response.text()];\n                    case 2:\n                        result = _b.sent();\n                        result = JSON.parse(result);\n                        return [3 /*break*/, 4];\n                    case 3:\n                        _a = _b.sent();\n                        return [3 /*break*/, 4];\n                    case 4:\n                        this.logger(\"Got error \".concat(response.status, \": \").concat(JSON.stringify(result)));\n                        switch (response.status) {\n                            case 400:\n                                errorMessage =\n                                    result && result.errors\n                                        ? result.errors.join(\", \")\n                                        : \"Invalid request: \".concat(JSON.stringify(result));\n                                break;\n                            case 401:\n                            case 403:\n                                errorMessage = \"Unauthorized. Full message was '\".concat(JSON.stringify(result), \"'\");\n                                break;\n                            case 404:\n                                errorMessage = \"Not found. Full message was '\".concat(JSON.stringify(result), \"'\");\n                                break;\n                            case 500:\n                                errorMessage = \"Internal server error. OpenSea has been alerted, but if the problem persists please contact us via Discord: https://discord.gg/ga8EJbv - full message was \".concat(JSON.stringify(result));\n                                break;\n                            case 503:\n                                errorMessage = \"Service unavailable. Please try again in a few minutes. If the problem persists please contact us via Discord: https://discord.gg/ga8EJbv - full message was \".concat(JSON.stringify(result));\n                                break;\n                            default:\n                                errorMessage = \"Message: \".concat(JSON.stringify(result));\n                                break;\n                        }\n                        throw new Error(\"API Error \".concat(response.status, \": \").concat(errorMessage));\n                }\n            });\n        });\n    };\n    return OpenSeaAPI;\n}());\nexports.OpenSeaAPI = OpenSeaAPI;\nfunction _throwOrContinue(error, retries) {\n    var isUnavailable = error instanceof Error &&\n        !!error.message &&\n        (error.message.includes(\"503\") || error.message.includes(\"429\"));\n    if (retries <= 0 || !isUnavailable) {\n        throw error;\n    }\n}\n//# sourceMappingURL=api.js.map"]},"metadata":{},"sourceType":"script"}