{"ast":null,"code":"'use strict';\n\nvar secp256k1 = require('ethereum-cryptography/secp256k1');\n\nvar secp256k1v3 = require('./secp256k1-lib/index');\n\nvar der = require('./secp256k1-lib/der');\n/**\n * Verify an ECDSA privateKey\n * @method privateKeyVerify\n * @param {Buffer} privateKey\n * @return {boolean}\n */\n\n\nvar privateKeyVerify = function privateKeyVerify(privateKey) {\n  // secp256k1 v4 version throws when privateKey length is not 32\n  if (privateKey.length !== 32) {\n    return false;\n  }\n\n  return secp256k1.privateKeyVerify(Uint8Array.from(privateKey));\n};\n/**\n * Export a privateKey in DER format\n * @method privateKeyExport\n * @param {Buffer} privateKey\n * @param {boolean} compressed\n * @return {boolean}\n */\n\n\nvar privateKeyExport = function privateKeyExport(privateKey, compressed) {\n  // privateKeyExport method is not part of secp256k1 v4 package\n  // this implementation is based on v3\n  if (privateKey.length !== 32) {\n    throw new RangeError('private key length is invalid');\n  }\n\n  var publicKey = secp256k1v3.privateKeyExport(privateKey, compressed);\n  return der.privateKeyExport(privateKey, publicKey, compressed);\n};\n/**\n * Import a privateKey in DER format\n * @method privateKeyImport\n * @param {Buffer} privateKey\n * @return {Buffer}\n */\n\n\nvar privateKeyImport = function privateKeyImport(privateKey) {\n  // privateKeyImport method is not part of secp256k1 v4 package\n  // this implementation is based on v3\n  privateKey = der.privateKeyImport(privateKey);\n\n  if (privateKey !== null && privateKey.length === 32 && privateKeyVerify(privateKey)) {\n    return privateKey;\n  }\n\n  throw new Error(\"couldn't import from DER format\");\n};\n/**\n * Negate a privateKey by subtracting it from the order of the curve's base point\n * @method privateKeyNegate\n * @param {Buffer} privateKey\n * @return {Buffer}\n */\n\n\nvar privateKeyNegate = function privateKeyNegate(privateKey) {\n  return Buffer.from(secp256k1.privateKeyNegate(Uint8Array.from(privateKey)));\n};\n/**\n * Compute the inverse of a privateKey (modulo the order of the curve's base point).\n * @method privateKeyModInverse\n * @param {Buffer} privateKey\n * @return {Buffer}\n */\n\n\nvar privateKeyModInverse = function privateKeyModInverse(privateKey) {\n  if (privateKey.length !== 32) {\n    throw new Error('private key length is invalid');\n  }\n\n  return Buffer.from(secp256k1v3.privateKeyModInverse(Uint8Array.from(privateKey)));\n};\n/**\n * Tweak a privateKey by adding tweak to it.\n * @method privateKeyTweakAdd\n * @param {Buffer} privateKey\n * @param {Buffer} tweak\n * @return {Buffer}\n */\n\n\nvar privateKeyTweakAdd = function privateKeyTweakAdd(privateKey, tweak) {\n  return Buffer.from(secp256k1.privateKeyTweakAdd(Uint8Array.from(privateKey), tweak));\n};\n/**\n * Tweak a privateKey by multiplying it by a tweak.\n * @method privateKeyTweakMul\n * @param {Buffer} privateKey\n * @param {Buffer} tweak\n * @return {Buffer}\n */\n\n\nvar privateKeyTweakMul = function privateKeyTweakMul(privateKey, tweak) {\n  return Buffer.from(secp256k1.privateKeyTweakMul(Uint8Array.from(privateKey), Uint8Array.from(tweak)));\n};\n/**\n * Compute the public key for a privateKey.\n * @method publicKeyCreate\n * @param {Buffer} privateKey\n * @param {boolean} compressed\n * @return {Buffer}\n */\n\n\nvar publicKeyCreate = function publicKeyCreate(privateKey, compressed) {\n  return Buffer.from(secp256k1.publicKeyCreate(Uint8Array.from(privateKey), compressed));\n};\n/**\n * Convert a publicKey to compressed or uncompressed form.\n * @method publicKeyConvert\n * @param {Buffer} publicKey\n * @param {boolean} compressed\n * @return {Buffer}\n */\n\n\nvar publicKeyConvert = function publicKeyConvert(publicKey, compressed) {\n  return Buffer.from(secp256k1.publicKeyConvert(Uint8Array.from(publicKey), compressed));\n};\n/**\n * Verify an ECDSA publicKey.\n * @method publicKeyVerify\n * @param {Buffer} publicKey\n * @return {boolean}\n */\n\n\nvar publicKeyVerify = function publicKeyVerify(publicKey) {\n  // secp256k1 v4 version throws when publicKey length is not 33 or 65\n  if (publicKey.length !== 33 && publicKey.length !== 65) {\n    return false;\n  }\n\n  return secp256k1.publicKeyVerify(Uint8Array.from(publicKey));\n};\n/**\n * Tweak a publicKey by adding tweak times the generator to it.\n * @method publicKeyTweakAdd\n * @param {Buffer} publicKey\n * @param {Buffer} tweak\n * @param {boolean} compressed\n * @return {Buffer}\n */\n\n\nvar publicKeyTweakAdd = function publicKeyTweakAdd(publicKey, tweak, compressed) {\n  return Buffer.from(secp256k1.publicKeyTweakAdd(Uint8Array.from(publicKey), Uint8Array.from(tweak), compressed));\n};\n/**\n * Tweak a publicKey by multiplying it by a tweak value\n * @method publicKeyTweakMul\n * @param {Buffer} publicKey\n * @param {Buffer} tweak\n * @param {boolean} compressed\n * @return {Buffer}\n */\n\n\nvar publicKeyTweakMul = function publicKeyTweakMul(publicKey, tweak, compressed) {\n  return Buffer.from(secp256k1.publicKeyTweakMul(Uint8Array.from(publicKey), Uint8Array.from(tweak), compressed));\n};\n/**\n * Add a given publicKeys together.\n * @method publicKeyCombine\n * @param {Array<Buffer>} publicKeys\n * @param {boolean} compressed\n * @return {Buffer}\n */\n\n\nvar publicKeyCombine = function publicKeyCombine(publicKeys, compressed) {\n  var keys = [];\n  publicKeys.forEach(function (publicKey) {\n    keys.push(Uint8Array.from(publicKey));\n  });\n  return Buffer.from(secp256k1.publicKeyCombine(keys, compressed));\n};\n/**\n * Convert a signature to a normalized lower-S form.\n * @method signatureNormalize\n * @param {Buffer} signature\n * @return {Buffer}\n */\n\n\nvar signatureNormalize = function signatureNormalize(signature) {\n  return Buffer.from(secp256k1.signatureNormalize(Uint8Array.from(signature)));\n};\n/**\n * Serialize an ECDSA signature in DER format.\n * @method signatureExport\n * @param {Buffer} signature\n * @return {Buffer}\n */\n\n\nvar signatureExport = function signatureExport(signature) {\n  return Buffer.from(secp256k1.signatureExport(Uint8Array.from(signature)));\n};\n/**\n * Parse a DER ECDSA signature (follow by [BIP66](https://github.com/bitcoin/bips/blob/master/bip-0066.mediawiki)).\n * @method signatureImport\n * @param {Buffer} signature\n * @return {Buffer}\n */\n\n\nvar signatureImport = function signatureImport(signature) {\n  return Buffer.from(secp256k1.signatureImport(Uint8Array.from(signature)));\n};\n/**\n * Parse a DER ECDSA signature (not follow by [BIP66](https://github.com/bitcoin/bips/blob/master/bip-0066.mediawiki)).\n * @method signatureImportLax\n * @param {Buffer} signature\n * @return {Buffer}\n */\n\n\nvar signatureImportLax = function signatureImportLax(signature) {\n  // signatureImportLax method is not part of secp256k1 v4 package\n  // this implementation is based on v3\n  // ensure that signature is greater than 0\n  if (signature.length === 0) {\n    throw new RangeError('signature length is invalid');\n  }\n\n  var sigObj = der.signatureImportLax(signature);\n\n  if (sigObj === null) {\n    throw new Error(\"couldn't parse DER signature\");\n  }\n\n  return secp256k1v3.signatureImport(sigObj);\n};\n/**\n * Create an ECDSA signature. Always return low-S signature.\n * @method sign\n * @param {Buffer} message\n * @param {Buffer} privateKey\n * @param {Object} options\n * @return {Buffer}\n */\n\n\nvar sign = function sign(message, privateKey, options) {\n  if (options === null) {\n    throw new TypeError('options should be an Object');\n  }\n\n  var signOptions = void 0;\n\n  if (options) {\n    signOptions = {};\n\n    if (options.data === null) {\n      throw new TypeError('options.data should be a Buffer');\n    }\n\n    if (options.data) {\n      // validate option.data length\n      if (options.data.length !== 32) {\n        throw new RangeError('options.data length is invalid');\n      }\n\n      signOptions.data = new Uint8Array(options.data);\n    }\n\n    if (options.noncefn === null) {\n      throw new TypeError('options.noncefn should be a Function');\n    }\n\n    if (options.noncefn) {\n      //  convert option.noncefn function signature\n      signOptions.noncefn = function (message, privateKey, algo, data, attempt) {\n        var bufferAlgo = algo != null ? Buffer.from(algo) : null;\n        var bufferData = data != null ? Buffer.from(data) : null;\n        var buffer = Buffer.from('');\n\n        if (options.noncefn) {\n          buffer = options.noncefn(Buffer.from(message), Buffer.from(privateKey), bufferAlgo, bufferData, attempt);\n        }\n\n        return Uint8Array.from(buffer);\n      };\n    }\n  }\n\n  var sig = secp256k1.ecdsaSign(Uint8Array.from(message), Uint8Array.from(privateKey), signOptions);\n  return {\n    signature: Buffer.from(sig.signature),\n    recovery: sig.recid\n  };\n};\n/**\n * Verify an ECDSA signature.\n * @method verify\n * @param {Buffer} message\n * @param {Buffer} signature\n * @param {Buffer} publicKey\n * @return {boolean}\n */\n\n\nvar verify = function verify(message, signature, publicKey) {\n  // note: secp256k1 v4 verify method has a different argument order\n  return secp256k1.ecdsaVerify(Uint8Array.from(signature), Uint8Array.from(message), publicKey);\n};\n/**\n * Recover an ECDSA public key from a signature.\n * @method recover\n * @param {Buffer} message\n * @param {Buffer} signature\n * @param {Number} recid\n * @param {boolean} compressed\n * @return {Buffer}\n */\n\n\nvar recover = function recover(message, signature, recid, compressed) {\n  // note: secp256k1 v4 recover method has a different argument order\n  return Buffer.from(secp256k1.ecdsaRecover(Uint8Array.from(signature), recid, Uint8Array.from(message), compressed));\n};\n/**\n * Compute an EC Diffie-Hellman secret and applied sha256 to compressed public key.\n * @method ecdh\n * @param {Buffer} publicKey\n * @param {Buffer} privateKey\n * @return {Buffer}\n */\n\n\nvar ecdh = function ecdh(publicKey, privateKey) {\n  // note: secp256k1 v3 doesn't allow optional parameter\n  return Buffer.from(secp256k1.ecdh(Uint8Array.from(publicKey), Uint8Array.from(privateKey), {}));\n};\n/**\n * Compute an EC Diffie-Hellman secret and return public key as result\n * @method ecdhUnsafe\n * @param {Buffer} publicKey\n * @param {Buffer} privateKey\n * @param {boolean} compressed\n * @return {Buffer}\n */\n\n\nvar ecdhUnsafe = function ecdhUnsafe(publicKey, privateKey, compressed) {\n  // ecdhUnsafe method is not part of secp256k1 v4 package\n  // this implementation is based on v3\n  // ensure valid publicKey length\n  if (publicKey.length !== 33 && publicKey.length !== 65) {\n    throw new RangeError('public key length is invalid');\n  } // ensure valid privateKey length\n\n\n  if (privateKey.length !== 32) {\n    throw new RangeError('private key length is invalid');\n  }\n\n  return Buffer.from(secp256k1v3.ecdhUnsafe(Uint8Array.from(publicKey), Uint8Array.from(privateKey), compressed));\n};\n\nmodule.exports = {\n  privateKeyVerify: privateKeyVerify,\n  privateKeyExport: privateKeyExport,\n  privateKeyImport: privateKeyImport,\n  privateKeyNegate: privateKeyNegate,\n  privateKeyModInverse: privateKeyModInverse,\n  privateKeyTweakAdd: privateKeyTweakAdd,\n  privateKeyTweakMul: privateKeyTweakMul,\n  publicKeyCreate: publicKeyCreate,\n  publicKeyConvert: publicKeyConvert,\n  publicKeyVerify: publicKeyVerify,\n  publicKeyTweakAdd: publicKeyTweakAdd,\n  publicKeyTweakMul: publicKeyTweakMul,\n  publicKeyCombine: publicKeyCombine,\n  signatureNormalize: signatureNormalize,\n  signatureExport: signatureExport,\n  signatureImport: signatureImport,\n  signatureImportLax: signatureImportLax,\n  sign: sign,\n  verify: verify,\n  recover: recover,\n  ecdh: ecdh,\n  ecdhUnsafe: ecdhUnsafe\n};","map":{"version":3,"names":["secp256k1","require","secp256k1v3","der","privateKeyVerify","privateKey","length","Uint8Array","from","privateKeyExport","compressed","RangeError","publicKey","privateKeyImport","Error","privateKeyNegate","Buffer","privateKeyModInverse","privateKeyTweakAdd","tweak","privateKeyTweakMul","publicKeyCreate","publicKeyConvert","publicKeyVerify","publicKeyTweakAdd","publicKeyTweakMul","publicKeyCombine","publicKeys","keys","forEach","push","signatureNormalize","signature","signatureExport","signatureImport","signatureImportLax","sigObj","sign","message","options","TypeError","signOptions","data","noncefn","algo","attempt","bufferAlgo","bufferData","buffer","sig","ecdsaSign","recovery","recid","verify","ecdsaVerify","recover","ecdsaRecover","ecdh","ecdhUnsafe","module","exports"],"sources":["C:/Users/raiab/Documents/Logics Yard/NFT code daniyal/NFT code/client/node_modules/ethereumjs-util/dist/secp256k1-adapter.js"],"sourcesContent":["'use strict';\n\nvar secp256k1 = require('ethereum-cryptography/secp256k1');\n\nvar secp256k1v3 = require('./secp256k1-lib/index');\nvar der = require('./secp256k1-lib/der');\n\n/**\n * Verify an ECDSA privateKey\n * @method privateKeyVerify\n * @param {Buffer} privateKey\n * @return {boolean}\n */\nvar privateKeyVerify = function privateKeyVerify(privateKey) {\n  // secp256k1 v4 version throws when privateKey length is not 32\n  if (privateKey.length !== 32) {\n    return false;\n  }\n\n  return secp256k1.privateKeyVerify(Uint8Array.from(privateKey));\n};\n\n/**\n * Export a privateKey in DER format\n * @method privateKeyExport\n * @param {Buffer} privateKey\n * @param {boolean} compressed\n * @return {boolean}\n */\nvar privateKeyExport = function privateKeyExport(privateKey, compressed) {\n  // privateKeyExport method is not part of secp256k1 v4 package\n  // this implementation is based on v3\n  if (privateKey.length !== 32) {\n    throw new RangeError('private key length is invalid');\n  }\n\n  var publicKey = secp256k1v3.privateKeyExport(privateKey, compressed);\n\n  return der.privateKeyExport(privateKey, publicKey, compressed);\n};\n\n/**\n * Import a privateKey in DER format\n * @method privateKeyImport\n * @param {Buffer} privateKey\n * @return {Buffer}\n */\n\nvar privateKeyImport = function privateKeyImport(privateKey) {\n  // privateKeyImport method is not part of secp256k1 v4 package\n  // this implementation is based on v3\n  privateKey = der.privateKeyImport(privateKey);\n  if (privateKey !== null && privateKey.length === 32 && privateKeyVerify(privateKey)) {\n    return privateKey;\n  }\n\n  throw new Error(\"couldn't import from DER format\");\n};\n\n/**\n * Negate a privateKey by subtracting it from the order of the curve's base point\n * @method privateKeyNegate\n * @param {Buffer} privateKey\n * @return {Buffer}\n */\nvar privateKeyNegate = function privateKeyNegate(privateKey) {\n  return Buffer.from(secp256k1.privateKeyNegate(Uint8Array.from(privateKey)));\n};\n\n/**\n * Compute the inverse of a privateKey (modulo the order of the curve's base point).\n * @method privateKeyModInverse\n * @param {Buffer} privateKey\n * @return {Buffer}\n */\nvar privateKeyModInverse = function privateKeyModInverse(privateKey) {\n  if (privateKey.length !== 32) {\n    throw new Error('private key length is invalid');\n  }\n\n  return Buffer.from(secp256k1v3.privateKeyModInverse(Uint8Array.from(privateKey)));\n};\n\n/**\n * Tweak a privateKey by adding tweak to it.\n * @method privateKeyTweakAdd\n * @param {Buffer} privateKey\n * @param {Buffer} tweak\n * @return {Buffer}\n */\nvar privateKeyTweakAdd = function privateKeyTweakAdd(privateKey, tweak) {\n  return Buffer.from(secp256k1.privateKeyTweakAdd(Uint8Array.from(privateKey), tweak));\n};\n\n/**\n * Tweak a privateKey by multiplying it by a tweak.\n * @method privateKeyTweakMul\n * @param {Buffer} privateKey\n * @param {Buffer} tweak\n * @return {Buffer}\n */\nvar privateKeyTweakMul = function privateKeyTweakMul(privateKey, tweak) {\n  return Buffer.from(secp256k1.privateKeyTweakMul(Uint8Array.from(privateKey), Uint8Array.from(tweak)));\n};\n\n/**\n * Compute the public key for a privateKey.\n * @method publicKeyCreate\n * @param {Buffer} privateKey\n * @param {boolean} compressed\n * @return {Buffer}\n */\nvar publicKeyCreate = function publicKeyCreate(privateKey, compressed) {\n  return Buffer.from(secp256k1.publicKeyCreate(Uint8Array.from(privateKey), compressed));\n};\n\n/**\n * Convert a publicKey to compressed or uncompressed form.\n * @method publicKeyConvert\n * @param {Buffer} publicKey\n * @param {boolean} compressed\n * @return {Buffer}\n */\nvar publicKeyConvert = function publicKeyConvert(publicKey, compressed) {\n  return Buffer.from(secp256k1.publicKeyConvert(Uint8Array.from(publicKey), compressed));\n};\n\n/**\n * Verify an ECDSA publicKey.\n * @method publicKeyVerify\n * @param {Buffer} publicKey\n * @return {boolean}\n */\nvar publicKeyVerify = function publicKeyVerify(publicKey) {\n  // secp256k1 v4 version throws when publicKey length is not 33 or 65\n  if (publicKey.length !== 33 && publicKey.length !== 65) {\n    return false;\n  }\n\n  return secp256k1.publicKeyVerify(Uint8Array.from(publicKey));\n};\n\n/**\n * Tweak a publicKey by adding tweak times the generator to it.\n * @method publicKeyTweakAdd\n * @param {Buffer} publicKey\n * @param {Buffer} tweak\n * @param {boolean} compressed\n * @return {Buffer}\n */\nvar publicKeyTweakAdd = function publicKeyTweakAdd(publicKey, tweak, compressed) {\n  return Buffer.from(secp256k1.publicKeyTweakAdd(Uint8Array.from(publicKey), Uint8Array.from(tweak), compressed));\n};\n\n/**\n * Tweak a publicKey by multiplying it by a tweak value\n * @method publicKeyTweakMul\n * @param {Buffer} publicKey\n * @param {Buffer} tweak\n * @param {boolean} compressed\n * @return {Buffer}\n */\nvar publicKeyTweakMul = function publicKeyTweakMul(publicKey, tweak, compressed) {\n  return Buffer.from(secp256k1.publicKeyTweakMul(Uint8Array.from(publicKey), Uint8Array.from(tweak), compressed));\n};\n\n/**\n * Add a given publicKeys together.\n * @method publicKeyCombine\n * @param {Array<Buffer>} publicKeys\n * @param {boolean} compressed\n * @return {Buffer}\n */\nvar publicKeyCombine = function publicKeyCombine(publicKeys, compressed) {\n  var keys = [];\n  publicKeys.forEach(function (publicKey) {\n    keys.push(Uint8Array.from(publicKey));\n  });\n\n  return Buffer.from(secp256k1.publicKeyCombine(keys, compressed));\n};\n\n/**\n * Convert a signature to a normalized lower-S form.\n * @method signatureNormalize\n * @param {Buffer} signature\n * @return {Buffer}\n */\nvar signatureNormalize = function signatureNormalize(signature) {\n  return Buffer.from(secp256k1.signatureNormalize(Uint8Array.from(signature)));\n};\n\n/**\n * Serialize an ECDSA signature in DER format.\n * @method signatureExport\n * @param {Buffer} signature\n * @return {Buffer}\n */\nvar signatureExport = function signatureExport(signature) {\n  return Buffer.from(secp256k1.signatureExport(Uint8Array.from(signature)));\n};\n\n/**\n * Parse a DER ECDSA signature (follow by [BIP66](https://github.com/bitcoin/bips/blob/master/bip-0066.mediawiki)).\n * @method signatureImport\n * @param {Buffer} signature\n * @return {Buffer}\n */\nvar signatureImport = function signatureImport(signature) {\n  return Buffer.from(secp256k1.signatureImport(Uint8Array.from(signature)));\n};\n\n/**\n * Parse a DER ECDSA signature (not follow by [BIP66](https://github.com/bitcoin/bips/blob/master/bip-0066.mediawiki)).\n * @method signatureImportLax\n * @param {Buffer} signature\n * @return {Buffer}\n */\nvar signatureImportLax = function signatureImportLax(signature) {\n  // signatureImportLax method is not part of secp256k1 v4 package\n  // this implementation is based on v3\n  // ensure that signature is greater than 0\n  if (signature.length === 0) {\n    throw new RangeError('signature length is invalid');\n  }\n\n  var sigObj = der.signatureImportLax(signature);\n  if (sigObj === null) {\n    throw new Error(\"couldn't parse DER signature\");\n  }\n\n  return secp256k1v3.signatureImport(sigObj);\n};\n\n/**\n * Create an ECDSA signature. Always return low-S signature.\n * @method sign\n * @param {Buffer} message\n * @param {Buffer} privateKey\n * @param {Object} options\n * @return {Buffer}\n */\nvar sign = function sign(message, privateKey, options) {\n  if (options === null) {\n    throw new TypeError('options should be an Object');\n  }\n\n  var signOptions = void 0;\n\n  if (options) {\n    signOptions = {};\n\n    if (options.data === null) {\n      throw new TypeError('options.data should be a Buffer');\n    }\n\n    if (options.data) {\n      // validate option.data length\n      if (options.data.length !== 32) {\n        throw new RangeError('options.data length is invalid');\n      }\n\n      signOptions.data = new Uint8Array(options.data);\n    }\n\n    if (options.noncefn === null) {\n      throw new TypeError('options.noncefn should be a Function');\n    }\n\n    if (options.noncefn) {\n      //  convert option.noncefn function signature\n      signOptions.noncefn = function (message, privateKey, algo, data, attempt) {\n        var bufferAlgo = algo != null ? Buffer.from(algo) : null;\n        var bufferData = data != null ? Buffer.from(data) : null;\n\n        var buffer = Buffer.from('');\n\n        if (options.noncefn) {\n          buffer = options.noncefn(Buffer.from(message), Buffer.from(privateKey), bufferAlgo, bufferData, attempt);\n        }\n\n        return Uint8Array.from(buffer);\n      };\n    }\n  }\n\n  var sig = secp256k1.ecdsaSign(Uint8Array.from(message), Uint8Array.from(privateKey), signOptions);\n\n  return {\n    signature: Buffer.from(sig.signature),\n    recovery: sig.recid\n  };\n};\n\n/**\n * Verify an ECDSA signature.\n * @method verify\n * @param {Buffer} message\n * @param {Buffer} signature\n * @param {Buffer} publicKey\n * @return {boolean}\n */\nvar verify = function verify(message, signature, publicKey) {\n  // note: secp256k1 v4 verify method has a different argument order\n  return secp256k1.ecdsaVerify(Uint8Array.from(signature), Uint8Array.from(message), publicKey);\n};\n\n/**\n * Recover an ECDSA public key from a signature.\n * @method recover\n * @param {Buffer} message\n * @param {Buffer} signature\n * @param {Number} recid\n * @param {boolean} compressed\n * @return {Buffer}\n */\nvar recover = function recover(message, signature, recid, compressed) {\n  // note: secp256k1 v4 recover method has a different argument order\n  return Buffer.from(secp256k1.ecdsaRecover(Uint8Array.from(signature), recid, Uint8Array.from(message), compressed));\n};\n\n/**\n * Compute an EC Diffie-Hellman secret and applied sha256 to compressed public key.\n * @method ecdh\n * @param {Buffer} publicKey\n * @param {Buffer} privateKey\n * @return {Buffer}\n */\nvar ecdh = function ecdh(publicKey, privateKey) {\n  // note: secp256k1 v3 doesn't allow optional parameter\n  return Buffer.from(secp256k1.ecdh(Uint8Array.from(publicKey), Uint8Array.from(privateKey), {}));\n};\n\n/**\n * Compute an EC Diffie-Hellman secret and return public key as result\n * @method ecdhUnsafe\n * @param {Buffer} publicKey\n * @param {Buffer} privateKey\n * @param {boolean} compressed\n * @return {Buffer}\n */\nvar ecdhUnsafe = function ecdhUnsafe(publicKey, privateKey, compressed) {\n  // ecdhUnsafe method is not part of secp256k1 v4 package\n  // this implementation is based on v3\n  // ensure valid publicKey length\n  if (publicKey.length !== 33 && publicKey.length !== 65) {\n    throw new RangeError('public key length is invalid');\n  }\n\n  // ensure valid privateKey length\n  if (privateKey.length !== 32) {\n    throw new RangeError('private key length is invalid');\n  }\n\n  return Buffer.from(secp256k1v3.ecdhUnsafe(Uint8Array.from(publicKey), Uint8Array.from(privateKey), compressed));\n};\n\nmodule.exports = {\n  privateKeyVerify: privateKeyVerify,\n  privateKeyExport: privateKeyExport,\n  privateKeyImport: privateKeyImport,\n  privateKeyNegate: privateKeyNegate,\n  privateKeyModInverse: privateKeyModInverse,\n  privateKeyTweakAdd: privateKeyTweakAdd,\n  privateKeyTweakMul: privateKeyTweakMul,\n\n  publicKeyCreate: publicKeyCreate,\n  publicKeyConvert: publicKeyConvert,\n  publicKeyVerify: publicKeyVerify,\n  publicKeyTweakAdd: publicKeyTweakAdd,\n  publicKeyTweakMul: publicKeyTweakMul,\n  publicKeyCombine: publicKeyCombine,\n\n  signatureNormalize: signatureNormalize,\n  signatureExport: signatureExport,\n  signatureImport: signatureImport,\n  signatureImportLax: signatureImportLax,\n\n  sign: sign,\n  verify: verify,\n  recover: recover,\n\n  ecdh: ecdh,\n  ecdhUnsafe: ecdhUnsafe\n};"],"mappings":"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"},"metadata":{},"sourceType":"script"}