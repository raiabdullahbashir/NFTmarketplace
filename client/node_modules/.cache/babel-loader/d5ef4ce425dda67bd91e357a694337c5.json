{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar bignumber_js_1 = require(\"bignumber.js\");\n\nexports.BigNumber = bignumber_js_1.BigNumber; // By default BigNumber's `toString` method converts to exponential notation if the value has\n// more then 20 digits. We want to avoid this behavior, so we set EXPONENTIAL_AT to a high number\n\nbignumber_js_1.BigNumber.config({\n  EXPONENTIAL_AT: 1000\n});","map":{"version":3,"sources":["../src/configured_bignumber.ts"],"names":[],"mappings":";;;;;;AAAA,IAAA,cAAA,GAAA,OAAA,CAAA,cAAA,CAAA;;AAQS,OAAA,CAAA,SAAA,GARA,cAAA,CAAA,SAQA,C,CANT;AACA;;AACA,cAAA,CAAA,SAAA,CAAU,MAAV,CAAiB;EACb,cAAc,EAAE;AADH,CAAjB","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar bignumber_js_1 = require(\"bignumber.js\");\nexports.BigNumber = bignumber_js_1.BigNumber;\n// By default BigNumber's `toString` method converts to exponential notation if the value has\n// more then 20 digits. We want to avoid this behavior, so we set EXPONENTIAL_AT to a high number\nbignumber_js_1.BigNumber.config({\n    EXPONENTIAL_AT: 1000,\n});\n//# sourceMappingURL=configured_bignumber.js.map"]},"metadata":{},"sourceType":"script"}