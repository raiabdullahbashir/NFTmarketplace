{"ast":null,"code":"/*\n    This file is part of web3.js.\n\n    web3.js is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    web3.js is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\n/** @file ipcprovider.js\n * @authors:\n *   Fabian Vogelsteller <fabian@ethdev.com>\n * @date 2015\n */\n\"use strict\";\n\nvar utils = require('../utils/utils');\n\nvar errors = require('./errors');\n\nvar IpcProvider = function (path, net) {\n  var _this = this;\n\n  this.responseCallbacks = {};\n  this.path = path;\n  this.connection = net.connect({\n    path: this.path\n  });\n  this.connection.on('error', function (e) {\n    console.error('IPC Connection Error', e);\n\n    _this._timeout();\n  });\n  this.connection.on('end', function () {\n    _this._timeout();\n  }); // LISTEN FOR CONNECTION RESPONSES\n\n  this.connection.on('data', function (data) {\n    /*jshint maxcomplexity: 6 */\n    _this._parseResponse(data.toString()).forEach(function (result) {\n      var id = null; // get the id which matches the returned id\n\n      if (utils.isArray(result)) {\n        result.forEach(function (load) {\n          if (_this.responseCallbacks[load.id]) id = load.id;\n        });\n      } else {\n        id = result.id;\n      } // fire the callback\n\n\n      if (_this.responseCallbacks[id]) {\n        _this.responseCallbacks[id](null, result);\n\n        delete _this.responseCallbacks[id];\n      }\n    });\n  });\n};\n/**\nWill parse the response and make an array out of it.\n\n@method _parseResponse\n@param {String} data\n*/\n\n\nIpcProvider.prototype._parseResponse = function (data) {\n  var _this = this,\n      returnValues = []; // DE-CHUNKER\n\n\n  var dechunkedData = data.replace(/\\}[\\n\\r]?\\{/g, '}|--|{') // }{\n  .replace(/\\}\\][\\n\\r]?\\[\\{/g, '}]|--|[{') // }][{\n  .replace(/\\}[\\n\\r]?\\[\\{/g, '}|--|[{') // }[{\n  .replace(/\\}\\][\\n\\r]?\\{/g, '}]|--|{') // }]{\n  .split('|--|');\n  dechunkedData.forEach(function (data) {\n    // prepend the last chunk\n    if (_this.lastChunk) data = _this.lastChunk + data;\n    var result = null;\n\n    try {\n      result = JSON.parse(data);\n    } catch (e) {\n      _this.lastChunk = data; // start timeout to cancel all requests\n\n      clearTimeout(_this.lastChunkTimeout);\n      _this.lastChunkTimeout = setTimeout(function () {\n        _this._timeout();\n\n        throw errors.InvalidResponse(data);\n      }, 1000 * 15);\n      return;\n    } // cancel timeout and set chunk to null\n\n\n    clearTimeout(_this.lastChunkTimeout);\n    _this.lastChunk = null;\n    if (result) returnValues.push(result);\n  });\n  return returnValues;\n};\n/**\nGet the adds a callback to the responseCallbacks object,\nwhich will be called if a response matching the response Id will arrive.\n\n@method _addResponseCallback\n*/\n\n\nIpcProvider.prototype._addResponseCallback = function (payload, callback) {\n  var id = payload.id || payload[0].id;\n  var method = payload.method || payload[0].method;\n  this.responseCallbacks[id] = callback;\n  this.responseCallbacks[id].method = method;\n};\n/**\nTimeout all requests when the end/error event is fired\n\n@method _timeout\n*/\n\n\nIpcProvider.prototype._timeout = function () {\n  for (var key in this.responseCallbacks) {\n    if (this.responseCallbacks.hasOwnProperty(key)) {\n      this.responseCallbacks[key](errors.InvalidConnection('on IPC'));\n      delete this.responseCallbacks[key];\n    }\n  }\n};\n/**\nCheck if the current connection is still valid.\n\n@method isConnected\n*/\n\n\nIpcProvider.prototype.isConnected = function () {\n  var _this = this; // try reconnect, when connection is gone\n\n\n  if (!_this.connection.writable) _this.connection.connect({\n    path: _this.path\n  });\n  return !!this.connection.writable;\n};\n\nIpcProvider.prototype.send = function (payload) {\n  if (this.connection.writeSync) {\n    var result; // try reconnect, when connection is gone\n\n    if (!this.connection.writable) this.connection.connect({\n      path: this.path\n    });\n    var data = this.connection.writeSync(JSON.stringify(payload));\n\n    try {\n      result = JSON.parse(data);\n    } catch (e) {\n      throw errors.InvalidResponse(data);\n    }\n\n    return result;\n  } else {\n    throw new Error('You tried to send \"' + payload.method + '\" synchronously. Synchronous requests are not supported by the IPC provider.');\n  }\n};\n\nIpcProvider.prototype.sendAsync = function (payload, callback) {\n  // try reconnect, when connection is gone\n  if (!this.connection.writable) this.connection.connect({\n    path: this.path\n  });\n  this.connection.write(JSON.stringify(payload));\n\n  this._addResponseCallback(payload, callback);\n};\n\nmodule.exports = IpcProvider;","map":{"version":3,"names":["utils","require","errors","IpcProvider","path","net","_this","responseCallbacks","connection","connect","on","e","console","error","_timeout","data","_parseResponse","toString","forEach","result","id","isArray","load","prototype","returnValues","dechunkedData","replace","split","lastChunk","JSON","parse","clearTimeout","lastChunkTimeout","setTimeout","InvalidResponse","push","_addResponseCallback","payload","callback","method","key","hasOwnProperty","InvalidConnection","isConnected","writable","send","writeSync","stringify","Error","sendAsync","write","module","exports"],"sources":["C:/Users/raiab/Documents/Logics Yard/NFT code daniyal/NFT code/node_modules/@0xproject/assert/node_modules/web3/lib/web3/ipcprovider.js"],"sourcesContent":["/*\n    This file is part of web3.js.\n\n    web3.js is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    web3.js is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n/** @file ipcprovider.js\n * @authors:\n *   Fabian Vogelsteller <fabian@ethdev.com>\n * @date 2015\n */\n\n\"use strict\";\n\nvar utils = require('../utils/utils');\nvar errors = require('./errors');\n\n\nvar IpcProvider = function (path, net) {\n    var _this = this;\n    this.responseCallbacks = {};\n    this.path = path;\n    \n    this.connection = net.connect({path: this.path});\n\n    this.connection.on('error', function(e){\n        console.error('IPC Connection Error', e);\n        _this._timeout();\n    });\n\n    this.connection.on('end', function(){\n        _this._timeout();\n    }); \n\n\n    // LISTEN FOR CONNECTION RESPONSES\n    this.connection.on('data', function(data) {\n        /*jshint maxcomplexity: 6 */\n\n        _this._parseResponse(data.toString()).forEach(function(result){\n\n            var id = null;\n\n            // get the id which matches the returned id\n            if(utils.isArray(result)) {\n                result.forEach(function(load){\n                    if(_this.responseCallbacks[load.id])\n                        id = load.id;\n                });\n            } else {\n                id = result.id;\n            }\n\n            // fire the callback\n            if(_this.responseCallbacks[id]) {\n                _this.responseCallbacks[id](null, result);\n                delete _this.responseCallbacks[id];\n            }\n        });\n    });\n};\n\n/**\nWill parse the response and make an array out of it.\n\n@method _parseResponse\n@param {String} data\n*/\nIpcProvider.prototype._parseResponse = function(data) {\n    var _this = this,\n        returnValues = [];\n    \n    // DE-CHUNKER\n    var dechunkedData = data\n        .replace(/\\}[\\n\\r]?\\{/g,'}|--|{') // }{\n        .replace(/\\}\\][\\n\\r]?\\[\\{/g,'}]|--|[{') // }][{\n        .replace(/\\}[\\n\\r]?\\[\\{/g,'}|--|[{') // }[{\n        .replace(/\\}\\][\\n\\r]?\\{/g,'}]|--|{') // }]{\n        .split('|--|');\n\n    dechunkedData.forEach(function(data){\n\n        // prepend the last chunk\n        if(_this.lastChunk)\n            data = _this.lastChunk + data;\n\n        var result = null;\n\n        try {\n            result = JSON.parse(data);\n\n        } catch(e) {\n\n            _this.lastChunk = data;\n\n            // start timeout to cancel all requests\n            clearTimeout(_this.lastChunkTimeout);\n            _this.lastChunkTimeout = setTimeout(function(){\n                _this._timeout();\n                throw errors.InvalidResponse(data);\n            }, 1000 * 15);\n\n            return;\n        }\n\n        // cancel timeout and set chunk to null\n        clearTimeout(_this.lastChunkTimeout);\n        _this.lastChunk = null;\n\n        if(result)\n            returnValues.push(result);\n    });\n\n    return returnValues;\n};\n\n\n/**\nGet the adds a callback to the responseCallbacks object,\nwhich will be called if a response matching the response Id will arrive.\n\n@method _addResponseCallback\n*/\nIpcProvider.prototype._addResponseCallback = function(payload, callback) {\n    var id = payload.id || payload[0].id;\n    var method = payload.method || payload[0].method;\n\n    this.responseCallbacks[id] = callback;\n    this.responseCallbacks[id].method = method;\n};\n\n/**\nTimeout all requests when the end/error event is fired\n\n@method _timeout\n*/\nIpcProvider.prototype._timeout = function() {\n    for(var key in this.responseCallbacks) {\n        if(this.responseCallbacks.hasOwnProperty(key)){\n            this.responseCallbacks[key](errors.InvalidConnection('on IPC'));\n            delete this.responseCallbacks[key];\n        }\n    }\n};\n\n\n/**\nCheck if the current connection is still valid.\n\n@method isConnected\n*/\nIpcProvider.prototype.isConnected = function() {\n    var _this = this;\n\n    // try reconnect, when connection is gone\n    if(!_this.connection.writable)\n        _this.connection.connect({path: _this.path});\n\n    return !!this.connection.writable;\n};\n\nIpcProvider.prototype.send = function (payload) {\n\n    if(this.connection.writeSync) {\n        var result;\n\n        // try reconnect, when connection is gone\n        if(!this.connection.writable)\n            this.connection.connect({path: this.path});\n\n        var data = this.connection.writeSync(JSON.stringify(payload));\n\n        try {\n            result = JSON.parse(data);\n        } catch(e) {\n            throw errors.InvalidResponse(data);                \n        }\n\n        return result;\n\n    } else {\n        throw new Error('You tried to send \"'+ payload.method +'\" synchronously. Synchronous requests are not supported by the IPC provider.');\n    }\n};\n\nIpcProvider.prototype.sendAsync = function (payload, callback) {\n    // try reconnect, when connection is gone\n    if(!this.connection.writable)\n        this.connection.connect({path: this.path});\n\n\n    this.connection.write(JSON.stringify(payload));\n    this._addResponseCallback(payload, callback);\n};\n\nmodule.exports = IpcProvider;\n\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}