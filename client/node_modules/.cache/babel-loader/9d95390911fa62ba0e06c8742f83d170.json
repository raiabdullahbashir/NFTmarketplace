{"ast":null,"code":"/**\n * MIT License\n *\n * Copyright (c) 2021 Andrew Raffensperger\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n *\n * This is a near carbon-copy of the original source (link below) with the\n * TypeScript typings added and a few tweaks to make it ES3-compatible.\n *\n * See: https://github.com/adraffy/ens-normalize.js\n */\n// https://github.com/behnammodi/polyfill/blob/master/array.polyfill.js\nfunction flat(array, depth) {\n  if (depth == null) {\n    depth = 1;\n  }\n\n  const result = [];\n  const forEach = result.forEach;\n\n  const flatDeep = function (arr, depth) {\n    forEach.call(arr, function (val) {\n      if (depth > 0 && Array.isArray(val)) {\n        flatDeep(val, depth - 1);\n      } else {\n        result.push(val);\n      }\n    });\n  };\n\n  flatDeep(array, depth);\n  return result;\n}\n\nfunction fromEntries(array) {\n  const result = {};\n\n  for (let i = 0; i < array.length; i++) {\n    const value = array[i];\n    result[value[0]] = value[1];\n  }\n\n  return result;\n}\n\nexport function decode_arithmetic(bytes) {\n  let pos = 0;\n\n  function u16() {\n    return bytes[pos++] << 8 | bytes[pos++];\n  } // decode the frequency table\n\n\n  let symbol_count = u16();\n  let total = 1;\n  let acc = [0, 1]; // first symbol has frequency 1\n\n  for (let i = 1; i < symbol_count; i++) {\n    acc.push(total += u16());\n  } // skip the sized-payload that the last 3 symbols index into\n\n\n  let skip = u16();\n  let pos_payload = pos;\n  pos += skip;\n  let read_width = 0;\n  let read_buffer = 0;\n\n  function read_bit() {\n    if (read_width == 0) {\n      // this will read beyond end of buffer\n      // but (undefined|0) => zero pad\n      read_buffer = read_buffer << 8 | bytes[pos++];\n      read_width = 8;\n    }\n\n    return read_buffer >> --read_width & 1;\n  }\n\n  const N = 31;\n  const FULL = Math.pow(2, N);\n  const HALF = FULL >>> 1;\n  const QRTR = HALF >> 1;\n  const MASK = FULL - 1; // fill register\n\n  let register = 0;\n\n  for (let i = 0; i < N; i++) register = register << 1 | read_bit();\n\n  let symbols = [];\n  let low = 0;\n  let range = FULL; // treat like a float\n\n  while (true) {\n    let value = Math.floor(((register - low + 1) * total - 1) / range);\n    let start = 0;\n    let end = symbol_count;\n\n    while (end - start > 1) {\n      // binary search\n      let mid = start + end >>> 1;\n\n      if (value < acc[mid]) {\n        end = mid;\n      } else {\n        start = mid;\n      }\n    }\n\n    if (start == 0) break; // first symbol is end mark\n\n    symbols.push(start);\n    let a = low + Math.floor(range * acc[start] / total);\n    let b = low + Math.floor(range * acc[start + 1] / total) - 1;\n\n    while (((a ^ b) & HALF) == 0) {\n      register = register << 1 & MASK | read_bit();\n      a = a << 1 & MASK;\n      b = b << 1 & MASK | 1;\n    }\n\n    while (a & ~b & QRTR) {\n      register = register & HALF | register << 1 & MASK >>> 1 | read_bit();\n      a = a << 1 ^ HALF;\n      b = (b ^ HALF) << 1 | HALF | 1;\n    }\n\n    low = a;\n    range = 1 + b - a;\n  }\n\n  let offset = symbol_count - 4;\n  return symbols.map(x => {\n    switch (x - offset) {\n      case 3:\n        return offset + 0x10100 + (bytes[pos_payload++] << 16 | bytes[pos_payload++] << 8 | bytes[pos_payload++]);\n\n      case 2:\n        return offset + 0x100 + (bytes[pos_payload++] << 8 | bytes[pos_payload++]);\n\n      case 1:\n        return offset + bytes[pos_payload++];\n\n      default:\n        return x - 1;\n    }\n  });\n} // returns an iterator which returns the next symbol\n\nexport function read_payload(v) {\n  let pos = 0;\n  return () => v[pos++];\n}\nexport function read_compressed_payload(bytes) {\n  return read_payload(decode_arithmetic(bytes));\n} // eg. [0,1,2,3...] => [0,-1,1,-2,...]\n\nexport function signed(i) {\n  return i & 1 ? ~i >> 1 : i >> 1;\n}\n\nfunction read_counts(n, next) {\n  let v = Array(n);\n\n  for (let i = 0; i < n; i++) v[i] = 1 + next();\n\n  return v;\n}\n\nfunction read_ascending(n, next) {\n  let v = Array(n);\n\n  for (let i = 0, x = -1; i < n; i++) v[i] = x += 1 + next();\n\n  return v;\n}\n\nfunction read_deltas(n, next) {\n  let v = Array(n);\n\n  for (let i = 0, x = 0; i < n; i++) v[i] = x += signed(next());\n\n  return v;\n}\n\nexport function read_member_array(next, lookup) {\n  let v = read_ascending(next(), next);\n  let n = next();\n  let vX = read_ascending(n, next);\n  let vN = read_counts(n, next);\n\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < vN[i]; j++) {\n      v.push(vX[i] + j);\n    }\n  }\n\n  return lookup ? v.map(x => lookup[x]) : v;\n} // returns array of \n// [x, ys] => single replacement rule\n// [x, ys, n, dx, dx] => linear map\n\nexport function read_mapped_map(next) {\n  let ret = [];\n\n  while (true) {\n    let w = next();\n    if (w == 0) break;\n    ret.push(read_linear_table(w, next));\n  }\n\n  while (true) {\n    let w = next() - 1;\n    if (w < 0) break;\n    ret.push(read_replacement_table(w, next));\n  }\n\n  return fromEntries(flat(ret));\n}\nexport function read_zero_terminated_array(next) {\n  let v = [];\n\n  while (true) {\n    let i = next();\n    if (i == 0) break;\n    v.push(i);\n  }\n\n  return v;\n}\n\nfunction read_transposed(n, w, next) {\n  let m = Array(n).fill(undefined).map(() => []);\n\n  for (let i = 0; i < w; i++) {\n    read_deltas(n, next).forEach((x, j) => m[j].push(x));\n  }\n\n  return m;\n}\n\nfunction read_linear_table(w, next) {\n  let dx = 1 + next();\n  let dy = next();\n  let vN = read_zero_terminated_array(next);\n  let m = read_transposed(vN.length, 1 + w, next);\n  return flat(m.map((v, i) => {\n    const x = v[0],\n          ys = v.slice(1); //let [x, ...ys] = v;\n    //return Array(vN[i]).fill().map((_, j) => {\n\n    return Array(vN[i]).fill(undefined).map((_, j) => {\n      let j_dy = j * dy;\n      return [x + j * dx, ys.map(y => y + j_dy)];\n    });\n  }));\n}\n\nfunction read_replacement_table(w, next) {\n  let n = 1 + next();\n  let m = read_transposed(n, 1 + w, next);\n  return m.map(v => [v[0], v.slice(1)]);\n}\n\nexport function read_emoji_trie(next) {\n  let sorted = read_member_array(next).sort((a, b) => a - b);\n  return read();\n\n  function read() {\n    let branches = [];\n\n    while (true) {\n      let keys = read_member_array(next, sorted);\n      if (keys.length == 0) break;\n      branches.push({\n        set: new Set(keys),\n        node: read()\n      });\n    }\n\n    branches.sort((a, b) => b.set.size - a.set.size); // sort by likelihood\n\n    let temp = next();\n    let valid = temp % 3;\n    temp = temp / 3 | 0;\n    let fe0f = !!(temp & 1);\n    temp >>= 1;\n    let save = temp == 1;\n    let check = temp == 2;\n    return {\n      branches,\n      valid,\n      fe0f,\n      save,\n      check\n    };\n  }\n}","map":{"version":3,"sources":["../../src.ts/ens-normalize/decoder.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2BG;AAKH;AACA,SAAS,IAAT,CAAc,KAAd,EAAiC,KAAjC,EAA+C;EAC3C,IAAI,KAAK,IAAI,IAAb,EAAmB;IAAE,KAAK,GAAG,CAAR;EAAY;;EACjC,MAAM,MAAM,GAAe,EAA3B;EAEA,MAAM,OAAO,GAAG,MAAM,CAAC,OAAvB;;EAEA,MAAM,QAAQ,GAAG,UAAU,GAAV,EAA2B,KAA3B,EAAwC;IACrD,OAAO,CAAC,IAAR,CAAa,GAAb,EAAkB,UAAU,GAAV,EAAkB;MAChC,IAAI,KAAK,GAAG,CAAR,IAAa,KAAK,CAAC,OAAN,CAAc,GAAd,CAAjB,EAAqC;QACjC,QAAQ,CAAC,GAAD,EAAM,KAAK,GAAG,CAAd,CAAR;MACH,CAFD,MAEO;QACJ,MAAM,CAAC,IAAP,CAAY,GAAZ;MACF;IACJ,CAND;EAOH,CARD;;EAUA,QAAQ,CAAC,KAAD,EAAQ,KAAR,CAAR;EACA,OAAO,MAAP;AACH;;AAED,SAAS,WAAT,CAA6F,KAA7F,EAAiH;EAC7G,MAAM,MAAM,GAA+B,EAA3C;;EACA,KAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,KAAK,CAAC,MAA1B,EAAkC,CAAC,EAAnC,EAAuC;IACnC,MAAM,KAAK,GAAG,KAAK,CAAC,CAAD,CAAnB;IACA,MAAM,CAAC,KAAK,CAAC,CAAD,CAAN,CAAN,GAAmB,KAAK,CAAC,CAAD,CAAxB;EACH;;EACD,OAAO,MAAP;AACH;;AAED,OAAM,SAAU,iBAAV,CAA4B,KAA5B,EAA0C;EAC/C,IAAI,GAAG,GAAG,CAAV;;EACA,SAAS,GAAT,GAAY;IAAK,OAAQ,KAAK,CAAC,GAAG,EAAJ,CAAL,IAAgB,CAAjB,GAAsB,KAAK,CAAC,GAAG,EAAJ,CAAlC;EAA4C,CAFd,CAI/C;;;EACA,IAAI,YAAY,GAAG,GAAG,EAAtB;EACA,IAAI,KAAK,GAAG,CAAZ;EACA,IAAI,GAAG,GAAG,CAAC,CAAD,EAAI,CAAJ,CAAV,CAP+C,CAO7B;;EAClB,KAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,YAApB,EAAkC,CAAC,EAAnC,EAAuC;IACtC,GAAG,CAAC,IAAJ,CAAS,KAAK,IAAI,GAAG,EAArB;EACA,CAV8C,CAY/C;;;EACA,IAAI,IAAI,GAAG,GAAG,EAAd;EACA,IAAI,WAAW,GAAG,GAAlB;EACA,GAAG,IAAI,IAAP;EAEA,IAAI,UAAU,GAAG,CAAjB;EACA,IAAI,WAAW,GAAG,CAAlB;;EACA,SAAS,QAAT,GAAiB;IAChB,IAAI,UAAU,IAAI,CAAlB,EAAqB;MACpB;MACA;MACA,WAAW,GAAI,WAAW,IAAI,CAAhB,GAAqB,KAAK,CAAC,GAAG,EAAJ,CAAxC;MACA,UAAU,GAAG,CAAb;IACA;;IACD,OAAQ,WAAW,IAAI,EAAE,UAAlB,GAAgC,CAAvC;EACA;;EAED,MAAM,CAAC,GAAG,EAAV;EACA,MAAM,IAAI,GAAG,IAAA,CAAA,GAAA,CAAA,CAAA,EAAG,CAAH,CAAb;EACA,MAAM,IAAI,GAAG,IAAI,KAAK,CAAtB;EACA,MAAM,IAAI,GAAG,IAAI,IAAI,CAArB;EACA,MAAM,IAAI,GAAG,IAAI,GAAG,CAApB,CAjC+C,CAmC/C;;EACA,IAAI,QAAQ,GAAG,CAAf;;EACA,KAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,CAApB,EAAuB,CAAC,EAAxB,EAA4B,QAAQ,GAAI,QAAQ,IAAI,CAAb,GAAkB,QAAQ,EAArC;;EAE5B,IAAI,OAAO,GAAG,EAAd;EACA,IAAI,GAAG,GAAG,CAAV;EACA,IAAI,KAAK,GAAG,IAAZ,CAzC+C,CAyC7B;;EAClB,OAAO,IAAP,EAAa;IACZ,IAAI,KAAK,GAAG,IAAI,CAAC,KAAL,CAAW,CAAE,CAAC,QAAQ,GAAG,GAAX,GAAiB,CAAlB,IAAuB,KAAxB,GAAiC,CAAlC,IAAuC,KAAlD,CAAZ;IACA,IAAI,KAAK,GAAG,CAAZ;IACA,IAAI,GAAG,GAAG,YAAV;;IACA,OAAO,GAAG,GAAG,KAAN,GAAc,CAArB,EAAwB;MAAE;MACzB,IAAI,GAAG,GAAI,KAAK,GAAG,GAAT,KAAkB,CAA5B;;MACA,IAAI,KAAK,GAAG,GAAG,CAAC,GAAD,CAAf,EAAsB;QACrB,GAAG,GAAG,GAAN;MACA,CAFD,MAEO;QACN,KAAK,GAAG,GAAR;MACA;IACD;;IACD,IAAI,KAAK,IAAI,CAAb,EAAgB,MAZJ,CAYW;;IACvB,OAAO,CAAC,IAAR,CAAa,KAAb;IACA,IAAI,CAAC,GAAG,GAAG,GAAG,IAAI,CAAC,KAAL,CAAW,KAAK,GAAG,GAAG,CAAC,KAAD,CAAX,GAAuB,KAAlC,CAAd;IACA,IAAI,CAAC,GAAG,GAAG,GAAG,IAAI,CAAC,KAAL,CAAW,KAAK,GAAG,GAAG,CAAC,KAAK,GAAC,CAAP,CAAX,GAAuB,KAAlC,CAAN,GAAiD,CAAzD;;IACA,OAAO,CAAC,CAAC,CAAC,GAAG,CAAL,IAAU,IAAX,KAAoB,CAA3B,EAA8B;MAC7B,QAAQ,GAAI,QAAQ,IAAI,CAAb,GAAkB,IAAlB,GAAyB,QAAQ,EAA5C;MACA,CAAC,GAAI,CAAC,IAAI,CAAN,GAAW,IAAf;MACA,CAAC,GAAI,CAAC,IAAI,CAAN,GAAW,IAAX,GAAkB,CAAtB;IACA;;IACD,OAAO,CAAC,GAAG,CAAC,CAAL,GAAS,IAAhB,EAAsB;MACrB,QAAQ,GAAI,QAAQ,GAAG,IAAZ,GAAsB,QAAQ,IAAI,CAAb,GAAmB,IAAI,KAAK,CAAjD,GAAuD,QAAQ,EAA1E;MACA,CAAC,GAAI,CAAC,IAAI,CAAN,GAAW,IAAf;MACA,CAAC,GAAI,CAAC,CAAC,GAAG,IAAL,KAAc,CAAf,GAAoB,IAApB,GAA2B,CAA/B;IACA;;IACD,GAAG,GAAG,CAAN;IACA,KAAK,GAAG,IAAI,CAAJ,GAAQ,CAAhB;EACA;;EACD,IAAI,MAAM,GAAG,YAAY,GAAG,CAA5B;EACA,OAAO,OAAO,CAAC,GAAR,CAAY,CAAC,IAAG;IACtB,QAAQ,CAAC,GAAG,MAAZ;MACC,KAAK,CAAL;QAAQ,OAAO,MAAM,GAAG,OAAT,IAAqB,KAAK,CAAC,WAAW,EAAZ,CAAL,IAAwB,EAAzB,GAAgC,KAAK,CAAC,WAAW,EAAZ,CAAL,IAAwB,CAAxD,GAA6D,KAAK,CAAC,WAAW,EAAZ,CAAtF,CAAP;;MACR,KAAK,CAAL;QAAQ,OAAO,MAAM,GAAG,KAAT,IAAmB,KAAK,CAAC,WAAW,EAAZ,CAAL,IAAwB,CAAzB,GAA8B,KAAK,CAAC,WAAW,EAAZ,CAArD,CAAP;;MACR,KAAK,CAAL;QAAQ,OAAO,MAAM,GAAG,KAAK,CAAC,WAAW,EAAZ,CAArB;;MACR;QAAS,OAAO,CAAC,GAAG,CAAX;IAJV;EAMA,CAPM,CAAP;AAQA,C,CAGD;;AACA,OAAM,SAAU,YAAV,CAAuB,CAAvB,EAAiC;EACtC,IAAI,GAAG,GAAG,CAAV;EACA,OAAO,MAAM,CAAC,CAAC,GAAG,EAAJ,CAAd;AACA;AACD,OAAM,SAAU,uBAAV,CAAkC,KAAlC,EAAgD;EACrD,OAAO,YAAY,CAAC,iBAAiB,CAAC,KAAD,CAAlB,CAAnB;AACA,C,CAED;;AACA,OAAM,SAAU,MAAV,CAAiB,CAAjB,EAA0B;EAC/B,OAAQ,CAAC,GAAG,CAAL,GAAW,CAAC,CAAD,IAAM,CAAjB,GAAuB,CAAC,IAAI,CAAnC;AACA;;AAED,SAAS,WAAT,CAAqB,CAArB,EAAgC,IAAhC,EAA8C;EAC7C,IAAI,CAAC,GAAG,KAAK,CAAC,CAAD,CAAb;;EACA,KAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,CAApB,EAAuB,CAAC,EAAxB,EAA4B,CAAC,CAAC,CAAD,CAAD,GAAO,IAAI,IAAI,EAAf;;EAC5B,OAAO,CAAP;AACA;;AAED,SAAS,cAAT,CAAwB,CAAxB,EAAmC,IAAnC,EAAiD;EAChD,IAAI,CAAC,GAAG,KAAK,CAAC,CAAD,CAAb;;EACA,KAAK,IAAI,CAAC,GAAG,CAAR,EAAW,CAAC,GAAG,CAAC,CAArB,EAAwB,CAAC,GAAG,CAA5B,EAA+B,CAAC,EAAhC,EAAoC,CAAC,CAAC,CAAD,CAAD,GAAO,CAAC,IAAI,IAAI,IAAI,EAApB;;EACpC,OAAO,CAAP;AACA;;AAED,SAAS,WAAT,CAAqB,CAArB,EAAgC,IAAhC,EAA8C;EAC7C,IAAI,CAAC,GAAG,KAAK,CAAC,CAAD,CAAb;;EACA,KAAK,IAAI,CAAC,GAAG,CAAR,EAAW,CAAC,GAAG,CAApB,EAAuB,CAAC,GAAG,CAA3B,EAA8B,CAAC,EAA/B,EAAmC,CAAC,CAAC,CAAD,CAAD,GAAO,CAAC,IAAI,MAAM,CAAC,IAAI,EAAL,CAAlB;;EACnC,OAAO,CAAP;AACA;;AAED,OAAM,SAAU,iBAAV,CAA4B,IAA5B,EAA4C,MAA5C,EAA2E;EAC7E,IAAI,CAAC,GAAG,cAAc,CAAC,IAAI,EAAL,EAAS,IAAT,CAAtB;EACA,IAAI,CAAC,GAAG,IAAI,EAAZ;EACA,IAAI,EAAE,GAAG,cAAc,CAAC,CAAD,EAAI,IAAJ,CAAvB;EACA,IAAI,EAAE,GAAG,WAAW,CAAC,CAAD,EAAI,IAAJ,CAApB;;EACA,KAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,CAApB,EAAuB,CAAC,EAAxB,EAA4B;IACxB,KAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,EAAE,CAAC,CAAD,CAAtB,EAA2B,CAAC,EAA5B,EAAgC;MAC5B,CAAC,CAAC,IAAF,CAAO,EAAE,CAAC,CAAD,CAAF,GAAQ,CAAf;IACH;EACJ;;EACD,OAAO,MAAM,GAAG,CAAC,CAAC,GAAF,CAAM,CAAC,IAAI,MAAM,CAAC,CAAD,CAAjB,CAAH,GAA2B,CAAxC;AACH,C,CAED;AACA;AACA;;AACA,OAAM,SAAU,eAAV,CAA0B,IAA1B,EAAwC;EAC7C,IAAI,GAAG,GAAG,EAAV;;EACA,OAAO,IAAP,EAAa;IACZ,IAAI,CAAC,GAAG,IAAI,EAAZ;IACA,IAAI,CAAC,IAAI,CAAT,EAAY;IACZ,GAAG,CAAC,IAAJ,CAAS,iBAAiB,CAAC,CAAD,EAAI,IAAJ,CAA1B;EACA;;EACD,OAAO,IAAP,EAAa;IACZ,IAAI,CAAC,GAAG,IAAI,KAAK,CAAjB;IACA,IAAI,CAAC,GAAG,CAAR,EAAW;IACX,GAAG,CAAC,IAAJ,CAAS,sBAAsB,CAAC,CAAD,EAAI,IAAJ,CAA/B;EACA;;EACD,OAAO,WAAW,CAAwB,IAAI,CAAC,GAAD,CAA5B,CAAlB;AACA;AAED,OAAM,SAAU,0BAAV,CAAqC,IAArC,EAAmD;EACxD,IAAI,CAAC,GAAG,EAAR;;EACA,OAAO,IAAP,EAAa;IACZ,IAAI,CAAC,GAAG,IAAI,EAAZ;IACA,IAAI,CAAC,IAAI,CAAT,EAAY;IACZ,CAAC,CAAC,IAAF,CAAO,CAAP;EACA;;EACD,OAAO,CAAP;AACA;;AAED,SAAS,eAAT,CAAyB,CAAzB,EAAoC,CAApC,EAA+C,IAA/C,EAA6D;EACzD,IAAI,CAAC,GAAG,KAAK,CAAC,CAAD,CAAL,CAAS,IAAT,CAAc,SAAd,EAAyB,GAAzB,CAA6B,MAAM,EAAnC,CAAR;;EACA,KAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,CAApB,EAAuB,CAAC,EAAxB,EAA4B;IACxB,WAAW,CAAC,CAAD,EAAI,IAAJ,CAAX,CAAqB,OAArB,CAA6B,CAAC,CAAD,EAAI,CAAJ,KAAU,CAAC,CAAC,CAAD,CAAD,CAAK,IAAL,CAAU,CAAV,CAAvC;EACH;;EACD,OAAO,CAAP;AACH;;AAGD,SAAS,iBAAT,CAA2B,CAA3B,EAAsC,IAAtC,EAAoD;EACnD,IAAI,EAAE,GAAG,IAAI,IAAI,EAAjB;EACA,IAAI,EAAE,GAAG,IAAI,EAAb;EACA,IAAI,EAAE,GAAG,0BAA0B,CAAC,IAAD,CAAnC;EACA,IAAI,CAAC,GAAG,eAAe,CAAC,EAAE,CAAC,MAAJ,EAAY,IAAE,CAAd,EAAiB,IAAjB,CAAvB;EACA,OAAO,IAAI,CAAC,CAAC,CAAC,GAAF,CAAM,CAAC,CAAD,EAAI,CAAJ,KAAS;IACzB,MAAM,CAAC,GAAG,CAAC,CAAC,CAAD,CAAX;IAAA,MAAgB,EAAE,GAAG,CAAC,CAAC,KAAF,CAAQ,CAAR,CAArB,CADyB,CAE1B;IACA;;IACA,OAAO,KAAK,CAAC,EAAE,CAAC,CAAD,CAAH,CAAL,CAAa,IAAb,CAAkB,SAAlB,EAA6B,GAA7B,CAAiC,CAAC,CAAD,EAAI,CAAJ,KAAS;MAChD,IAAI,IAAI,GAAG,CAAC,GAAG,EAAf;MACA,OAAO,CAAC,CAAC,GAAG,CAAC,GAAG,EAAT,EAAa,EAAE,CAAC,GAAH,CAAO,CAAC,IAAI,CAAC,GAAG,IAAhB,CAAb,CAAP;IACA,CAHM,CAAP;EAIA,CARW,CAAD,CAAX;AASA;;AAED,SAAS,sBAAT,CAAgC,CAAhC,EAA2C,IAA3C,EAAyD;EACxD,IAAI,CAAC,GAAG,IAAI,IAAI,EAAhB;EACA,IAAI,CAAC,GAAG,eAAe,CAAC,CAAD,EAAI,IAAE,CAAN,EAAS,IAAT,CAAvB;EACA,OAAO,CAAC,CAAC,GAAF,CAAM,CAAC,IAAI,CAAC,CAAC,CAAC,CAAD,CAAF,EAAO,CAAC,CAAC,KAAF,CAAQ,CAAR,CAAP,CAAX,CAAP;AACA;;AAeD,OAAM,SAAU,eAAV,CAA0B,IAA1B,EAAwC;EAC7C,IAAI,MAAM,GAAG,iBAAiB,CAAC,IAAD,CAAjB,CAAwB,IAAxB,CAA6B,CAAC,CAAD,EAAI,CAAJ,KAAU,CAAC,GAAG,CAA3C,CAAb;EACA,OAAO,IAAI,EAAX;;EACA,SAAS,IAAT,GAAa;IACZ,IAAI,QAAQ,GAAG,EAAf;;IACA,OAAO,IAAP,EAAa;MACZ,IAAI,IAAI,GAAG,iBAAiB,CAAC,IAAD,EAAO,MAAP,CAA5B;MACA,IAAI,IAAI,CAAC,MAAL,IAAe,CAAnB,EAAsB;MACtB,QAAQ,CAAC,IAAT,CAAc;QAAC,GAAG,EAAE,IAAI,GAAJ,CAAQ,IAAR,CAAN;QAAqB,IAAI,EAAE,IAAI;MAA/B,CAAd;IACA;;IACC,QAAQ,CAAC,IAAT,CAAc,CAAC,CAAD,EAAI,CAAJ,KAAU,CAAC,CAAC,GAAF,CAAM,IAAN,GAAa,CAAC,CAAC,GAAF,CAAM,IAA3C,EAPU,CAOwC;;IACnD,IAAI,IAAI,GAAG,IAAI,EAAf;IACA,IAAI,KAAK,GAAG,IAAI,GAAG,CAAnB;IACA,IAAI,GAAI,IAAI,GAAG,CAAR,GAAW,CAAlB;IACA,IAAI,IAAI,GAAG,CAAC,EAAE,IAAI,GAAG,CAAT,CAAZ;IACA,IAAI,KAAK,CAAT;IACA,IAAI,IAAI,GAAG,IAAI,IAAI,CAAnB;IACA,IAAI,KAAK,GAAG,IAAI,IAAI,CAApB;IACA,OAAO;MAAC,QAAD;MAAW,KAAX;MAAkB,IAAlB;MAAwB,IAAxB;MAA8B;IAA9B,CAAP;EACD;AACD","sourceRoot":"","sourcesContent":["/**\n * MIT License\n *\n * Copyright (c) 2021 Andrew Raffensperger\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n *\n * This is a near carbon-copy of the original source (link below) with the\n * TypeScript typings added and a few tweaks to make it ES3-compatible.\n *\n * See: https://github.com/adraffy/ens-normalize.js\n */\n// https://github.com/behnammodi/polyfill/blob/master/array.polyfill.js\nfunction flat(array, depth) {\n    if (depth == null) {\n        depth = 1;\n    }\n    const result = [];\n    const forEach = result.forEach;\n    const flatDeep = function (arr, depth) {\n        forEach.call(arr, function (val) {\n            if (depth > 0 && Array.isArray(val)) {\n                flatDeep(val, depth - 1);\n            }\n            else {\n                result.push(val);\n            }\n        });\n    };\n    flatDeep(array, depth);\n    return result;\n}\nfunction fromEntries(array) {\n    const result = {};\n    for (let i = 0; i < array.length; i++) {\n        const value = array[i];\n        result[value[0]] = value[1];\n    }\n    return result;\n}\nexport function decode_arithmetic(bytes) {\n    let pos = 0;\n    function u16() { return (bytes[pos++] << 8) | bytes[pos++]; }\n    // decode the frequency table\n    let symbol_count = u16();\n    let total = 1;\n    let acc = [0, 1]; // first symbol has frequency 1\n    for (let i = 1; i < symbol_count; i++) {\n        acc.push(total += u16());\n    }\n    // skip the sized-payload that the last 3 symbols index into\n    let skip = u16();\n    let pos_payload = pos;\n    pos += skip;\n    let read_width = 0;\n    let read_buffer = 0;\n    function read_bit() {\n        if (read_width == 0) {\n            // this will read beyond end of buffer\n            // but (undefined|0) => zero pad\n            read_buffer = (read_buffer << 8) | bytes[pos++];\n            read_width = 8;\n        }\n        return (read_buffer >> --read_width) & 1;\n    }\n    const N = 31;\n    const FULL = Math.pow(2, N);\n    const HALF = FULL >>> 1;\n    const QRTR = HALF >> 1;\n    const MASK = FULL - 1;\n    // fill register\n    let register = 0;\n    for (let i = 0; i < N; i++)\n        register = (register << 1) | read_bit();\n    let symbols = [];\n    let low = 0;\n    let range = FULL; // treat like a float\n    while (true) {\n        let value = Math.floor((((register - low + 1) * total) - 1) / range);\n        let start = 0;\n        let end = symbol_count;\n        while (end - start > 1) { // binary search\n            let mid = (start + end) >>> 1;\n            if (value < acc[mid]) {\n                end = mid;\n            }\n            else {\n                start = mid;\n            }\n        }\n        if (start == 0)\n            break; // first symbol is end mark\n        symbols.push(start);\n        let a = low + Math.floor(range * acc[start] / total);\n        let b = low + Math.floor(range * acc[start + 1] / total) - 1;\n        while (((a ^ b) & HALF) == 0) {\n            register = (register << 1) & MASK | read_bit();\n            a = (a << 1) & MASK;\n            b = (b << 1) & MASK | 1;\n        }\n        while (a & ~b & QRTR) {\n            register = (register & HALF) | ((register << 1) & (MASK >>> 1)) | read_bit();\n            a = (a << 1) ^ HALF;\n            b = ((b ^ HALF) << 1) | HALF | 1;\n        }\n        low = a;\n        range = 1 + b - a;\n    }\n    let offset = symbol_count - 4;\n    return symbols.map(x => {\n        switch (x - offset) {\n            case 3: return offset + 0x10100 + ((bytes[pos_payload++] << 16) | (bytes[pos_payload++] << 8) | bytes[pos_payload++]);\n            case 2: return offset + 0x100 + ((bytes[pos_payload++] << 8) | bytes[pos_payload++]);\n            case 1: return offset + bytes[pos_payload++];\n            default: return x - 1;\n        }\n    });\n}\n// returns an iterator which returns the next symbol\nexport function read_payload(v) {\n    let pos = 0;\n    return () => v[pos++];\n}\nexport function read_compressed_payload(bytes) {\n    return read_payload(decode_arithmetic(bytes));\n}\n// eg. [0,1,2,3...] => [0,-1,1,-2,...]\nexport function signed(i) {\n    return (i & 1) ? (~i >> 1) : (i >> 1);\n}\nfunction read_counts(n, next) {\n    let v = Array(n);\n    for (let i = 0; i < n; i++)\n        v[i] = 1 + next();\n    return v;\n}\nfunction read_ascending(n, next) {\n    let v = Array(n);\n    for (let i = 0, x = -1; i < n; i++)\n        v[i] = x += 1 + next();\n    return v;\n}\nfunction read_deltas(n, next) {\n    let v = Array(n);\n    for (let i = 0, x = 0; i < n; i++)\n        v[i] = x += signed(next());\n    return v;\n}\nexport function read_member_array(next, lookup) {\n    let v = read_ascending(next(), next);\n    let n = next();\n    let vX = read_ascending(n, next);\n    let vN = read_counts(n, next);\n    for (let i = 0; i < n; i++) {\n        for (let j = 0; j < vN[i]; j++) {\n            v.push(vX[i] + j);\n        }\n    }\n    return lookup ? v.map(x => lookup[x]) : v;\n}\n// returns array of \n// [x, ys] => single replacement rule\n// [x, ys, n, dx, dx] => linear map\nexport function read_mapped_map(next) {\n    let ret = [];\n    while (true) {\n        let w = next();\n        if (w == 0)\n            break;\n        ret.push(read_linear_table(w, next));\n    }\n    while (true) {\n        let w = next() - 1;\n        if (w < 0)\n            break;\n        ret.push(read_replacement_table(w, next));\n    }\n    return fromEntries(flat(ret));\n}\nexport function read_zero_terminated_array(next) {\n    let v = [];\n    while (true) {\n        let i = next();\n        if (i == 0)\n            break;\n        v.push(i);\n    }\n    return v;\n}\nfunction read_transposed(n, w, next) {\n    let m = Array(n).fill(undefined).map(() => []);\n    for (let i = 0; i < w; i++) {\n        read_deltas(n, next).forEach((x, j) => m[j].push(x));\n    }\n    return m;\n}\nfunction read_linear_table(w, next) {\n    let dx = 1 + next();\n    let dy = next();\n    let vN = read_zero_terminated_array(next);\n    let m = read_transposed(vN.length, 1 + w, next);\n    return flat(m.map((v, i) => {\n        const x = v[0], ys = v.slice(1);\n        //let [x, ...ys] = v;\n        //return Array(vN[i]).fill().map((_, j) => {\n        return Array(vN[i]).fill(undefined).map((_, j) => {\n            let j_dy = j * dy;\n            return [x + j * dx, ys.map(y => y + j_dy)];\n        });\n    }));\n}\nfunction read_replacement_table(w, next) {\n    let n = 1 + next();\n    let m = read_transposed(n, 1 + w, next);\n    return m.map(v => [v[0], v.slice(1)]);\n}\nexport function read_emoji_trie(next) {\n    let sorted = read_member_array(next).sort((a, b) => a - b);\n    return read();\n    function read() {\n        let branches = [];\n        while (true) {\n            let keys = read_member_array(next, sorted);\n            if (keys.length == 0)\n                break;\n            branches.push({ set: new Set(keys), node: read() });\n        }\n        branches.sort((a, b) => b.set.size - a.set.size); // sort by likelihood\n        let temp = next();\n        let valid = temp % 3;\n        temp = (temp / 3) | 0;\n        let fe0f = !!(temp & 1);\n        temp >>= 1;\n        let save = temp == 1;\n        let check = temp == 2;\n        return { branches, valid, fe0f, save, check };\n    }\n}\n//# sourceMappingURL=decoder.js.map"]},"metadata":{},"sourceType":"module"}