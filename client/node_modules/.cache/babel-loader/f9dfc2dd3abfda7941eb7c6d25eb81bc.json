{"ast":null,"code":"\"use strict\";\n/* Sourced from 0x.js */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar utils_1 = require(\"@0xproject/utils\");\n\nvar BN = require(\"bn.js\");\n\nvar ethABI = require(\"ethereumjs-abi\");\n\nvar ethUtil = require(\"ethereumjs-util\");\n\nvar _ = require(\"lodash\");\n\nvar types_1 = require(\"../types\");\n\nexports.utils = {\n  /**\r\n   * Converts BigNumber instance to BN\r\n   * The only reason we convert to BN is to remain compatible with `ethABI. soliditySHA3` that\r\n   * expects values of Solidity type `uint` to be passed as type `BN`.\r\n   * We do not use BN anywhere else in the codebase.\r\n   */\n  bigNumberToBN: function (value) {\n    return new BN(value.toString(), 10);\n  },\n  consoleLog: function (message) {\n    // tslint:disable-next-line: no-console\n    console.log(message);\n  },\n  isParityNode: function (nodeVersion) {\n    return _.includes(nodeVersion, 'Parity');\n  },\n  isTestRpc: function (nodeVersion) {\n    return _.includes(nodeVersion, 'TestRPC');\n  },\n  spawnSwitchErr: function (name, value) {\n    return new Error(\"Unexpected switch value: \" + value + \" encountered for \" + name);\n  },\n  getAssetHashHex: function (assetHash, schema) {\n    var concat = schema + ':' + assetHash;\n    var hashBuf = ethABI.soliditySHA3(['string'], [concat]);\n    return ethUtil.bufferToHex(hashBuf);\n  },\n  getOrderHashHex: function (order) {\n    var orderParts = [{\n      value: order.exchange,\n      type: types_1.SolidityTypes.Address\n    }, {\n      value: order.maker,\n      type: types_1.SolidityTypes.Address\n    }, {\n      value: order.taker,\n      type: types_1.SolidityTypes.Address\n    }, {\n      value: exports.utils.bigNumberToBN(order.makerRelayerFee),\n      type: types_1.SolidityTypes.Uint256\n    }, {\n      value: exports.utils.bigNumberToBN(order.takerRelayerFee),\n      type: types_1.SolidityTypes.Uint256\n    }, {\n      value: exports.utils.bigNumberToBN(order.makerProtocolFee),\n      type: types_1.SolidityTypes.Uint256\n    }, {\n      value: exports.utils.bigNumberToBN(order.takerProtocolFee),\n      type: types_1.SolidityTypes.Uint256\n    }, {\n      value: order.feeRecipient,\n      type: types_1.SolidityTypes.Address\n    }, {\n      value: order.feeMethod,\n      type: types_1.SolidityTypes.Uint8\n    }, {\n      value: order.side,\n      type: types_1.SolidityTypes.Uint8\n    }, {\n      value: order.saleKind,\n      type: types_1.SolidityTypes.Uint8\n    }, {\n      value: order.target,\n      type: types_1.SolidityTypes.Address\n    }, {\n      value: order.howToCall,\n      type: types_1.SolidityTypes.Uint8\n    }, {\n      value: new Buffer(order.calldata.slice(2), 'hex'),\n      type: types_1.SolidityTypes.Bytes\n    }, {\n      value: new Buffer(order.replacementPattern.slice(2), 'hex'),\n      type: types_1.SolidityTypes.Bytes\n    }, {\n      value: order.staticTarget,\n      type: types_1.SolidityTypes.Address\n    }, {\n      value: new Buffer(order.staticExtradata.slice(2), 'hex'),\n      type: types_1.SolidityTypes.Bytes\n    }, {\n      value: order.paymentToken,\n      type: types_1.SolidityTypes.Address\n    }, {\n      value: exports.utils.bigNumberToBN(order.basePrice),\n      type: types_1.SolidityTypes.Uint256\n    }, {\n      value: exports.utils.bigNumberToBN(order.extra),\n      type: types_1.SolidityTypes.Uint256\n    }, {\n      value: exports.utils.bigNumberToBN(order.listingTime),\n      type: types_1.SolidityTypes.Uint256\n    }, {\n      value: exports.utils.bigNumberToBN(order.expirationTime),\n      type: types_1.SolidityTypes.Uint256\n    }, {\n      value: exports.utils.bigNumberToBN(order.salt),\n      type: types_1.SolidityTypes.Uint256\n    }];\n\n    var types = _.map(orderParts, function (o) {\n      return o.type;\n    });\n\n    var values = _.map(orderParts, function (o) {\n      return o.value;\n    });\n\n    var hash = ethABI.soliditySHA3(types, values);\n    return ethUtil.bufferToHex(hash);\n  },\n  getCurrentUnixTimestampSec: function () {\n    return new utils_1.BigNumber(Date.now() / 1000).round();\n  },\n  getCurrentUnixTimestampMs: function () {\n    return new utils_1.BigNumber(Date.now());\n  }\n};","map":{"version":3,"sources":["../../src/utils/utils.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\r\n/* Sourced from 0x.js */\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar utils_1 = require(\"@0xproject/utils\");\r\nvar BN = require(\"bn.js\");\r\nvar ethABI = require(\"ethereumjs-abi\");\r\nvar ethUtil = require(\"ethereumjs-util\");\r\nvar _ = require(\"lodash\");\r\nvar types_1 = require(\"../types\");\r\nexports.utils = {\r\n    /**\r\n     * Converts BigNumber instance to BN\r\n     * The only reason we convert to BN is to remain compatible with `ethABI. soliditySHA3` that\r\n     * expects values of Solidity type `uint` to be passed as type `BN`.\r\n     * We do not use BN anywhere else in the codebase.\r\n     */\r\n    bigNumberToBN: function (value) {\r\n        return new BN(value.toString(), 10);\r\n    },\r\n    consoleLog: function (message) {\r\n        // tslint:disable-next-line: no-console\r\n        console.log(message);\r\n    },\r\n    isParityNode: function (nodeVersion) {\r\n        return _.includes(nodeVersion, 'Parity');\r\n    },\r\n    isTestRpc: function (nodeVersion) {\r\n        return _.includes(nodeVersion, 'TestRPC');\r\n    },\r\n    spawnSwitchErr: function (name, value) {\r\n        return new Error(\"Unexpected switch value: \" + value + \" encountered for \" + name);\r\n    },\r\n    getAssetHashHex: function (assetHash, schema) {\r\n        var concat = schema + ':' + assetHash;\r\n        var hashBuf = ethABI.soliditySHA3(['string'], [concat]);\r\n        return ethUtil.bufferToHex(hashBuf);\r\n    },\r\n    getOrderHashHex: function (order) {\r\n        var orderParts = [\r\n            { value: order.exchange, type: types_1.SolidityTypes.Address },\r\n            { value: order.maker, type: types_1.SolidityTypes.Address },\r\n            { value: order.taker, type: types_1.SolidityTypes.Address },\r\n            { value: exports.utils.bigNumberToBN(order.makerRelayerFee), type: types_1.SolidityTypes.Uint256 },\r\n            { value: exports.utils.bigNumberToBN(order.takerRelayerFee), type: types_1.SolidityTypes.Uint256 },\r\n            { value: exports.utils.bigNumberToBN(order.makerProtocolFee), type: types_1.SolidityTypes.Uint256 },\r\n            { value: exports.utils.bigNumberToBN(order.takerProtocolFee), type: types_1.SolidityTypes.Uint256 },\r\n            { value: order.feeRecipient, type: types_1.SolidityTypes.Address },\r\n            { value: order.feeMethod, type: types_1.SolidityTypes.Uint8 },\r\n            { value: order.side, type: types_1.SolidityTypes.Uint8 },\r\n            { value: order.saleKind, type: types_1.SolidityTypes.Uint8 },\r\n            { value: order.target, type: types_1.SolidityTypes.Address },\r\n            { value: order.howToCall, type: types_1.SolidityTypes.Uint8 },\r\n            { value: new Buffer(order.calldata.slice(2), 'hex'), type: types_1.SolidityTypes.Bytes },\r\n            { value: new Buffer(order.replacementPattern.slice(2), 'hex'), type: types_1.SolidityTypes.Bytes },\r\n            { value: order.staticTarget, type: types_1.SolidityTypes.Address },\r\n            { value: new Buffer(order.staticExtradata.slice(2), 'hex'), type: types_1.SolidityTypes.Bytes },\r\n            { value: order.paymentToken, type: types_1.SolidityTypes.Address },\r\n            { value: exports.utils.bigNumberToBN(order.basePrice), type: types_1.SolidityTypes.Uint256 },\r\n            { value: exports.utils.bigNumberToBN(order.extra), type: types_1.SolidityTypes.Uint256 },\r\n            { value: exports.utils.bigNumberToBN(order.listingTime), type: types_1.SolidityTypes.Uint256 },\r\n            { value: exports.utils.bigNumberToBN(order.expirationTime), type: types_1.SolidityTypes.Uint256 },\r\n            { value: exports.utils.bigNumberToBN(order.salt), type: types_1.SolidityTypes.Uint256 },\r\n        ];\r\n        var types = _.map(orderParts, function (o) { return o.type; });\r\n        var values = _.map(orderParts, function (o) { return o.value; });\r\n        var hash = ethABI.soliditySHA3(types, values);\r\n        return ethUtil.bufferToHex(hash);\r\n    },\r\n    getCurrentUnixTimestampSec: function () {\r\n        return new utils_1.BigNumber(Date.now() / 1000).round();\r\n    },\r\n    getCurrentUnixTimestampMs: function () {\r\n        return new utils_1.BigNumber(Date.now());\r\n    },\r\n};\r\n//# sourceMappingURL=utils.js.map"]},"metadata":{},"sourceType":"script"}