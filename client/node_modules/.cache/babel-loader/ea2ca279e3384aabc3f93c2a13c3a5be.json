{"ast":null,"code":"import e, { useEffect as t, useRef as n, useState as r, useCallback as i } from \"react\";\nimport o from \"@babel/runtime/helpers/taggedTemplateLiteral\";\nimport a from \"@babel/runtime/helpers/extends\";\nimport { animated as l, useSpring as s, to as c, useSprings as g, config as u, useTransition as d } from \"@react-spring/web\";\nimport { useGesture as p } from \"react-use-gesture\";\nimport m from \"@babel/runtime/helpers/defineProperty\";\nimport h from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport f from \"styled-components\";\nimport v from \"react-dom\";\n\nconst y = e => {\n  var t;\n  let {\n    imageRef: n,\n    scale: r,\n    pinchDelta: i,\n    touchOrigin: [o, a],\n    currentTranslate: [l, s]\n  } = e;\n  if (null == n || !n.current) return [0, 0];\n  const {\n    height: c,\n    left: g,\n    top: u,\n    width: d\n  } = null === (t = n.current) || void 0 === t ? void 0 : t.getBoundingClientRect();\n  return [-((o - g - d / 2) / r) * i + l, -((a - u - c / 2) / r) * i + s];\n},\n      b = e => {\n  var t;\n  if (!e.current) return !1;\n  const {\n    bottom: n,\n    left: r,\n    right: i,\n    top: o\n  } = null === (t = e.current) || void 0 === t ? void 0 : t.getBoundingClientRect(),\n        {\n    innerHeight: a,\n    innerWidth: l\n  } = window;\n  return r > .5 * l || o > .5 * a || i < .5 * l || n < .5 * a;\n};\n\nvar w;\nconst x = [\"style\"];\n\nfunction O(e, t) {\n  var n = Object.keys(e);\n\n  if (Object.getOwnPropertySymbols) {\n    var r = Object.getOwnPropertySymbols(e);\n    t && (r = r.filter(function (t) {\n      return Object.getOwnPropertyDescriptor(e, t).enumerable;\n    })), n.push.apply(n, r);\n  }\n\n  return n;\n}\n\nfunction C(e) {\n  for (var t = 1; t < arguments.length; t++) {\n    var n = null != arguments[t] ? arguments[t] : {};\n    t % 2 ? O(Object(n), !0).forEach(function (t) {\n      m(e, t, n[t]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(n)) : O(Object(n)).forEach(function (t) {\n      Object.defineProperty(e, t, Object.getOwnPropertyDescriptor(n, t));\n    });\n  }\n\n  return e;\n}\n\nconst P = {\n  pinching: !1,\n  scale: 1,\n  translateX: 0,\n  translateY: 0\n},\n      E = i => {\n  let {\n    imgProps: {\n      style: o\n    },\n    inline: l,\n    isCurrentImage: g,\n    pagerHeight: u,\n    pagerIsDragging: d,\n    setDisableDrag: m,\n    singleClickToZoom: f\n  } = i,\n      v = h(i.imgProps, x);\n  const [w, O] = r(!1),\n        E = n(null),\n        [{\n    scale: k,\n    translateX: T,\n    translateY: j\n  }, N] = s(() => C(C({}, P), {}, {\n    onChange: (e, t) => {\n      (e.value.scale < 1 || !e.value.pinching) && t.start(P), e.value.scale > 1 && b(E) && t.start(P);\n    },\n    onRest: (e, t) => {\n      1 === e.value.scale && (t.start(P), m(!1));\n    }\n  }));\n  return t(() => {\n    g || 1 === k.get() || N.start(P);\n  }, [g, k, N]), p({\n    onDrag: e => {\n      let {\n        movement: [t, n],\n        pinching: r,\n        cancel: i,\n        first: o,\n        memo: a = {\n          initialTranslateX: 0,\n          initialTranslateY: 0\n        },\n        touches: l,\n        tap: s\n      } = e;\n      if (!(d || 1 === k.get() || s || (t && n && !w && O(!0), l > 1 || r || k.get() <= 1))) return k.get() > 1 && b(E) ? void i() : o ? {\n        initialTranslateX: T.get(),\n        initialTranslateY: j.get()\n      } : (N.start({\n        translateX: a.initialTranslateX + t,\n        translateY: a.initialTranslateY + n\n      }), a);\n    },\n    onDragEnd: e => {\n      let {\n        memo: t\n      } = e;\n      void 0 !== t && setTimeout(() => O(!1), 100);\n    },\n    onPinch: e => {\n      let {\n        movement: [t],\n        origin: [n, r],\n        event: i,\n        ctrlKey: o,\n        last: a,\n        cancel: l\n      } = e;\n      if (d) return;\n      if (m(!0), t && !w && O(!0), a) return void l();\n      const s = o ? 1e3 : 250,\n            c = k.get() + t / s,\n            g = c - k.get();\n      let u = [n, r];\n      \"clientX\" in i && \"clientY\" in i && o && (u = [i.clientX, i.clientY]);\n      const [p, h] = y({\n        currentTranslate: [T.get(), j.get()],\n        imageRef: E,\n        pinchDelta: g,\n        scale: k.get(),\n        touchOrigin: u\n      });\n      c < .5 ? N.start({\n        pinching: !0,\n        scale: .5\n      }) : c > 3 ? N.start({\n        pinching: !0,\n        scale: 3\n      }) : N.start({\n        pinching: !0,\n        scale: c,\n        translateX: p,\n        translateY: h\n      });\n    },\n    onPinchEnd: () => {\n      d || (k.get() > 1 ? m(!0) : N.start(P), setTimeout(() => O(!1), 100));\n    }\n  }, {\n    domTarget: E,\n    drag: {\n      filterTaps: !0\n    },\n    enabled: !l,\n    eventOptions: {\n      passive: !1\n    }\n  }), (e => {\n    let {\n      ref: n,\n      latency: r = 300,\n      enabled: i = !0,\n      onSingleClick: o = () => null,\n      onDoubleClick: a = () => null\n    } = e;\n    t(() => {\n      const e = n.current;\n      let t,\n          l = 0;\n\n      const s = e => {\n        i && (l += 1, t = setTimeout(() => {\n          1 === l ? o(e) : 2 === l && a(e), l = 0;\n        }, r));\n      };\n\n      return null == e || e.addEventListener(\"click\", s), () => {\n        null == e || e.removeEventListener(\"click\", s), t && clearTimeout(t);\n      };\n    });\n  })({\n    [f ? \"onSingleClick\" : \"onDoubleClick\"]: e => {\n      if (d || w) return void e.stopPropagation();\n      if (1 !== k.get()) return void N.start(P);\n      const {\n        clientX: t,\n        clientY: n\n      } = e,\n            r = k.get() + 1,\n            i = r - k.get(),\n            [o, a] = y({\n        currentTranslate: [T.get(), j.get()],\n        imageRef: E,\n        pinchDelta: i,\n        scale: k.get(),\n        touchOrigin: [t, n]\n      });\n      m(!0), N.start({\n        pinching: !0,\n        scale: r,\n        translateX: o,\n        translateY: a\n      });\n    },\n    enabled: !l,\n    latency: f ? 0 : 200,\n    ref: E\n  }), e.createElement(D, a({\n    $inline: l,\n    className: \"lightbox-image\",\n    draggable: \"false\",\n    onClick: e => {\n      e.stopPropagation(), e.nativeEvent.stopImmediatePropagation();\n    },\n    onDragStart: e => {\n      e.preventDefault();\n    },\n    ref: E,\n    style: C(C({}, o), {}, {\n      maxHeight: u,\n      transform: c([k, T, j], (e, t, n) => \"translate(\".concat(t, \"px, \").concat(n, \"px) scale(\").concat(e, \")\"))\n    }, g && {\n      willChange: \"transform\"\n    })\n  }, v));\n};\n\nE.displayName = \"Image\";\nconst D = f(l.img)(w || (w = o([\"\\n    width: auto;\\n    height: auto;\\n    max-width: 100%;\\n    user-select: none;\\n    touch-action: \", \";\\n    ::selection {\\n        background: none;\\n    }\\n\"])), e => {\n  let {\n    $inline: t\n  } = e;\n  return t ? \"pan-y\" : \"none\";\n});\nvar k, T, j, N, I;\n\nconst L = i => {\n  let {\n    currentIndex: o,\n    images: l,\n    imageStageHeight: s,\n    imageStageWidth: c,\n    inline: u,\n    onClose: d,\n    onNext: m,\n    onPrev: h,\n    renderImageOverlay: f,\n    singleClickToZoom: v\n  } = i;\n  const y = n(!0),\n        [b, w] = r(!1),\n        [x, O] = r(\"100%\"),\n        [C, P] = r(!1);\n  t(() => {\n    const e = u ? s : s - 50;\n    e !== x && O(e);\n  }, [u, x, s]);\n  const D = e.useCallback(function (e) {\n    let t = arguments.length > 1 && void 0 !== arguments[1] && arguments[1],\n        n = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : 0;\n    const r = (e - o) * c + (t ? n : 0);\n    return e < o - 1 || e > o + 1 ? {\n      display: \"none\",\n      x: r\n    } : {\n      display: \"flex\",\n      x: r\n    };\n  }, [o, c]),\n        [k, T] = g(l.length, e => D(e));\n  t(() => {\n    y.current ? y.current = !1 : T.start(e => D(e));\n  }, [o, D, T]);\n  const j = p({\n    onDrag: e => {\n      let {\n        down: t,\n        movement: [n],\n        direction: [r],\n        velocity: i,\n        distance: o,\n        cancel: a,\n        active: l,\n        touches: s,\n        tap: g\n      } = e;\n      if (b || 0 === n || g) return;\n      C || P(!0);\n      const u = Math.abs(r) > .7;\n\n      if ((t && u && o > c / 3.5 || t && u && i > 2) && l) {\n        const e = r > 0 ? -1 : 1;\n        return a(), void (e > 0 ? m() : e < 0 && h());\n      }\n\n      s > 1 ? a() : T.start(e => D(e, t, n));\n    },\n    onDragEnd: () => {\n      C && (T.start(e => D(e)), setTimeout(() => P(!1), 100));\n    },\n    onWheel: e => {\n      let {\n        velocity: t,\n        direction: [n, r],\n        ctrlKey: i\n      } = e;\n      if (i || b || 0 === t) return;\n      C || P(!0);\n\n      if (t > 1.1) {\n        const e = n + r > 0 ? -1 : 1;\n        e > 0 ? m() : e < 0 && h();\n      }\n    },\n    onWheelEnd: () => {\n      T.start(e => D(e)), setTimeout(() => P(!1), 100);\n    }\n  }, {\n    drag: {\n      filterTaps: !0\n    },\n    wheel: {\n      enabled: !u\n    }\n  });\n  return e.createElement(W, null, k.map((t, n) => {\n    let {\n      display: r,\n      x: i\n    } = t;\n    return e.createElement(S, a({\n      $inline: u\n    }, j(), {\n      className: \"lightbox-image-pager\",\n      key: n,\n      onClick: () => {\n        if (d) return Math.abs(i.get()) < 1 && !b && d();\n      },\n      role: \"presentation\",\n      style: {\n        display: r,\n        transform: i.to(e => \"translateX(\".concat(e, \"px)\"))\n      }\n    }), e.createElement(H, null, e.createElement(X, null, e.createElement(Y, {\n      $inline: u,\n      onClick: e => {\n        e.stopPropagation(), e.nativeEvent.stopImmediatePropagation();\n      }\n    }, e.createElement(E, {\n      imgProps: l[n],\n      inline: u,\n      isCurrentImage: n === o,\n      pagerHeight: x,\n      pagerIsDragging: C,\n      setDisableDrag: w,\n      singleClickToZoom: v\n    }), f()))));\n  }));\n};\n\nL.displayName = \"ImagePager\";\nconst W = f.div(k || (k = o([\"\\n    height: 100%;\\n    width: 100%;\\n\"]))),\n      X = f.div(T || (T = o([\"\\n    display: flex;\\n    justify-content: center;\\n    align-items: center;\\n\"]))),\n      H = f.div(j || (j = o([\"\\n    width: 100%;\\n    display: flex;\\n    justify-content: center;\\n\"]))),\n      S = f(l.div)(N || (N = o([\"\\n    position: absolute;\\n    top: 0px;\\n    left: 0px;\\n    right: 0px;\\n    bottom: 0px;\\n    height: 100%;\\n    width: 100%;\\n    will-change: transform;\\n    touch-action: \", \";\\n    display: flex;\\n    flex-direction: column;\\n    justify-content: center;\\n    align-items: center;\\n\"])), e => {\n  let {\n    $inline: t\n  } = e;\n  return t ? \"pan-y\" : \"none\";\n}),\n      Y = f.div(I || (I = o([\"\\n    position: relative;\\n    touch-action: \", \";\\n    user-select: none;\\n    display: flex;\\n    justify-content: center;\\n    width: 100%;\\n\"])), e => {\n  let {\n    $inline: t\n  } = e;\n  return t ? \"pan-y\" : \"none\";\n});\nvar B;\n\nconst R = o => {\n  let {\n    className: a = \"\",\n    currentIndex: l,\n    images: s,\n    inline: c,\n    onClose: g,\n    onNext: u,\n    onPrev: d,\n    renderImageOverlay: p,\n    renderNextButton: m,\n    renderPrevButton: h,\n    singleClickToZoom: f\n  } = o;\n\n  const v = l > 0,\n        y = l + 1 < s.length,\n        b = y ? u : () => null,\n        w = v ? d : () => null,\n        [{\n    height: x,\n    width: O\n  }, C] = (() => {\n    var e, o;\n    const a = n(null),\n          [l, s] = r(null),\n          [c, g] = r({\n      height: (null === (e = a.current) || void 0 === e ? void 0 : e.clientHeight) || 0,\n      width: (null === (o = a.current) || void 0 === o ? void 0 : o.clientWidth) || 0\n    }),\n          u = i(e => {\n      null !== e && (s(e), g({\n        height: e.clientHeight,\n        width: e.clientWidth\n      }));\n    }, []);\n    return t(() => {\n      const e = () => {\n        if (l) {\n          const e = l.clientHeight,\n                t = l.clientWidth;\n          e === c.height && t === c.width || g({\n            height: e,\n            width: t\n          });\n        }\n      };\n\n      return window.addEventListener(\"resize\", e), window.addEventListener(\"orientationchange\", e), () => {\n        window.removeEventListener(\"resize\", e), window.removeEventListener(\"orientationchange\", e);\n      };\n    }, [l, c.height, c.width]), [c, u];\n  })();\n\n  return e.createElement(Z, {\n    className: a,\n    \"data-testid\": \"lightbox-image-stage\",\n    ref: C\n  }, h({\n    canPrev: v\n  }), O && e.createElement(L, {\n    currentIndex: l,\n    images: s,\n    imageStageHeight: x,\n    imageStageWidth: O,\n    inline: c,\n    onClose: g,\n    onNext: b,\n    onPrev: w,\n    renderImageOverlay: p,\n    singleClickToZoom: f\n  }), m({\n    canNext: y\n  }));\n},\n      Z = f.div(B || (B = o([\"\\n    position: relative;\\n    height: 100%;\\n    width: 100%;\\n    display: flex;\\n    justify-content: center;\\n    align-items: center;\\n\"])));\n\nvar $;\n\nfunction A(e, t) {\n  var n = Object.keys(e);\n\n  if (Object.getOwnPropertySymbols) {\n    var r = Object.getOwnPropertySymbols(e);\n    t && (r = r.filter(function (t) {\n      return Object.getOwnPropertyDescriptor(e, t).enumerable;\n    })), n.push.apply(n, r);\n  }\n\n  return n;\n}\n\nfunction U(e) {\n  for (var t = 1; t < arguments.length; t++) {\n    var n = null != arguments[t] ? arguments[t] : {};\n    t % 2 ? A(Object(n), !0).forEach(function (t) {\n      m(e, t, n[t]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(n)) : A(Object(n)).forEach(function (t) {\n      Object.defineProperty(e, t, Object.getOwnPropertyDescriptor(n, t));\n    });\n  }\n\n  return e;\n}\n\nconst z = t => {\n  let {\n    children: n,\n    className: r,\n    isOpen: i,\n    pageTransitionConfig: o,\n    style: a\n  } = t;\n  const l = {\n    config: U(U({}, u.default), {}, {\n      friction: 32,\n      mass: 1,\n      tension: 320\n    }),\n    enter: {\n      opacity: 1,\n      transform: \"scale(1)\"\n    },\n    from: {\n      opacity: 0,\n      transform: \"scale(0.75)\"\n    },\n    leave: {\n      opacity: 0,\n      transform: \"scale(0.75)\"\n    }\n  },\n        s = d(i, U(U({}, l), o));\n  return e.createElement(e.Fragment, null, s((t, i) => i && e.createElement(F, {\n    className: \"lightbox-container\".concat(r ? \" \".concat(r) : \"\"),\n    \"data-testid\": \"lightbox-container\",\n    style: U(U({}, t), a)\n  }, n)));\n},\n      F = f(l.div)($ || ($ = o([\"\\n    display: flex;\\n    flex-direction: column;\\n    position: fixed;\\n    z-index: 400;\\n    top: 0;\\n    bottom: 0;\\n    left: 0;\\n    right: 0;\\n\"])));\n\nclass M extends e.Component {\n  constructor() {\n    super(...arguments), m(this, \"portalContainer\", void 0), m(this, \"body\", void 0), m(this, \"preventWheel\", e => e.preventDefault());\n  }\n\n  componentDidMount() {\n    this.body = document.body, this.portalContainer = document.createElement(\"div\"), this.portalContainer.setAttribute(\"class\", \"lightbox-portal\"), this.body.appendChild(this.portalContainer), this.forceUpdate(), this.portalContainer.addEventListener(\"wheel\", this.preventWheel);\n  }\n\n  componentWillUnmount() {\n    this.portalContainer.removeEventListener(\"wheel\", this.preventWheel), this.body.removeChild(this.portalContainer);\n  }\n\n  render() {\n    if (void 0 === this.portalContainer) return null;\n    const {\n      children: t\n    } = this.props;\n    return e.createElement(e.Fragment, null, v.createPortal(t, this.portalContainer));\n  }\n\n}\n\nconst K = n => {\n  let {\n    isOpen: r,\n    onClose: i,\n    inline: o = !1,\n    images: a = [],\n    currentIndex: l,\n    onPrev: s,\n    onNext: c,\n    renderHeader: g = () => null,\n    renderFooter: u = () => null,\n    renderPrevButton: d = () => null,\n    renderNextButton: p = () => null,\n    renderImageOverlay: m = () => null,\n    className: h = \"\",\n    singleClickToZoom: f = !1,\n    style: v = {},\n    pageTransitionConfig: y = null\n  } = n;\n  t(() => {\n    const e = e => {\n      r && [\"ArrowUp\", \"ArrowDown\", \"End\", \"Home\", \"PageUp\", \"PageDown\"].includes(e.key) && e.preventDefault();\n    },\n          t = e => {\n      if (r) switch (e.key) {\n        case \"ArrowLeft\":\n          s();\n          break;\n\n        case \"ArrowRight\":\n          c();\n          break;\n\n        case \"Escape\":\n          i && i();\n          break;\n\n        default:\n          e.preventDefault();\n      }\n    };\n\n    return document.addEventListener(\"keyup\", t), document.addEventListener(\"keydown\", e), () => {\n      document.removeEventListener(\"keyup\", t), document.removeEventListener(\"keydown\", e);\n    };\n  });\n  const b = e.createElement(R, {\n    currentIndex: l,\n    images: a,\n    inline: o,\n    onClose: i,\n    onNext: c,\n    onPrev: s,\n    renderImageOverlay: m,\n    renderNextButton: p,\n    renderPrevButton: d,\n    singleClickToZoom: f\n  });\n  return o ? b : e.createElement(M, null, e.createElement(z, {\n    className: h,\n    isOpen: r,\n    pageTransitionConfig: y,\n    style: v\n  }, g(), b, u()));\n};\n\nexport { K as default };","map":{"version":3,"sources":["../src/components/ImageStage/utils/getTranslateOffsetsFromScale.ts","../src/components/ImageStage/utils/imageIsOutOfBounds.ts","../src/components/ImageStage/components/Image/index.tsx","../src/components/ImageStage/utils/useDoubleClick.tsx","../src/components/ImageStage/components/ImagePager/index.tsx","../src/components/ImageStage/index.tsx","../src/components/ImageStage/utils/useRefSize.tsx","../src/components/PageContainer/index.tsx","../src/components/CreatePortal/index.tsx","../src/index.tsx"],"names":["getTranslateOffsetsFromScale","_ref","imageRef","scale","pinchDelta","touchOrigin","touchOriginX","touchOriginY","currentTranslate","translateX","translateY","current","height","imageHeight","left","imageTopLeftX","top","imageTopLeftY","width","imageWidth","getBoundingClientRect","imageIsOutOfBounds","_imageRef$current","bottom","bottomRightY","topLeftX","right","bottomRightX","topLeftY","innerHeight","windowHeight","innerWidth","windowWidth","window","defaultImageTransform","pinching","Image","inline","imgProps","style","imgStyleProp","restImgProps","isCurrentImage","pagerHeight","pagerIsDragging","setDisableDrag","singleClickToZoom","isPanningImage","setIsPanningImage","useState","useRef","springApi","useSpring","onChange","result","instance","value","start","onRest","useEffect","get","useGesture","onDrag","_ref2","movement","xMovement","yMovement","cancel","first","memo","initialTranslateX","initialTranslateY","touches","tap","onDragEnd","_ref3","undefined","setTimeout","onPinch","_ref4","event","origin","ctrlKey","last","SCALE_FACTOR","pinchScale","clientX","clientY","newTranslateX","newTranslateY","onPinchEnd","domTarget","drag","filterTaps","enabled","eventOptions","passive","useDoubleClick","e","stopPropagation","latency","ref","React","AnimatedImage","$inline","className","draggable","onClick","nativeEvent","onDragStart","maxHeight","transform","to","s","x","y","willChange","displayName","styled","animated","_templateObject","onSingleClick","onDoubleClick","clickRef","clickCount","timer","handleClick","addEventListener","removeEventListener","clearTimeout","ImagePager","currentIndex","images","imageStageHeight","imageStageWidth","onClose","onNext","onPrev","renderImageOverlay","firstRender","disableDrag","setPagerHeight","isDragging","setIsDragging","currPagerHeight","getPagePositions","useCallback","i","down","xDelta","display","pagerSprings","springsApi","useSprings","length","bind","direction","xDir","velocity","distance","active","isHorizontalDrag","Math","abs","goToIndex","onWheel","yDir","onWheelEnd","wheel","ImagePagerContainer","map","AnimatedImagePager","key","role","xInterp","PagerContentWrapper","PagerInnerContentWrapper","ImageContainer","div","_templateObject2","_templateObject3","_templateObject4","_templateObject5","ImageStage","renderNextButton","renderPrevButton","canPrev","canNext","onNextImage","onPrevImage","containerHeight","containerWidth","containerRef","useRefSize","ImageStageContainer","node","setNode","refSize","setRefSize","clientHeight","clientWidth","elementRef","handleResize","PageContainer","children","isOpen","pageTransitionConfig","defaultTransition","config","_objectSpread","default","friction","mass","tension","enter","opacity","from","leave","transitions","useTransition","animatedStyles","item","AnimatedPageContainer","CreatePortal","Component","constructor","componentDidMount","this","body","document","portalContainer","createElement","setAttribute","appendChild","forceUpdate","preventWheel","componentWillUnmount","removeChild","render","props","ReactDOM","createPortal","Lightbox","renderHeader","renderFooter","preventBackgroundScroll","includes","handleKeyboardInput","preventDefault","imageStage"],"mappings":"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","sourcesContent":["type IGetTranslateOffsetsFromScale = {\r\n    /** The current [x,y] translate values of image */\r\n    currentTranslate: [translateX: number, translateY: number];\r\n    /** The image dom node used as a reference to calculate translate offsets */\r\n    imageRef: React.RefObject<HTMLImageElement>;\r\n    /** The amount of change in the new transform scale */\r\n    pinchDelta: number;\r\n    /** The current transform scale of image */\r\n    scale: number;\r\n    /** The [x,y] coordinates of the zoom origin */\r\n    touchOrigin: [touchOriginX: number, touchOriginY: number];\r\n};\r\n\r\ntype ITranslateOffsetsReturnType = [translateX: number, translateY: number];\r\n\r\n/**\r\n * Calculates the the translate(x,y) coordinates needed to zoom-in\r\n * to a point in an image.\r\n *\r\n * @returns {array} The next [x,y] translate values to apply to image\r\n */\r\nconst getTranslateOffsetsFromScale = ({\r\n    imageRef,\r\n    scale,\r\n    pinchDelta,\r\n    touchOrigin: [touchOriginX, touchOriginY],\r\n    currentTranslate: [translateX, translateY],\r\n}: IGetTranslateOffsetsFromScale): ITranslateOffsetsReturnType => {\r\n    if (!imageRef?.current) {\r\n        return [0, 0];\r\n    }\r\n\r\n    const {\r\n        height: imageHeight,\r\n        left: imageTopLeftX,\r\n        top: imageTopLeftY,\r\n        width: imageWidth,\r\n    } = imageRef.current?.getBoundingClientRect();\r\n\r\n    // Get the (x,y) touch position relative to image origin at the current scale\r\n    const imageCoordX = (touchOriginX - imageTopLeftX - imageWidth / 2) / scale;\r\n    const imageCoordY =\r\n        (touchOriginY - imageTopLeftY - imageHeight / 2) / scale;\r\n\r\n    // Calculate translateX/Y offset at the next scale to zoom to touch position\r\n    const newTranslateX = -imageCoordX * pinchDelta + translateX;\r\n    const newTranslateY = -imageCoordY * pinchDelta + translateY;\r\n\r\n    return [newTranslateX, newTranslateY];\r\n};\r\n\r\nexport default getTranslateOffsetsFromScale;\r\n","/**\r\n * Determines if the provided image is within the viewport\r\n *\r\n * @returns True if image needs to be resized to fit viewport, otherwise false\r\n */\r\nconst imageIsOutOfBounds = (\r\n    imageRef: React.RefObject<HTMLImageElement>\r\n): boolean => {\r\n    // If no ref is provided, return false\r\n    if (!imageRef.current) {\r\n        return false;\r\n    }\r\n\r\n    const {\r\n        bottom: bottomRightY,\r\n        left: topLeftX,\r\n        right: bottomRightX,\r\n        top: topLeftY,\r\n    } = imageRef.current?.getBoundingClientRect();\r\n    const { innerHeight: windowHeight, innerWidth: windowWidth } = window;\r\n\r\n    if (\r\n        topLeftX > windowWidth * (1 / 2) ||\r\n        topLeftY > windowHeight * (1 / 2) ||\r\n        bottomRightX < windowWidth * (1 / 2) ||\r\n        bottomRightY < windowHeight * (1 / 2)\r\n    )\r\n        return true;\r\n\r\n    return false;\r\n};\r\n\r\nexport default imageIsOutOfBounds;\r\n","import { animated, to, useSpring } from '@react-spring/web';\r\nimport {\r\n    getTranslateOffsetsFromScale,\r\n    imageIsOutOfBounds,\r\n    useDoubleClick,\r\n} from '../../utils';\r\nimport { useGesture } from 'react-use-gesture';\r\nimport React, { useEffect, useRef, useState } from 'react';\r\nimport styled from 'styled-components';\r\nimport type { ImagesListItem } from '../../../../types/ImagesList';\r\n\r\nconst defaultImageTransform = {\r\n    pinching: false,\r\n    scale: 1,\r\n    translateX: 0,\r\n    translateY: 0,\r\n};\r\n\r\ntype IImageProps = {\r\n    /** Any valid <img /> props to pass to the lightbox img element ie src, alt, caption etc*/\r\n    imgProps: ImagesListItem;\r\n    /** Affects Width calculation method, depending on whether the Lightbox is Inline or not */\r\n    inline: boolean;\r\n    /** True if this image is currently shown in pager, otherwise false */\r\n    isCurrentImage: boolean;\r\n    /** Fixed height of the image stage, used to restrict maximum height of images */\r\n    pagerHeight: '100%' | number;\r\n    /** Indicates parent ImagePager is in a state of dragging, if true click to zoom is disabled */\r\n    pagerIsDragging: boolean;\r\n    /** Function that can be called to disable dragging in the pager */\r\n    setDisableDrag: (disable: boolean) => void;\r\n    /** Overrides the default behavior of double clicking causing an image zoom to a single click */\r\n    singleClickToZoom: boolean;\r\n};\r\n\r\n/**\r\n * Animates pinch-zoom + panning on image using spring physics\r\n */\r\nconst Image = ({\r\n    imgProps: { style: imgStyleProp, ...restImgProps },\r\n    inline,\r\n    isCurrentImage,\r\n    pagerHeight,\r\n    pagerIsDragging,\r\n    setDisableDrag,\r\n    singleClickToZoom,\r\n}: IImageProps) => {\r\n    const [isPanningImage, setIsPanningImage] = useState<boolean>(false);\r\n    const imageRef = useRef<HTMLImageElement>(null);\r\n\r\n    /**\r\n     * Animates scale and translate offsets of Image as they change in gestures\r\n     *\r\n     * @see https://www.react-spring.io/docs/hooks/use-spring\r\n     */\r\n    const [{ scale, translateX, translateY }, springApi] = useSpring(() => ({\r\n        ...defaultImageTransform,\r\n        onChange: (result, instance) => {\r\n            if (result.value.scale < 1 || !result.value.pinching) {\r\n                instance.start(defaultImageTransform);\r\n            }\r\n\r\n            if (result.value.scale > 1 && imageIsOutOfBounds(imageRef)) {\r\n                instance.start(defaultImageTransform);\r\n            }\r\n        },\r\n        // Enable dragging in ImagePager if image is at the default size\r\n        onRest: (result, instance) => {\r\n            if (result.value.scale === 1) {\r\n                instance.start(defaultImageTransform);\r\n                setDisableDrag(false);\r\n            }\r\n        },\r\n    }));\r\n\r\n    // Reset scale of this image when dragging to new image in ImagePager\r\n    useEffect(() => {\r\n        if (!isCurrentImage && scale.get() !== 1) {\r\n            springApi.start(defaultImageTransform);\r\n        }\r\n    }, [isCurrentImage, scale, springApi]);\r\n\r\n    /**\r\n     * Update Image scale and translate offsets during pinch/pan gestures\r\n     *\r\n     * @see https://github.com/react-spring/react-use-gesture#usegesture-hook-supporting-multiple-gestures-at-once\r\n     */\r\n    useGesture(\r\n        {\r\n            onDrag: ({\r\n                movement: [xMovement, yMovement],\r\n                pinching,\r\n                cancel,\r\n                first,\r\n                memo = { initialTranslateX: 0, initialTranslateY: 0 },\r\n                touches,\r\n                tap,\r\n            }) => {\r\n                if (pagerIsDragging || scale.get() === 1 || tap) {\r\n                    return;\r\n                }\r\n\r\n                // Disable click to zoom during drag\r\n                if (xMovement && yMovement && !isPanningImage) {\r\n                    setIsPanningImage(true);\r\n                }\r\n\r\n                if (touches > 1) {\r\n                    return;\r\n                }\r\n                if (pinching || scale.get() <= 1) {\r\n                    return;\r\n                }\r\n\r\n                // Prevent dragging image out of viewport\r\n                if (scale.get() > 1 && imageIsOutOfBounds(imageRef)) {\r\n                    cancel();\r\n                    return;\r\n                } else {\r\n                    if (first) {\r\n                        return {\r\n                            initialTranslateX: translateX.get(),\r\n                            initialTranslateY: translateY.get(),\r\n                        };\r\n                    }\r\n\r\n                    // Translate image from dragging\r\n                    springApi.start({\r\n                        translateX: memo.initialTranslateX + xMovement,\r\n                        translateY: memo.initialTranslateY + yMovement,\r\n                    });\r\n\r\n                    return memo;\r\n                }\r\n            },\r\n            onDragEnd: ({ memo }) => {\r\n                if (memo !== undefined) {\r\n                    // Add small timeout to prevent onClick handler from firing after drag\r\n                    setTimeout(() => setIsPanningImage(false), 100);\r\n                }\r\n            },\r\n            onPinch: ({\r\n                movement: [xMovement],\r\n                origin: [touchOriginX, touchOriginY],\r\n                event,\r\n                ctrlKey,\r\n                last,\r\n                cancel,\r\n            }) => {\r\n                if (pagerIsDragging) {\r\n                    return;\r\n                }\r\n\r\n                // Prevent ImagePager from registering isDragging\r\n                setDisableDrag(true);\r\n\r\n                // Disable click to zoom during pinch\r\n                if (xMovement && !isPanningImage) {\r\n                    setIsPanningImage(true);\r\n                }\r\n\r\n                // Don't calculate new translate offsets on final frame\r\n                if (last) {\r\n                    cancel();\r\n                    return;\r\n                }\r\n\r\n                // Speed up pinch zoom when using mouse versus touch\r\n                const SCALE_FACTOR = ctrlKey ? 1000 : 250;\r\n                const pinchScale = scale.get() + xMovement / SCALE_FACTOR;\r\n                const pinchDelta = pinchScale - scale.get();\r\n\r\n                /**\r\n                 * Calculate touch origin for pinch/zoom\r\n                 *\r\n                 * if event is a touch event (React.TouchEvent<Element>, TouchEvent or WebKitGestureEvent) use touchOriginX/Y\r\n                 * if event is a wheel event (React.WheelEvent<Element> or WheelEvent) use the mouse cursor's clientX/Y\r\n                 */\r\n                let touchOrigin: [touchOriginX: number, touchOriginY: number] =\r\n                    [touchOriginX, touchOriginY];\r\n                if ('clientX' in event && 'clientY' in event && ctrlKey) {\r\n                    touchOrigin = [event.clientX, event.clientY];\r\n                }\r\n\r\n                // Calculate the amount of x, y translate offset needed to\r\n                // zoom-in to point as image scale grows\r\n                const [newTranslateX, newTranslateY] =\r\n                    getTranslateOffsetsFromScale({\r\n                        currentTranslate: [translateX.get(), translateY.get()],\r\n                        imageRef,\r\n                        pinchDelta,\r\n                        scale: scale.get(),\r\n                        // Use the [x, y] coords of mouse if a trackpad or ctrl + wheel event\r\n                        // Otherwise use touch origin\r\n                        touchOrigin,\r\n                    });\r\n\r\n                // Restrict the amount of zoom between half and 3x image size\r\n                if (pinchScale < 0.5) {\r\n                    springApi.start({ pinching: true, scale: 0.5 });\r\n                } else if (pinchScale > 3.0) {\r\n                    springApi.start({ pinching: true, scale: 3.0 });\r\n                } else {\r\n                    springApi.start({\r\n                        pinching: true,\r\n                        scale: pinchScale,\r\n                        translateX: newTranslateX,\r\n                        translateY: newTranslateY,\r\n                    });\r\n                }\r\n            },\r\n            onPinchEnd: () => {\r\n                if (!pagerIsDragging) {\r\n                    if (scale.get() > 1) {\r\n                        setDisableDrag(true);\r\n                    } else {\r\n                        springApi.start(defaultImageTransform);\r\n                    }\r\n                    // Add small timeout to prevent onClick handler from firing after panning\r\n                    setTimeout(() => setIsPanningImage(false), 100);\r\n                }\r\n            },\r\n        },\r\n        /**\r\n         * useGesture config\r\n         * @see https://github.com/react-spring/react-use-gesture#usegesture-config\r\n         */\r\n        {\r\n            domTarget: imageRef as React.RefObject<EventTarget>,\r\n            drag: {\r\n                filterTaps: true,\r\n            },\r\n            enabled: !inline,\r\n            eventOptions: {\r\n                passive: false,\r\n            },\r\n        }\r\n    );\r\n\r\n    // Handle click/tap on image\r\n    useDoubleClick({\r\n        [singleClickToZoom ? 'onSingleClick' : 'onDoubleClick']: (\r\n            e: MouseEvent\r\n        ) => {\r\n            if (pagerIsDragging || isPanningImage) {\r\n                e.stopPropagation();\r\n                return;\r\n            }\r\n\r\n            // If tapped while already zoomed-in, zoom out to default scale\r\n            if (scale.get() !== 1) {\r\n                springApi.start(defaultImageTransform);\r\n                return;\r\n            }\r\n\r\n            // Zoom-in to origin of click on image\r\n            const { clientX: touchOriginX, clientY: touchOriginY } = e;\r\n            const pinchScale = scale.get() + 1;\r\n            const pinchDelta = pinchScale - scale.get();\r\n\r\n            // Calculate the amount of x, y translate offset needed to\r\n            // zoom-in to point as image scale grows\r\n            const [newTranslateX, newTranslateY] = getTranslateOffsetsFromScale(\r\n                {\r\n                    currentTranslate: [translateX.get(), translateY.get()],\r\n                    imageRef,\r\n                    pinchDelta,\r\n                    scale: scale.get(),\r\n                    touchOrigin: [touchOriginX, touchOriginY],\r\n                }\r\n            );\r\n\r\n            // Disable dragging in pager\r\n            setDisableDrag(true);\r\n            springApi.start({\r\n                pinching: true,\r\n                scale: pinchScale,\r\n                translateX: newTranslateX,\r\n                translateY: newTranslateY,\r\n            });\r\n        },\r\n        enabled: !inline,\r\n        latency: singleClickToZoom ? 0 : 200,\r\n        ref: imageRef,\r\n    });\r\n\r\n    return (\r\n        <AnimatedImage\r\n            $inline={inline}\r\n            className=\"lightbox-image\"\r\n            draggable=\"false\"\r\n            onClick={(e: React.MouseEvent<HTMLImageElement>) => {\r\n                // Don't close lighbox when clicking image\r\n                e.stopPropagation();\r\n                e.nativeEvent.stopImmediatePropagation();\r\n            }}\r\n            onDragStart={(e: React.DragEvent<HTMLImageElement>) => {\r\n                // Disable image ghost dragging in firefox\r\n                e.preventDefault();\r\n            }}\r\n            ref={imageRef}\r\n            style={{\r\n                ...imgStyleProp,\r\n                maxHeight: pagerHeight,\r\n                transform: to(\r\n                    [scale, translateX, translateY],\r\n                    (s, x, y) => `translate(${x}px, ${y}px) scale(${s})`\r\n                ),\r\n                ...(isCurrentImage && { willChange: 'transform' }),\r\n            }}\r\n            // Include any valid img html attributes provided in the <Lightbox /> images prop\r\n            {...(restImgProps as React.ComponentProps<typeof animated.img>)}\r\n        />\r\n    );\r\n};\r\n\r\nImage.displayName = 'Image';\r\n\r\nexport default Image;\r\n\r\nconst AnimatedImage = styled(animated.img)<{ $inline: boolean }>`\r\n    width: auto;\r\n    height: auto;\r\n    max-width: 100%;\r\n    user-select: none;\r\n    touch-action: ${({ $inline }) => (!$inline ? 'none' : 'pan-y')};\r\n    ::selection {\r\n        background: none;\r\n    }\r\n`;\r\n","import React, { useEffect } from 'react';\r\n\r\ntype IUseDoubleClickProps = {\r\n    /** Set to false to disable onDoubleClick/onSingleClick  */\r\n    enabled?: boolean;\r\n    /** The amount of time (in milliseconds) to wait before differentiating a single from a double click */\r\n    latency?: number;\r\n    /** A callback function for double click events */\r\n    onDoubleClick?: (event: MouseEvent) => void;\r\n    /** A callback function for single click events */\r\n    onSingleClick?: (event: MouseEvent) => void;\r\n    /** Dom node to watch for double clicks */\r\n    ref: React.RefObject<HTMLElement>;\r\n};\r\n\r\n/**\r\n * React Hook that returns the current window size\r\n * and report updates from the 'resize' window event\r\n */\r\nconst useDoubleClick = ({\r\n    ref,\r\n    latency = 300,\r\n    enabled = true,\r\n    onSingleClick = () => null,\r\n    onDoubleClick = () => null,\r\n}: IUseDoubleClickProps) => {\r\n    useEffect(() => {\r\n        const clickRef = ref.current;\r\n        let clickCount = 0;\r\n        let timer: ReturnType<typeof setTimeout>;\r\n\r\n        const handleClick = (e: MouseEvent) => {\r\n            if (enabled) {\r\n                clickCount += 1;\r\n\r\n                timer = setTimeout(() => {\r\n                    if (clickCount === 1) onSingleClick(e);\r\n                    else if (clickCount === 2) onDoubleClick(e);\r\n\r\n                    clickCount = 0;\r\n                }, latency);\r\n            }\r\n        };\r\n\r\n        // Add event listener for click events\r\n        clickRef?.addEventListener('click', handleClick);\r\n\r\n        // Remove event listener\r\n        return () => {\r\n            clickRef?.removeEventListener('click', handleClick);\r\n\r\n            if (timer) {\r\n                clearTimeout(timer);\r\n            }\r\n        };\r\n    });\r\n};\r\n\r\nexport default useDoubleClick;\r\n","import { animated, useSprings } from '@react-spring/web';\r\nimport { useGesture } from 'react-use-gesture';\r\nimport Image from '../Image';\r\nimport React, { useEffect, useRef, useState } from 'react';\r\nimport styled from 'styled-components';\r\nimport type { ImagesList } from '../../../../types/ImagesList';\r\n\r\ntype IImagePager = {\r\n    /** Index of image in images array that is currently shown */\r\n    currentIndex: number;\r\n    /** image stage height */\r\n    imageStageHeight: number;\r\n    /** image stage width */\r\n    imageStageWidth: number;\r\n    /** Array of image objects to be shown in Lightbox */\r\n    images: ImagesList;\r\n    /** Affects Width calculation method, depending on whether the Lightbox is Inline or not */\r\n    inline: boolean;\r\n    /** Function that closes the Lightbox */\r\n    onClose?: () => void;\r\n    /** Function that can be called to disable dragging in the pager */\r\n    onNext: () => void;\r\n    /** True if this image is currently shown in pager, otherwise false */\r\n    onPrev: () => void;\r\n    /** A React component that renders inside the image stage, useful for making overlays over the image */\r\n    renderImageOverlay: () => React.ReactNode;\r\n    /** Overrides the default behavior of double clicking causing an image zoom to a single click */\r\n    singleClickToZoom: boolean;\r\n};\r\n\r\n/**\r\n * Gesture controlled surface that animates prev/next page changes via spring physics.\r\n */\r\nconst ImagePager = ({\r\n    currentIndex,\r\n    images,\r\n    imageStageHeight,\r\n    imageStageWidth,\r\n    inline,\r\n    onClose,\r\n    onNext,\r\n    onPrev,\r\n    renderImageOverlay,\r\n    singleClickToZoom,\r\n}: IImagePager) => {\r\n    const firstRender = useRef(true);\r\n\r\n    const [disableDrag, setDisableDrag] = useState<boolean>(false);\r\n    const [pagerHeight, setPagerHeight] = useState<'100%' | number>('100%');\r\n    const [isDragging, setIsDragging] = useState<boolean>(false);\r\n\r\n    //Determine the absolute height of the image pager\r\n    useEffect(() => {\r\n        const currPagerHeight = inline\r\n            ? imageStageHeight\r\n            : imageStageHeight - 50;\r\n\r\n        if (currPagerHeight !== pagerHeight) {\r\n            setPagerHeight(currPagerHeight);\r\n        }\r\n    }, [inline, pagerHeight, imageStageHeight]);\r\n\r\n    // Generate page positions based on current index\r\n    const getPagePositions = React.useCallback(\r\n        (i: number, down = false, xDelta = 0) => {\r\n            const x =\r\n                (i - currentIndex) * imageStageWidth + (down ? xDelta : 0);\r\n\r\n            if (i < currentIndex - 1 || i > currentIndex + 1) {\r\n                return { display: 'none', x };\r\n            }\r\n            return { display: 'flex', x };\r\n        },\r\n        [currentIndex, imageStageWidth]\r\n    );\r\n\r\n    /**\r\n     * Animates translateX of all images at the same time\r\n     *\r\n     * @see https://www.react-spring.io/docs/hooks/use-springs\r\n     */\r\n    const [pagerSprings, springsApi] = useSprings(images.length, (i) =>\r\n        getPagePositions(i)\r\n    );\r\n\r\n    // Animate page change if currentIndex changes\r\n    useEffect(() => {\r\n        // No need to set page position for initial render\r\n        if (firstRender.current) {\r\n            firstRender.current = false;\r\n            return;\r\n        }\r\n        // Update page positions after prev/next page state change\r\n        springsApi.start((i) => getPagePositions(i));\r\n    }, [currentIndex, getPagePositions, springsApi]);\r\n\r\n    /**\r\n     * Update each Image's visibility and translateX offset during dragging\r\n     *\r\n     * @see https://github.com/react-spring/react-use-gesture\r\n     */\r\n    const bind = useGesture(\r\n        {\r\n            onDrag: ({\r\n                down,\r\n                movement: [xMovement],\r\n                direction: [xDir],\r\n                velocity,\r\n                distance,\r\n                cancel,\r\n                active,\r\n                touches,\r\n                tap,\r\n            }) => {\r\n                // Disable drag if Image has been zoomed in to allow for panning\r\n                if (disableDrag || xMovement === 0 || tap) {\r\n                    return;\r\n                }\r\n                if (!isDragging) {\r\n                    setIsDragging(true);\r\n                }\r\n\r\n                const isHorizontalDrag = Math.abs(xDir) > 0.7;\r\n                const draggedFarEnough =\r\n                    down &&\r\n                    isHorizontalDrag &&\r\n                    distance > imageStageWidth / 3.5;\r\n                const draggedFastEnough =\r\n                    down && isHorizontalDrag && velocity > 2;\r\n\r\n                // Handle next/prev image from valid drag\r\n                if ((draggedFarEnough || draggedFastEnough) && active) {\r\n                    const goToIndex = xDir > 0 ? -1 : 1;\r\n\r\n                    // Cancel gesture event\r\n                    cancel();\r\n\r\n                    if (goToIndex > 0) {\r\n                        onNext();\r\n                    } else if (goToIndex < 0) {\r\n                        onPrev();\r\n                    }\r\n\r\n                    return;\r\n                }\r\n\r\n                // Don't move pager during two+ finger touch events, i.e. pinch-zoom\r\n                if (touches > 1) {\r\n                    cancel();\r\n                    return;\r\n                }\r\n\r\n                // Update page x-coordinates for single finger/mouse gestures\r\n                springsApi.start((i) => getPagePositions(i, down, xMovement));\r\n                return;\r\n            },\r\n            onDragEnd: () => {\r\n                if (isDragging) {\r\n                    springsApi.start((i) => getPagePositions(i));\r\n                    // Add small timeout buffer to prevent event handlers from firing in child Images\r\n                    setTimeout(() => setIsDragging(false), 100);\r\n                }\r\n            },\r\n            onWheel: ({ velocity, direction: [xDir, yDir], ctrlKey }) => {\r\n                // Disable drag if Image has been zoomed in to allow for panning\r\n                if (ctrlKey || disableDrag || velocity === 0) {\r\n                    return;\r\n                }\r\n\r\n                if (!isDragging) {\r\n                    setIsDragging(true);\r\n                }\r\n\r\n                const draggedFastEnough = velocity > 1.1;\r\n\r\n                // Handle next/prev image from valid drag\r\n                if (draggedFastEnough) {\r\n                    const goToIndex = xDir + yDir > 0 ? -1 : 1;\r\n\r\n                    if (goToIndex > 0) {\r\n                        onNext();\r\n                    } else if (goToIndex < 0) {\r\n                        onPrev();\r\n                    }\r\n                }\r\n            },\r\n            onWheelEnd: () => {\r\n                springsApi.start((i) => getPagePositions(i));\r\n                // Add small timeout buffer to prevent event handlers from firing in child Images\r\n                setTimeout(() => setIsDragging(false), 100);\r\n            },\r\n        },\r\n        {\r\n            drag: {\r\n                filterTaps: true,\r\n            },\r\n            wheel: {\r\n                enabled: !inline,\r\n            },\r\n        }\r\n    );\r\n\r\n    return (\r\n        <ImagePagerContainer>\r\n            {pagerSprings.map(({ display, x }, i) => (\r\n                <AnimatedImagePager\r\n                    $inline={inline}\r\n                    {...bind()}\r\n                    className=\"lightbox-image-pager\"\r\n                    key={i}\r\n                    onClick={() => {\r\n                        if (onClose) {\r\n                            return (\r\n                                Math.abs(x.get()) < 1 &&\r\n                                !disableDrag &&\r\n                                onClose()\r\n                            );\r\n                        }\r\n                    }}\r\n                    role=\"presentation\"\r\n                    style={{\r\n                        display,\r\n                        transform: x.to(\r\n                            (xInterp: number) => `translateX(${xInterp}px)`\r\n                        ),\r\n                    }}\r\n                >\r\n                    <PagerContentWrapper>\r\n                        <PagerInnerContentWrapper>\r\n                            <ImageContainer\r\n                                $inline={inline}\r\n                                onClick={(e) => {\r\n                                    e.stopPropagation();\r\n                                    e.nativeEvent.stopImmediatePropagation();\r\n                                }}\r\n                            >\r\n                                <Image\r\n                                    imgProps={images[i]}\r\n                                    inline={inline}\r\n                                    isCurrentImage={i === currentIndex}\r\n                                    pagerHeight={pagerHeight}\r\n                                    pagerIsDragging={isDragging}\r\n                                    setDisableDrag={setDisableDrag}\r\n                                    singleClickToZoom={singleClickToZoom}\r\n                                />\r\n                                {renderImageOverlay()}\r\n                            </ImageContainer>\r\n                        </PagerInnerContentWrapper>\r\n                    </PagerContentWrapper>\r\n                </AnimatedImagePager>\r\n            ))}\r\n        </ImagePagerContainer>\r\n    );\r\n};\r\n\r\nImagePager.displayName = 'ImagePager';\r\n\r\nexport default ImagePager;\r\n\r\nconst ImagePagerContainer = styled.div`\r\n    height: 100%;\r\n    width: 100%;\r\n`;\r\n\r\nconst PagerInnerContentWrapper = styled.div`\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n`;\r\n\r\nconst PagerContentWrapper = styled.div`\r\n    width: 100%;\r\n    display: flex;\r\n    justify-content: center;\r\n`;\r\n\r\nconst AnimatedImagePager = styled(animated.div)<{ $inline: boolean }>`\r\n    position: absolute;\r\n    top: 0px;\r\n    left: 0px;\r\n    right: 0px;\r\n    bottom: 0px;\r\n    height: 100%;\r\n    width: 100%;\r\n    will-change: transform;\r\n    touch-action: ${({ $inline }) => (!$inline ? 'none' : 'pan-y')};\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: center;\r\n    align-items: center;\r\n`;\r\n\r\nconst ImageContainer = styled.div<{ $inline: boolean }>`\r\n    position: relative;\r\n    touch-action: ${({ $inline }) => (!$inline ? 'none' : 'pan-y')};\r\n    user-select: none;\r\n    display: flex;\r\n    justify-content: center;\r\n    width: 100%;\r\n`;\r\n","import ImagePager from './components/ImagePager';\r\nimport React from 'react';\r\nimport styled from 'styled-components';\r\nimport useRefSize from './utils/useRefSize';\r\nimport type { ImagesList } from '../../types/ImagesList';\r\n\r\ntype IImageStageProps = {\r\n    /** classnames are applied to the root ImageStage component */\r\n    className?: string;\r\n    /** Index of image in images array that is currently shown */\r\n    currentIndex: number;\r\n    /** Array of image objects to be shown in Lightbox */\r\n    images: ImagesList;\r\n    /** Affects Width calculation method, depending on whether the Lightbox is Inline or not */\r\n    inline: boolean;\r\n    /** Function that closes the Lightbox */\r\n    onClose?: () => void;\r\n    /** Function that can be called to disable dragging in the pager */\r\n    onNext: () => void;\r\n    /** True if this image is currently shown in pager, otherwise false */\r\n    onPrev: () => void;\r\n    /** A React component that renders inside the image stage, useful for making overlays over the image */\r\n    renderImageOverlay: () => React.ReactNode;\r\n    /** A React component that is used for next button in image pager */\r\n    renderNextButton: ({ canNext }: { canNext: boolean }) => React.ReactNode;\r\n    /** A React component that is used for previous button in image pager */\r\n    renderPrevButton: ({ canPrev }: { canPrev: boolean }) => React.ReactNode;\r\n    /** Overrides the default behavior of double clicking causing an image zoom to a single click */\r\n    singleClickToZoom: boolean;\r\n};\r\n\r\n/**\r\n * Containing element for ImagePager and prev/next button controls\r\n */\r\nconst ImageStage = ({\r\n    className = '',\r\n    currentIndex,\r\n    images,\r\n    inline,\r\n    onClose,\r\n    onNext,\r\n    onPrev,\r\n    renderImageOverlay,\r\n    renderNextButton,\r\n    renderPrevButton,\r\n    singleClickToZoom,\r\n}: IImageStageProps) => {\r\n    // Extra sanity check that the next/prev image exists before moving to it\r\n    const canPrev = currentIndex > 0;\r\n    const canNext = currentIndex + 1 < images.length;\r\n\r\n    const onNextImage = canNext ? onNext : () => null;\r\n    const onPrevImage = canPrev ? onPrev : () => null;\r\n\r\n    const [{ height: containerHeight, width: containerWidth }, containerRef] =\r\n        useRefSize();\r\n\r\n    return (\r\n        <ImageStageContainer\r\n            className={className}\r\n            data-testid=\"lightbox-image-stage\"\r\n            ref={containerRef}\r\n        >\r\n            {renderPrevButton({ canPrev })}\r\n            {containerWidth && (\r\n                <ImagePager\r\n                    currentIndex={currentIndex}\r\n                    images={images}\r\n                    imageStageHeight={containerHeight}\r\n                    imageStageWidth={containerWidth}\r\n                    inline={inline}\r\n                    onClose={onClose}\r\n                    onNext={onNextImage}\r\n                    onPrev={onPrevImage}\r\n                    renderImageOverlay={renderImageOverlay}\r\n                    singleClickToZoom={singleClickToZoom}\r\n                />\r\n            )}\r\n            {renderNextButton({ canNext })}\r\n        </ImageStageContainer>\r\n    );\r\n};\r\n\r\nexport default ImageStage;\r\n\r\nconst ImageStageContainer = styled.div`\r\n    position: relative;\r\n    height: 100%;\r\n    width: 100%;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n`;\r\n","import { useCallback, useEffect, useRef, useState } from 'react';\r\n\r\ntype RefSize = {\r\n    height: number;\r\n    width: number;\r\n};\r\n\r\ntype Node = HTMLDivElement | null;\r\n\r\ntype IUseRefSize = [refSize: RefSize, elementRef: (node: any) => void | null];\r\n\r\n/**\r\n * React Hook that returns the current ref size\r\n * and report updates from the 'resize' ref event\r\n *\r\n * @returns {RefSize} An object containing the ref width and height\r\n * @returns {elementRef} A callback ref to be used on the container being measured\r\n */\r\nconst useRefSize = (): IUseRefSize => {\r\n    const ref = useRef<HTMLDivElement>(null);\r\n\r\n    const [node, setNode] = useState<Node>(null);\r\n    const [refSize, setRefSize] = useState<RefSize>({\r\n        height: ref.current?.clientHeight || 0,\r\n        width: ref.current?.clientWidth || 0,\r\n    });\r\n\r\n    const elementRef = useCallback((node) => {\r\n        if (node !== null) {\r\n            setNode(node);\r\n\r\n            setRefSize({\r\n                height: node.clientHeight,\r\n                width: node.clientWidth,\r\n            });\r\n        }\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        const handleResize = () => {\r\n            if (node) {\r\n                const height = node.clientHeight;\r\n                const width = node.clientWidth;\r\n                if (height !== refSize.height || width !== refSize.width) {\r\n                    setRefSize({\r\n                        height,\r\n                        width,\r\n                    });\r\n                }\r\n            }\r\n        };\r\n\r\n        window.addEventListener('resize', handleResize);\r\n        window.addEventListener('orientationchange', handleResize);\r\n\r\n        return () => {\r\n            window.removeEventListener('resize', handleResize);\r\n            window.removeEventListener('orientationchange', handleResize);\r\n        };\r\n    }, [node, refSize.height, refSize.width]);\r\n\r\n    return [refSize, elementRef];\r\n};\r\n\r\nexport default useRefSize;\r\n","import React from 'react';\r\nimport { useTransition, animated, config } from '@react-spring/web';\r\nimport styled from 'styled-components';\r\n\r\ntype IPageContainerProps = {\r\n    /** All child components of Lightbox */\r\n    children: React.ReactNode[];\r\n    /** Classes are applied to the root lightbox component */\r\n    className: string;\r\n    /** Flag that dictates if the lightbox is open or closed */\r\n    isOpen: boolean;\r\n    /** React-Spring useTransition config for page open/close animation */\r\n    pageTransitionConfig: any;\r\n    /** Inline styles are applied to the root lightbox component */\r\n    style: React.CSSProperties;\r\n};\r\n\r\n/**\r\n * Animates the lightbox as it opens/closes\r\n */\r\nconst PageContainer = ({\r\n    children,\r\n    className,\r\n    isOpen,\r\n    pageTransitionConfig,\r\n    style,\r\n}: IPageContainerProps) => {\r\n    const defaultTransition = {\r\n        config: { ...config.default, friction: 32, mass: 1, tension: 320 },\r\n        enter: { opacity: 1, transform: 'scale(1)' },\r\n        from: { opacity: 0, transform: 'scale(0.75)' },\r\n        leave: { opacity: 0, transform: 'scale(0.75)' },\r\n    };\r\n\r\n    const transitions = useTransition(isOpen, {\r\n        ...defaultTransition,\r\n        ...pageTransitionConfig,\r\n    });\r\n\r\n    return (\r\n        <>\r\n            {transitions(\r\n                (animatedStyles, item) =>\r\n                    item && (\r\n                        <AnimatedPageContainer\r\n                            className={`lightbox-container${\r\n                                className ? ` ${className}` : ''\r\n                            }`}\r\n                            data-testid=\"lightbox-container\"\r\n                            style={{ ...animatedStyles, ...style }}\r\n                        >\r\n                            {children}\r\n                        </AnimatedPageContainer>\r\n                    )\r\n            )}\r\n        </>\r\n    );\r\n};\r\n\r\nexport default PageContainer;\r\n\r\nconst AnimatedPageContainer = styled(animated.div)`\r\n    display: flex;\r\n    flex-direction: column;\r\n    position: fixed;\r\n    z-index: 400;\r\n    top: 0;\r\n    bottom: 0;\r\n    left: 0;\r\n    right: 0;\r\n`;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\ntype ICreatePortal = {\r\n    children: React.ReactNode;\r\n};\r\n\r\n/**\r\n * Creates a SSR + next.js friendly React Portal inside <body />\r\n *\r\n * Child components are rendered on the client side only\r\n\r\n * @see https://reactjs.org/docs/portals.html\r\n */\r\nclass CreatePortal extends React.Component<ICreatePortal> {\r\n    portalContainer: HTMLDivElement;\r\n    body: HTMLElement;\r\n\r\n    // Only executes on the client-side\r\n    componentDidMount() {\r\n        // Get the document body\r\n        this.body = document.body;\r\n\r\n        // Create a container <div /> for React Portal\r\n        this.portalContainer = document.createElement('div');\r\n        this.portalContainer.setAttribute('class', 'lightbox-portal');\r\n\r\n        // Append the container to the document body\r\n        this.body.appendChild(this.portalContainer);\r\n\r\n        // Force a re-render as we're on the client side now\r\n        // children prop will render to portalContainer\r\n        this.forceUpdate();\r\n\r\n        // Add event listener to prevent trackpad/ctrl+mousewheel zooming of lightbox\r\n        // Zooming is handled specifically within /ImageStage/components/Image\r\n        this.portalContainer.addEventListener('wheel', this.preventWheel);\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        // Remove wheel event listener\r\n        this.portalContainer.removeEventListener('wheel', this.preventWheel);\r\n\r\n        // Cleanup Portal from DOM\r\n        this.body.removeChild(this.portalContainer);\r\n    }\r\n\r\n    preventWheel = (e: WheelEvent) => e.preventDefault();\r\n\r\n    render() {\r\n        // Return null during SSR\r\n        if (this.portalContainer === undefined) return null;\r\n\r\n        const { children } = this.props;\r\n\r\n        return <>{ReactDOM.createPortal(children, this.portalContainer)}</>;\r\n    }\r\n}\r\n\r\nexport default CreatePortal;\r\n","import React, { useEffect } from 'react';\r\nimport { ImageStage, PageContainer, CreatePortal } from './components';\r\nimport type { ImagesList } from './types/ImagesList';\r\n\r\nexport type ImagesListType = ImagesList;\r\n\r\ntype ILightboxProps = {\r\n    /** classnames are applied to the root lightbox component */\r\n    className?: string;\r\n    /** Index of image in images array that is currently shown */\r\n    currentIndex: number;\r\n    /** Array of images to be shown in Lightbox, each image object may contain any valid 'img' attribute with the exceptions of 'draggable', 'onClick', 'onDragStart' and 'ref' */\r\n    images: ImagesList;\r\n    /** Determines whether the Lightbox returns just an Inline carousel (ImageStage) */\r\n    inline?: boolean;\r\n    /** Flag that dictates if the lightbox is open or closed */\r\n    isOpen: boolean;\r\n    /** Function that closes the Lightbox */\r\n    onClose?: () => void;\r\n    /** Function that changes currentIndex to next image in images */\r\n    onNext: () => void;\r\n    /** Function that changes currentIndex to previous image in images */\r\n    onPrev: () => void;\r\n    /** React-Spring useTransition config for page open/close animation */\r\n    pageTransitionConfig?: any;\r\n    /** A React component that renders below the image pager */\r\n    renderFooter?: () => React.ReactNode;\r\n    /** A React component that renders above the image pager */\r\n    renderHeader?: () => React.ReactNode;\r\n    /** A React component that renders inside the image stage, useful for making overlays over the image */\r\n    renderImageOverlay?: () => React.ReactNode;\r\n    /** A React component that is used for next button in image pager */\r\n    renderNextButton?: () => React.ReactNode;\r\n    /** A React component that is used for previous button in image pager */\r\n    renderPrevButton?: () => React.ReactNode;\r\n    /** Overrides the default behavior of double clicking causing an image zoom to a single click */\r\n    singleClickToZoom?: boolean;\r\n    /** Inline styles that are applied to the root lightbox component */\r\n    style?: React.CSSProperties;\r\n};\r\n\r\n/**\r\n * Gesture controlled lightbox that interpolates animations with spring physics.\r\n *\r\n * Demos and docs:\r\n * @see https://timellenberger.com/libraries/react-spring-lightbox\r\n *\r\n * GitHub repo:\r\n * @see https://github.com/tim-soft/react-spring-lightbox\r\n *\r\n * Built with:\r\n * @see https://github.com/react-spring/react-use-gesture\r\n * @see https://github.com/react-spring/react-spring\r\n * @see https://github.com/styled-components/styled-components\r\n */\r\nconst Lightbox = ({\r\n    isOpen,\r\n    onClose,\r\n    inline = false,\r\n    images = [],\r\n    currentIndex,\r\n    onPrev,\r\n    onNext,\r\n    renderHeader = () => null,\r\n    renderFooter = () => null,\r\n    renderPrevButton = () => null,\r\n    renderNextButton = () => null,\r\n    renderImageOverlay = () => null,\r\n    className = '',\r\n    singleClickToZoom = false,\r\n    style = {},\r\n    pageTransitionConfig = null,\r\n}: ILightboxProps) => {\r\n    // Handle event listeners for keyboard\r\n    useEffect(() => {\r\n        /**\r\n         * Prevent keyboard from controlling background page\r\n         * when lightbox is open\r\n         */\r\n        const preventBackgroundScroll = (e: KeyboardEvent) => {\r\n            const keysToIgnore = [\r\n                'ArrowUp',\r\n                'ArrowDown',\r\n                'End',\r\n                'Home',\r\n                'PageUp',\r\n                'PageDown',\r\n            ];\r\n\r\n            if (isOpen && keysToIgnore.includes(e.key)) e.preventDefault();\r\n        };\r\n\r\n        /**\r\n         * Navigate images with arrow keys, close on Esc key\r\n         */\r\n        const handleKeyboardInput = (e: KeyboardEvent) => {\r\n            if (isOpen) {\r\n                switch (e.key) {\r\n                    case 'ArrowLeft':\r\n                        onPrev();\r\n                        break;\r\n                    case 'ArrowRight':\r\n                        onNext();\r\n                        break;\r\n                    case 'Escape':\r\n                        onClose && onClose();\r\n                        break;\r\n                    default:\r\n                        e.preventDefault();\r\n                        break;\r\n                }\r\n            }\r\n        };\r\n\r\n        document.addEventListener('keyup', handleKeyboardInput);\r\n        document.addEventListener('keydown', preventBackgroundScroll);\r\n\r\n        return () => {\r\n            document.removeEventListener('keyup', handleKeyboardInput);\r\n            document.removeEventListener('keydown', preventBackgroundScroll);\r\n        };\r\n    });\r\n\r\n    const imageStage = (\r\n        <ImageStage\r\n            currentIndex={currentIndex}\r\n            images={images}\r\n            inline={inline}\r\n            onClose={onClose}\r\n            onNext={onNext}\r\n            onPrev={onPrev}\r\n            renderImageOverlay={renderImageOverlay}\r\n            renderNextButton={renderNextButton}\r\n            renderPrevButton={renderPrevButton}\r\n            singleClickToZoom={singleClickToZoom}\r\n        />\r\n    );\r\n\r\n    if (inline) {\r\n        return imageStage;\r\n    }\r\n\r\n    return (\r\n        <CreatePortal>\r\n            <PageContainer\r\n                className={className}\r\n                isOpen={isOpen}\r\n                pageTransitionConfig={pageTransitionConfig}\r\n                style={style}\r\n            >\r\n                {renderHeader()}\r\n                {imageStage}\r\n                {renderFooter()}\r\n            </PageContainer>\r\n        </CreatePortal>\r\n    );\r\n};\r\n\r\nexport default Lightbox;\r\n"]},"metadata":{},"sourceType":"module"}