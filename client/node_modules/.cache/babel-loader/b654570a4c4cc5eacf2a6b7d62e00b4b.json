{"ast":null,"code":"/*! bignumber.js v4.1.0 https://github.com/MikeMcl/bignumber.js/LICENCE */\n;\n\n(function (globalObj) {\n  'use strict';\n  /*\r\n    bignumber.js v4.1.0\r\n    A JavaScript library for arbitrary-precision arithmetic.\r\n    https://github.com/MikeMcl/bignumber.js\r\n    Copyright (c) 2017 Michael Mclaughlin <M8ch88l@gmail.com>\r\n    MIT Expat Licence\r\n  */\n\n  var BigNumber,\n      isNumeric = /^-?(\\d+(\\.\\d*)?|\\.\\d+)(e[+-]?\\d+)?$/i,\n      mathceil = Math.ceil,\n      mathfloor = Math.floor,\n      notBool = ' not a boolean or binary digit',\n      roundingMode = 'rounding mode',\n      tooManyDigits = 'number type has more than 15 significant digits',\n      ALPHABET = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ$_',\n      BASE = 1e14,\n      LOG_BASE = 14,\n      MAX_SAFE_INTEGER = 0x1fffffffffffff,\n      // 2^53 - 1\n  // MAX_INT32 = 0x7fffffff,                   // 2^31 - 1\n  POWS_TEN = [1, 10, 100, 1e3, 1e4, 1e5, 1e6, 1e7, 1e8, 1e9, 1e10, 1e11, 1e12, 1e13],\n      SQRT_BASE = 1e7,\n\n  /*\r\n   * The limit on the value of DECIMAL_PLACES, TO_EXP_NEG, TO_EXP_POS, MIN_EXP, MAX_EXP, and\r\n   * the arguments to toExponential, toFixed, toFormat, and toPrecision, beyond which an\r\n   * exception is thrown (if ERRORS is true).\r\n   */\n  MAX = 1E9; // 0 to MAX_INT32\n\n  /*\r\n   * Create and return a BigNumber constructor.\r\n   */\n\n  function constructorFactory(config) {\n    var div,\n        parseNumeric,\n        // id tracks the caller function, so its name can be included in error messages.\n    id = 0,\n        P = BigNumber.prototype,\n        ONE = new BigNumber(1),\n\n    /********************************* EDITABLE DEFAULTS **********************************/\n\n    /*\r\n     * The default values below must be integers within the inclusive ranges stated.\r\n     * The values can also be changed at run-time using BigNumber.config.\r\n     */\n    // The maximum number of decimal places for operations involving division.\n    DECIMAL_PLACES = 20,\n        // 0 to MAX\n\n    /*\r\n     * The rounding mode used when rounding to the above decimal places, and when using\r\n     * toExponential, toFixed, toFormat and toPrecision, and round (default value).\r\n     * UP         0 Away from zero.\r\n     * DOWN       1 Towards zero.\r\n     * CEIL       2 Towards +Infinity.\r\n     * FLOOR      3 Towards -Infinity.\r\n     * HALF_UP    4 Towards nearest neighbour. If equidistant, up.\r\n     * HALF_DOWN  5 Towards nearest neighbour. If equidistant, down.\r\n     * HALF_EVEN  6 Towards nearest neighbour. If equidistant, towards even neighbour.\r\n     * HALF_CEIL  7 Towards nearest neighbour. If equidistant, towards +Infinity.\r\n     * HALF_FLOOR 8 Towards nearest neighbour. If equidistant, towards -Infinity.\r\n     */\n    ROUNDING_MODE = 4,\n        // 0 to 8\n    // EXPONENTIAL_AT : [TO_EXP_NEG , TO_EXP_POS]\n    // The exponent value at and beneath which toString returns exponential notation.\n    // Number type: -7\n    TO_EXP_NEG = -7,\n        // 0 to -MAX\n    // The exponent value at and above which toString returns exponential notation.\n    // Number type: 21\n    TO_EXP_POS = 21,\n        // 0 to MAX\n    // RANGE : [MIN_EXP, MAX_EXP]\n    // The minimum exponent value, beneath which underflow to zero occurs.\n    // Number type: -324  (5e-324)\n    MIN_EXP = -1e7,\n        // -1 to -MAX\n    // The maximum exponent value, above which overflow to Infinity occurs.\n    // Number type:  308  (1.7976931348623157e+308)\n    // For MAX_EXP > 1e7, e.g. new BigNumber('1e100000000').plus(1) may be slow.\n    MAX_EXP = 1e7,\n        // 1 to MAX\n    // Whether BigNumber Errors are ever thrown.\n    ERRORS = true,\n        // true or false\n    // Change to intValidatorNoErrors if ERRORS is false.\n    isValidInt = intValidatorWithErrors,\n        // intValidatorWithErrors/intValidatorNoErrors\n    // Whether to use cryptographically-secure random number generation, if available.\n    CRYPTO = false,\n        // true or false\n\n    /*\r\n     * The modulo mode used when calculating the modulus: a mod n.\r\n     * The quotient (q = a / n) is calculated according to the corresponding rounding mode.\r\n     * The remainder (r) is calculated as: r = a - n * q.\r\n     *\r\n     * UP        0 The remainder is positive if the dividend is negative, else is negative.\r\n     * DOWN      1 The remainder has the same sign as the dividend.\r\n     *             This modulo mode is commonly known as 'truncated division' and is\r\n     *             equivalent to (a % n) in JavaScript.\r\n     * FLOOR     3 The remainder has the same sign as the divisor (Python %).\r\n     * HALF_EVEN 6 This modulo mode implements the IEEE 754 remainder function.\r\n     * EUCLID    9 Euclidian division. q = sign(n) * floor(a / abs(n)).\r\n     *             The remainder is always positive.\r\n     *\r\n     * The truncated division, floored division, Euclidian division and IEEE 754 remainder\r\n     * modes are commonly used for the modulus operation.\r\n     * Although the other rounding modes can also be used, they may not give useful results.\r\n     */\n    MODULO_MODE = 1,\n        // 0 to 9\n    // The maximum number of significant digits of the result of the toPower operation.\n    // If POW_PRECISION is 0, there will be unlimited significant digits.\n    POW_PRECISION = 0,\n        // 0 to MAX\n    // The format specification used by the BigNumber.prototype.toFormat method.\n    FORMAT = {\n      decimalSeparator: '.',\n      groupSeparator: ',',\n      groupSize: 3,\n      secondaryGroupSize: 0,\n      fractionGroupSeparator: '\\xA0',\n      // non-breaking space\n      fractionGroupSize: 0\n    };\n    /******************************************************************************************/\n    // CONSTRUCTOR\n\n    /*\r\n     * The BigNumber constructor and exported function.\r\n     * Create and return a new instance of a BigNumber object.\r\n     *\r\n     * n {number|string|BigNumber} A numeric value.\r\n     * [b] {number} The base of n. Integer, 2 to 64 inclusive.\r\n     */\n\n    function BigNumber(n, b) {\n      var c,\n          e,\n          i,\n          num,\n          len,\n          str,\n          x = this; // Enable constructor usage without new.\n\n      if (!(x instanceof BigNumber)) {\n        // 'BigNumber() constructor call without new: {n}'\n        if (ERRORS) raise(26, 'constructor call without new', n);\n        return new BigNumber(n, b);\n      } // 'new BigNumber() base not an integer: {b}'\n      // 'new BigNumber() base out of range: {b}'\n\n\n      if (b == null || !isValidInt(b, 2, 64, id, 'base')) {\n        // Duplicate.\n        if (n instanceof BigNumber) {\n          x.s = n.s;\n          x.e = n.e;\n          x.c = (n = n.c) ? n.slice() : n;\n          id = 0;\n          return;\n        }\n\n        if ((num = typeof n == 'number') && n * 0 == 0) {\n          x.s = 1 / n < 0 ? (n = -n, -1) : 1; // Fast path for integers.\n\n          if (n === ~~n) {\n            for (e = 0, i = n; i >= 10; i /= 10, e++);\n\n            x.e = e;\n            x.c = [n];\n            id = 0;\n            return;\n          }\n\n          str = n + '';\n        } else {\n          if (!isNumeric.test(str = n + '')) return parseNumeric(x, str, num);\n          x.s = str.charCodeAt(0) === 45 ? (str = str.slice(1), -1) : 1;\n        }\n      } else {\n        b = b | 0;\n        str = n + ''; // Ensure return value is rounded to DECIMAL_PLACES as with other bases.\n        // Allow exponential notation to be used with base 10 argument.\n\n        if (b == 10) {\n          x = new BigNumber(n instanceof BigNumber ? n : str);\n          return round(x, DECIMAL_PLACES + x.e + 1, ROUNDING_MODE);\n        } // Avoid potential interpretation of Infinity and NaN as base 44+ values.\n        // Any number in exponential form will fail due to the [Ee][+-].\n\n\n        if ((num = typeof n == 'number') && n * 0 != 0 || !new RegExp('^-?' + (c = '[' + ALPHABET.slice(0, b) + ']+') + '(?:\\\\.' + c + ')?$', b < 37 ? 'i' : '').test(str)) {\n          return parseNumeric(x, str, num, b);\n        }\n\n        if (num) {\n          x.s = 1 / n < 0 ? (str = str.slice(1), -1) : 1;\n\n          if (ERRORS && str.replace(/^0\\.0*|\\./, '').length > 15) {\n            // 'new BigNumber() number type has more than 15 significant digits: {n}'\n            raise(id, tooManyDigits, n);\n          } // Prevent later check for length on converted number.\n\n\n          num = false;\n        } else {\n          x.s = str.charCodeAt(0) === 45 ? (str = str.slice(1), -1) : 1;\n        }\n\n        str = convertBase(str, 10, b, x.s);\n      } // Decimal point?\n\n\n      if ((e = str.indexOf('.')) > -1) str = str.replace('.', ''); // Exponential form?\n\n      if ((i = str.search(/e/i)) > 0) {\n        // Determine exponent.\n        if (e < 0) e = i;\n        e += +str.slice(i + 1);\n        str = str.substring(0, i);\n      } else if (e < 0) {\n        // Integer.\n        e = str.length;\n      } // Determine leading zeros.\n\n\n      for (i = 0; str.charCodeAt(i) === 48; i++); // Determine trailing zeros.\n\n\n      for (len = str.length; str.charCodeAt(--len) === 48;);\n\n      str = str.slice(i, len + 1);\n\n      if (str) {\n        len = str.length; // Disallow numbers with over 15 significant digits if number type.\n        // 'new BigNumber() number type has more than 15 significant digits: {n}'\n\n        if (num && ERRORS && len > 15 && (n > MAX_SAFE_INTEGER || n !== mathfloor(n))) {\n          raise(id, tooManyDigits, x.s * n);\n        }\n\n        e = e - i - 1; // Overflow?\n\n        if (e > MAX_EXP) {\n          // Infinity.\n          x.c = x.e = null; // Underflow?\n        } else if (e < MIN_EXP) {\n          // Zero.\n          x.c = [x.e = 0];\n        } else {\n          x.e = e;\n          x.c = []; // Transform base\n          // e is the base 10 exponent.\n          // i is where to slice str to get the first element of the coefficient array.\n\n          i = (e + 1) % LOG_BASE;\n          if (e < 0) i += LOG_BASE;\n\n          if (i < len) {\n            if (i) x.c.push(+str.slice(0, i));\n\n            for (len -= LOG_BASE; i < len;) {\n              x.c.push(+str.slice(i, i += LOG_BASE));\n            }\n\n            str = str.slice(i);\n            i = LOG_BASE - str.length;\n          } else {\n            i -= len;\n          }\n\n          for (; i--; str += '0');\n\n          x.c.push(+str);\n        }\n      } else {\n        // Zero.\n        x.c = [x.e = 0];\n      }\n\n      id = 0;\n    } // CONSTRUCTOR PROPERTIES\n\n\n    BigNumber.another = constructorFactory;\n    BigNumber.ROUND_UP = 0;\n    BigNumber.ROUND_DOWN = 1;\n    BigNumber.ROUND_CEIL = 2;\n    BigNumber.ROUND_FLOOR = 3;\n    BigNumber.ROUND_HALF_UP = 4;\n    BigNumber.ROUND_HALF_DOWN = 5;\n    BigNumber.ROUND_HALF_EVEN = 6;\n    BigNumber.ROUND_HALF_CEIL = 7;\n    BigNumber.ROUND_HALF_FLOOR = 8;\n    BigNumber.EUCLID = 9;\n    /*\r\n     * Configure infrequently-changing library-wide settings.\r\n     *\r\n     * Accept an object or an argument list, with one or many of the following properties or\r\n     * parameters respectively:\r\n     *\r\n     *   DECIMAL_PLACES  {number}  Integer, 0 to MAX inclusive\r\n     *   ROUNDING_MODE   {number}  Integer, 0 to 8 inclusive\r\n     *   EXPONENTIAL_AT  {number|number[]}  Integer, -MAX to MAX inclusive or\r\n     *                                      [integer -MAX to 0 incl., 0 to MAX incl.]\r\n     *   RANGE           {number|number[]}  Non-zero integer, -MAX to MAX inclusive or\r\n     *                                      [integer -MAX to -1 incl., integer 1 to MAX incl.]\r\n     *   ERRORS          {boolean|number}   true, false, 1 or 0\r\n     *   CRYPTO          {boolean|number}   true, false, 1 or 0\r\n     *   MODULO_MODE     {number}           0 to 9 inclusive\r\n     *   POW_PRECISION   {number}           0 to MAX inclusive\r\n     *   FORMAT          {object}           See BigNumber.prototype.toFormat\r\n     *      decimalSeparator       {string}\r\n     *      groupSeparator         {string}\r\n     *      groupSize              {number}\r\n     *      secondaryGroupSize     {number}\r\n     *      fractionGroupSeparator {string}\r\n     *      fractionGroupSize      {number}\r\n     *\r\n     * (The values assigned to the above FORMAT object properties are not checked for validity.)\r\n     *\r\n     * E.g.\r\n     * BigNumber.config(20, 4) is equivalent to\r\n     * BigNumber.config({ DECIMAL_PLACES : 20, ROUNDING_MODE : 4 })\r\n     *\r\n     * Ignore properties/parameters set to null or undefined.\r\n     * Return an object with the properties current values.\r\n     */\n\n    BigNumber.config = BigNumber.set = function () {\n      var v,\n          p,\n          i = 0,\n          r = {},\n          a = arguments,\n          o = a[0],\n          has = o && typeof o == 'object' ? function () {\n        if (o.hasOwnProperty(p)) return (v = o[p]) != null;\n      } : function () {\n        if (a.length > i) return (v = a[i++]) != null;\n      }; // DECIMAL_PLACES {number} Integer, 0 to MAX inclusive.\n      // 'config() DECIMAL_PLACES not an integer: {v}'\n      // 'config() DECIMAL_PLACES out of range: {v}'\n\n      if (has(p = 'DECIMAL_PLACES') && isValidInt(v, 0, MAX, 2, p)) {\n        DECIMAL_PLACES = v | 0;\n      }\n\n      r[p] = DECIMAL_PLACES; // ROUNDING_MODE {number} Integer, 0 to 8 inclusive.\n      // 'config() ROUNDING_MODE not an integer: {v}'\n      // 'config() ROUNDING_MODE out of range: {v}'\n\n      if (has(p = 'ROUNDING_MODE') && isValidInt(v, 0, 8, 2, p)) {\n        ROUNDING_MODE = v | 0;\n      }\n\n      r[p] = ROUNDING_MODE; // EXPONENTIAL_AT {number|number[]}\n      // Integer, -MAX to MAX inclusive or [integer -MAX to 0 inclusive, 0 to MAX inclusive].\n      // 'config() EXPONENTIAL_AT not an integer: {v}'\n      // 'config() EXPONENTIAL_AT out of range: {v}'\n\n      if (has(p = 'EXPONENTIAL_AT')) {\n        if (isArray(v)) {\n          if (isValidInt(v[0], -MAX, 0, 2, p) && isValidInt(v[1], 0, MAX, 2, p)) {\n            TO_EXP_NEG = v[0] | 0;\n            TO_EXP_POS = v[1] | 0;\n          }\n        } else if (isValidInt(v, -MAX, MAX, 2, p)) {\n          TO_EXP_NEG = -(TO_EXP_POS = (v < 0 ? -v : v) | 0);\n        }\n      }\n\n      r[p] = [TO_EXP_NEG, TO_EXP_POS]; // RANGE {number|number[]} Non-zero integer, -MAX to MAX inclusive or\n      // [integer -MAX to -1 inclusive, integer 1 to MAX inclusive].\n      // 'config() RANGE not an integer: {v}'\n      // 'config() RANGE cannot be zero: {v}'\n      // 'config() RANGE out of range: {v}'\n\n      if (has(p = 'RANGE')) {\n        if (isArray(v)) {\n          if (isValidInt(v[0], -MAX, -1, 2, p) && isValidInt(v[1], 1, MAX, 2, p)) {\n            MIN_EXP = v[0] | 0;\n            MAX_EXP = v[1] | 0;\n          }\n        } else if (isValidInt(v, -MAX, MAX, 2, p)) {\n          if (v | 0) MIN_EXP = -(MAX_EXP = (v < 0 ? -v : v) | 0);else if (ERRORS) raise(2, p + ' cannot be zero', v);\n        }\n      }\n\n      r[p] = [MIN_EXP, MAX_EXP]; // ERRORS {boolean|number} true, false, 1 or 0.\n      // 'config() ERRORS not a boolean or binary digit: {v}'\n\n      if (has(p = 'ERRORS')) {\n        if (v === !!v || v === 1 || v === 0) {\n          id = 0;\n          isValidInt = (ERRORS = !!v) ? intValidatorWithErrors : intValidatorNoErrors;\n        } else if (ERRORS) {\n          raise(2, p + notBool, v);\n        }\n      }\n\n      r[p] = ERRORS; // CRYPTO {boolean|number} true, false, 1 or 0.\n      // 'config() CRYPTO not a boolean or binary digit: {v}'\n      // 'config() crypto unavailable: {crypto}'\n\n      if (has(p = 'CRYPTO')) {\n        if (v === true || v === false || v === 1 || v === 0) {\n          if (v) {\n            v = typeof crypto == 'undefined';\n\n            if (!v && crypto && (crypto.getRandomValues || crypto.randomBytes)) {\n              CRYPTO = true;\n            } else if (ERRORS) {\n              raise(2, 'crypto unavailable', v ? void 0 : crypto);\n            } else {\n              CRYPTO = false;\n            }\n          } else {\n            CRYPTO = false;\n          }\n        } else if (ERRORS) {\n          raise(2, p + notBool, v);\n        }\n      }\n\n      r[p] = CRYPTO; // MODULO_MODE {number} Integer, 0 to 9 inclusive.\n      // 'config() MODULO_MODE not an integer: {v}'\n      // 'config() MODULO_MODE out of range: {v}'\n\n      if (has(p = 'MODULO_MODE') && isValidInt(v, 0, 9, 2, p)) {\n        MODULO_MODE = v | 0;\n      }\n\n      r[p] = MODULO_MODE; // POW_PRECISION {number} Integer, 0 to MAX inclusive.\n      // 'config() POW_PRECISION not an integer: {v}'\n      // 'config() POW_PRECISION out of range: {v}'\n\n      if (has(p = 'POW_PRECISION') && isValidInt(v, 0, MAX, 2, p)) {\n        POW_PRECISION = v | 0;\n      }\n\n      r[p] = POW_PRECISION; // FORMAT {object}\n      // 'config() FORMAT not an object: {v}'\n\n      if (has(p = 'FORMAT')) {\n        if (typeof v == 'object') {\n          FORMAT = v;\n        } else if (ERRORS) {\n          raise(2, p + ' not an object', v);\n        }\n      }\n\n      r[p] = FORMAT;\n      return r;\n    };\n    /*\r\n     * Return a new BigNumber whose value is the maximum of the arguments.\r\n     *\r\n     * arguments {number|string|BigNumber}\r\n     */\n\n\n    BigNumber.max = function () {\n      return maxOrMin(arguments, P.lt);\n    };\n    /*\r\n     * Return a new BigNumber whose value is the minimum of the arguments.\r\n     *\r\n     * arguments {number|string|BigNumber}\r\n     */\n\n\n    BigNumber.min = function () {\n      return maxOrMin(arguments, P.gt);\n    };\n    /*\r\n     * Return a new BigNumber with a random value equal to or greater than 0 and less than 1,\r\n     * and with dp, or DECIMAL_PLACES if dp is omitted, decimal places (or less if trailing\r\n     * zeros are produced).\r\n     *\r\n     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n     *\r\n     * 'random() decimal places not an integer: {dp}'\r\n     * 'random() decimal places out of range: {dp}'\r\n     * 'random() crypto unavailable: {crypto}'\r\n     */\n\n\n    BigNumber.random = function () {\n      var pow2_53 = 0x20000000000000; // Return a 53 bit integer n, where 0 <= n < 9007199254740992.\n      // Check if Math.random() produces more than 32 bits of randomness.\n      // If it does, assume at least 53 bits are produced, otherwise assume at least 30 bits.\n      // 0x40000000 is 2^30, 0x800000 is 2^23, 0x1fffff is 2^21 - 1.\n\n      var random53bitInt = Math.random() * pow2_53 & 0x1fffff ? function () {\n        return mathfloor(Math.random() * pow2_53);\n      } : function () {\n        return (Math.random() * 0x40000000 | 0) * 0x800000 + (Math.random() * 0x800000 | 0);\n      };\n      return function (dp) {\n        var a,\n            b,\n            e,\n            k,\n            v,\n            i = 0,\n            c = [],\n            rand = new BigNumber(ONE);\n        dp = dp == null || !isValidInt(dp, 0, MAX, 14) ? DECIMAL_PLACES : dp | 0;\n        k = mathceil(dp / LOG_BASE);\n\n        if (CRYPTO) {\n          // Browsers supporting crypto.getRandomValues.\n          if (crypto.getRandomValues) {\n            a = crypto.getRandomValues(new Uint32Array(k *= 2));\n\n            for (; i < k;) {\n              // 53 bits:\n              // ((Math.pow(2, 32) - 1) * Math.pow(2, 21)).toString(2)\n              // 11111 11111111 11111111 11111111 11100000 00000000 00000000\n              // ((Math.pow(2, 32) - 1) >>> 11).toString(2)\n              //                                     11111 11111111 11111111\n              // 0x20000 is 2^21.\n              v = a[i] * 0x20000 + (a[i + 1] >>> 11); // Rejection sampling:\n              // 0 <= v < 9007199254740992\n              // Probability that v >= 9e15, is\n              // 7199254740992 / 9007199254740992 ~= 0.0008, i.e. 1 in 1251\n\n              if (v >= 9e15) {\n                b = crypto.getRandomValues(new Uint32Array(2));\n                a[i] = b[0];\n                a[i + 1] = b[1];\n              } else {\n                // 0 <= v <= 8999999999999999\n                // 0 <= (v % 1e14) <= 99999999999999\n                c.push(v % 1e14);\n                i += 2;\n              }\n            }\n\n            i = k / 2; // Node.js supporting crypto.randomBytes.\n          } else if (crypto.randomBytes) {\n            // buffer\n            a = crypto.randomBytes(k *= 7);\n\n            for (; i < k;) {\n              // 0x1000000000000 is 2^48, 0x10000000000 is 2^40\n              // 0x100000000 is 2^32, 0x1000000 is 2^24\n              // 11111 11111111 11111111 11111111 11111111 11111111 11111111\n              // 0 <= v < 9007199254740992\n              v = (a[i] & 31) * 0x1000000000000 + a[i + 1] * 0x10000000000 + a[i + 2] * 0x100000000 + a[i + 3] * 0x1000000 + (a[i + 4] << 16) + (a[i + 5] << 8) + a[i + 6];\n\n              if (v >= 9e15) {\n                crypto.randomBytes(7).copy(a, i);\n              } else {\n                // 0 <= (v % 1e14) <= 99999999999999\n                c.push(v % 1e14);\n                i += 7;\n              }\n            }\n\n            i = k / 7;\n          } else {\n            CRYPTO = false;\n            if (ERRORS) raise(14, 'crypto unavailable', crypto);\n          }\n        } // Use Math.random.\n\n\n        if (!CRYPTO) {\n          for (; i < k;) {\n            v = random53bitInt();\n            if (v < 9e15) c[i++] = v % 1e14;\n          }\n        }\n\n        k = c[--i];\n        dp %= LOG_BASE; // Convert trailing digits to zeros according to dp.\n\n        if (k && dp) {\n          v = POWS_TEN[LOG_BASE - dp];\n          c[i] = mathfloor(k / v) * v;\n        } // Remove trailing elements which are zero.\n\n\n        for (; c[i] === 0; c.pop(), i--); // Zero?\n\n\n        if (i < 0) {\n          c = [e = 0];\n        } else {\n          // Remove leading elements which are zero and adjust exponent accordingly.\n          for (e = -1; c[0] === 0; c.splice(0, 1), e -= LOG_BASE); // Count the digits of the first element of c to determine leading zeros, and...\n\n\n          for (i = 1, v = c[0]; v >= 10; v /= 10, i++); // adjust the exponent accordingly.\n\n\n          if (i < LOG_BASE) e -= LOG_BASE - i;\n        }\n\n        rand.e = e;\n        rand.c = c;\n        return rand;\n      };\n    }(); // PRIVATE FUNCTIONS\n    // Convert a numeric string of baseIn to a numeric string of baseOut.\n\n\n    function convertBase(str, baseOut, baseIn, sign) {\n      var d,\n          e,\n          k,\n          r,\n          x,\n          xc,\n          y,\n          i = str.indexOf('.'),\n          dp = DECIMAL_PLACES,\n          rm = ROUNDING_MODE;\n      if (baseIn < 37) str = str.toLowerCase(); // Non-integer.\n\n      if (i >= 0) {\n        k = POW_PRECISION; // Unlimited precision.\n\n        POW_PRECISION = 0;\n        str = str.replace('.', '');\n        y = new BigNumber(baseIn);\n        x = y.pow(str.length - i);\n        POW_PRECISION = k; // Convert str as if an integer, then restore the fraction part by dividing the\n        // result by its base raised to a power.\n\n        y.c = toBaseOut(toFixedPoint(coeffToString(x.c), x.e), 10, baseOut);\n        y.e = y.c.length;\n      } // Convert the number as integer.\n\n\n      xc = toBaseOut(str, baseIn, baseOut);\n      e = k = xc.length; // Remove trailing zeros.\n\n      for (; xc[--k] == 0; xc.pop());\n\n      if (!xc[0]) return '0';\n\n      if (i < 0) {\n        --e;\n      } else {\n        x.c = xc;\n        x.e = e; // sign is needed for correct rounding.\n\n        x.s = sign;\n        x = div(x, y, dp, rm, baseOut);\n        xc = x.c;\n        r = x.r;\n        e = x.e;\n      }\n\n      d = e + dp + 1; // The rounding digit, i.e. the digit to the right of the digit that may be rounded up.\n\n      i = xc[d];\n      k = baseOut / 2;\n      r = r || d < 0 || xc[d + 1] != null;\n      r = rm < 4 ? (i != null || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2)) : i > k || i == k && (rm == 4 || r || rm == 6 && xc[d - 1] & 1 || rm == (x.s < 0 ? 8 : 7));\n\n      if (d < 1 || !xc[0]) {\n        // 1^-dp or 0.\n        str = r ? toFixedPoint('1', -dp) : '0';\n      } else {\n        xc.length = d;\n\n        if (r) {\n          // Rounding up may mean the previous digit has to be rounded up and so on.\n          for (--baseOut; ++xc[--d] > baseOut;) {\n            xc[d] = 0;\n\n            if (!d) {\n              ++e;\n              xc = [1].concat(xc);\n            }\n          }\n        } // Determine trailing zeros.\n\n\n        for (k = xc.length; !xc[--k];); // E.g. [4, 11, 15] becomes 4bf.\n\n\n        for (i = 0, str = ''; i <= k; str += ALPHABET.charAt(xc[i++]));\n\n        str = toFixedPoint(str, e);\n      } // The caller will add the sign.\n\n\n      return str;\n    } // Perform division in the specified base. Called by div and convertBase.\n\n\n    div = function () {\n      // Assume non-zero x and k.\n      function multiply(x, k, base) {\n        var m,\n            temp,\n            xlo,\n            xhi,\n            carry = 0,\n            i = x.length,\n            klo = k % SQRT_BASE,\n            khi = k / SQRT_BASE | 0;\n\n        for (x = x.slice(); i--;) {\n          xlo = x[i] % SQRT_BASE;\n          xhi = x[i] / SQRT_BASE | 0;\n          m = khi * xlo + xhi * klo;\n          temp = klo * xlo + m % SQRT_BASE * SQRT_BASE + carry;\n          carry = (temp / base | 0) + (m / SQRT_BASE | 0) + khi * xhi;\n          x[i] = temp % base;\n        }\n\n        if (carry) x = [carry].concat(x);\n        return x;\n      }\n\n      function compare(a, b, aL, bL) {\n        var i, cmp;\n\n        if (aL != bL) {\n          cmp = aL > bL ? 1 : -1;\n        } else {\n          for (i = cmp = 0; i < aL; i++) {\n            if (a[i] != b[i]) {\n              cmp = a[i] > b[i] ? 1 : -1;\n              break;\n            }\n          }\n        }\n\n        return cmp;\n      }\n\n      function subtract(a, b, aL, base) {\n        var i = 0; // Subtract b from a.\n\n        for (; aL--;) {\n          a[aL] -= i;\n          i = a[aL] < b[aL] ? 1 : 0;\n          a[aL] = i * base + a[aL] - b[aL];\n        } // Remove leading zeros.\n\n\n        for (; !a[0] && a.length > 1; a.splice(0, 1));\n      } // x: dividend, y: divisor.\n\n\n      return function (x, y, dp, rm, base) {\n        var cmp,\n            e,\n            i,\n            more,\n            n,\n            prod,\n            prodL,\n            q,\n            qc,\n            rem,\n            remL,\n            rem0,\n            xi,\n            xL,\n            yc0,\n            yL,\n            yz,\n            s = x.s == y.s ? 1 : -1,\n            xc = x.c,\n            yc = y.c; // Either NaN, Infinity or 0?\n\n        if (!xc || !xc[0] || !yc || !yc[0]) {\n          return new BigNumber( // Return NaN if either NaN, or both Infinity or 0.\n          !x.s || !y.s || (xc ? yc && xc[0] == yc[0] : !yc) ? NaN : // Return ±0 if x is ±0 or y is ±Infinity, or return ±Infinity as y is ±0.\n          xc && xc[0] == 0 || !yc ? s * 0 : s / 0);\n        }\n\n        q = new BigNumber(s);\n        qc = q.c = [];\n        e = x.e - y.e;\n        s = dp + e + 1;\n\n        if (!base) {\n          base = BASE;\n          e = bitFloor(x.e / LOG_BASE) - bitFloor(y.e / LOG_BASE);\n          s = s / LOG_BASE | 0;\n        } // Result exponent may be one less then the current value of e.\n        // The coefficients of the BigNumbers from convertBase may have trailing zeros.\n\n\n        for (i = 0; yc[i] == (xc[i] || 0); i++);\n\n        if (yc[i] > (xc[i] || 0)) e--;\n\n        if (s < 0) {\n          qc.push(1);\n          more = true;\n        } else {\n          xL = xc.length;\n          yL = yc.length;\n          i = 0;\n          s += 2; // Normalise xc and yc so highest order digit of yc is >= base / 2.\n\n          n = mathfloor(base / (yc[0] + 1)); // Not necessary, but to handle odd bases where yc[0] == ( base / 2 ) - 1.\n          // if ( n > 1 || n++ == 1 && yc[0] < base / 2 ) {\n\n          if (n > 1) {\n            yc = multiply(yc, n, base);\n            xc = multiply(xc, n, base);\n            yL = yc.length;\n            xL = xc.length;\n          }\n\n          xi = yL;\n          rem = xc.slice(0, yL);\n          remL = rem.length; // Add zeros to make remainder as long as divisor.\n\n          for (; remL < yL; rem[remL++] = 0);\n\n          yz = yc.slice();\n          yz = [0].concat(yz);\n          yc0 = yc[0];\n          if (yc[1] >= base / 2) yc0++; // Not necessary, but to prevent trial digit n > base, when using base 3.\n          // else if ( base == 3 && yc0 == 1 ) yc0 = 1 + 1e-15;\n\n          do {\n            n = 0; // Compare divisor and remainder.\n\n            cmp = compare(yc, rem, yL, remL); // If divisor < remainder.\n\n            if (cmp < 0) {\n              // Calculate trial digit, n.\n              rem0 = rem[0];\n              if (yL != remL) rem0 = rem0 * base + (rem[1] || 0); // n is how many times the divisor goes into the current remainder.\n\n              n = mathfloor(rem0 / yc0); //  Algorithm:\n              //  1. product = divisor * trial digit (n)\n              //  2. if product > remainder: product -= divisor, n--\n              //  3. remainder -= product\n              //  4. if product was < remainder at 2:\n              //    5. compare new remainder and divisor\n              //    6. If remainder > divisor: remainder -= divisor, n++\n\n              if (n > 1) {\n                // n may be > base only when base is 3.\n                if (n >= base) n = base - 1; // product = divisor * trial digit.\n\n                prod = multiply(yc, n, base);\n                prodL = prod.length;\n                remL = rem.length; // Compare product and remainder.\n                // If product > remainder.\n                // Trial digit n too high.\n                // n is 1 too high about 5% of the time, and is not known to have\n                // ever been more than 1 too high.\n\n                while (compare(prod, rem, prodL, remL) == 1) {\n                  n--; // Subtract divisor from product.\n\n                  subtract(prod, yL < prodL ? yz : yc, prodL, base);\n                  prodL = prod.length;\n                  cmp = 1;\n                }\n              } else {\n                // n is 0 or 1, cmp is -1.\n                // If n is 0, there is no need to compare yc and rem again below,\n                // so change cmp to 1 to avoid it.\n                // If n is 1, leave cmp as -1, so yc and rem are compared again.\n                if (n == 0) {\n                  // divisor < remainder, so n must be at least 1.\n                  cmp = n = 1;\n                } // product = divisor\n\n\n                prod = yc.slice();\n                prodL = prod.length;\n              }\n\n              if (prodL < remL) prod = [0].concat(prod); // Subtract product from remainder.\n\n              subtract(rem, prod, remL, base);\n              remL = rem.length; // If product was < remainder.\n\n              if (cmp == -1) {\n                // Compare divisor and new remainder.\n                // If divisor < new remainder, subtract divisor from remainder.\n                // Trial digit n too low.\n                // n is 1 too low about 5% of the time, and very rarely 2 too low.\n                while (compare(yc, rem, yL, remL) < 1) {\n                  n++; // Subtract divisor from remainder.\n\n                  subtract(rem, yL < remL ? yz : yc, remL, base);\n                  remL = rem.length;\n                }\n              }\n            } else if (cmp === 0) {\n              n++;\n              rem = [0];\n            } // else cmp === 1 and n will be 0\n            // Add the next digit, n, to the result array.\n\n\n            qc[i++] = n; // Update the remainder.\n\n            if (rem[0]) {\n              rem[remL++] = xc[xi] || 0;\n            } else {\n              rem = [xc[xi]];\n              remL = 1;\n            }\n          } while ((xi++ < xL || rem[0] != null) && s--);\n\n          more = rem[0] != null; // Leading zero?\n\n          if (!qc[0]) qc.splice(0, 1);\n        }\n\n        if (base == BASE) {\n          // To calculate q.e, first get the number of digits of qc[0].\n          for (i = 1, s = qc[0]; s >= 10; s /= 10, i++);\n\n          round(q, dp + (q.e = i + e * LOG_BASE - 1) + 1, rm, more); // Caller is convertBase.\n        } else {\n          q.e = e;\n          q.r = +more;\n        }\n\n        return q;\n      };\n    }();\n    /*\r\n     * Return a string representing the value of BigNumber n in fixed-point or exponential\r\n     * notation rounded to the specified decimal places or significant digits.\r\n     *\r\n     * n is a BigNumber.\r\n     * i is the index of the last digit required (i.e. the digit that may be rounded up).\r\n     * rm is the rounding mode.\r\n     * caller is caller id: toExponential 19, toFixed 20, toFormat 21, toPrecision 24.\r\n     */\n\n\n    function format(n, i, rm, caller) {\n      var c0, e, ne, len, str;\n      rm = rm != null && isValidInt(rm, 0, 8, caller, roundingMode) ? rm | 0 : ROUNDING_MODE;\n      if (!n.c) return n.toString();\n      c0 = n.c[0];\n      ne = n.e;\n\n      if (i == null) {\n        str = coeffToString(n.c);\n        str = caller == 19 || caller == 24 && ne <= TO_EXP_NEG ? toExponential(str, ne) : toFixedPoint(str, ne);\n      } else {\n        n = round(new BigNumber(n), i, rm); // n.e may have changed if the value was rounded up.\n\n        e = n.e;\n        str = coeffToString(n.c);\n        len = str.length; // toPrecision returns exponential notation if the number of significant digits\n        // specified is less than the number of digits necessary to represent the integer\n        // part of the value in fixed-point notation.\n        // Exponential notation.\n\n        if (caller == 19 || caller == 24 && (i <= e || e <= TO_EXP_NEG)) {\n          // Append zeros?\n          for (; len < i; str += '0', len++);\n\n          str = toExponential(str, e); // Fixed-point notation.\n        } else {\n          i -= ne;\n          str = toFixedPoint(str, e); // Append zeros?\n\n          if (e + 1 > len) {\n            if (--i > 0) for (str += '.'; i--; str += '0');\n          } else {\n            i += e - len;\n\n            if (i > 0) {\n              if (e + 1 == len) str += '.';\n\n              for (; i--; str += '0');\n            }\n          }\n        }\n      }\n\n      return n.s < 0 && c0 ? '-' + str : str;\n    } // Handle BigNumber.max and BigNumber.min.\n\n\n    function maxOrMin(args, method) {\n      var m,\n          n,\n          i = 0;\n      if (isArray(args[0])) args = args[0];\n      m = new BigNumber(args[0]);\n\n      for (; ++i < args.length;) {\n        n = new BigNumber(args[i]); // If any number is NaN, return NaN.\n\n        if (!n.s) {\n          m = n;\n          break;\n        } else if (method.call(m, n)) {\n          m = n;\n        }\n      }\n\n      return m;\n    }\n    /*\r\n     * Return true if n is an integer in range, otherwise throw.\r\n     * Use for argument validation when ERRORS is true.\r\n     */\n\n\n    function intValidatorWithErrors(n, min, max, caller, name) {\n      if (n < min || n > max || n != truncate(n)) {\n        raise(caller, (name || 'decimal places') + (n < min || n > max ? ' out of range' : ' not an integer'), n);\n      }\n\n      return true;\n    }\n    /*\r\n     * Strip trailing zeros, calculate base 10 exponent and check against MIN_EXP and MAX_EXP.\r\n     * Called by minus, plus and times.\r\n     */\n\n\n    function normalise(n, c, e) {\n      var i = 1,\n          j = c.length; // Remove trailing zeros.\n\n      for (; !c[--j]; c.pop()); // Calculate the base 10 exponent. First get the number of digits of c[0].\n\n\n      for (j = c[0]; j >= 10; j /= 10, i++); // Overflow?\n\n\n      if ((e = i + e * LOG_BASE - 1) > MAX_EXP) {\n        // Infinity.\n        n.c = n.e = null; // Underflow?\n      } else if (e < MIN_EXP) {\n        // Zero.\n        n.c = [n.e = 0];\n      } else {\n        n.e = e;\n        n.c = c;\n      }\n\n      return n;\n    } // Handle values that fail the validity test in BigNumber.\n\n\n    parseNumeric = function () {\n      var basePrefix = /^(-?)0([xbo])(?=\\w[\\w.]*$)/i,\n          dotAfter = /^([^.]+)\\.$/,\n          dotBefore = /^\\.([^.]+)$/,\n          isInfinityOrNaN = /^-?(Infinity|NaN)$/,\n          whitespaceOrPlus = /^\\s*\\+(?=[\\w.])|^\\s+|\\s+$/g;\n      return function (x, str, num, b) {\n        var base,\n            s = num ? str : str.replace(whitespaceOrPlus, ''); // No exception on ±Infinity or NaN.\n\n        if (isInfinityOrNaN.test(s)) {\n          x.s = isNaN(s) ? null : s < 0 ? -1 : 1;\n        } else {\n          if (!num) {\n            // basePrefix = /^(-?)0([xbo])(?=\\w[\\w.]*$)/i\n            s = s.replace(basePrefix, function (m, p1, p2) {\n              base = (p2 = p2.toLowerCase()) == 'x' ? 16 : p2 == 'b' ? 2 : 8;\n              return !b || b == base ? p1 : m;\n            });\n\n            if (b) {\n              base = b; // E.g. '1.' to '1', '.1' to '0.1'\n\n              s = s.replace(dotAfter, '$1').replace(dotBefore, '0.$1');\n            }\n\n            if (str != s) return new BigNumber(s, base);\n          } // 'new BigNumber() not a number: {n}'\n          // 'new BigNumber() not a base {b} number: {n}'\n\n\n          if (ERRORS) raise(id, 'not a' + (b ? ' base ' + b : '') + ' number', str);\n          x.s = null;\n        }\n\n        x.c = x.e = null;\n        id = 0;\n      };\n    }(); // Throw a BigNumber Error.\n\n\n    function raise(caller, msg, val) {\n      var error = new Error(['new BigNumber', // 0\n      'cmp', // 1\n      'config', // 2\n      'div', // 3\n      'divToInt', // 4\n      'eq', // 5\n      'gt', // 6\n      'gte', // 7\n      'lt', // 8\n      'lte', // 9\n      'minus', // 10\n      'mod', // 11\n      'plus', // 12\n      'precision', // 13\n      'random', // 14\n      'round', // 15\n      'shift', // 16\n      'times', // 17\n      'toDigits', // 18\n      'toExponential', // 19\n      'toFixed', // 20\n      'toFormat', // 21\n      'toFraction', // 22\n      'pow', // 23\n      'toPrecision', // 24\n      'toString', // 25\n      'BigNumber' // 26\n      ][caller] + '() ' + msg + ': ' + val);\n      error.name = 'BigNumber Error';\n      id = 0;\n      throw error;\n    }\n    /*\r\n     * Round x to sd significant digits using rounding mode rm. Check for over/under-flow.\r\n     * If r is truthy, it is known that there are more digits after the rounding digit.\r\n     */\n\n\n    function round(x, sd, rm, r) {\n      var d,\n          i,\n          j,\n          k,\n          n,\n          ni,\n          rd,\n          xc = x.c,\n          pows10 = POWS_TEN; // if x is not Infinity or NaN...\n\n      if (xc) {\n        // rd is the rounding digit, i.e. the digit after the digit that may be rounded up.\n        // n is a base 1e14 number, the value of the element of array x.c containing rd.\n        // ni is the index of n within x.c.\n        // d is the number of digits of n.\n        // i is the index of rd within n including leading zeros.\n        // j is the actual index of rd within n (if < 0, rd is a leading zero).\n        out: {\n          // Get the number of digits of the first element of xc.\n          for (d = 1, k = xc[0]; k >= 10; k /= 10, d++);\n\n          i = sd - d; // If the rounding digit is in the first element of xc...\n\n          if (i < 0) {\n            i += LOG_BASE;\n            j = sd;\n            n = xc[ni = 0]; // Get the rounding digit at index j of n.\n\n            rd = n / pows10[d - j - 1] % 10 | 0;\n          } else {\n            ni = mathceil((i + 1) / LOG_BASE);\n\n            if (ni >= xc.length) {\n              if (r) {\n                // Needed by sqrt.\n                for (; xc.length <= ni; xc.push(0));\n\n                n = rd = 0;\n                d = 1;\n                i %= LOG_BASE;\n                j = i - LOG_BASE + 1;\n              } else {\n                break out;\n              }\n            } else {\n              n = k = xc[ni]; // Get the number of digits of n.\n\n              for (d = 1; k >= 10; k /= 10, d++); // Get the index of rd within n.\n\n\n              i %= LOG_BASE; // Get the index of rd within n, adjusted for leading zeros.\n              // The number of leading zeros of n is given by LOG_BASE - d.\n\n              j = i - LOG_BASE + d; // Get the rounding digit at index j of n.\n\n              rd = j < 0 ? 0 : n / pows10[d - j - 1] % 10 | 0;\n            }\n          }\n\n          r = r || sd < 0 || // Are there any non-zero digits after the rounding digit?\n          // The expression  n % pows10[ d - j - 1 ]  returns all digits of n to the right\n          // of the digit at j, e.g. if n is 908714 and j is 2, the expression gives 714.\n          xc[ni + 1] != null || (j < 0 ? n : n % pows10[d - j - 1]);\n          r = rm < 4 ? (rd || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2)) : rd > 5 || rd == 5 && (rm == 4 || r || rm == 6 && // Check whether the digit to the left of the rounding digit is odd.\n          (i > 0 ? j > 0 ? n / pows10[d - j] : 0 : xc[ni - 1]) % 10 & 1 || rm == (x.s < 0 ? 8 : 7));\n\n          if (sd < 1 || !xc[0]) {\n            xc.length = 0;\n\n            if (r) {\n              // Convert sd to decimal places.\n              sd -= x.e + 1; // 1, 0.1, 0.01, 0.001, 0.0001 etc.\n\n              xc[0] = pows10[(LOG_BASE - sd % LOG_BASE) % LOG_BASE];\n              x.e = -sd || 0;\n            } else {\n              // Zero.\n              xc[0] = x.e = 0;\n            }\n\n            return x;\n          } // Remove excess digits.\n\n\n          if (i == 0) {\n            xc.length = ni;\n            k = 1;\n            ni--;\n          } else {\n            xc.length = ni + 1;\n            k = pows10[LOG_BASE - i]; // E.g. 56700 becomes 56000 if 7 is the rounding digit.\n            // j > 0 means i > number of leading zeros of n.\n\n            xc[ni] = j > 0 ? mathfloor(n / pows10[d - j] % pows10[j]) * k : 0;\n          } // Round up?\n\n\n          if (r) {\n            for (;;) {\n              // If the digit to be rounded up is in the first element of xc...\n              if (ni == 0) {\n                // i will be the length of xc[0] before k is added.\n                for (i = 1, j = xc[0]; j >= 10; j /= 10, i++);\n\n                j = xc[0] += k;\n\n                for (k = 1; j >= 10; j /= 10, k++); // if i != k the length has increased.\n\n\n                if (i != k) {\n                  x.e++;\n                  if (xc[0] == BASE) xc[0] = 1;\n                }\n\n                break;\n              } else {\n                xc[ni] += k;\n                if (xc[ni] != BASE) break;\n                xc[ni--] = 0;\n                k = 1;\n              }\n            }\n          } // Remove trailing zeros.\n\n\n          for (i = xc.length; xc[--i] === 0; xc.pop());\n        } // Overflow? Infinity.\n\n\n        if (x.e > MAX_EXP) {\n          x.c = x.e = null; // Underflow? Zero.\n        } else if (x.e < MIN_EXP) {\n          x.c = [x.e = 0];\n        }\n      }\n\n      return x;\n    } // PROTOTYPE/INSTANCE METHODS\n\n    /*\r\n     * Return a new BigNumber whose value is the absolute value of this BigNumber.\r\n     */\n\n\n    P.absoluteValue = P.abs = function () {\n      var x = new BigNumber(this);\n      if (x.s < 0) x.s = 1;\n      return x;\n    };\n    /*\r\n     * Return a new BigNumber whose value is the value of this BigNumber rounded to a whole\r\n     * number in the direction of Infinity.\r\n     */\n\n\n    P.ceil = function () {\n      return round(new BigNumber(this), this.e + 1, 2);\n    };\n    /*\r\n     * Return\r\n     * 1 if the value of this BigNumber is greater than the value of BigNumber(y, b),\r\n     * -1 if the value of this BigNumber is less than the value of BigNumber(y, b),\r\n     * 0 if they have the same value,\r\n     * or null if the value of either is NaN.\r\n     */\n\n\n    P.comparedTo = P.cmp = function (y, b) {\n      id = 1;\n      return compare(this, new BigNumber(y, b));\n    };\n    /*\r\n     * Return the number of decimal places of the value of this BigNumber, or null if the value\r\n     * of this BigNumber is ±Infinity or NaN.\r\n     */\n\n\n    P.decimalPlaces = P.dp = function () {\n      var n,\n          v,\n          c = this.c;\n      if (!c) return null;\n      n = ((v = c.length - 1) - bitFloor(this.e / LOG_BASE)) * LOG_BASE; // Subtract the number of trailing zeros of the last number.\n\n      if (v = c[v]) for (; v % 10 == 0; v /= 10, n--);\n      if (n < 0) n = 0;\n      return n;\n    };\n    /*\r\n     *  n / 0 = I\r\n     *  n / N = N\r\n     *  n / I = 0\r\n     *  0 / n = 0\r\n     *  0 / 0 = N\r\n     *  0 / N = N\r\n     *  0 / I = 0\r\n     *  N / n = N\r\n     *  N / 0 = N\r\n     *  N / N = N\r\n     *  N / I = N\r\n     *  I / n = I\r\n     *  I / 0 = I\r\n     *  I / N = N\r\n     *  I / I = N\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber divided by the value of\r\n     * BigNumber(y, b), rounded according to DECIMAL_PLACES and ROUNDING_MODE.\r\n     */\n\n\n    P.dividedBy = P.div = function (y, b) {\n      id = 3;\n      return div(this, new BigNumber(y, b), DECIMAL_PLACES, ROUNDING_MODE);\n    };\n    /*\r\n     * Return a new BigNumber whose value is the integer part of dividing the value of this\r\n     * BigNumber by the value of BigNumber(y, b).\r\n     */\n\n\n    P.dividedToIntegerBy = P.divToInt = function (y, b) {\n      id = 4;\n      return div(this, new BigNumber(y, b), 0, 1);\n    };\n    /*\r\n     * Return true if the value of this BigNumber is equal to the value of BigNumber(y, b),\r\n     * otherwise returns false.\r\n     */\n\n\n    P.equals = P.eq = function (y, b) {\n      id = 5;\n      return compare(this, new BigNumber(y, b)) === 0;\n    };\n    /*\r\n     * Return a new BigNumber whose value is the value of this BigNumber rounded to a whole\r\n     * number in the direction of -Infinity.\r\n     */\n\n\n    P.floor = function () {\n      return round(new BigNumber(this), this.e + 1, 3);\n    };\n    /*\r\n     * Return true if the value of this BigNumber is greater than the value of BigNumber(y, b),\r\n     * otherwise returns false.\r\n     */\n\n\n    P.greaterThan = P.gt = function (y, b) {\n      id = 6;\n      return compare(this, new BigNumber(y, b)) > 0;\n    };\n    /*\r\n     * Return true if the value of this BigNumber is greater than or equal to the value of\r\n     * BigNumber(y, b), otherwise returns false.\r\n     */\n\n\n    P.greaterThanOrEqualTo = P.gte = function (y, b) {\n      id = 7;\n      return (b = compare(this, new BigNumber(y, b))) === 1 || b === 0;\n    };\n    /*\r\n     * Return true if the value of this BigNumber is a finite number, otherwise returns false.\r\n     */\n\n\n    P.isFinite = function () {\n      return !!this.c;\n    };\n    /*\r\n     * Return true if the value of this BigNumber is an integer, otherwise return false.\r\n     */\n\n\n    P.isInteger = P.isInt = function () {\n      return !!this.c && bitFloor(this.e / LOG_BASE) > this.c.length - 2;\n    };\n    /*\r\n     * Return true if the value of this BigNumber is NaN, otherwise returns false.\r\n     */\n\n\n    P.isNaN = function () {\n      return !this.s;\n    };\n    /*\r\n     * Return true if the value of this BigNumber is negative, otherwise returns false.\r\n     */\n\n\n    P.isNegative = P.isNeg = function () {\n      return this.s < 0;\n    };\n    /*\r\n     * Return true if the value of this BigNumber is 0 or -0, otherwise returns false.\r\n     */\n\n\n    P.isZero = function () {\n      return !!this.c && this.c[0] == 0;\n    };\n    /*\r\n     * Return true if the value of this BigNumber is less than the value of BigNumber(y, b),\r\n     * otherwise returns false.\r\n     */\n\n\n    P.lessThan = P.lt = function (y, b) {\n      id = 8;\n      return compare(this, new BigNumber(y, b)) < 0;\n    };\n    /*\r\n     * Return true if the value of this BigNumber is less than or equal to the value of\r\n     * BigNumber(y, b), otherwise returns false.\r\n     */\n\n\n    P.lessThanOrEqualTo = P.lte = function (y, b) {\n      id = 9;\n      return (b = compare(this, new BigNumber(y, b))) === -1 || b === 0;\n    };\n    /*\r\n     *  n - 0 = n\r\n     *  n - N = N\r\n     *  n - I = -I\r\n     *  0 - n = -n\r\n     *  0 - 0 = 0\r\n     *  0 - N = N\r\n     *  0 - I = -I\r\n     *  N - n = N\r\n     *  N - 0 = N\r\n     *  N - N = N\r\n     *  N - I = N\r\n     *  I - n = I\r\n     *  I - 0 = I\r\n     *  I - N = N\r\n     *  I - I = N\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber minus the value of\r\n     * BigNumber(y, b).\r\n     */\n\n\n    P.minus = P.sub = function (y, b) {\n      var i,\n          j,\n          t,\n          xLTy,\n          x = this,\n          a = x.s;\n      id = 10;\n      y = new BigNumber(y, b);\n      b = y.s; // Either NaN?\n\n      if (!a || !b) return new BigNumber(NaN); // Signs differ?\n\n      if (a != b) {\n        y.s = -b;\n        return x.plus(y);\n      }\n\n      var xe = x.e / LOG_BASE,\n          ye = y.e / LOG_BASE,\n          xc = x.c,\n          yc = y.c;\n\n      if (!xe || !ye) {\n        // Either Infinity?\n        if (!xc || !yc) return xc ? (y.s = -b, y) : new BigNumber(yc ? x : NaN); // Either zero?\n\n        if (!xc[0] || !yc[0]) {\n          // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.\n          return yc[0] ? (y.s = -b, y) : new BigNumber(xc[0] ? x : // IEEE 754 (2008) 6.3: n - n = -0 when rounding to -Infinity\n          ROUNDING_MODE == 3 ? -0 : 0);\n        }\n      }\n\n      xe = bitFloor(xe);\n      ye = bitFloor(ye);\n      xc = xc.slice(); // Determine which is the bigger number.\n\n      if (a = xe - ye) {\n        if (xLTy = a < 0) {\n          a = -a;\n          t = xc;\n        } else {\n          ye = xe;\n          t = yc;\n        }\n\n        t.reverse(); // Prepend zeros to equalise exponents.\n\n        for (b = a; b--; t.push(0));\n\n        t.reverse();\n      } else {\n        // Exponents equal. Check digit by digit.\n        j = (xLTy = (a = xc.length) < (b = yc.length)) ? a : b;\n\n        for (a = b = 0; b < j; b++) {\n          if (xc[b] != yc[b]) {\n            xLTy = xc[b] < yc[b];\n            break;\n          }\n        }\n      } // x < y? Point xc to the array of the bigger number.\n\n\n      if (xLTy) t = xc, xc = yc, yc = t, y.s = -y.s;\n      b = (j = yc.length) - (i = xc.length); // Append zeros to xc if shorter.\n      // No need to add zeros to yc if shorter as subtract only needs to start at yc.length.\n\n      if (b > 0) for (; b--; xc[i++] = 0);\n      b = BASE - 1; // Subtract yc from xc.\n\n      for (; j > a;) {\n        if (xc[--j] < yc[j]) {\n          for (i = j; i && !xc[--i]; xc[i] = b);\n\n          --xc[i];\n          xc[j] += BASE;\n        }\n\n        xc[j] -= yc[j];\n      } // Remove leading zeros and adjust exponent accordingly.\n\n\n      for (; xc[0] == 0; xc.splice(0, 1), --ye); // Zero?\n\n\n      if (!xc[0]) {\n        // Following IEEE 754 (2008) 6.3,\n        // n - n = +0  but  n - n = -0  when rounding towards -Infinity.\n        y.s = ROUNDING_MODE == 3 ? -1 : 1;\n        y.c = [y.e = 0];\n        return y;\n      } // No need to check for Infinity as +x - +y != Infinity && -x - -y != Infinity\n      // for finite x and y.\n\n\n      return normalise(y, xc, ye);\n    };\n    /*\r\n     *   n % 0 =  N\r\n     *   n % N =  N\r\n     *   n % I =  n\r\n     *   0 % n =  0\r\n     *  -0 % n = -0\r\n     *   0 % 0 =  N\r\n     *   0 % N =  N\r\n     *   0 % I =  0\r\n     *   N % n =  N\r\n     *   N % 0 =  N\r\n     *   N % N =  N\r\n     *   N % I =  N\r\n     *   I % n =  N\r\n     *   I % 0 =  N\r\n     *   I % N =  N\r\n     *   I % I =  N\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber modulo the value of\r\n     * BigNumber(y, b). The result depends on the value of MODULO_MODE.\r\n     */\n\n\n    P.modulo = P.mod = function (y, b) {\n      var q,\n          s,\n          x = this;\n      id = 11;\n      y = new BigNumber(y, b); // Return NaN if x is Infinity or NaN, or y is NaN or zero.\n\n      if (!x.c || !y.s || y.c && !y.c[0]) {\n        return new BigNumber(NaN); // Return x if y is Infinity or x is zero.\n      } else if (!y.c || x.c && !x.c[0]) {\n        return new BigNumber(x);\n      }\n\n      if (MODULO_MODE == 9) {\n        // Euclidian division: q = sign(y) * floor(x / abs(y))\n        // r = x - qy    where  0 <= r < abs(y)\n        s = y.s;\n        y.s = 1;\n        q = div(x, y, 0, 3);\n        y.s = s;\n        q.s *= s;\n      } else {\n        q = div(x, y, 0, MODULO_MODE);\n      }\n\n      return x.minus(q.times(y));\n    };\n    /*\r\n     * Return a new BigNumber whose value is the value of this BigNumber negated,\r\n     * i.e. multiplied by -1.\r\n     */\n\n\n    P.negated = P.neg = function () {\n      var x = new BigNumber(this);\n      x.s = -x.s || null;\n      return x;\n    };\n    /*\r\n     *  n + 0 = n\r\n     *  n + N = N\r\n     *  n + I = I\r\n     *  0 + n = n\r\n     *  0 + 0 = 0\r\n     *  0 + N = N\r\n     *  0 + I = I\r\n     *  N + n = N\r\n     *  N + 0 = N\r\n     *  N + N = N\r\n     *  N + I = N\r\n     *  I + n = I\r\n     *  I + 0 = I\r\n     *  I + N = N\r\n     *  I + I = I\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber plus the value of\r\n     * BigNumber(y, b).\r\n     */\n\n\n    P.plus = P.add = function (y, b) {\n      var t,\n          x = this,\n          a = x.s;\n      id = 12;\n      y = new BigNumber(y, b);\n      b = y.s; // Either NaN?\n\n      if (!a || !b) return new BigNumber(NaN); // Signs differ?\n\n      if (a != b) {\n        y.s = -b;\n        return x.minus(y);\n      }\n\n      var xe = x.e / LOG_BASE,\n          ye = y.e / LOG_BASE,\n          xc = x.c,\n          yc = y.c;\n\n      if (!xe || !ye) {\n        // Return ±Infinity if either ±Infinity.\n        if (!xc || !yc) return new BigNumber(a / 0); // Either zero?\n        // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.\n\n        if (!xc[0] || !yc[0]) return yc[0] ? y : new BigNumber(xc[0] ? x : a * 0);\n      }\n\n      xe = bitFloor(xe);\n      ye = bitFloor(ye);\n      xc = xc.slice(); // Prepend zeros to equalise exponents. Faster to use reverse then do unshifts.\n\n      if (a = xe - ye) {\n        if (a > 0) {\n          ye = xe;\n          t = yc;\n        } else {\n          a = -a;\n          t = xc;\n        }\n\n        t.reverse();\n\n        for (; a--; t.push(0));\n\n        t.reverse();\n      }\n\n      a = xc.length;\n      b = yc.length; // Point xc to the longer array, and b to the shorter length.\n\n      if (a - b < 0) t = yc, yc = xc, xc = t, b = a; // Only start adding at yc.length - 1 as the further digits of xc can be ignored.\n\n      for (a = 0; b;) {\n        a = (xc[--b] = xc[b] + yc[b] + a) / BASE | 0;\n        xc[b] = BASE === xc[b] ? 0 : xc[b] % BASE;\n      }\n\n      if (a) {\n        xc = [a].concat(xc);\n        ++ye;\n      } // No need to check for zero, as +x + +y != 0 && -x + -y != 0\n      // ye = MAX_EXP + 1 possible\n\n\n      return normalise(y, xc, ye);\n    };\n    /*\r\n     * Return the number of significant digits of the value of this BigNumber.\r\n     *\r\n     * [z] {boolean|number} Whether to count integer-part trailing zeros: true, false, 1 or 0.\r\n     */\n\n\n    P.precision = P.sd = function (z) {\n      var n,\n          v,\n          x = this,\n          c = x.c; // 'precision() argument not a boolean or binary digit: {z}'\n\n      if (z != null && z !== !!z && z !== 1 && z !== 0) {\n        if (ERRORS) raise(13, 'argument' + notBool, z);\n        if (z != !!z) z = null;\n      }\n\n      if (!c) return null;\n      v = c.length - 1;\n      n = v * LOG_BASE + 1;\n\n      if (v = c[v]) {\n        // Subtract the number of trailing zeros of the last element.\n        for (; v % 10 == 0; v /= 10, n--); // Add the number of digits of the first element.\n\n\n        for (v = c[0]; v >= 10; v /= 10, n++);\n      }\n\n      if (z && x.e + 1 > n) n = x.e + 1;\n      return n;\n    };\n    /*\r\n     * Return a new BigNumber whose value is the value of this BigNumber rounded to a maximum of\r\n     * dp decimal places using rounding mode rm, or to 0 and ROUNDING_MODE respectively if\r\n     * omitted.\r\n     *\r\n     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * 'round() decimal places out of range: {dp}'\r\n     * 'round() decimal places not an integer: {dp}'\r\n     * 'round() rounding mode not an integer: {rm}'\r\n     * 'round() rounding mode out of range: {rm}'\r\n     */\n\n\n    P.round = function (dp, rm) {\n      var n = new BigNumber(this);\n\n      if (dp == null || isValidInt(dp, 0, MAX, 15)) {\n        round(n, ~~dp + this.e + 1, rm == null || !isValidInt(rm, 0, 8, 15, roundingMode) ? ROUNDING_MODE : rm | 0);\n      }\n\n      return n;\n    };\n    /*\r\n     * Return a new BigNumber whose value is the value of this BigNumber shifted by k places\r\n     * (powers of 10). Shift to the right if n > 0, and to the left if n < 0.\r\n     *\r\n     * k {number} Integer, -MAX_SAFE_INTEGER to MAX_SAFE_INTEGER inclusive.\r\n     *\r\n     * If k is out of range and ERRORS is false, the result will be ±0 if k < 0, or ±Infinity\r\n     * otherwise.\r\n     *\r\n     * 'shift() argument not an integer: {k}'\r\n     * 'shift() argument out of range: {k}'\r\n     */\n\n\n    P.shift = function (k) {\n      var n = this;\n      return isValidInt(k, -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER, 16, 'argument') // k < 1e+21, or truncate(k) will produce exponential notation.\n      ? n.times('1e' + truncate(k)) : new BigNumber(n.c && n.c[0] && (k < -MAX_SAFE_INTEGER || k > MAX_SAFE_INTEGER) ? n.s * (k < 0 ? 0 : 1 / 0) : n);\n    };\n    /*\r\n     *  sqrt(-n) =  N\r\n     *  sqrt( N) =  N\r\n     *  sqrt(-I) =  N\r\n     *  sqrt( I) =  I\r\n     *  sqrt( 0) =  0\r\n     *  sqrt(-0) = -0\r\n     *\r\n     * Return a new BigNumber whose value is the square root of the value of this BigNumber,\r\n     * rounded according to DECIMAL_PLACES and ROUNDING_MODE.\r\n     */\n\n\n    P.squareRoot = P.sqrt = function () {\n      var m,\n          n,\n          r,\n          rep,\n          t,\n          x = this,\n          c = x.c,\n          s = x.s,\n          e = x.e,\n          dp = DECIMAL_PLACES + 4,\n          half = new BigNumber('0.5'); // Negative/NaN/Infinity/zero?\n\n      if (s !== 1 || !c || !c[0]) {\n        return new BigNumber(!s || s < 0 && (!c || c[0]) ? NaN : c ? x : 1 / 0);\n      } // Initial estimate.\n\n\n      s = Math.sqrt(+x); // Math.sqrt underflow/overflow?\n      // Pass x to Math.sqrt as integer, then adjust the exponent of the result.\n\n      if (s == 0 || s == 1 / 0) {\n        n = coeffToString(c);\n        if ((n.length + e) % 2 == 0) n += '0';\n        s = Math.sqrt(n);\n        e = bitFloor((e + 1) / 2) - (e < 0 || e % 2);\n\n        if (s == 1 / 0) {\n          n = '1e' + e;\n        } else {\n          n = s.toExponential();\n          n = n.slice(0, n.indexOf('e') + 1) + e;\n        }\n\n        r = new BigNumber(n);\n      } else {\n        r = new BigNumber(s + '');\n      } // Check for zero.\n      // r could be zero if MIN_EXP is changed after the this value was created.\n      // This would cause a division by zero (x/t) and hence Infinity below, which would cause\n      // coeffToString to throw.\n\n\n      if (r.c[0]) {\n        e = r.e;\n        s = e + dp;\n        if (s < 3) s = 0; // Newton-Raphson iteration.\n\n        for (;;) {\n          t = r;\n          r = half.times(t.plus(div(x, t, dp, 1)));\n\n          if (coeffToString(t.c).slice(0, s) === (n = coeffToString(r.c)).slice(0, s)) {\n            // The exponent of r may here be one less than the final result exponent,\n            // e.g 0.0009999 (e-4) --> 0.001 (e-3), so adjust s so the rounding digits\n            // are indexed correctly.\n            if (r.e < e) --s;\n            n = n.slice(s - 3, s + 1); // The 4th rounding digit may be in error by -1 so if the 4 rounding digits\n            // are 9999 or 4999 (i.e. approaching a rounding boundary) continue the\n            // iteration.\n\n            if (n == '9999' || !rep && n == '4999') {\n              // On the first iteration only, check to see if rounding up gives the\n              // exact result as the nines may infinitely repeat.\n              if (!rep) {\n                round(t, t.e + DECIMAL_PLACES + 2, 0);\n\n                if (t.times(t).eq(x)) {\n                  r = t;\n                  break;\n                }\n              }\n\n              dp += 4;\n              s += 4;\n              rep = 1;\n            } else {\n              // If rounding digits are null, 0{0,4} or 50{0,3}, check for exact\n              // result. If not, then there are further digits and m will be truthy.\n              if (!+n || !+n.slice(1) && n.charAt(0) == '5') {\n                // Truncate to the first rounding digit.\n                round(r, r.e + DECIMAL_PLACES + 2, 1);\n                m = !r.times(r).eq(x);\n              }\n\n              break;\n            }\n          }\n        }\n      }\n\n      return round(r, r.e + DECIMAL_PLACES + 1, ROUNDING_MODE, m);\n    };\n    /*\r\n     *  n * 0 = 0\r\n     *  n * N = N\r\n     *  n * I = I\r\n     *  0 * n = 0\r\n     *  0 * 0 = 0\r\n     *  0 * N = N\r\n     *  0 * I = N\r\n     *  N * n = N\r\n     *  N * 0 = N\r\n     *  N * N = N\r\n     *  N * I = N\r\n     *  I * n = I\r\n     *  I * 0 = N\r\n     *  I * N = N\r\n     *  I * I = I\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber times the value of\r\n     * BigNumber(y, b).\r\n     */\n\n\n    P.times = P.mul = function (y, b) {\n      var c,\n          e,\n          i,\n          j,\n          k,\n          m,\n          xcL,\n          xlo,\n          xhi,\n          ycL,\n          ylo,\n          yhi,\n          zc,\n          base,\n          sqrtBase,\n          x = this,\n          xc = x.c,\n          yc = (id = 17, y = new BigNumber(y, b)).c; // Either NaN, ±Infinity or ±0?\n\n      if (!xc || !yc || !xc[0] || !yc[0]) {\n        // Return NaN if either is NaN, or one is 0 and the other is Infinity.\n        if (!x.s || !y.s || xc && !xc[0] && !yc || yc && !yc[0] && !xc) {\n          y.c = y.e = y.s = null;\n        } else {\n          y.s *= x.s; // Return ±Infinity if either is ±Infinity.\n\n          if (!xc || !yc) {\n            y.c = y.e = null; // Return ±0 if either is ±0.\n          } else {\n            y.c = [0];\n            y.e = 0;\n          }\n        }\n\n        return y;\n      }\n\n      e = bitFloor(x.e / LOG_BASE) + bitFloor(y.e / LOG_BASE);\n      y.s *= x.s;\n      xcL = xc.length;\n      ycL = yc.length; // Ensure xc points to longer array and xcL to its length.\n\n      if (xcL < ycL) zc = xc, xc = yc, yc = zc, i = xcL, xcL = ycL, ycL = i; // Initialise the result array with zeros.\n\n      for (i = xcL + ycL, zc = []; i--; zc.push(0));\n\n      base = BASE;\n      sqrtBase = SQRT_BASE;\n\n      for (i = ycL; --i >= 0;) {\n        c = 0;\n        ylo = yc[i] % sqrtBase;\n        yhi = yc[i] / sqrtBase | 0;\n\n        for (k = xcL, j = i + k; j > i;) {\n          xlo = xc[--k] % sqrtBase;\n          xhi = xc[k] / sqrtBase | 0;\n          m = yhi * xlo + xhi * ylo;\n          xlo = ylo * xlo + m % sqrtBase * sqrtBase + zc[j] + c;\n          c = (xlo / base | 0) + (m / sqrtBase | 0) + yhi * xhi;\n          zc[j--] = xlo % base;\n        }\n\n        zc[j] = c;\n      }\n\n      if (c) {\n        ++e;\n      } else {\n        zc.splice(0, 1);\n      }\n\n      return normalise(y, zc, e);\n    };\n    /*\r\n     * Return a new BigNumber whose value is the value of this BigNumber rounded to a maximum of\r\n     * sd significant digits using rounding mode rm, or ROUNDING_MODE if rm is omitted.\r\n     *\r\n     * [sd] {number} Significant digits. Integer, 1 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * 'toDigits() precision out of range: {sd}'\r\n     * 'toDigits() precision not an integer: {sd}'\r\n     * 'toDigits() rounding mode not an integer: {rm}'\r\n     * 'toDigits() rounding mode out of range: {rm}'\r\n     */\n\n\n    P.toDigits = function (sd, rm) {\n      var n = new BigNumber(this);\n      sd = sd == null || !isValidInt(sd, 1, MAX, 18, 'precision') ? null : sd | 0;\n      rm = rm == null || !isValidInt(rm, 0, 8, 18, roundingMode) ? ROUNDING_MODE : rm | 0;\n      return sd ? round(n, sd, rm) : n;\n    };\n    /*\r\n     * Return a string representing the value of this BigNumber in exponential notation and\r\n     * rounded using ROUNDING_MODE to dp fixed decimal places.\r\n     *\r\n     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * 'toExponential() decimal places not an integer: {dp}'\r\n     * 'toExponential() decimal places out of range: {dp}'\r\n     * 'toExponential() rounding mode not an integer: {rm}'\r\n     * 'toExponential() rounding mode out of range: {rm}'\r\n     */\n\n\n    P.toExponential = function (dp, rm) {\n      return format(this, dp != null && isValidInt(dp, 0, MAX, 19) ? ~~dp + 1 : null, rm, 19);\n    };\n    /*\r\n     * Return a string representing the value of this BigNumber in fixed-point notation rounding\r\n     * to dp fixed decimal places using rounding mode rm, or ROUNDING_MODE if rm is omitted.\r\n     *\r\n     * Note: as with JavaScript's number type, (-0).toFixed(0) is '0',\r\n     * but e.g. (-0.00001).toFixed(0) is '-0'.\r\n     *\r\n     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * 'toFixed() decimal places not an integer: {dp}'\r\n     * 'toFixed() decimal places out of range: {dp}'\r\n     * 'toFixed() rounding mode not an integer: {rm}'\r\n     * 'toFixed() rounding mode out of range: {rm}'\r\n     */\n\n\n    P.toFixed = function (dp, rm) {\n      return format(this, dp != null && isValidInt(dp, 0, MAX, 20) ? ~~dp + this.e + 1 : null, rm, 20);\n    };\n    /*\r\n     * Return a string representing the value of this BigNumber in fixed-point notation rounded\r\n     * using rm or ROUNDING_MODE to dp decimal places, and formatted according to the properties\r\n     * of the FORMAT object (see BigNumber.config).\r\n     *\r\n     * FORMAT = {\r\n     *      decimalSeparator : '.',\r\n     *      groupSeparator : ',',\r\n     *      groupSize : 3,\r\n     *      secondaryGroupSize : 0,\r\n     *      fractionGroupSeparator : '\\xA0',    // non-breaking space\r\n     *      fractionGroupSize : 0\r\n     * };\r\n     *\r\n     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * 'toFormat() decimal places not an integer: {dp}'\r\n     * 'toFormat() decimal places out of range: {dp}'\r\n     * 'toFormat() rounding mode not an integer: {rm}'\r\n     * 'toFormat() rounding mode out of range: {rm}'\r\n     */\n\n\n    P.toFormat = function (dp, rm) {\n      var str = format(this, dp != null && isValidInt(dp, 0, MAX, 21) ? ~~dp + this.e + 1 : null, rm, 21);\n\n      if (this.c) {\n        var i,\n            arr = str.split('.'),\n            g1 = +FORMAT.groupSize,\n            g2 = +FORMAT.secondaryGroupSize,\n            groupSeparator = FORMAT.groupSeparator,\n            intPart = arr[0],\n            fractionPart = arr[1],\n            isNeg = this.s < 0,\n            intDigits = isNeg ? intPart.slice(1) : intPart,\n            len = intDigits.length;\n        if (g2) i = g1, g1 = g2, g2 = i, len -= i;\n\n        if (g1 > 0 && len > 0) {\n          i = len % g1 || g1;\n          intPart = intDigits.substr(0, i);\n\n          for (; i < len; i += g1) {\n            intPart += groupSeparator + intDigits.substr(i, g1);\n          }\n\n          if (g2 > 0) intPart += groupSeparator + intDigits.slice(i);\n          if (isNeg) intPart = '-' + intPart;\n        }\n\n        str = fractionPart ? intPart + FORMAT.decimalSeparator + ((g2 = +FORMAT.fractionGroupSize) ? fractionPart.replace(new RegExp('\\\\d{' + g2 + '}\\\\B', 'g'), '$&' + FORMAT.fractionGroupSeparator) : fractionPart) : intPart;\n      }\n\n      return str;\n    };\n    /*\r\n     * Return a string array representing the value of this BigNumber as a simple fraction with\r\n     * an integer numerator and an integer denominator. The denominator will be a positive\r\n     * non-zero value less than or equal to the specified maximum denominator. If a maximum\r\n     * denominator is not specified, the denominator will be the lowest value necessary to\r\n     * represent the number exactly.\r\n     *\r\n     * [md] {number|string|BigNumber} Integer >= 1 and < Infinity. The maximum denominator.\r\n     *\r\n     * 'toFraction() max denominator not an integer: {md}'\r\n     * 'toFraction() max denominator out of range: {md}'\r\n     */\n\n\n    P.toFraction = function (md) {\n      var arr,\n          d0,\n          d2,\n          e,\n          exp,\n          n,\n          n0,\n          q,\n          s,\n          k = ERRORS,\n          x = this,\n          xc = x.c,\n          d = new BigNumber(ONE),\n          n1 = d0 = new BigNumber(ONE),\n          d1 = n0 = new BigNumber(ONE);\n\n      if (md != null) {\n        ERRORS = false;\n        n = new BigNumber(md);\n        ERRORS = k;\n\n        if (!(k = n.isInt()) || n.lt(ONE)) {\n          if (ERRORS) {\n            raise(22, 'max denominator ' + (k ? 'out of range' : 'not an integer'), md);\n          } // ERRORS is false:\n          // If md is a finite non-integer >= 1, round it to an integer and use it.\n\n\n          md = !k && n.c && round(n, n.e + 1, 1).gte(ONE) ? n : null;\n        }\n      }\n\n      if (!xc) return x.toString();\n      s = coeffToString(xc); // Determine initial denominator.\n      // d is a power of 10 and the minimum max denominator that specifies the value exactly.\n\n      e = d.e = s.length - x.e - 1;\n      d.c[0] = POWS_TEN[(exp = e % LOG_BASE) < 0 ? LOG_BASE + exp : exp];\n      md = !md || n.cmp(d) > 0 ? e > 0 ? d : n1 : n;\n      exp = MAX_EXP;\n      MAX_EXP = 1 / 0;\n      n = new BigNumber(s); // n0 = d1 = 0\n\n      n0.c[0] = 0;\n\n      for (;;) {\n        q = div(n, d, 0, 1);\n        d2 = d0.plus(q.times(d1));\n        if (d2.cmp(md) == 1) break;\n        d0 = d1;\n        d1 = d2;\n        n1 = n0.plus(q.times(d2 = n1));\n        n0 = d2;\n        d = n.minus(q.times(d2 = d));\n        n = d2;\n      }\n\n      d2 = div(md.minus(d0), d1, 0, 1);\n      n0 = n0.plus(d2.times(n1));\n      d0 = d0.plus(d2.times(d1));\n      n0.s = n1.s = x.s;\n      e *= 2; // Determine which fraction is closer to x, n0/d0 or n1/d1\n\n      arr = div(n1, d1, e, ROUNDING_MODE).minus(x).abs().cmp(div(n0, d0, e, ROUNDING_MODE).minus(x).abs()) < 1 ? [n1.toString(), d1.toString()] : [n0.toString(), d0.toString()];\n      MAX_EXP = exp;\n      return arr;\n    };\n    /*\r\n     * Return the value of this BigNumber converted to a number primitive.\r\n     */\n\n\n    P.toNumber = function () {\n      return +this;\n    };\n    /*\r\n     * Return a BigNumber whose value is the value of this BigNumber raised to the power n.\r\n     * If m is present, return the result modulo m.\r\n     * If n is negative round according to DECIMAL_PLACES and ROUNDING_MODE.\r\n     * If POW_PRECISION is non-zero and m is not present, round to POW_PRECISION using\r\n     * ROUNDING_MODE.\r\n     *\r\n     * The modular power operation works efficiently when x, n, and m are positive integers,\r\n     * otherwise it is equivalent to calculating x.toPower(n).modulo(m) (with POW_PRECISION 0).\r\n     *\r\n     * n {number} Integer, -MAX_SAFE_INTEGER to MAX_SAFE_INTEGER inclusive.\r\n     * [m] {number|string|BigNumber} The modulus.\r\n     *\r\n     * 'pow() exponent not an integer: {n}'\r\n     * 'pow() exponent out of range: {n}'\r\n     *\r\n     * Performs 54 loop iterations for n of 9007199254740991.\r\n     */\n\n\n    P.toPower = P.pow = function (n, m) {\n      var k,\n          y,\n          z,\n          i = mathfloor(n < 0 ? -n : +n),\n          x = this;\n\n      if (m != null) {\n        id = 23;\n        m = new BigNumber(m);\n      } // Pass ±Infinity to Math.pow if exponent is out of range.\n\n\n      if (!isValidInt(n, -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER, 23, 'exponent') && (!isFinite(n) || i > MAX_SAFE_INTEGER && (n /= 0) || parseFloat(n) != n && !(n = NaN)) || n == 0) {\n        k = Math.pow(+x, n);\n        return new BigNumber(m ? k % m : k);\n      }\n\n      if (m) {\n        if (n > 1 && x.gt(ONE) && x.isInt() && m.gt(ONE) && m.isInt()) {\n          x = x.mod(m);\n        } else {\n          z = m; // Nullify m so only a single mod operation is performed at the end.\n\n          m = null;\n        }\n      } else if (POW_PRECISION) {\n        // Truncating each coefficient array to a length of k after each multiplication\n        // equates to truncating significant digits to POW_PRECISION + [28, 41],\n        // i.e. there will be a minimum of 28 guard digits retained.\n        // (Using + 1.5 would give [9, 21] guard digits.)\n        k = mathceil(POW_PRECISION / LOG_BASE + 2);\n      }\n\n      y = new BigNumber(ONE);\n\n      for (;;) {\n        if (i % 2) {\n          y = y.times(x);\n          if (!y.c) break;\n\n          if (k) {\n            if (y.c.length > k) y.c.length = k;\n          } else if (m) {\n            y = y.mod(m);\n          }\n        }\n\n        i = mathfloor(i / 2);\n        if (!i) break;\n        x = x.times(x);\n\n        if (k) {\n          if (x.c && x.c.length > k) x.c.length = k;\n        } else if (m) {\n          x = x.mod(m);\n        }\n      }\n\n      if (m) return y;\n      if (n < 0) y = ONE.div(y);\n      return z ? y.mod(z) : k ? round(y, POW_PRECISION, ROUNDING_MODE) : y;\n    };\n    /*\r\n     * Return a string representing the value of this BigNumber rounded to sd significant digits\r\n     * using rounding mode rm or ROUNDING_MODE. If sd is less than the number of digits\r\n     * necessary to represent the integer part of the value in fixed-point notation, then use\r\n     * exponential notation.\r\n     *\r\n     * [sd] {number} Significant digits. Integer, 1 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * 'toPrecision() precision not an integer: {sd}'\r\n     * 'toPrecision() precision out of range: {sd}'\r\n     * 'toPrecision() rounding mode not an integer: {rm}'\r\n     * 'toPrecision() rounding mode out of range: {rm}'\r\n     */\n\n\n    P.toPrecision = function (sd, rm) {\n      return format(this, sd != null && isValidInt(sd, 1, MAX, 24, 'precision') ? sd | 0 : null, rm, 24);\n    };\n    /*\r\n     * Return a string representing the value of this BigNumber in base b, or base 10 if b is\r\n     * omitted. If a base is specified, including base 10, round according to DECIMAL_PLACES and\r\n     * ROUNDING_MODE. If a base is not specified, and this BigNumber has a positive exponent\r\n     * that is equal to or greater than TO_EXP_POS, or a negative exponent equal to or less than\r\n     * TO_EXP_NEG, return exponential notation.\r\n     *\r\n     * [b] {number} Integer, 2 to 64 inclusive.\r\n     *\r\n     * 'toString() base not an integer: {b}'\r\n     * 'toString() base out of range: {b}'\r\n     */\n\n\n    P.toString = function (b) {\n      var str,\n          n = this,\n          s = n.s,\n          e = n.e; // Infinity or NaN?\n\n      if (e === null) {\n        if (s) {\n          str = 'Infinity';\n          if (s < 0) str = '-' + str;\n        } else {\n          str = 'NaN';\n        }\n      } else {\n        str = coeffToString(n.c);\n\n        if (b == null || !isValidInt(b, 2, 64, 25, 'base')) {\n          str = e <= TO_EXP_NEG || e >= TO_EXP_POS ? toExponential(str, e) : toFixedPoint(str, e);\n        } else {\n          str = convertBase(toFixedPoint(str, e), b | 0, 10, s);\n        }\n\n        if (s < 0 && n.c[0]) str = '-' + str;\n      }\n\n      return str;\n    };\n    /*\r\n     * Return a new BigNumber whose value is the value of this BigNumber truncated to a whole\r\n     * number.\r\n     */\n\n\n    P.truncated = P.trunc = function () {\n      return round(new BigNumber(this), this.e + 1, 1);\n    };\n    /*\r\n     * Return as toString, but do not accept a base argument, and include the minus sign for\r\n     * negative zero.\r\n     */\n\n\n    P.valueOf = P.toJSON = function () {\n      var str,\n          n = this,\n          e = n.e;\n      if (e === null) return n.toString();\n      str = coeffToString(n.c);\n      str = e <= TO_EXP_NEG || e >= TO_EXP_POS ? toExponential(str, e) : toFixedPoint(str, e);\n      return n.s < 0 ? '-' + str : str;\n    };\n\n    P.isBigNumber = true;\n    if (config != null) BigNumber.config(config);\n    return BigNumber;\n  } // PRIVATE HELPER FUNCTIONS\n\n\n  function bitFloor(n) {\n    var i = n | 0;\n    return n > 0 || n === i ? i : i - 1;\n  } // Return a coefficient array as a string of base 10 digits.\n\n\n  function coeffToString(a) {\n    var s,\n        z,\n        i = 1,\n        j = a.length,\n        r = a[0] + '';\n\n    for (; i < j;) {\n      s = a[i++] + '';\n      z = LOG_BASE - s.length;\n\n      for (; z--; s = '0' + s);\n\n      r += s;\n    } // Determine trailing zeros.\n\n\n    for (j = r.length; r.charCodeAt(--j) === 48;);\n\n    return r.slice(0, j + 1 || 1);\n  } // Compare the value of BigNumbers x and y.\n\n\n  function compare(x, y) {\n    var a,\n        b,\n        xc = x.c,\n        yc = y.c,\n        i = x.s,\n        j = y.s,\n        k = x.e,\n        l = y.e; // Either NaN?\n\n    if (!i || !j) return null;\n    a = xc && !xc[0];\n    b = yc && !yc[0]; // Either zero?\n\n    if (a || b) return a ? b ? 0 : -j : i; // Signs differ?\n\n    if (i != j) return i;\n    a = i < 0;\n    b = k == l; // Either Infinity?\n\n    if (!xc || !yc) return b ? 0 : !xc ^ a ? 1 : -1; // Compare exponents.\n\n    if (!b) return k > l ^ a ? 1 : -1;\n    j = (k = xc.length) < (l = yc.length) ? k : l; // Compare digit by digit.\n\n    for (i = 0; i < j; i++) if (xc[i] != yc[i]) return xc[i] > yc[i] ^ a ? 1 : -1; // Compare lengths.\n\n\n    return k == l ? 0 : k > l ^ a ? 1 : -1;\n  }\n  /*\r\n   * Return true if n is a valid number in range, otherwise false.\r\n   * Use for argument validation when ERRORS is false.\r\n   * Note: parseInt('1e+1') == 1 but parseFloat('1e+1') == 10.\r\n   */\n\n\n  function intValidatorNoErrors(n, min, max) {\n    return (n = truncate(n)) >= min && n <= max;\n  }\n\n  function isArray(obj) {\n    return Object.prototype.toString.call(obj) == '[object Array]';\n  }\n  /*\r\n   * Convert string of baseIn to an array of numbers of baseOut.\r\n   * Eg. convertBase('255', 10, 16) returns [15, 15].\r\n   * Eg. convertBase('ff', 16, 10) returns [2, 5, 5].\r\n   */\n\n\n  function toBaseOut(str, baseIn, baseOut) {\n    var j,\n        arr = [0],\n        arrL,\n        i = 0,\n        len = str.length;\n\n    for (; i < len;) {\n      for (arrL = arr.length; arrL--; arr[arrL] *= baseIn);\n\n      arr[j = 0] += ALPHABET.indexOf(str.charAt(i++));\n\n      for (; j < arr.length; j++) {\n        if (arr[j] > baseOut - 1) {\n          if (arr[j + 1] == null) arr[j + 1] = 0;\n          arr[j + 1] += arr[j] / baseOut | 0;\n          arr[j] %= baseOut;\n        }\n      }\n    }\n\n    return arr.reverse();\n  }\n\n  function toExponential(str, e) {\n    return (str.length > 1 ? str.charAt(0) + '.' + str.slice(1) : str) + (e < 0 ? 'e' : 'e+') + e;\n  }\n\n  function toFixedPoint(str, e) {\n    var len, z; // Negative exponent?\n\n    if (e < 0) {\n      // Prepend zeros.\n      for (z = '0.'; ++e; z += '0');\n\n      str = z + str; // Positive exponent\n    } else {\n      len = str.length; // Append zeros.\n\n      if (++e > len) {\n        for (z = '0', e -= len; --e; z += '0');\n\n        str += z;\n      } else if (e < len) {\n        str = str.slice(0, e) + '.' + str.slice(e);\n      }\n    }\n\n    return str;\n  }\n\n  function truncate(n) {\n    n = parseFloat(n);\n    return n < 0 ? mathceil(n) : mathfloor(n);\n  } // EXPORT\n\n\n  BigNumber = constructorFactory();\n  BigNumber['default'] = BigNumber.BigNumber = BigNumber; // AMD.\n\n  if (typeof define == 'function' && define.amd) {\n    define(function () {\n      return BigNumber;\n    }); // Node.js and other environments that support module.exports.\n  } else if (typeof module != 'undefined' && module.exports) {\n    module.exports = BigNumber; // Browser.\n  } else {\n    if (!globalObj) globalObj = typeof self != 'undefined' ? self : Function('return this')();\n    globalObj.BigNumber = BigNumber;\n  }\n})(this);","map":{"version":3,"names":["globalObj","BigNumber","isNumeric","mathceil","Math","ceil","mathfloor","floor","notBool","roundingMode","tooManyDigits","ALPHABET","BASE","LOG_BASE","MAX_SAFE_INTEGER","POWS_TEN","SQRT_BASE","MAX","constructorFactory","config","div","parseNumeric","id","P","prototype","ONE","DECIMAL_PLACES","ROUNDING_MODE","TO_EXP_NEG","TO_EXP_POS","MIN_EXP","MAX_EXP","ERRORS","isValidInt","intValidatorWithErrors","CRYPTO","MODULO_MODE","POW_PRECISION","FORMAT","decimalSeparator","groupSeparator","groupSize","secondaryGroupSize","fractionGroupSeparator","fractionGroupSize","n","b","c","e","i","num","len","str","x","raise","s","slice","test","charCodeAt","round","RegExp","replace","length","convertBase","indexOf","search","substring","push","another","ROUND_UP","ROUND_DOWN","ROUND_CEIL","ROUND_FLOOR","ROUND_HALF_UP","ROUND_HALF_DOWN","ROUND_HALF_EVEN","ROUND_HALF_CEIL","ROUND_HALF_FLOOR","EUCLID","set","v","p","r","a","arguments","o","has","hasOwnProperty","isArray","intValidatorNoErrors","crypto","getRandomValues","randomBytes","max","maxOrMin","lt","min","gt","random","pow2_53","random53bitInt","dp","k","rand","Uint32Array","copy","pop","splice","baseOut","baseIn","sign","d","xc","y","rm","toLowerCase","pow","toBaseOut","toFixedPoint","coeffToString","concat","charAt","multiply","base","m","temp","xlo","xhi","carry","klo","khi","compare","aL","bL","cmp","subtract","more","prod","prodL","q","qc","rem","remL","rem0","xi","xL","yc0","yL","yz","yc","NaN","bitFloor","format","caller","c0","ne","toString","toExponential","args","method","call","name","truncate","normalise","j","basePrefix","dotAfter","dotBefore","isInfinityOrNaN","whitespaceOrPlus","isNaN","p1","p2","msg","val","error","Error","sd","ni","rd","pows10","out","absoluteValue","abs","comparedTo","decimalPlaces","dividedBy","dividedToIntegerBy","divToInt","equals","eq","greaterThan","greaterThanOrEqualTo","gte","isFinite","isInteger","isInt","isNegative","isNeg","isZero","lessThan","lessThanOrEqualTo","lte","minus","sub","t","xLTy","plus","xe","ye","reverse","modulo","mod","times","negated","neg","add","precision","z","shift","squareRoot","sqrt","rep","half","mul","xcL","ycL","ylo","yhi","zc","sqrtBase","toDigits","toFixed","toFormat","arr","split","g1","g2","intPart","fractionPart","intDigits","substr","toFraction","md","d0","d2","exp","n0","n1","d1","toNumber","toPower","parseFloat","toPrecision","truncated","trunc","valueOf","toJSON","isBigNumber","l","obj","Object","arrL","define","amd","module","exports","self","Function"],"sources":["C:/Users/raiab/Documents/Logics Yard/NFT code daniyal/NFT code/client/node_modules/@0xproject/web3-wrapper/node_modules/@0xproject/utils/node_modules/bignumber.js/bignumber.js"],"sourcesContent":["/*! bignumber.js v4.1.0 https://github.com/MikeMcl/bignumber.js/LICENCE */\r\n\r\n;(function (globalObj) {\r\n    'use strict';\r\n\r\n    /*\r\n      bignumber.js v4.1.0\r\n      A JavaScript library for arbitrary-precision arithmetic.\r\n      https://github.com/MikeMcl/bignumber.js\r\n      Copyright (c) 2017 Michael Mclaughlin <M8ch88l@gmail.com>\r\n      MIT Expat Licence\r\n    */\r\n\r\n\r\n    var BigNumber,\r\n        isNumeric = /^-?(\\d+(\\.\\d*)?|\\.\\d+)(e[+-]?\\d+)?$/i,\r\n        mathceil = Math.ceil,\r\n        mathfloor = Math.floor,\r\n        notBool = ' not a boolean or binary digit',\r\n        roundingMode = 'rounding mode',\r\n        tooManyDigits = 'number type has more than 15 significant digits',\r\n        ALPHABET = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ$_',\r\n        BASE = 1e14,\r\n        LOG_BASE = 14,\r\n        MAX_SAFE_INTEGER = 0x1fffffffffffff,         // 2^53 - 1\r\n        // MAX_INT32 = 0x7fffffff,                   // 2^31 - 1\r\n        POWS_TEN = [1, 10, 100, 1e3, 1e4, 1e5, 1e6, 1e7, 1e8, 1e9, 1e10, 1e11, 1e12, 1e13],\r\n        SQRT_BASE = 1e7,\r\n\r\n        /*\r\n         * The limit on the value of DECIMAL_PLACES, TO_EXP_NEG, TO_EXP_POS, MIN_EXP, MAX_EXP, and\r\n         * the arguments to toExponential, toFixed, toFormat, and toPrecision, beyond which an\r\n         * exception is thrown (if ERRORS is true).\r\n         */\r\n        MAX = 1E9;                                   // 0 to MAX_INT32\r\n\r\n\r\n    /*\r\n     * Create and return a BigNumber constructor.\r\n     */\r\n    function constructorFactory(config) {\r\n        var div, parseNumeric,\r\n\r\n            // id tracks the caller function, so its name can be included in error messages.\r\n            id = 0,\r\n            P = BigNumber.prototype,\r\n            ONE = new BigNumber(1),\r\n\r\n\r\n            /********************************* EDITABLE DEFAULTS **********************************/\r\n\r\n\r\n            /*\r\n             * The default values below must be integers within the inclusive ranges stated.\r\n             * The values can also be changed at run-time using BigNumber.config.\r\n             */\r\n\r\n            // The maximum number of decimal places for operations involving division.\r\n            DECIMAL_PLACES = 20,                     // 0 to MAX\r\n\r\n            /*\r\n             * The rounding mode used when rounding to the above decimal places, and when using\r\n             * toExponential, toFixed, toFormat and toPrecision, and round (default value).\r\n             * UP         0 Away from zero.\r\n             * DOWN       1 Towards zero.\r\n             * CEIL       2 Towards +Infinity.\r\n             * FLOOR      3 Towards -Infinity.\r\n             * HALF_UP    4 Towards nearest neighbour. If equidistant, up.\r\n             * HALF_DOWN  5 Towards nearest neighbour. If equidistant, down.\r\n             * HALF_EVEN  6 Towards nearest neighbour. If equidistant, towards even neighbour.\r\n             * HALF_CEIL  7 Towards nearest neighbour. If equidistant, towards +Infinity.\r\n             * HALF_FLOOR 8 Towards nearest neighbour. If equidistant, towards -Infinity.\r\n             */\r\n            ROUNDING_MODE = 4,                       // 0 to 8\r\n\r\n            // EXPONENTIAL_AT : [TO_EXP_NEG , TO_EXP_POS]\r\n\r\n            // The exponent value at and beneath which toString returns exponential notation.\r\n            // Number type: -7\r\n            TO_EXP_NEG = -7,                         // 0 to -MAX\r\n\r\n            // The exponent value at and above which toString returns exponential notation.\r\n            // Number type: 21\r\n            TO_EXP_POS = 21,                         // 0 to MAX\r\n\r\n            // RANGE : [MIN_EXP, MAX_EXP]\r\n\r\n            // The minimum exponent value, beneath which underflow to zero occurs.\r\n            // Number type: -324  (5e-324)\r\n            MIN_EXP = -1e7,                          // -1 to -MAX\r\n\r\n            // The maximum exponent value, above which overflow to Infinity occurs.\r\n            // Number type:  308  (1.7976931348623157e+308)\r\n            // For MAX_EXP > 1e7, e.g. new BigNumber('1e100000000').plus(1) may be slow.\r\n            MAX_EXP = 1e7,                           // 1 to MAX\r\n\r\n            // Whether BigNumber Errors are ever thrown.\r\n            ERRORS = true,                           // true or false\r\n\r\n            // Change to intValidatorNoErrors if ERRORS is false.\r\n            isValidInt = intValidatorWithErrors,     // intValidatorWithErrors/intValidatorNoErrors\r\n\r\n            // Whether to use cryptographically-secure random number generation, if available.\r\n            CRYPTO = false,                          // true or false\r\n\r\n            /*\r\n             * The modulo mode used when calculating the modulus: a mod n.\r\n             * The quotient (q = a / n) is calculated according to the corresponding rounding mode.\r\n             * The remainder (r) is calculated as: r = a - n * q.\r\n             *\r\n             * UP        0 The remainder is positive if the dividend is negative, else is negative.\r\n             * DOWN      1 The remainder has the same sign as the dividend.\r\n             *             This modulo mode is commonly known as 'truncated division' and is\r\n             *             equivalent to (a % n) in JavaScript.\r\n             * FLOOR     3 The remainder has the same sign as the divisor (Python %).\r\n             * HALF_EVEN 6 This modulo mode implements the IEEE 754 remainder function.\r\n             * EUCLID    9 Euclidian division. q = sign(n) * floor(a / abs(n)).\r\n             *             The remainder is always positive.\r\n             *\r\n             * The truncated division, floored division, Euclidian division and IEEE 754 remainder\r\n             * modes are commonly used for the modulus operation.\r\n             * Although the other rounding modes can also be used, they may not give useful results.\r\n             */\r\n            MODULO_MODE = 1,                         // 0 to 9\r\n\r\n            // The maximum number of significant digits of the result of the toPower operation.\r\n            // If POW_PRECISION is 0, there will be unlimited significant digits.\r\n            POW_PRECISION = 0,                       // 0 to MAX\r\n\r\n            // The format specification used by the BigNumber.prototype.toFormat method.\r\n            FORMAT = {\r\n                decimalSeparator: '.',\r\n                groupSeparator: ',',\r\n                groupSize: 3,\r\n                secondaryGroupSize: 0,\r\n                fractionGroupSeparator: '\\xA0',      // non-breaking space\r\n                fractionGroupSize: 0\r\n            };\r\n\r\n\r\n        /******************************************************************************************/\r\n\r\n\r\n        // CONSTRUCTOR\r\n\r\n\r\n        /*\r\n         * The BigNumber constructor and exported function.\r\n         * Create and return a new instance of a BigNumber object.\r\n         *\r\n         * n {number|string|BigNumber} A numeric value.\r\n         * [b] {number} The base of n. Integer, 2 to 64 inclusive.\r\n         */\r\n        function BigNumber( n, b ) {\r\n            var c, e, i, num, len, str,\r\n                x = this;\r\n\r\n            // Enable constructor usage without new.\r\n            if ( !( x instanceof BigNumber ) ) {\r\n\r\n                // 'BigNumber() constructor call without new: {n}'\r\n                if (ERRORS) raise( 26, 'constructor call without new', n );\r\n                return new BigNumber( n, b );\r\n            }\r\n\r\n            // 'new BigNumber() base not an integer: {b}'\r\n            // 'new BigNumber() base out of range: {b}'\r\n            if ( b == null || !isValidInt( b, 2, 64, id, 'base' ) ) {\r\n\r\n                // Duplicate.\r\n                if ( n instanceof BigNumber ) {\r\n                    x.s = n.s;\r\n                    x.e = n.e;\r\n                    x.c = ( n = n.c ) ? n.slice() : n;\r\n                    id = 0;\r\n                    return;\r\n                }\r\n\r\n                if ( ( num = typeof n == 'number' ) && n * 0 == 0 ) {\r\n                    x.s = 1 / n < 0 ? ( n = -n, -1 ) : 1;\r\n\r\n                    // Fast path for integers.\r\n                    if ( n === ~~n ) {\r\n                        for ( e = 0, i = n; i >= 10; i /= 10, e++ );\r\n                        x.e = e;\r\n                        x.c = [n];\r\n                        id = 0;\r\n                        return;\r\n                    }\r\n\r\n                    str = n + '';\r\n                } else {\r\n                    if ( !isNumeric.test( str = n + '' ) ) return parseNumeric( x, str, num );\r\n                    x.s = str.charCodeAt(0) === 45 ? ( str = str.slice(1), -1 ) : 1;\r\n                }\r\n            } else {\r\n                b = b | 0;\r\n                str = n + '';\r\n\r\n                // Ensure return value is rounded to DECIMAL_PLACES as with other bases.\r\n                // Allow exponential notation to be used with base 10 argument.\r\n                if ( b == 10 ) {\r\n                    x = new BigNumber( n instanceof BigNumber ? n : str );\r\n                    return round( x, DECIMAL_PLACES + x.e + 1, ROUNDING_MODE );\r\n                }\r\n\r\n                // Avoid potential interpretation of Infinity and NaN as base 44+ values.\r\n                // Any number in exponential form will fail due to the [Ee][+-].\r\n                if ( ( num = typeof n == 'number' ) && n * 0 != 0 ||\r\n                  !( new RegExp( '^-?' + ( c = '[' + ALPHABET.slice( 0, b ) + ']+' ) +\r\n                    '(?:\\\\.' + c + ')?$',b < 37 ? 'i' : '' ) ).test(str) ) {\r\n                    return parseNumeric( x, str, num, b );\r\n                }\r\n\r\n                if (num) {\r\n                    x.s = 1 / n < 0 ? ( str = str.slice(1), -1 ) : 1;\r\n\r\n                    if ( ERRORS && str.replace( /^0\\.0*|\\./, '' ).length > 15 ) {\r\n\r\n                        // 'new BigNumber() number type has more than 15 significant digits: {n}'\r\n                        raise( id, tooManyDigits, n );\r\n                    }\r\n\r\n                    // Prevent later check for length on converted number.\r\n                    num = false;\r\n                } else {\r\n                    x.s = str.charCodeAt(0) === 45 ? ( str = str.slice(1), -1 ) : 1;\r\n                }\r\n\r\n                str = convertBase( str, 10, b, x.s );\r\n            }\r\n\r\n            // Decimal point?\r\n            if ( ( e = str.indexOf('.') ) > -1 ) str = str.replace( '.', '' );\r\n\r\n            // Exponential form?\r\n            if ( ( i = str.search( /e/i ) ) > 0 ) {\r\n\r\n                // Determine exponent.\r\n                if ( e < 0 ) e = i;\r\n                e += +str.slice( i + 1 );\r\n                str = str.substring( 0, i );\r\n            } else if ( e < 0 ) {\r\n\r\n                // Integer.\r\n                e = str.length;\r\n            }\r\n\r\n            // Determine leading zeros.\r\n            for ( i = 0; str.charCodeAt(i) === 48; i++ );\r\n\r\n            // Determine trailing zeros.\r\n            for ( len = str.length; str.charCodeAt(--len) === 48; );\r\n            str = str.slice( i, len + 1 );\r\n\r\n            if (str) {\r\n                len = str.length;\r\n\r\n                // Disallow numbers with over 15 significant digits if number type.\r\n                // 'new BigNumber() number type has more than 15 significant digits: {n}'\r\n                if ( num && ERRORS && len > 15 && ( n > MAX_SAFE_INTEGER || n !== mathfloor(n) ) ) {\r\n                    raise( id, tooManyDigits, x.s * n );\r\n                }\r\n\r\n                e = e - i - 1;\r\n\r\n                 // Overflow?\r\n                if ( e > MAX_EXP ) {\r\n\r\n                    // Infinity.\r\n                    x.c = x.e = null;\r\n\r\n                // Underflow?\r\n                } else if ( e < MIN_EXP ) {\r\n\r\n                    // Zero.\r\n                    x.c = [ x.e = 0 ];\r\n                } else {\r\n                    x.e = e;\r\n                    x.c = [];\r\n\r\n                    // Transform base\r\n\r\n                    // e is the base 10 exponent.\r\n                    // i is where to slice str to get the first element of the coefficient array.\r\n                    i = ( e + 1 ) % LOG_BASE;\r\n                    if ( e < 0 ) i += LOG_BASE;\r\n\r\n                    if ( i < len ) {\r\n                        if (i) x.c.push( +str.slice( 0, i ) );\r\n\r\n                        for ( len -= LOG_BASE; i < len; ) {\r\n                            x.c.push( +str.slice( i, i += LOG_BASE ) );\r\n                        }\r\n\r\n                        str = str.slice(i);\r\n                        i = LOG_BASE - str.length;\r\n                    } else {\r\n                        i -= len;\r\n                    }\r\n\r\n                    for ( ; i--; str += '0' );\r\n                    x.c.push( +str );\r\n                }\r\n            } else {\r\n\r\n                // Zero.\r\n                x.c = [ x.e = 0 ];\r\n            }\r\n\r\n            id = 0;\r\n        }\r\n\r\n\r\n        // CONSTRUCTOR PROPERTIES\r\n\r\n\r\n        BigNumber.another = constructorFactory;\r\n\r\n        BigNumber.ROUND_UP = 0;\r\n        BigNumber.ROUND_DOWN = 1;\r\n        BigNumber.ROUND_CEIL = 2;\r\n        BigNumber.ROUND_FLOOR = 3;\r\n        BigNumber.ROUND_HALF_UP = 4;\r\n        BigNumber.ROUND_HALF_DOWN = 5;\r\n        BigNumber.ROUND_HALF_EVEN = 6;\r\n        BigNumber.ROUND_HALF_CEIL = 7;\r\n        BigNumber.ROUND_HALF_FLOOR = 8;\r\n        BigNumber.EUCLID = 9;\r\n\r\n\r\n        /*\r\n         * Configure infrequently-changing library-wide settings.\r\n         *\r\n         * Accept an object or an argument list, with one or many of the following properties or\r\n         * parameters respectively:\r\n         *\r\n         *   DECIMAL_PLACES  {number}  Integer, 0 to MAX inclusive\r\n         *   ROUNDING_MODE   {number}  Integer, 0 to 8 inclusive\r\n         *   EXPONENTIAL_AT  {number|number[]}  Integer, -MAX to MAX inclusive or\r\n         *                                      [integer -MAX to 0 incl., 0 to MAX incl.]\r\n         *   RANGE           {number|number[]}  Non-zero integer, -MAX to MAX inclusive or\r\n         *                                      [integer -MAX to -1 incl., integer 1 to MAX incl.]\r\n         *   ERRORS          {boolean|number}   true, false, 1 or 0\r\n         *   CRYPTO          {boolean|number}   true, false, 1 or 0\r\n         *   MODULO_MODE     {number}           0 to 9 inclusive\r\n         *   POW_PRECISION   {number}           0 to MAX inclusive\r\n         *   FORMAT          {object}           See BigNumber.prototype.toFormat\r\n         *      decimalSeparator       {string}\r\n         *      groupSeparator         {string}\r\n         *      groupSize              {number}\r\n         *      secondaryGroupSize     {number}\r\n         *      fractionGroupSeparator {string}\r\n         *      fractionGroupSize      {number}\r\n         *\r\n         * (The values assigned to the above FORMAT object properties are not checked for validity.)\r\n         *\r\n         * E.g.\r\n         * BigNumber.config(20, 4) is equivalent to\r\n         * BigNumber.config({ DECIMAL_PLACES : 20, ROUNDING_MODE : 4 })\r\n         *\r\n         * Ignore properties/parameters set to null or undefined.\r\n         * Return an object with the properties current values.\r\n         */\r\n        BigNumber.config = BigNumber.set = function () {\r\n            var v, p,\r\n                i = 0,\r\n                r = {},\r\n                a = arguments,\r\n                o = a[0],\r\n                has = o && typeof o == 'object'\r\n                  ? function () { if ( o.hasOwnProperty(p) ) return ( v = o[p] ) != null; }\r\n                  : function () { if ( a.length > i ) return ( v = a[i++] ) != null; };\r\n\r\n            // DECIMAL_PLACES {number} Integer, 0 to MAX inclusive.\r\n            // 'config() DECIMAL_PLACES not an integer: {v}'\r\n            // 'config() DECIMAL_PLACES out of range: {v}'\r\n            if ( has( p = 'DECIMAL_PLACES' ) && isValidInt( v, 0, MAX, 2, p ) ) {\r\n                DECIMAL_PLACES = v | 0;\r\n            }\r\n            r[p] = DECIMAL_PLACES;\r\n\r\n            // ROUNDING_MODE {number} Integer, 0 to 8 inclusive.\r\n            // 'config() ROUNDING_MODE not an integer: {v}'\r\n            // 'config() ROUNDING_MODE out of range: {v}'\r\n            if ( has( p = 'ROUNDING_MODE' ) && isValidInt( v, 0, 8, 2, p ) ) {\r\n                ROUNDING_MODE = v | 0;\r\n            }\r\n            r[p] = ROUNDING_MODE;\r\n\r\n            // EXPONENTIAL_AT {number|number[]}\r\n            // Integer, -MAX to MAX inclusive or [integer -MAX to 0 inclusive, 0 to MAX inclusive].\r\n            // 'config() EXPONENTIAL_AT not an integer: {v}'\r\n            // 'config() EXPONENTIAL_AT out of range: {v}'\r\n            if ( has( p = 'EXPONENTIAL_AT' ) ) {\r\n\r\n                if ( isArray(v) ) {\r\n                    if ( isValidInt( v[0], -MAX, 0, 2, p ) && isValidInt( v[1], 0, MAX, 2, p ) ) {\r\n                        TO_EXP_NEG = v[0] | 0;\r\n                        TO_EXP_POS = v[1] | 0;\r\n                    }\r\n                } else if ( isValidInt( v, -MAX, MAX, 2, p ) ) {\r\n                    TO_EXP_NEG = -( TO_EXP_POS = ( v < 0 ? -v : v ) | 0 );\r\n                }\r\n            }\r\n            r[p] = [ TO_EXP_NEG, TO_EXP_POS ];\r\n\r\n            // RANGE {number|number[]} Non-zero integer, -MAX to MAX inclusive or\r\n            // [integer -MAX to -1 inclusive, integer 1 to MAX inclusive].\r\n            // 'config() RANGE not an integer: {v}'\r\n            // 'config() RANGE cannot be zero: {v}'\r\n            // 'config() RANGE out of range: {v}'\r\n            if ( has( p = 'RANGE' ) ) {\r\n\r\n                if ( isArray(v) ) {\r\n                    if ( isValidInt( v[0], -MAX, -1, 2, p ) && isValidInt( v[1], 1, MAX, 2, p ) ) {\r\n                        MIN_EXP = v[0] | 0;\r\n                        MAX_EXP = v[1] | 0;\r\n                    }\r\n                } else if ( isValidInt( v, -MAX, MAX, 2, p ) ) {\r\n                    if ( v | 0 ) MIN_EXP = -( MAX_EXP = ( v < 0 ? -v : v ) | 0 );\r\n                    else if (ERRORS) raise( 2, p + ' cannot be zero', v );\r\n                }\r\n            }\r\n            r[p] = [ MIN_EXP, MAX_EXP ];\r\n\r\n            // ERRORS {boolean|number} true, false, 1 or 0.\r\n            // 'config() ERRORS not a boolean or binary digit: {v}'\r\n            if ( has( p = 'ERRORS' ) ) {\r\n\r\n                if ( v === !!v || v === 1 || v === 0 ) {\r\n                    id = 0;\r\n                    isValidInt = ( ERRORS = !!v ) ? intValidatorWithErrors : intValidatorNoErrors;\r\n                } else if (ERRORS) {\r\n                    raise( 2, p + notBool, v );\r\n                }\r\n            }\r\n            r[p] = ERRORS;\r\n\r\n            // CRYPTO {boolean|number} true, false, 1 or 0.\r\n            // 'config() CRYPTO not a boolean or binary digit: {v}'\r\n            // 'config() crypto unavailable: {crypto}'\r\n            if ( has( p = 'CRYPTO' ) ) {\r\n\r\n                if ( v === true || v === false || v === 1 || v === 0 ) {\r\n                    if (v) {\r\n                        v = typeof crypto == 'undefined';\r\n                        if ( !v && crypto && (crypto.getRandomValues || crypto.randomBytes)) {\r\n                            CRYPTO = true;\r\n                        } else if (ERRORS) {\r\n                            raise( 2, 'crypto unavailable', v ? void 0 : crypto );\r\n                        } else {\r\n                            CRYPTO = false;\r\n                        }\r\n                    } else {\r\n                        CRYPTO = false;\r\n                    }\r\n                } else if (ERRORS) {\r\n                    raise( 2, p + notBool, v );\r\n                }\r\n            }\r\n            r[p] = CRYPTO;\r\n\r\n            // MODULO_MODE {number} Integer, 0 to 9 inclusive.\r\n            // 'config() MODULO_MODE not an integer: {v}'\r\n            // 'config() MODULO_MODE out of range: {v}'\r\n            if ( has( p = 'MODULO_MODE' ) && isValidInt( v, 0, 9, 2, p ) ) {\r\n                MODULO_MODE = v | 0;\r\n            }\r\n            r[p] = MODULO_MODE;\r\n\r\n            // POW_PRECISION {number} Integer, 0 to MAX inclusive.\r\n            // 'config() POW_PRECISION not an integer: {v}'\r\n            // 'config() POW_PRECISION out of range: {v}'\r\n            if ( has( p = 'POW_PRECISION' ) && isValidInt( v, 0, MAX, 2, p ) ) {\r\n                POW_PRECISION = v | 0;\r\n            }\r\n            r[p] = POW_PRECISION;\r\n\r\n            // FORMAT {object}\r\n            // 'config() FORMAT not an object: {v}'\r\n            if ( has( p = 'FORMAT' ) ) {\r\n\r\n                if ( typeof v == 'object' ) {\r\n                    FORMAT = v;\r\n                } else if (ERRORS) {\r\n                    raise( 2, p + ' not an object', v );\r\n                }\r\n            }\r\n            r[p] = FORMAT;\r\n\r\n            return r;\r\n        };\r\n\r\n\r\n        /*\r\n         * Return a new BigNumber whose value is the maximum of the arguments.\r\n         *\r\n         * arguments {number|string|BigNumber}\r\n         */\r\n        BigNumber.max = function () { return maxOrMin( arguments, P.lt ); };\r\n\r\n\r\n        /*\r\n         * Return a new BigNumber whose value is the minimum of the arguments.\r\n         *\r\n         * arguments {number|string|BigNumber}\r\n         */\r\n        BigNumber.min = function () { return maxOrMin( arguments, P.gt ); };\r\n\r\n\r\n        /*\r\n         * Return a new BigNumber with a random value equal to or greater than 0 and less than 1,\r\n         * and with dp, or DECIMAL_PLACES if dp is omitted, decimal places (or less if trailing\r\n         * zeros are produced).\r\n         *\r\n         * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n         *\r\n         * 'random() decimal places not an integer: {dp}'\r\n         * 'random() decimal places out of range: {dp}'\r\n         * 'random() crypto unavailable: {crypto}'\r\n         */\r\n        BigNumber.random = (function () {\r\n            var pow2_53 = 0x20000000000000;\r\n\r\n            // Return a 53 bit integer n, where 0 <= n < 9007199254740992.\r\n            // Check if Math.random() produces more than 32 bits of randomness.\r\n            // If it does, assume at least 53 bits are produced, otherwise assume at least 30 bits.\r\n            // 0x40000000 is 2^30, 0x800000 is 2^23, 0x1fffff is 2^21 - 1.\r\n            var random53bitInt = (Math.random() * pow2_53) & 0x1fffff\r\n              ? function () { return mathfloor( Math.random() * pow2_53 ); }\r\n              : function () { return ((Math.random() * 0x40000000 | 0) * 0x800000) +\r\n                  (Math.random() * 0x800000 | 0); };\r\n\r\n            return function (dp) {\r\n                var a, b, e, k, v,\r\n                    i = 0,\r\n                    c = [],\r\n                    rand = new BigNumber(ONE);\r\n\r\n                dp = dp == null || !isValidInt( dp, 0, MAX, 14 ) ? DECIMAL_PLACES : dp | 0;\r\n                k = mathceil( dp / LOG_BASE );\r\n\r\n                if (CRYPTO) {\r\n\r\n                    // Browsers supporting crypto.getRandomValues.\r\n                    if (crypto.getRandomValues) {\r\n\r\n                        a = crypto.getRandomValues( new Uint32Array( k *= 2 ) );\r\n\r\n                        for ( ; i < k; ) {\r\n\r\n                            // 53 bits:\r\n                            // ((Math.pow(2, 32) - 1) * Math.pow(2, 21)).toString(2)\r\n                            // 11111 11111111 11111111 11111111 11100000 00000000 00000000\r\n                            // ((Math.pow(2, 32) - 1) >>> 11).toString(2)\r\n                            //                                     11111 11111111 11111111\r\n                            // 0x20000 is 2^21.\r\n                            v = a[i] * 0x20000 + (a[i + 1] >>> 11);\r\n\r\n                            // Rejection sampling:\r\n                            // 0 <= v < 9007199254740992\r\n                            // Probability that v >= 9e15, is\r\n                            // 7199254740992 / 9007199254740992 ~= 0.0008, i.e. 1 in 1251\r\n                            if ( v >= 9e15 ) {\r\n                                b = crypto.getRandomValues( new Uint32Array(2) );\r\n                                a[i] = b[0];\r\n                                a[i + 1] = b[1];\r\n                            } else {\r\n\r\n                                // 0 <= v <= 8999999999999999\r\n                                // 0 <= (v % 1e14) <= 99999999999999\r\n                                c.push( v % 1e14 );\r\n                                i += 2;\r\n                            }\r\n                        }\r\n                        i = k / 2;\r\n\r\n                    // Node.js supporting crypto.randomBytes.\r\n                    } else if (crypto.randomBytes) {\r\n\r\n                        // buffer\r\n                        a = crypto.randomBytes( k *= 7 );\r\n\r\n                        for ( ; i < k; ) {\r\n\r\n                            // 0x1000000000000 is 2^48, 0x10000000000 is 2^40\r\n                            // 0x100000000 is 2^32, 0x1000000 is 2^24\r\n                            // 11111 11111111 11111111 11111111 11111111 11111111 11111111\r\n                            // 0 <= v < 9007199254740992\r\n                            v = ( ( a[i] & 31 ) * 0x1000000000000 ) + ( a[i + 1] * 0x10000000000 ) +\r\n                                  ( a[i + 2] * 0x100000000 ) + ( a[i + 3] * 0x1000000 ) +\r\n                                  ( a[i + 4] << 16 ) + ( a[i + 5] << 8 ) + a[i + 6];\r\n\r\n                            if ( v >= 9e15 ) {\r\n                                crypto.randomBytes(7).copy( a, i );\r\n                            } else {\r\n\r\n                                // 0 <= (v % 1e14) <= 99999999999999\r\n                                c.push( v % 1e14 );\r\n                                i += 7;\r\n                            }\r\n                        }\r\n                        i = k / 7;\r\n                    } else {\r\n                        CRYPTO = false;\r\n                        if (ERRORS) raise( 14, 'crypto unavailable', crypto );\r\n                    }\r\n                }\r\n\r\n                // Use Math.random.\r\n                if (!CRYPTO) {\r\n\r\n                    for ( ; i < k; ) {\r\n                        v = random53bitInt();\r\n                        if ( v < 9e15 ) c[i++] = v % 1e14;\r\n                    }\r\n                }\r\n\r\n                k = c[--i];\r\n                dp %= LOG_BASE;\r\n\r\n                // Convert trailing digits to zeros according to dp.\r\n                if ( k && dp ) {\r\n                    v = POWS_TEN[LOG_BASE - dp];\r\n                    c[i] = mathfloor( k / v ) * v;\r\n                }\r\n\r\n                // Remove trailing elements which are zero.\r\n                for ( ; c[i] === 0; c.pop(), i-- );\r\n\r\n                // Zero?\r\n                if ( i < 0 ) {\r\n                    c = [ e = 0 ];\r\n                } else {\r\n\r\n                    // Remove leading elements which are zero and adjust exponent accordingly.\r\n                    for ( e = -1 ; c[0] === 0; c.splice(0, 1), e -= LOG_BASE);\r\n\r\n                    // Count the digits of the first element of c to determine leading zeros, and...\r\n                    for ( i = 1, v = c[0]; v >= 10; v /= 10, i++);\r\n\r\n                    // adjust the exponent accordingly.\r\n                    if ( i < LOG_BASE ) e -= LOG_BASE - i;\r\n                }\r\n\r\n                rand.e = e;\r\n                rand.c = c;\r\n                return rand;\r\n            };\r\n        })();\r\n\r\n\r\n        // PRIVATE FUNCTIONS\r\n\r\n\r\n        // Convert a numeric string of baseIn to a numeric string of baseOut.\r\n        function convertBase( str, baseOut, baseIn, sign ) {\r\n            var d, e, k, r, x, xc, y,\r\n                i = str.indexOf( '.' ),\r\n                dp = DECIMAL_PLACES,\r\n                rm = ROUNDING_MODE;\r\n\r\n            if ( baseIn < 37 ) str = str.toLowerCase();\r\n\r\n            // Non-integer.\r\n            if ( i >= 0 ) {\r\n                k = POW_PRECISION;\r\n\r\n                // Unlimited precision.\r\n                POW_PRECISION = 0;\r\n                str = str.replace( '.', '' );\r\n                y = new BigNumber(baseIn);\r\n                x = y.pow( str.length - i );\r\n                POW_PRECISION = k;\r\n\r\n                // Convert str as if an integer, then restore the fraction part by dividing the\r\n                // result by its base raised to a power.\r\n                y.c = toBaseOut( toFixedPoint( coeffToString( x.c ), x.e ), 10, baseOut );\r\n                y.e = y.c.length;\r\n            }\r\n\r\n            // Convert the number as integer.\r\n            xc = toBaseOut( str, baseIn, baseOut );\r\n            e = k = xc.length;\r\n\r\n            // Remove trailing zeros.\r\n            for ( ; xc[--k] == 0; xc.pop() );\r\n            if ( !xc[0] ) return '0';\r\n\r\n            if ( i < 0 ) {\r\n                --e;\r\n            } else {\r\n                x.c = xc;\r\n                x.e = e;\r\n\r\n                // sign is needed for correct rounding.\r\n                x.s = sign;\r\n                x = div( x, y, dp, rm, baseOut );\r\n                xc = x.c;\r\n                r = x.r;\r\n                e = x.e;\r\n            }\r\n\r\n            d = e + dp + 1;\r\n\r\n            // The rounding digit, i.e. the digit to the right of the digit that may be rounded up.\r\n            i = xc[d];\r\n            k = baseOut / 2;\r\n            r = r || d < 0 || xc[d + 1] != null;\r\n\r\n            r = rm < 4 ? ( i != null || r ) && ( rm == 0 || rm == ( x.s < 0 ? 3 : 2 ) )\r\n                       : i > k || i == k &&( rm == 4 || r || rm == 6 && xc[d - 1] & 1 ||\r\n                         rm == ( x.s < 0 ? 8 : 7 ) );\r\n\r\n            if ( d < 1 || !xc[0] ) {\r\n\r\n                // 1^-dp or 0.\r\n                str = r ? toFixedPoint( '1', -dp ) : '0';\r\n            } else {\r\n                xc.length = d;\r\n\r\n                if (r) {\r\n\r\n                    // Rounding up may mean the previous digit has to be rounded up and so on.\r\n                    for ( --baseOut; ++xc[--d] > baseOut; ) {\r\n                        xc[d] = 0;\r\n\r\n                        if ( !d ) {\r\n                            ++e;\r\n                            xc = [1].concat(xc);\r\n                        }\r\n                    }\r\n                }\r\n\r\n                // Determine trailing zeros.\r\n                for ( k = xc.length; !xc[--k]; );\r\n\r\n                // E.g. [4, 11, 15] becomes 4bf.\r\n                for ( i = 0, str = ''; i <= k; str += ALPHABET.charAt( xc[i++] ) );\r\n                str = toFixedPoint( str, e );\r\n            }\r\n\r\n            // The caller will add the sign.\r\n            return str;\r\n        }\r\n\r\n\r\n        // Perform division in the specified base. Called by div and convertBase.\r\n        div = (function () {\r\n\r\n            // Assume non-zero x and k.\r\n            function multiply( x, k, base ) {\r\n                var m, temp, xlo, xhi,\r\n                    carry = 0,\r\n                    i = x.length,\r\n                    klo = k % SQRT_BASE,\r\n                    khi = k / SQRT_BASE | 0;\r\n\r\n                for ( x = x.slice(); i--; ) {\r\n                    xlo = x[i] % SQRT_BASE;\r\n                    xhi = x[i] / SQRT_BASE | 0;\r\n                    m = khi * xlo + xhi * klo;\r\n                    temp = klo * xlo + ( ( m % SQRT_BASE ) * SQRT_BASE ) + carry;\r\n                    carry = ( temp / base | 0 ) + ( m / SQRT_BASE | 0 ) + khi * xhi;\r\n                    x[i] = temp % base;\r\n                }\r\n\r\n                if (carry) x = [carry].concat(x);\r\n\r\n                return x;\r\n            }\r\n\r\n            function compare( a, b, aL, bL ) {\r\n                var i, cmp;\r\n\r\n                if ( aL != bL ) {\r\n                    cmp = aL > bL ? 1 : -1;\r\n                } else {\r\n\r\n                    for ( i = cmp = 0; i < aL; i++ ) {\r\n\r\n                        if ( a[i] != b[i] ) {\r\n                            cmp = a[i] > b[i] ? 1 : -1;\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n                return cmp;\r\n            }\r\n\r\n            function subtract( a, b, aL, base ) {\r\n                var i = 0;\r\n\r\n                // Subtract b from a.\r\n                for ( ; aL--; ) {\r\n                    a[aL] -= i;\r\n                    i = a[aL] < b[aL] ? 1 : 0;\r\n                    a[aL] = i * base + a[aL] - b[aL];\r\n                }\r\n\r\n                // Remove leading zeros.\r\n                for ( ; !a[0] && a.length > 1; a.splice(0, 1) );\r\n            }\r\n\r\n            // x: dividend, y: divisor.\r\n            return function ( x, y, dp, rm, base ) {\r\n                var cmp, e, i, more, n, prod, prodL, q, qc, rem, remL, rem0, xi, xL, yc0,\r\n                    yL, yz,\r\n                    s = x.s == y.s ? 1 : -1,\r\n                    xc = x.c,\r\n                    yc = y.c;\r\n\r\n                // Either NaN, Infinity or 0?\r\n                if ( !xc || !xc[0] || !yc || !yc[0] ) {\r\n\r\n                    return new BigNumber(\r\n\r\n                      // Return NaN if either NaN, or both Infinity or 0.\r\n                      !x.s || !y.s || ( xc ? yc && xc[0] == yc[0] : !yc ) ? NaN :\r\n\r\n                        // Return ±0 if x is ±0 or y is ±Infinity, or return ±Infinity as y is ±0.\r\n                        xc && xc[0] == 0 || !yc ? s * 0 : s / 0\r\n                    );\r\n                }\r\n\r\n                q = new BigNumber(s);\r\n                qc = q.c = [];\r\n                e = x.e - y.e;\r\n                s = dp + e + 1;\r\n\r\n                if ( !base ) {\r\n                    base = BASE;\r\n                    e = bitFloor( x.e / LOG_BASE ) - bitFloor( y.e / LOG_BASE );\r\n                    s = s / LOG_BASE | 0;\r\n                }\r\n\r\n                // Result exponent may be one less then the current value of e.\r\n                // The coefficients of the BigNumbers from convertBase may have trailing zeros.\r\n                for ( i = 0; yc[i] == ( xc[i] || 0 ); i++ );\r\n                if ( yc[i] > ( xc[i] || 0 ) ) e--;\r\n\r\n                if ( s < 0 ) {\r\n                    qc.push(1);\r\n                    more = true;\r\n                } else {\r\n                    xL = xc.length;\r\n                    yL = yc.length;\r\n                    i = 0;\r\n                    s += 2;\r\n\r\n                    // Normalise xc and yc so highest order digit of yc is >= base / 2.\r\n\r\n                    n = mathfloor( base / ( yc[0] + 1 ) );\r\n\r\n                    // Not necessary, but to handle odd bases where yc[0] == ( base / 2 ) - 1.\r\n                    // if ( n > 1 || n++ == 1 && yc[0] < base / 2 ) {\r\n                    if ( n > 1 ) {\r\n                        yc = multiply( yc, n, base );\r\n                        xc = multiply( xc, n, base );\r\n                        yL = yc.length;\r\n                        xL = xc.length;\r\n                    }\r\n\r\n                    xi = yL;\r\n                    rem = xc.slice( 0, yL );\r\n                    remL = rem.length;\r\n\r\n                    // Add zeros to make remainder as long as divisor.\r\n                    for ( ; remL < yL; rem[remL++] = 0 );\r\n                    yz = yc.slice();\r\n                    yz = [0].concat(yz);\r\n                    yc0 = yc[0];\r\n                    if ( yc[1] >= base / 2 ) yc0++;\r\n                    // Not necessary, but to prevent trial digit n > base, when using base 3.\r\n                    // else if ( base == 3 && yc0 == 1 ) yc0 = 1 + 1e-15;\r\n\r\n                    do {\r\n                        n = 0;\r\n\r\n                        // Compare divisor and remainder.\r\n                        cmp = compare( yc, rem, yL, remL );\r\n\r\n                        // If divisor < remainder.\r\n                        if ( cmp < 0 ) {\r\n\r\n                            // Calculate trial digit, n.\r\n\r\n                            rem0 = rem[0];\r\n                            if ( yL != remL ) rem0 = rem0 * base + ( rem[1] || 0 );\r\n\r\n                            // n is how many times the divisor goes into the current remainder.\r\n                            n = mathfloor( rem0 / yc0 );\r\n\r\n                            //  Algorithm:\r\n                            //  1. product = divisor * trial digit (n)\r\n                            //  2. if product > remainder: product -= divisor, n--\r\n                            //  3. remainder -= product\r\n                            //  4. if product was < remainder at 2:\r\n                            //    5. compare new remainder and divisor\r\n                            //    6. If remainder > divisor: remainder -= divisor, n++\r\n\r\n                            if ( n > 1 ) {\r\n\r\n                                // n may be > base only when base is 3.\r\n                                if (n >= base) n = base - 1;\r\n\r\n                                // product = divisor * trial digit.\r\n                                prod = multiply( yc, n, base );\r\n                                prodL = prod.length;\r\n                                remL = rem.length;\r\n\r\n                                // Compare product and remainder.\r\n                                // If product > remainder.\r\n                                // Trial digit n too high.\r\n                                // n is 1 too high about 5% of the time, and is not known to have\r\n                                // ever been more than 1 too high.\r\n                                while ( compare( prod, rem, prodL, remL ) == 1 ) {\r\n                                    n--;\r\n\r\n                                    // Subtract divisor from product.\r\n                                    subtract( prod, yL < prodL ? yz : yc, prodL, base );\r\n                                    prodL = prod.length;\r\n                                    cmp = 1;\r\n                                }\r\n                            } else {\r\n\r\n                                // n is 0 or 1, cmp is -1.\r\n                                // If n is 0, there is no need to compare yc and rem again below,\r\n                                // so change cmp to 1 to avoid it.\r\n                                // If n is 1, leave cmp as -1, so yc and rem are compared again.\r\n                                if ( n == 0 ) {\r\n\r\n                                    // divisor < remainder, so n must be at least 1.\r\n                                    cmp = n = 1;\r\n                                }\r\n\r\n                                // product = divisor\r\n                                prod = yc.slice();\r\n                                prodL = prod.length;\r\n                            }\r\n\r\n                            if ( prodL < remL ) prod = [0].concat(prod);\r\n\r\n                            // Subtract product from remainder.\r\n                            subtract( rem, prod, remL, base );\r\n                            remL = rem.length;\r\n\r\n                             // If product was < remainder.\r\n                            if ( cmp == -1 ) {\r\n\r\n                                // Compare divisor and new remainder.\r\n                                // If divisor < new remainder, subtract divisor from remainder.\r\n                                // Trial digit n too low.\r\n                                // n is 1 too low about 5% of the time, and very rarely 2 too low.\r\n                                while ( compare( yc, rem, yL, remL ) < 1 ) {\r\n                                    n++;\r\n\r\n                                    // Subtract divisor from remainder.\r\n                                    subtract( rem, yL < remL ? yz : yc, remL, base );\r\n                                    remL = rem.length;\r\n                                }\r\n                            }\r\n                        } else if ( cmp === 0 ) {\r\n                            n++;\r\n                            rem = [0];\r\n                        } // else cmp === 1 and n will be 0\r\n\r\n                        // Add the next digit, n, to the result array.\r\n                        qc[i++] = n;\r\n\r\n                        // Update the remainder.\r\n                        if ( rem[0] ) {\r\n                            rem[remL++] = xc[xi] || 0;\r\n                        } else {\r\n                            rem = [ xc[xi] ];\r\n                            remL = 1;\r\n                        }\r\n                    } while ( ( xi++ < xL || rem[0] != null ) && s-- );\r\n\r\n                    more = rem[0] != null;\r\n\r\n                    // Leading zero?\r\n                    if ( !qc[0] ) qc.splice(0, 1);\r\n                }\r\n\r\n                if ( base == BASE ) {\r\n\r\n                    // To calculate q.e, first get the number of digits of qc[0].\r\n                    for ( i = 1, s = qc[0]; s >= 10; s /= 10, i++ );\r\n                    round( q, dp + ( q.e = i + e * LOG_BASE - 1 ) + 1, rm, more );\r\n\r\n                // Caller is convertBase.\r\n                } else {\r\n                    q.e = e;\r\n                    q.r = +more;\r\n                }\r\n\r\n                return q;\r\n            };\r\n        })();\r\n\r\n\r\n        /*\r\n         * Return a string representing the value of BigNumber n in fixed-point or exponential\r\n         * notation rounded to the specified decimal places or significant digits.\r\n         *\r\n         * n is a BigNumber.\r\n         * i is the index of the last digit required (i.e. the digit that may be rounded up).\r\n         * rm is the rounding mode.\r\n         * caller is caller id: toExponential 19, toFixed 20, toFormat 21, toPrecision 24.\r\n         */\r\n        function format( n, i, rm, caller ) {\r\n            var c0, e, ne, len, str;\r\n\r\n            rm = rm != null && isValidInt( rm, 0, 8, caller, roundingMode )\r\n              ? rm | 0 : ROUNDING_MODE;\r\n\r\n            if ( !n.c ) return n.toString();\r\n            c0 = n.c[0];\r\n            ne = n.e;\r\n\r\n            if ( i == null ) {\r\n                str = coeffToString( n.c );\r\n                str = caller == 19 || caller == 24 && ne <= TO_EXP_NEG\r\n                  ? toExponential( str, ne )\r\n                  : toFixedPoint( str, ne );\r\n            } else {\r\n                n = round( new BigNumber(n), i, rm );\r\n\r\n                // n.e may have changed if the value was rounded up.\r\n                e = n.e;\r\n\r\n                str = coeffToString( n.c );\r\n                len = str.length;\r\n\r\n                // toPrecision returns exponential notation if the number of significant digits\r\n                // specified is less than the number of digits necessary to represent the integer\r\n                // part of the value in fixed-point notation.\r\n\r\n                // Exponential notation.\r\n                if ( caller == 19 || caller == 24 && ( i <= e || e <= TO_EXP_NEG ) ) {\r\n\r\n                    // Append zeros?\r\n                    for ( ; len < i; str += '0', len++ );\r\n                    str = toExponential( str, e );\r\n\r\n                // Fixed-point notation.\r\n                } else {\r\n                    i -= ne;\r\n                    str = toFixedPoint( str, e );\r\n\r\n                    // Append zeros?\r\n                    if ( e + 1 > len ) {\r\n                        if ( --i > 0 ) for ( str += '.'; i--; str += '0' );\r\n                    } else {\r\n                        i += e - len;\r\n                        if ( i > 0 ) {\r\n                            if ( e + 1 == len ) str += '.';\r\n                            for ( ; i--; str += '0' );\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            return n.s < 0 && c0 ? '-' + str : str;\r\n        }\r\n\r\n\r\n        // Handle BigNumber.max and BigNumber.min.\r\n        function maxOrMin( args, method ) {\r\n            var m, n,\r\n                i = 0;\r\n\r\n            if ( isArray( args[0] ) ) args = args[0];\r\n            m = new BigNumber( args[0] );\r\n\r\n            for ( ; ++i < args.length; ) {\r\n                n = new BigNumber( args[i] );\r\n\r\n                // If any number is NaN, return NaN.\r\n                if ( !n.s ) {\r\n                    m = n;\r\n                    break;\r\n                } else if ( method.call( m, n ) ) {\r\n                    m = n;\r\n                }\r\n            }\r\n\r\n            return m;\r\n        }\r\n\r\n\r\n        /*\r\n         * Return true if n is an integer in range, otherwise throw.\r\n         * Use for argument validation when ERRORS is true.\r\n         */\r\n        function intValidatorWithErrors( n, min, max, caller, name ) {\r\n            if ( n < min || n > max || n != truncate(n) ) {\r\n                raise( caller, ( name || 'decimal places' ) +\r\n                  ( n < min || n > max ? ' out of range' : ' not an integer' ), n );\r\n            }\r\n\r\n            return true;\r\n        }\r\n\r\n\r\n        /*\r\n         * Strip trailing zeros, calculate base 10 exponent and check against MIN_EXP and MAX_EXP.\r\n         * Called by minus, plus and times.\r\n         */\r\n        function normalise( n, c, e ) {\r\n            var i = 1,\r\n                j = c.length;\r\n\r\n             // Remove trailing zeros.\r\n            for ( ; !c[--j]; c.pop() );\r\n\r\n            // Calculate the base 10 exponent. First get the number of digits of c[0].\r\n            for ( j = c[0]; j >= 10; j /= 10, i++ );\r\n\r\n            // Overflow?\r\n            if ( ( e = i + e * LOG_BASE - 1 ) > MAX_EXP ) {\r\n\r\n                // Infinity.\r\n                n.c = n.e = null;\r\n\r\n            // Underflow?\r\n            } else if ( e < MIN_EXP ) {\r\n\r\n                // Zero.\r\n                n.c = [ n.e = 0 ];\r\n            } else {\r\n                n.e = e;\r\n                n.c = c;\r\n            }\r\n\r\n            return n;\r\n        }\r\n\r\n\r\n        // Handle values that fail the validity test in BigNumber.\r\n        parseNumeric = (function () {\r\n            var basePrefix = /^(-?)0([xbo])(?=\\w[\\w.]*$)/i,\r\n                dotAfter = /^([^.]+)\\.$/,\r\n                dotBefore = /^\\.([^.]+)$/,\r\n                isInfinityOrNaN = /^-?(Infinity|NaN)$/,\r\n                whitespaceOrPlus = /^\\s*\\+(?=[\\w.])|^\\s+|\\s+$/g;\r\n\r\n            return function ( x, str, num, b ) {\r\n                var base,\r\n                    s = num ? str : str.replace( whitespaceOrPlus, '' );\r\n\r\n                // No exception on ±Infinity or NaN.\r\n                if ( isInfinityOrNaN.test(s) ) {\r\n                    x.s = isNaN(s) ? null : s < 0 ? -1 : 1;\r\n                } else {\r\n                    if ( !num ) {\r\n\r\n                        // basePrefix = /^(-?)0([xbo])(?=\\w[\\w.]*$)/i\r\n                        s = s.replace( basePrefix, function ( m, p1, p2 ) {\r\n                            base = ( p2 = p2.toLowerCase() ) == 'x' ? 16 : p2 == 'b' ? 2 : 8;\r\n                            return !b || b == base ? p1 : m;\r\n                        });\r\n\r\n                        if (b) {\r\n                            base = b;\r\n\r\n                            // E.g. '1.' to '1', '.1' to '0.1'\r\n                            s = s.replace( dotAfter, '$1' ).replace( dotBefore, '0.$1' );\r\n                        }\r\n\r\n                        if ( str != s ) return new BigNumber( s, base );\r\n                    }\r\n\r\n                    // 'new BigNumber() not a number: {n}'\r\n                    // 'new BigNumber() not a base {b} number: {n}'\r\n                    if (ERRORS) raise( id, 'not a' + ( b ? ' base ' + b : '' ) + ' number', str );\r\n                    x.s = null;\r\n                }\r\n\r\n                x.c = x.e = null;\r\n                id = 0;\r\n            }\r\n        })();\r\n\r\n\r\n        // Throw a BigNumber Error.\r\n        function raise( caller, msg, val ) {\r\n            var error = new Error( [\r\n                'new BigNumber',     // 0\r\n                'cmp',               // 1\r\n                'config',            // 2\r\n                'div',               // 3\r\n                'divToInt',          // 4\r\n                'eq',                // 5\r\n                'gt',                // 6\r\n                'gte',               // 7\r\n                'lt',                // 8\r\n                'lte',               // 9\r\n                'minus',             // 10\r\n                'mod',               // 11\r\n                'plus',              // 12\r\n                'precision',         // 13\r\n                'random',            // 14\r\n                'round',             // 15\r\n                'shift',             // 16\r\n                'times',             // 17\r\n                'toDigits',          // 18\r\n                'toExponential',     // 19\r\n                'toFixed',           // 20\r\n                'toFormat',          // 21\r\n                'toFraction',        // 22\r\n                'pow',               // 23\r\n                'toPrecision',       // 24\r\n                'toString',          // 25\r\n                'BigNumber'          // 26\r\n            ][caller] + '() ' + msg + ': ' + val );\r\n\r\n            error.name = 'BigNumber Error';\r\n            id = 0;\r\n            throw error;\r\n        }\r\n\r\n\r\n        /*\r\n         * Round x to sd significant digits using rounding mode rm. Check for over/under-flow.\r\n         * If r is truthy, it is known that there are more digits after the rounding digit.\r\n         */\r\n        function round( x, sd, rm, r ) {\r\n            var d, i, j, k, n, ni, rd,\r\n                xc = x.c,\r\n                pows10 = POWS_TEN;\r\n\r\n            // if x is not Infinity or NaN...\r\n            if (xc) {\r\n\r\n                // rd is the rounding digit, i.e. the digit after the digit that may be rounded up.\r\n                // n is a base 1e14 number, the value of the element of array x.c containing rd.\r\n                // ni is the index of n within x.c.\r\n                // d is the number of digits of n.\r\n                // i is the index of rd within n including leading zeros.\r\n                // j is the actual index of rd within n (if < 0, rd is a leading zero).\r\n                out: {\r\n\r\n                    // Get the number of digits of the first element of xc.\r\n                    for ( d = 1, k = xc[0]; k >= 10; k /= 10, d++ );\r\n                    i = sd - d;\r\n\r\n                    // If the rounding digit is in the first element of xc...\r\n                    if ( i < 0 ) {\r\n                        i += LOG_BASE;\r\n                        j = sd;\r\n                        n = xc[ ni = 0 ];\r\n\r\n                        // Get the rounding digit at index j of n.\r\n                        rd = n / pows10[ d - j - 1 ] % 10 | 0;\r\n                    } else {\r\n                        ni = mathceil( ( i + 1 ) / LOG_BASE );\r\n\r\n                        if ( ni >= xc.length ) {\r\n\r\n                            if (r) {\r\n\r\n                                // Needed by sqrt.\r\n                                for ( ; xc.length <= ni; xc.push(0) );\r\n                                n = rd = 0;\r\n                                d = 1;\r\n                                i %= LOG_BASE;\r\n                                j = i - LOG_BASE + 1;\r\n                            } else {\r\n                                break out;\r\n                            }\r\n                        } else {\r\n                            n = k = xc[ni];\r\n\r\n                            // Get the number of digits of n.\r\n                            for ( d = 1; k >= 10; k /= 10, d++ );\r\n\r\n                            // Get the index of rd within n.\r\n                            i %= LOG_BASE;\r\n\r\n                            // Get the index of rd within n, adjusted for leading zeros.\r\n                            // The number of leading zeros of n is given by LOG_BASE - d.\r\n                            j = i - LOG_BASE + d;\r\n\r\n                            // Get the rounding digit at index j of n.\r\n                            rd = j < 0 ? 0 : n / pows10[ d - j - 1 ] % 10 | 0;\r\n                        }\r\n                    }\r\n\r\n                    r = r || sd < 0 ||\r\n\r\n                    // Are there any non-zero digits after the rounding digit?\r\n                    // The expression  n % pows10[ d - j - 1 ]  returns all digits of n to the right\r\n                    // of the digit at j, e.g. if n is 908714 and j is 2, the expression gives 714.\r\n                      xc[ni + 1] != null || ( j < 0 ? n : n % pows10[ d - j - 1 ] );\r\n\r\n                    r = rm < 4\r\n                      ? ( rd || r ) && ( rm == 0 || rm == ( x.s < 0 ? 3 : 2 ) )\r\n                      : rd > 5 || rd == 5 && ( rm == 4 || r || rm == 6 &&\r\n\r\n                        // Check whether the digit to the left of the rounding digit is odd.\r\n                        ( ( i > 0 ? j > 0 ? n / pows10[ d - j ] : 0 : xc[ni - 1] ) % 10 ) & 1 ||\r\n                          rm == ( x.s < 0 ? 8 : 7 ) );\r\n\r\n                    if ( sd < 1 || !xc[0] ) {\r\n                        xc.length = 0;\r\n\r\n                        if (r) {\r\n\r\n                            // Convert sd to decimal places.\r\n                            sd -= x.e + 1;\r\n\r\n                            // 1, 0.1, 0.01, 0.001, 0.0001 etc.\r\n                            xc[0] = pows10[ ( LOG_BASE - sd % LOG_BASE ) % LOG_BASE ];\r\n                            x.e = -sd || 0;\r\n                        } else {\r\n\r\n                            // Zero.\r\n                            xc[0] = x.e = 0;\r\n                        }\r\n\r\n                        return x;\r\n                    }\r\n\r\n                    // Remove excess digits.\r\n                    if ( i == 0 ) {\r\n                        xc.length = ni;\r\n                        k = 1;\r\n                        ni--;\r\n                    } else {\r\n                        xc.length = ni + 1;\r\n                        k = pows10[ LOG_BASE - i ];\r\n\r\n                        // E.g. 56700 becomes 56000 if 7 is the rounding digit.\r\n                        // j > 0 means i > number of leading zeros of n.\r\n                        xc[ni] = j > 0 ? mathfloor( n / pows10[ d - j ] % pows10[j] ) * k : 0;\r\n                    }\r\n\r\n                    // Round up?\r\n                    if (r) {\r\n\r\n                        for ( ; ; ) {\r\n\r\n                            // If the digit to be rounded up is in the first element of xc...\r\n                            if ( ni == 0 ) {\r\n\r\n                                // i will be the length of xc[0] before k is added.\r\n                                for ( i = 1, j = xc[0]; j >= 10; j /= 10, i++ );\r\n                                j = xc[0] += k;\r\n                                for ( k = 1; j >= 10; j /= 10, k++ );\r\n\r\n                                // if i != k the length has increased.\r\n                                if ( i != k ) {\r\n                                    x.e++;\r\n                                    if ( xc[0] == BASE ) xc[0] = 1;\r\n                                }\r\n\r\n                                break;\r\n                            } else {\r\n                                xc[ni] += k;\r\n                                if ( xc[ni] != BASE ) break;\r\n                                xc[ni--] = 0;\r\n                                k = 1;\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    // Remove trailing zeros.\r\n                    for ( i = xc.length; xc[--i] === 0; xc.pop() );\r\n                }\r\n\r\n                // Overflow? Infinity.\r\n                if ( x.e > MAX_EXP ) {\r\n                    x.c = x.e = null;\r\n\r\n                // Underflow? Zero.\r\n                } else if ( x.e < MIN_EXP ) {\r\n                    x.c = [ x.e = 0 ];\r\n                }\r\n            }\r\n\r\n            return x;\r\n        }\r\n\r\n\r\n        // PROTOTYPE/INSTANCE METHODS\r\n\r\n\r\n        /*\r\n         * Return a new BigNumber whose value is the absolute value of this BigNumber.\r\n         */\r\n        P.absoluteValue = P.abs = function () {\r\n            var x = new BigNumber(this);\r\n            if ( x.s < 0 ) x.s = 1;\r\n            return x;\r\n        };\r\n\r\n\r\n        /*\r\n         * Return a new BigNumber whose value is the value of this BigNumber rounded to a whole\r\n         * number in the direction of Infinity.\r\n         */\r\n        P.ceil = function () {\r\n            return round( new BigNumber(this), this.e + 1, 2 );\r\n        };\r\n\r\n\r\n        /*\r\n         * Return\r\n         * 1 if the value of this BigNumber is greater than the value of BigNumber(y, b),\r\n         * -1 if the value of this BigNumber is less than the value of BigNumber(y, b),\r\n         * 0 if they have the same value,\r\n         * or null if the value of either is NaN.\r\n         */\r\n        P.comparedTo = P.cmp = function ( y, b ) {\r\n            id = 1;\r\n            return compare( this, new BigNumber( y, b ) );\r\n        };\r\n\r\n\r\n        /*\r\n         * Return the number of decimal places of the value of this BigNumber, or null if the value\r\n         * of this BigNumber is ±Infinity or NaN.\r\n         */\r\n        P.decimalPlaces = P.dp = function () {\r\n            var n, v,\r\n                c = this.c;\r\n\r\n            if ( !c ) return null;\r\n            n = ( ( v = c.length - 1 ) - bitFloor( this.e / LOG_BASE ) ) * LOG_BASE;\r\n\r\n            // Subtract the number of trailing zeros of the last number.\r\n            if ( v = c[v] ) for ( ; v % 10 == 0; v /= 10, n-- );\r\n            if ( n < 0 ) n = 0;\r\n\r\n            return n;\r\n        };\r\n\r\n\r\n        /*\r\n         *  n / 0 = I\r\n         *  n / N = N\r\n         *  n / I = 0\r\n         *  0 / n = 0\r\n         *  0 / 0 = N\r\n         *  0 / N = N\r\n         *  0 / I = 0\r\n         *  N / n = N\r\n         *  N / 0 = N\r\n         *  N / N = N\r\n         *  N / I = N\r\n         *  I / n = I\r\n         *  I / 0 = I\r\n         *  I / N = N\r\n         *  I / I = N\r\n         *\r\n         * Return a new BigNumber whose value is the value of this BigNumber divided by the value of\r\n         * BigNumber(y, b), rounded according to DECIMAL_PLACES and ROUNDING_MODE.\r\n         */\r\n        P.dividedBy = P.div = function ( y, b ) {\r\n            id = 3;\r\n            return div( this, new BigNumber( y, b ), DECIMAL_PLACES, ROUNDING_MODE );\r\n        };\r\n\r\n\r\n        /*\r\n         * Return a new BigNumber whose value is the integer part of dividing the value of this\r\n         * BigNumber by the value of BigNumber(y, b).\r\n         */\r\n        P.dividedToIntegerBy = P.divToInt = function ( y, b ) {\r\n            id = 4;\r\n            return div( this, new BigNumber( y, b ), 0, 1 );\r\n        };\r\n\r\n\r\n        /*\r\n         * Return true if the value of this BigNumber is equal to the value of BigNumber(y, b),\r\n         * otherwise returns false.\r\n         */\r\n        P.equals = P.eq = function ( y, b ) {\r\n            id = 5;\r\n            return compare( this, new BigNumber( y, b ) ) === 0;\r\n        };\r\n\r\n\r\n        /*\r\n         * Return a new BigNumber whose value is the value of this BigNumber rounded to a whole\r\n         * number in the direction of -Infinity.\r\n         */\r\n        P.floor = function () {\r\n            return round( new BigNumber(this), this.e + 1, 3 );\r\n        };\r\n\r\n\r\n        /*\r\n         * Return true if the value of this BigNumber is greater than the value of BigNumber(y, b),\r\n         * otherwise returns false.\r\n         */\r\n        P.greaterThan = P.gt = function ( y, b ) {\r\n            id = 6;\r\n            return compare( this, new BigNumber( y, b ) ) > 0;\r\n        };\r\n\r\n\r\n        /*\r\n         * Return true if the value of this BigNumber is greater than or equal to the value of\r\n         * BigNumber(y, b), otherwise returns false.\r\n         */\r\n        P.greaterThanOrEqualTo = P.gte = function ( y, b ) {\r\n            id = 7;\r\n            return ( b = compare( this, new BigNumber( y, b ) ) ) === 1 || b === 0;\r\n\r\n        };\r\n\r\n\r\n        /*\r\n         * Return true if the value of this BigNumber is a finite number, otherwise returns false.\r\n         */\r\n        P.isFinite = function () {\r\n            return !!this.c;\r\n        };\r\n\r\n\r\n        /*\r\n         * Return true if the value of this BigNumber is an integer, otherwise return false.\r\n         */\r\n        P.isInteger = P.isInt = function () {\r\n            return !!this.c && bitFloor( this.e / LOG_BASE ) > this.c.length - 2;\r\n        };\r\n\r\n\r\n        /*\r\n         * Return true if the value of this BigNumber is NaN, otherwise returns false.\r\n         */\r\n        P.isNaN = function () {\r\n            return !this.s;\r\n        };\r\n\r\n\r\n        /*\r\n         * Return true if the value of this BigNumber is negative, otherwise returns false.\r\n         */\r\n        P.isNegative = P.isNeg = function () {\r\n            return this.s < 0;\r\n        };\r\n\r\n\r\n        /*\r\n         * Return true if the value of this BigNumber is 0 or -0, otherwise returns false.\r\n         */\r\n        P.isZero = function () {\r\n            return !!this.c && this.c[0] == 0;\r\n        };\r\n\r\n\r\n        /*\r\n         * Return true if the value of this BigNumber is less than the value of BigNumber(y, b),\r\n         * otherwise returns false.\r\n         */\r\n        P.lessThan = P.lt = function ( y, b ) {\r\n            id = 8;\r\n            return compare( this, new BigNumber( y, b ) ) < 0;\r\n        };\r\n\r\n\r\n        /*\r\n         * Return true if the value of this BigNumber is less than or equal to the value of\r\n         * BigNumber(y, b), otherwise returns false.\r\n         */\r\n        P.lessThanOrEqualTo = P.lte = function ( y, b ) {\r\n            id = 9;\r\n            return ( b = compare( this, new BigNumber( y, b ) ) ) === -1 || b === 0;\r\n        };\r\n\r\n\r\n        /*\r\n         *  n - 0 = n\r\n         *  n - N = N\r\n         *  n - I = -I\r\n         *  0 - n = -n\r\n         *  0 - 0 = 0\r\n         *  0 - N = N\r\n         *  0 - I = -I\r\n         *  N - n = N\r\n         *  N - 0 = N\r\n         *  N - N = N\r\n         *  N - I = N\r\n         *  I - n = I\r\n         *  I - 0 = I\r\n         *  I - N = N\r\n         *  I - I = N\r\n         *\r\n         * Return a new BigNumber whose value is the value of this BigNumber minus the value of\r\n         * BigNumber(y, b).\r\n         */\r\n        P.minus = P.sub = function ( y, b ) {\r\n            var i, j, t, xLTy,\r\n                x = this,\r\n                a = x.s;\r\n\r\n            id = 10;\r\n            y = new BigNumber( y, b );\r\n            b = y.s;\r\n\r\n            // Either NaN?\r\n            if ( !a || !b ) return new BigNumber(NaN);\r\n\r\n            // Signs differ?\r\n            if ( a != b ) {\r\n                y.s = -b;\r\n                return x.plus(y);\r\n            }\r\n\r\n            var xe = x.e / LOG_BASE,\r\n                ye = y.e / LOG_BASE,\r\n                xc = x.c,\r\n                yc = y.c;\r\n\r\n            if ( !xe || !ye ) {\r\n\r\n                // Either Infinity?\r\n                if ( !xc || !yc ) return xc ? ( y.s = -b, y ) : new BigNumber( yc ? x : NaN );\r\n\r\n                // Either zero?\r\n                if ( !xc[0] || !yc[0] ) {\r\n\r\n                    // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.\r\n                    return yc[0] ? ( y.s = -b, y ) : new BigNumber( xc[0] ? x :\r\n\r\n                      // IEEE 754 (2008) 6.3: n - n = -0 when rounding to -Infinity\r\n                      ROUNDING_MODE == 3 ? -0 : 0 );\r\n                }\r\n            }\r\n\r\n            xe = bitFloor(xe);\r\n            ye = bitFloor(ye);\r\n            xc = xc.slice();\r\n\r\n            // Determine which is the bigger number.\r\n            if ( a = xe - ye ) {\r\n\r\n                if ( xLTy = a < 0 ) {\r\n                    a = -a;\r\n                    t = xc;\r\n                } else {\r\n                    ye = xe;\r\n                    t = yc;\r\n                }\r\n\r\n                t.reverse();\r\n\r\n                // Prepend zeros to equalise exponents.\r\n                for ( b = a; b--; t.push(0) );\r\n                t.reverse();\r\n            } else {\r\n\r\n                // Exponents equal. Check digit by digit.\r\n                j = ( xLTy = ( a = xc.length ) < ( b = yc.length ) ) ? a : b;\r\n\r\n                for ( a = b = 0; b < j; b++ ) {\r\n\r\n                    if ( xc[b] != yc[b] ) {\r\n                        xLTy = xc[b] < yc[b];\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n\r\n            // x < y? Point xc to the array of the bigger number.\r\n            if (xLTy) t = xc, xc = yc, yc = t, y.s = -y.s;\r\n\r\n            b = ( j = yc.length ) - ( i = xc.length );\r\n\r\n            // Append zeros to xc if shorter.\r\n            // No need to add zeros to yc if shorter as subtract only needs to start at yc.length.\r\n            if ( b > 0 ) for ( ; b--; xc[i++] = 0 );\r\n            b = BASE - 1;\r\n\r\n            // Subtract yc from xc.\r\n            for ( ; j > a; ) {\r\n\r\n                if ( xc[--j] < yc[j] ) {\r\n                    for ( i = j; i && !xc[--i]; xc[i] = b );\r\n                    --xc[i];\r\n                    xc[j] += BASE;\r\n                }\r\n\r\n                xc[j] -= yc[j];\r\n            }\r\n\r\n            // Remove leading zeros and adjust exponent accordingly.\r\n            for ( ; xc[0] == 0; xc.splice(0, 1), --ye );\r\n\r\n            // Zero?\r\n            if ( !xc[0] ) {\r\n\r\n                // Following IEEE 754 (2008) 6.3,\r\n                // n - n = +0  but  n - n = -0  when rounding towards -Infinity.\r\n                y.s = ROUNDING_MODE == 3 ? -1 : 1;\r\n                y.c = [ y.e = 0 ];\r\n                return y;\r\n            }\r\n\r\n            // No need to check for Infinity as +x - +y != Infinity && -x - -y != Infinity\r\n            // for finite x and y.\r\n            return normalise( y, xc, ye );\r\n        };\r\n\r\n\r\n        /*\r\n         *   n % 0 =  N\r\n         *   n % N =  N\r\n         *   n % I =  n\r\n         *   0 % n =  0\r\n         *  -0 % n = -0\r\n         *   0 % 0 =  N\r\n         *   0 % N =  N\r\n         *   0 % I =  0\r\n         *   N % n =  N\r\n         *   N % 0 =  N\r\n         *   N % N =  N\r\n         *   N % I =  N\r\n         *   I % n =  N\r\n         *   I % 0 =  N\r\n         *   I % N =  N\r\n         *   I % I =  N\r\n         *\r\n         * Return a new BigNumber whose value is the value of this BigNumber modulo the value of\r\n         * BigNumber(y, b). The result depends on the value of MODULO_MODE.\r\n         */\r\n        P.modulo = P.mod = function ( y, b ) {\r\n            var q, s,\r\n                x = this;\r\n\r\n            id = 11;\r\n            y = new BigNumber( y, b );\r\n\r\n            // Return NaN if x is Infinity or NaN, or y is NaN or zero.\r\n            if ( !x.c || !y.s || y.c && !y.c[0] ) {\r\n                return new BigNumber(NaN);\r\n\r\n            // Return x if y is Infinity or x is zero.\r\n            } else if ( !y.c || x.c && !x.c[0] ) {\r\n                return new BigNumber(x);\r\n            }\r\n\r\n            if ( MODULO_MODE == 9 ) {\r\n\r\n                // Euclidian division: q = sign(y) * floor(x / abs(y))\r\n                // r = x - qy    where  0 <= r < abs(y)\r\n                s = y.s;\r\n                y.s = 1;\r\n                q = div( x, y, 0, 3 );\r\n                y.s = s;\r\n                q.s *= s;\r\n            } else {\r\n                q = div( x, y, 0, MODULO_MODE );\r\n            }\r\n\r\n            return x.minus( q.times(y) );\r\n        };\r\n\r\n\r\n        /*\r\n         * Return a new BigNumber whose value is the value of this BigNumber negated,\r\n         * i.e. multiplied by -1.\r\n         */\r\n        P.negated = P.neg = function () {\r\n            var x = new BigNumber(this);\r\n            x.s = -x.s || null;\r\n            return x;\r\n        };\r\n\r\n\r\n        /*\r\n         *  n + 0 = n\r\n         *  n + N = N\r\n         *  n + I = I\r\n         *  0 + n = n\r\n         *  0 + 0 = 0\r\n         *  0 + N = N\r\n         *  0 + I = I\r\n         *  N + n = N\r\n         *  N + 0 = N\r\n         *  N + N = N\r\n         *  N + I = N\r\n         *  I + n = I\r\n         *  I + 0 = I\r\n         *  I + N = N\r\n         *  I + I = I\r\n         *\r\n         * Return a new BigNumber whose value is the value of this BigNumber plus the value of\r\n         * BigNumber(y, b).\r\n         */\r\n        P.plus = P.add = function ( y, b ) {\r\n            var t,\r\n                x = this,\r\n                a = x.s;\r\n\r\n            id = 12;\r\n            y = new BigNumber( y, b );\r\n            b = y.s;\r\n\r\n            // Either NaN?\r\n            if ( !a || !b ) return new BigNumber(NaN);\r\n\r\n            // Signs differ?\r\n             if ( a != b ) {\r\n                y.s = -b;\r\n                return x.minus(y);\r\n            }\r\n\r\n            var xe = x.e / LOG_BASE,\r\n                ye = y.e / LOG_BASE,\r\n                xc = x.c,\r\n                yc = y.c;\r\n\r\n            if ( !xe || !ye ) {\r\n\r\n                // Return ±Infinity if either ±Infinity.\r\n                if ( !xc || !yc ) return new BigNumber( a / 0 );\r\n\r\n                // Either zero?\r\n                // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.\r\n                if ( !xc[0] || !yc[0] ) return yc[0] ? y : new BigNumber( xc[0] ? x : a * 0 );\r\n            }\r\n\r\n            xe = bitFloor(xe);\r\n            ye = bitFloor(ye);\r\n            xc = xc.slice();\r\n\r\n            // Prepend zeros to equalise exponents. Faster to use reverse then do unshifts.\r\n            if ( a = xe - ye ) {\r\n                if ( a > 0 ) {\r\n                    ye = xe;\r\n                    t = yc;\r\n                } else {\r\n                    a = -a;\r\n                    t = xc;\r\n                }\r\n\r\n                t.reverse();\r\n                for ( ; a--; t.push(0) );\r\n                t.reverse();\r\n            }\r\n\r\n            a = xc.length;\r\n            b = yc.length;\r\n\r\n            // Point xc to the longer array, and b to the shorter length.\r\n            if ( a - b < 0 ) t = yc, yc = xc, xc = t, b = a;\r\n\r\n            // Only start adding at yc.length - 1 as the further digits of xc can be ignored.\r\n            for ( a = 0; b; ) {\r\n                a = ( xc[--b] = xc[b] + yc[b] + a ) / BASE | 0;\r\n                xc[b] = BASE === xc[b] ? 0 : xc[b] % BASE;\r\n            }\r\n\r\n            if (a) {\r\n                xc = [a].concat(xc);\r\n                ++ye;\r\n            }\r\n\r\n            // No need to check for zero, as +x + +y != 0 && -x + -y != 0\r\n            // ye = MAX_EXP + 1 possible\r\n            return normalise( y, xc, ye );\r\n        };\r\n\r\n\r\n        /*\r\n         * Return the number of significant digits of the value of this BigNumber.\r\n         *\r\n         * [z] {boolean|number} Whether to count integer-part trailing zeros: true, false, 1 or 0.\r\n         */\r\n        P.precision = P.sd = function (z) {\r\n            var n, v,\r\n                x = this,\r\n                c = x.c;\r\n\r\n            // 'precision() argument not a boolean or binary digit: {z}'\r\n            if ( z != null && z !== !!z && z !== 1 && z !== 0 ) {\r\n                if (ERRORS) raise( 13, 'argument' + notBool, z );\r\n                if ( z != !!z ) z = null;\r\n            }\r\n\r\n            if ( !c ) return null;\r\n            v = c.length - 1;\r\n            n = v * LOG_BASE + 1;\r\n\r\n            if ( v = c[v] ) {\r\n\r\n                // Subtract the number of trailing zeros of the last element.\r\n                for ( ; v % 10 == 0; v /= 10, n-- );\r\n\r\n                // Add the number of digits of the first element.\r\n                for ( v = c[0]; v >= 10; v /= 10, n++ );\r\n            }\r\n\r\n            if ( z && x.e + 1 > n ) n = x.e + 1;\r\n\r\n            return n;\r\n        };\r\n\r\n\r\n        /*\r\n         * Return a new BigNumber whose value is the value of this BigNumber rounded to a maximum of\r\n         * dp decimal places using rounding mode rm, or to 0 and ROUNDING_MODE respectively if\r\n         * omitted.\r\n         *\r\n         * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n         * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n         *\r\n         * 'round() decimal places out of range: {dp}'\r\n         * 'round() decimal places not an integer: {dp}'\r\n         * 'round() rounding mode not an integer: {rm}'\r\n         * 'round() rounding mode out of range: {rm}'\r\n         */\r\n        P.round = function ( dp, rm ) {\r\n            var n = new BigNumber(this);\r\n\r\n            if ( dp == null || isValidInt( dp, 0, MAX, 15 ) ) {\r\n                round( n, ~~dp + this.e + 1, rm == null ||\r\n                  !isValidInt( rm, 0, 8, 15, roundingMode ) ? ROUNDING_MODE : rm | 0 );\r\n            }\r\n\r\n            return n;\r\n        };\r\n\r\n\r\n        /*\r\n         * Return a new BigNumber whose value is the value of this BigNumber shifted by k places\r\n         * (powers of 10). Shift to the right if n > 0, and to the left if n < 0.\r\n         *\r\n         * k {number} Integer, -MAX_SAFE_INTEGER to MAX_SAFE_INTEGER inclusive.\r\n         *\r\n         * If k is out of range and ERRORS is false, the result will be ±0 if k < 0, or ±Infinity\r\n         * otherwise.\r\n         *\r\n         * 'shift() argument not an integer: {k}'\r\n         * 'shift() argument out of range: {k}'\r\n         */\r\n        P.shift = function (k) {\r\n            var n = this;\r\n            return isValidInt( k, -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER, 16, 'argument' )\r\n\r\n              // k < 1e+21, or truncate(k) will produce exponential notation.\r\n              ? n.times( '1e' + truncate(k) )\r\n              : new BigNumber( n.c && n.c[0] && ( k < -MAX_SAFE_INTEGER || k > MAX_SAFE_INTEGER )\r\n                ? n.s * ( k < 0 ? 0 : 1 / 0 )\r\n                : n );\r\n        };\r\n\r\n\r\n        /*\r\n         *  sqrt(-n) =  N\r\n         *  sqrt( N) =  N\r\n         *  sqrt(-I) =  N\r\n         *  sqrt( I) =  I\r\n         *  sqrt( 0) =  0\r\n         *  sqrt(-0) = -0\r\n         *\r\n         * Return a new BigNumber whose value is the square root of the value of this BigNumber,\r\n         * rounded according to DECIMAL_PLACES and ROUNDING_MODE.\r\n         */\r\n        P.squareRoot = P.sqrt = function () {\r\n            var m, n, r, rep, t,\r\n                x = this,\r\n                c = x.c,\r\n                s = x.s,\r\n                e = x.e,\r\n                dp = DECIMAL_PLACES + 4,\r\n                half = new BigNumber('0.5');\r\n\r\n            // Negative/NaN/Infinity/zero?\r\n            if ( s !== 1 || !c || !c[0] ) {\r\n                return new BigNumber( !s || s < 0 && ( !c || c[0] ) ? NaN : c ? x : 1 / 0 );\r\n            }\r\n\r\n            // Initial estimate.\r\n            s = Math.sqrt( +x );\r\n\r\n            // Math.sqrt underflow/overflow?\r\n            // Pass x to Math.sqrt as integer, then adjust the exponent of the result.\r\n            if ( s == 0 || s == 1 / 0 ) {\r\n                n = coeffToString(c);\r\n                if ( ( n.length + e ) % 2 == 0 ) n += '0';\r\n                s = Math.sqrt(n);\r\n                e = bitFloor( ( e + 1 ) / 2 ) - ( e < 0 || e % 2 );\r\n\r\n                if ( s == 1 / 0 ) {\r\n                    n = '1e' + e;\r\n                } else {\r\n                    n = s.toExponential();\r\n                    n = n.slice( 0, n.indexOf('e') + 1 ) + e;\r\n                }\r\n\r\n                r = new BigNumber(n);\r\n            } else {\r\n                r = new BigNumber( s + '' );\r\n            }\r\n\r\n            // Check for zero.\r\n            // r could be zero if MIN_EXP is changed after the this value was created.\r\n            // This would cause a division by zero (x/t) and hence Infinity below, which would cause\r\n            // coeffToString to throw.\r\n            if ( r.c[0] ) {\r\n                e = r.e;\r\n                s = e + dp;\r\n                if ( s < 3 ) s = 0;\r\n\r\n                // Newton-Raphson iteration.\r\n                for ( ; ; ) {\r\n                    t = r;\r\n                    r = half.times( t.plus( div( x, t, dp, 1 ) ) );\r\n\r\n                    if ( coeffToString( t.c   ).slice( 0, s ) === ( n =\r\n                         coeffToString( r.c ) ).slice( 0, s ) ) {\r\n\r\n                        // The exponent of r may here be one less than the final result exponent,\r\n                        // e.g 0.0009999 (e-4) --> 0.001 (e-3), so adjust s so the rounding digits\r\n                        // are indexed correctly.\r\n                        if ( r.e < e ) --s;\r\n                        n = n.slice( s - 3, s + 1 );\r\n\r\n                        // The 4th rounding digit may be in error by -1 so if the 4 rounding digits\r\n                        // are 9999 or 4999 (i.e. approaching a rounding boundary) continue the\r\n                        // iteration.\r\n                        if ( n == '9999' || !rep && n == '4999' ) {\r\n\r\n                            // On the first iteration only, check to see if rounding up gives the\r\n                            // exact result as the nines may infinitely repeat.\r\n                            if ( !rep ) {\r\n                                round( t, t.e + DECIMAL_PLACES + 2, 0 );\r\n\r\n                                if ( t.times(t).eq(x) ) {\r\n                                    r = t;\r\n                                    break;\r\n                                }\r\n                            }\r\n\r\n                            dp += 4;\r\n                            s += 4;\r\n                            rep = 1;\r\n                        } else {\r\n\r\n                            // If rounding digits are null, 0{0,4} or 50{0,3}, check for exact\r\n                            // result. If not, then there are further digits and m will be truthy.\r\n                            if ( !+n || !+n.slice(1) && n.charAt(0) == '5' ) {\r\n\r\n                                // Truncate to the first rounding digit.\r\n                                round( r, r.e + DECIMAL_PLACES + 2, 1 );\r\n                                m = !r.times(r).eq(x);\r\n                            }\r\n\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            return round( r, r.e + DECIMAL_PLACES + 1, ROUNDING_MODE, m );\r\n        };\r\n\r\n\r\n        /*\r\n         *  n * 0 = 0\r\n         *  n * N = N\r\n         *  n * I = I\r\n         *  0 * n = 0\r\n         *  0 * 0 = 0\r\n         *  0 * N = N\r\n         *  0 * I = N\r\n         *  N * n = N\r\n         *  N * 0 = N\r\n         *  N * N = N\r\n         *  N * I = N\r\n         *  I * n = I\r\n         *  I * 0 = N\r\n         *  I * N = N\r\n         *  I * I = I\r\n         *\r\n         * Return a new BigNumber whose value is the value of this BigNumber times the value of\r\n         * BigNumber(y, b).\r\n         */\r\n        P.times = P.mul = function ( y, b ) {\r\n            var c, e, i, j, k, m, xcL, xlo, xhi, ycL, ylo, yhi, zc,\r\n                base, sqrtBase,\r\n                x = this,\r\n                xc = x.c,\r\n                yc = ( id = 17, y = new BigNumber( y, b ) ).c;\r\n\r\n            // Either NaN, ±Infinity or ±0?\r\n            if ( !xc || !yc || !xc[0] || !yc[0] ) {\r\n\r\n                // Return NaN if either is NaN, or one is 0 and the other is Infinity.\r\n                if ( !x.s || !y.s || xc && !xc[0] && !yc || yc && !yc[0] && !xc ) {\r\n                    y.c = y.e = y.s = null;\r\n                } else {\r\n                    y.s *= x.s;\r\n\r\n                    // Return ±Infinity if either is ±Infinity.\r\n                    if ( !xc || !yc ) {\r\n                        y.c = y.e = null;\r\n\r\n                    // Return ±0 if either is ±0.\r\n                    } else {\r\n                        y.c = [0];\r\n                        y.e = 0;\r\n                    }\r\n                }\r\n\r\n                return y;\r\n            }\r\n\r\n            e = bitFloor( x.e / LOG_BASE ) + bitFloor( y.e / LOG_BASE );\r\n            y.s *= x.s;\r\n            xcL = xc.length;\r\n            ycL = yc.length;\r\n\r\n            // Ensure xc points to longer array and xcL to its length.\r\n            if ( xcL < ycL ) zc = xc, xc = yc, yc = zc, i = xcL, xcL = ycL, ycL = i;\r\n\r\n            // Initialise the result array with zeros.\r\n            for ( i = xcL + ycL, zc = []; i--; zc.push(0) );\r\n\r\n            base = BASE;\r\n            sqrtBase = SQRT_BASE;\r\n\r\n            for ( i = ycL; --i >= 0; ) {\r\n                c = 0;\r\n                ylo = yc[i] % sqrtBase;\r\n                yhi = yc[i] / sqrtBase | 0;\r\n\r\n                for ( k = xcL, j = i + k; j > i; ) {\r\n                    xlo = xc[--k] % sqrtBase;\r\n                    xhi = xc[k] / sqrtBase | 0;\r\n                    m = yhi * xlo + xhi * ylo;\r\n                    xlo = ylo * xlo + ( ( m % sqrtBase ) * sqrtBase ) + zc[j] + c;\r\n                    c = ( xlo / base | 0 ) + ( m / sqrtBase | 0 ) + yhi * xhi;\r\n                    zc[j--] = xlo % base;\r\n                }\r\n\r\n                zc[j] = c;\r\n            }\r\n\r\n            if (c) {\r\n                ++e;\r\n            } else {\r\n                zc.splice(0, 1);\r\n            }\r\n\r\n            return normalise( y, zc, e );\r\n        };\r\n\r\n\r\n        /*\r\n         * Return a new BigNumber whose value is the value of this BigNumber rounded to a maximum of\r\n         * sd significant digits using rounding mode rm, or ROUNDING_MODE if rm is omitted.\r\n         *\r\n         * [sd] {number} Significant digits. Integer, 1 to MAX inclusive.\r\n         * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n         *\r\n         * 'toDigits() precision out of range: {sd}'\r\n         * 'toDigits() precision not an integer: {sd}'\r\n         * 'toDigits() rounding mode not an integer: {rm}'\r\n         * 'toDigits() rounding mode out of range: {rm}'\r\n         */\r\n        P.toDigits = function ( sd, rm ) {\r\n            var n = new BigNumber(this);\r\n            sd = sd == null || !isValidInt( sd, 1, MAX, 18, 'precision' ) ? null : sd | 0;\r\n            rm = rm == null || !isValidInt( rm, 0, 8, 18, roundingMode ) ? ROUNDING_MODE : rm | 0;\r\n            return sd ? round( n, sd, rm ) : n;\r\n        };\r\n\r\n\r\n        /*\r\n         * Return a string representing the value of this BigNumber in exponential notation and\r\n         * rounded using ROUNDING_MODE to dp fixed decimal places.\r\n         *\r\n         * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n         * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n         *\r\n         * 'toExponential() decimal places not an integer: {dp}'\r\n         * 'toExponential() decimal places out of range: {dp}'\r\n         * 'toExponential() rounding mode not an integer: {rm}'\r\n         * 'toExponential() rounding mode out of range: {rm}'\r\n         */\r\n        P.toExponential = function ( dp, rm ) {\r\n            return format( this,\r\n              dp != null && isValidInt( dp, 0, MAX, 19 ) ? ~~dp + 1 : null, rm, 19 );\r\n        };\r\n\r\n\r\n        /*\r\n         * Return a string representing the value of this BigNumber in fixed-point notation rounding\r\n         * to dp fixed decimal places using rounding mode rm, or ROUNDING_MODE if rm is omitted.\r\n         *\r\n         * Note: as with JavaScript's number type, (-0).toFixed(0) is '0',\r\n         * but e.g. (-0.00001).toFixed(0) is '-0'.\r\n         *\r\n         * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n         * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n         *\r\n         * 'toFixed() decimal places not an integer: {dp}'\r\n         * 'toFixed() decimal places out of range: {dp}'\r\n         * 'toFixed() rounding mode not an integer: {rm}'\r\n         * 'toFixed() rounding mode out of range: {rm}'\r\n         */\r\n        P.toFixed = function ( dp, rm ) {\r\n            return format( this, dp != null && isValidInt( dp, 0, MAX, 20 )\r\n              ? ~~dp + this.e + 1 : null, rm, 20 );\r\n        };\r\n\r\n\r\n        /*\r\n         * Return a string representing the value of this BigNumber in fixed-point notation rounded\r\n         * using rm or ROUNDING_MODE to dp decimal places, and formatted according to the properties\r\n         * of the FORMAT object (see BigNumber.config).\r\n         *\r\n         * FORMAT = {\r\n         *      decimalSeparator : '.',\r\n         *      groupSeparator : ',',\r\n         *      groupSize : 3,\r\n         *      secondaryGroupSize : 0,\r\n         *      fractionGroupSeparator : '\\xA0',    // non-breaking space\r\n         *      fractionGroupSize : 0\r\n         * };\r\n         *\r\n         * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n         * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n         *\r\n         * 'toFormat() decimal places not an integer: {dp}'\r\n         * 'toFormat() decimal places out of range: {dp}'\r\n         * 'toFormat() rounding mode not an integer: {rm}'\r\n         * 'toFormat() rounding mode out of range: {rm}'\r\n         */\r\n        P.toFormat = function ( dp, rm ) {\r\n            var str = format( this, dp != null && isValidInt( dp, 0, MAX, 21 )\r\n              ? ~~dp + this.e + 1 : null, rm, 21 );\r\n\r\n            if ( this.c ) {\r\n                var i,\r\n                    arr = str.split('.'),\r\n                    g1 = +FORMAT.groupSize,\r\n                    g2 = +FORMAT.secondaryGroupSize,\r\n                    groupSeparator = FORMAT.groupSeparator,\r\n                    intPart = arr[0],\r\n                    fractionPart = arr[1],\r\n                    isNeg = this.s < 0,\r\n                    intDigits = isNeg ? intPart.slice(1) : intPart,\r\n                    len = intDigits.length;\r\n\r\n                if (g2) i = g1, g1 = g2, g2 = i, len -= i;\r\n\r\n                if ( g1 > 0 && len > 0 ) {\r\n                    i = len % g1 || g1;\r\n                    intPart = intDigits.substr( 0, i );\r\n\r\n                    for ( ; i < len; i += g1 ) {\r\n                        intPart += groupSeparator + intDigits.substr( i, g1 );\r\n                    }\r\n\r\n                    if ( g2 > 0 ) intPart += groupSeparator + intDigits.slice(i);\r\n                    if (isNeg) intPart = '-' + intPart;\r\n                }\r\n\r\n                str = fractionPart\r\n                  ? intPart + FORMAT.decimalSeparator + ( ( g2 = +FORMAT.fractionGroupSize )\r\n                    ? fractionPart.replace( new RegExp( '\\\\d{' + g2 + '}\\\\B', 'g' ),\r\n                      '$&' + FORMAT.fractionGroupSeparator )\r\n                    : fractionPart )\r\n                  : intPart;\r\n            }\r\n\r\n            return str;\r\n        };\r\n\r\n\r\n        /*\r\n         * Return a string array representing the value of this BigNumber as a simple fraction with\r\n         * an integer numerator and an integer denominator. The denominator will be a positive\r\n         * non-zero value less than or equal to the specified maximum denominator. If a maximum\r\n         * denominator is not specified, the denominator will be the lowest value necessary to\r\n         * represent the number exactly.\r\n         *\r\n         * [md] {number|string|BigNumber} Integer >= 1 and < Infinity. The maximum denominator.\r\n         *\r\n         * 'toFraction() max denominator not an integer: {md}'\r\n         * 'toFraction() max denominator out of range: {md}'\r\n         */\r\n        P.toFraction = function (md) {\r\n            var arr, d0, d2, e, exp, n, n0, q, s,\r\n                k = ERRORS,\r\n                x = this,\r\n                xc = x.c,\r\n                d = new BigNumber(ONE),\r\n                n1 = d0 = new BigNumber(ONE),\r\n                d1 = n0 = new BigNumber(ONE);\r\n\r\n            if ( md != null ) {\r\n                ERRORS = false;\r\n                n = new BigNumber(md);\r\n                ERRORS = k;\r\n\r\n                if ( !( k = n.isInt() ) || n.lt(ONE) ) {\r\n\r\n                    if (ERRORS) {\r\n                        raise( 22,\r\n                          'max denominator ' + ( k ? 'out of range' : 'not an integer' ), md );\r\n                    }\r\n\r\n                    // ERRORS is false:\r\n                    // If md is a finite non-integer >= 1, round it to an integer and use it.\r\n                    md = !k && n.c && round( n, n.e + 1, 1 ).gte(ONE) ? n : null;\r\n                }\r\n            }\r\n\r\n            if ( !xc ) return x.toString();\r\n            s = coeffToString(xc);\r\n\r\n            // Determine initial denominator.\r\n            // d is a power of 10 and the minimum max denominator that specifies the value exactly.\r\n            e = d.e = s.length - x.e - 1;\r\n            d.c[0] = POWS_TEN[ ( exp = e % LOG_BASE ) < 0 ? LOG_BASE + exp : exp ];\r\n            md = !md || n.cmp(d) > 0 ? ( e > 0 ? d : n1 ) : n;\r\n\r\n            exp = MAX_EXP;\r\n            MAX_EXP = 1 / 0;\r\n            n = new BigNumber(s);\r\n\r\n            // n0 = d1 = 0\r\n            n0.c[0] = 0;\r\n\r\n            for ( ; ; )  {\r\n                q = div( n, d, 0, 1 );\r\n                d2 = d0.plus( q.times(d1) );\r\n                if ( d2.cmp(md) == 1 ) break;\r\n                d0 = d1;\r\n                d1 = d2;\r\n                n1 = n0.plus( q.times( d2 = n1 ) );\r\n                n0 = d2;\r\n                d = n.minus( q.times( d2 = d ) );\r\n                n = d2;\r\n            }\r\n\r\n            d2 = div( md.minus(d0), d1, 0, 1 );\r\n            n0 = n0.plus( d2.times(n1) );\r\n            d0 = d0.plus( d2.times(d1) );\r\n            n0.s = n1.s = x.s;\r\n            e *= 2;\r\n\r\n            // Determine which fraction is closer to x, n0/d0 or n1/d1\r\n            arr = div( n1, d1, e, ROUNDING_MODE ).minus(x).abs().cmp(\r\n                  div( n0, d0, e, ROUNDING_MODE ).minus(x).abs() ) < 1\r\n                    ? [ n1.toString(), d1.toString() ]\r\n                    : [ n0.toString(), d0.toString() ];\r\n\r\n            MAX_EXP = exp;\r\n            return arr;\r\n        };\r\n\r\n\r\n        /*\r\n         * Return the value of this BigNumber converted to a number primitive.\r\n         */\r\n        P.toNumber = function () {\r\n            return +this;\r\n        };\r\n\r\n\r\n        /*\r\n         * Return a BigNumber whose value is the value of this BigNumber raised to the power n.\r\n         * If m is present, return the result modulo m.\r\n         * If n is negative round according to DECIMAL_PLACES and ROUNDING_MODE.\r\n         * If POW_PRECISION is non-zero and m is not present, round to POW_PRECISION using\r\n         * ROUNDING_MODE.\r\n         *\r\n         * The modular power operation works efficiently when x, n, and m are positive integers,\r\n         * otherwise it is equivalent to calculating x.toPower(n).modulo(m) (with POW_PRECISION 0).\r\n         *\r\n         * n {number} Integer, -MAX_SAFE_INTEGER to MAX_SAFE_INTEGER inclusive.\r\n         * [m] {number|string|BigNumber} The modulus.\r\n         *\r\n         * 'pow() exponent not an integer: {n}'\r\n         * 'pow() exponent out of range: {n}'\r\n         *\r\n         * Performs 54 loop iterations for n of 9007199254740991.\r\n         */\r\n        P.toPower = P.pow = function ( n, m ) {\r\n            var k, y, z,\r\n                i = mathfloor( n < 0 ? -n : +n ),\r\n                x = this;\r\n\r\n            if ( m != null ) {\r\n                id = 23;\r\n                m = new BigNumber(m);\r\n            }\r\n\r\n            // Pass ±Infinity to Math.pow if exponent is out of range.\r\n            if ( !isValidInt( n, -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER, 23, 'exponent' ) &&\r\n              ( !isFinite(n) || i > MAX_SAFE_INTEGER && ( n /= 0 ) ||\r\n                parseFloat(n) != n && !( n = NaN ) ) || n == 0 ) {\r\n                k = Math.pow( +x, n );\r\n                return new BigNumber( m ? k % m : k );\r\n            }\r\n\r\n            if (m) {\r\n                if ( n > 1 && x.gt(ONE) && x.isInt() && m.gt(ONE) && m.isInt() ) {\r\n                    x = x.mod(m);\r\n                } else {\r\n                    z = m;\r\n\r\n                    // Nullify m so only a single mod operation is performed at the end.\r\n                    m = null;\r\n                }\r\n            } else if (POW_PRECISION) {\r\n\r\n                // Truncating each coefficient array to a length of k after each multiplication\r\n                // equates to truncating significant digits to POW_PRECISION + [28, 41],\r\n                // i.e. there will be a minimum of 28 guard digits retained.\r\n                // (Using + 1.5 would give [9, 21] guard digits.)\r\n                k = mathceil( POW_PRECISION / LOG_BASE + 2 );\r\n            }\r\n\r\n            y = new BigNumber(ONE);\r\n\r\n            for ( ; ; ) {\r\n                if ( i % 2 ) {\r\n                    y = y.times(x);\r\n                    if ( !y.c ) break;\r\n                    if (k) {\r\n                        if ( y.c.length > k ) y.c.length = k;\r\n                    } else if (m) {\r\n                        y = y.mod(m);\r\n                    }\r\n                }\r\n\r\n                i = mathfloor( i / 2 );\r\n                if ( !i ) break;\r\n                x = x.times(x);\r\n                if (k) {\r\n                    if ( x.c && x.c.length > k ) x.c.length = k;\r\n                } else if (m) {\r\n                    x = x.mod(m);\r\n                }\r\n            }\r\n\r\n            if (m) return y;\r\n            if ( n < 0 ) y = ONE.div(y);\r\n\r\n            return z ? y.mod(z) : k ? round( y, POW_PRECISION, ROUNDING_MODE ) : y;\r\n        };\r\n\r\n\r\n        /*\r\n         * Return a string representing the value of this BigNumber rounded to sd significant digits\r\n         * using rounding mode rm or ROUNDING_MODE. If sd is less than the number of digits\r\n         * necessary to represent the integer part of the value in fixed-point notation, then use\r\n         * exponential notation.\r\n         *\r\n         * [sd] {number} Significant digits. Integer, 1 to MAX inclusive.\r\n         * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n         *\r\n         * 'toPrecision() precision not an integer: {sd}'\r\n         * 'toPrecision() precision out of range: {sd}'\r\n         * 'toPrecision() rounding mode not an integer: {rm}'\r\n         * 'toPrecision() rounding mode out of range: {rm}'\r\n         */\r\n        P.toPrecision = function ( sd, rm ) {\r\n            return format( this, sd != null && isValidInt( sd, 1, MAX, 24, 'precision' )\r\n              ? sd | 0 : null, rm, 24 );\r\n        };\r\n\r\n\r\n        /*\r\n         * Return a string representing the value of this BigNumber in base b, or base 10 if b is\r\n         * omitted. If a base is specified, including base 10, round according to DECIMAL_PLACES and\r\n         * ROUNDING_MODE. If a base is not specified, and this BigNumber has a positive exponent\r\n         * that is equal to or greater than TO_EXP_POS, or a negative exponent equal to or less than\r\n         * TO_EXP_NEG, return exponential notation.\r\n         *\r\n         * [b] {number} Integer, 2 to 64 inclusive.\r\n         *\r\n         * 'toString() base not an integer: {b}'\r\n         * 'toString() base out of range: {b}'\r\n         */\r\n        P.toString = function (b) {\r\n            var str,\r\n                n = this,\r\n                s = n.s,\r\n                e = n.e;\r\n\r\n            // Infinity or NaN?\r\n            if ( e === null ) {\r\n\r\n                if (s) {\r\n                    str = 'Infinity';\r\n                    if ( s < 0 ) str = '-' + str;\r\n                } else {\r\n                    str = 'NaN';\r\n                }\r\n            } else {\r\n                str = coeffToString( n.c );\r\n\r\n                if ( b == null || !isValidInt( b, 2, 64, 25, 'base' ) ) {\r\n                    str = e <= TO_EXP_NEG || e >= TO_EXP_POS\r\n                      ? toExponential( str, e )\r\n                      : toFixedPoint( str, e );\r\n                } else {\r\n                    str = convertBase( toFixedPoint( str, e ), b | 0, 10, s );\r\n                }\r\n\r\n                if ( s < 0 && n.c[0] ) str = '-' + str;\r\n            }\r\n\r\n            return str;\r\n        };\r\n\r\n\r\n        /*\r\n         * Return a new BigNumber whose value is the value of this BigNumber truncated to a whole\r\n         * number.\r\n         */\r\n        P.truncated = P.trunc = function () {\r\n            return round( new BigNumber(this), this.e + 1, 1 );\r\n        };\r\n\r\n\r\n        /*\r\n         * Return as toString, but do not accept a base argument, and include the minus sign for\r\n         * negative zero.\r\n         */\r\n        P.valueOf = P.toJSON = function () {\r\n            var str,\r\n                n = this,\r\n                e = n.e;\r\n\r\n            if ( e === null ) return n.toString();\r\n\r\n            str = coeffToString( n.c );\r\n\r\n            str = e <= TO_EXP_NEG || e >= TO_EXP_POS\r\n                ? toExponential( str, e )\r\n                : toFixedPoint( str, e );\r\n\r\n            return n.s < 0 ? '-' + str : str;\r\n        };\r\n\r\n\r\n        P.isBigNumber = true;\r\n\r\n        if ( config != null ) BigNumber.config(config);\r\n\r\n        return BigNumber;\r\n    }\r\n\r\n\r\n    // PRIVATE HELPER FUNCTIONS\r\n\r\n\r\n    function bitFloor(n) {\r\n        var i = n | 0;\r\n        return n > 0 || n === i ? i : i - 1;\r\n    }\r\n\r\n\r\n    // Return a coefficient array as a string of base 10 digits.\r\n    function coeffToString(a) {\r\n        var s, z,\r\n            i = 1,\r\n            j = a.length,\r\n            r = a[0] + '';\r\n\r\n        for ( ; i < j; ) {\r\n            s = a[i++] + '';\r\n            z = LOG_BASE - s.length;\r\n            for ( ; z--; s = '0' + s );\r\n            r += s;\r\n        }\r\n\r\n        // Determine trailing zeros.\r\n        for ( j = r.length; r.charCodeAt(--j) === 48; );\r\n        return r.slice( 0, j + 1 || 1 );\r\n    }\r\n\r\n\r\n    // Compare the value of BigNumbers x and y.\r\n    function compare( x, y ) {\r\n        var a, b,\r\n            xc = x.c,\r\n            yc = y.c,\r\n            i = x.s,\r\n            j = y.s,\r\n            k = x.e,\r\n            l = y.e;\r\n\r\n        // Either NaN?\r\n        if ( !i || !j ) return null;\r\n\r\n        a = xc && !xc[0];\r\n        b = yc && !yc[0];\r\n\r\n        // Either zero?\r\n        if ( a || b ) return a ? b ? 0 : -j : i;\r\n\r\n        // Signs differ?\r\n        if ( i != j ) return i;\r\n\r\n        a = i < 0;\r\n        b = k == l;\r\n\r\n        // Either Infinity?\r\n        if ( !xc || !yc ) return b ? 0 : !xc ^ a ? 1 : -1;\r\n\r\n        // Compare exponents.\r\n        if ( !b ) return k > l ^ a ? 1 : -1;\r\n\r\n        j = ( k = xc.length ) < ( l = yc.length ) ? k : l;\r\n\r\n        // Compare digit by digit.\r\n        for ( i = 0; i < j; i++ ) if ( xc[i] != yc[i] ) return xc[i] > yc[i] ^ a ? 1 : -1;\r\n\r\n        // Compare lengths.\r\n        return k == l ? 0 : k > l ^ a ? 1 : -1;\r\n    }\r\n\r\n\r\n    /*\r\n     * Return true if n is a valid number in range, otherwise false.\r\n     * Use for argument validation when ERRORS is false.\r\n     * Note: parseInt('1e+1') == 1 but parseFloat('1e+1') == 10.\r\n     */\r\n    function intValidatorNoErrors( n, min, max ) {\r\n        return ( n = truncate(n) ) >= min && n <= max;\r\n    }\r\n\r\n\r\n    function isArray(obj) {\r\n        return Object.prototype.toString.call(obj) == '[object Array]';\r\n    }\r\n\r\n\r\n    /*\r\n     * Convert string of baseIn to an array of numbers of baseOut.\r\n     * Eg. convertBase('255', 10, 16) returns [15, 15].\r\n     * Eg. convertBase('ff', 16, 10) returns [2, 5, 5].\r\n     */\r\n    function toBaseOut( str, baseIn, baseOut ) {\r\n        var j,\r\n            arr = [0],\r\n            arrL,\r\n            i = 0,\r\n            len = str.length;\r\n\r\n        for ( ; i < len; ) {\r\n            for ( arrL = arr.length; arrL--; arr[arrL] *= baseIn );\r\n            arr[ j = 0 ] += ALPHABET.indexOf( str.charAt( i++ ) );\r\n\r\n            for ( ; j < arr.length; j++ ) {\r\n\r\n                if ( arr[j] > baseOut - 1 ) {\r\n                    if ( arr[j + 1] == null ) arr[j + 1] = 0;\r\n                    arr[j + 1] += arr[j] / baseOut | 0;\r\n                    arr[j] %= baseOut;\r\n                }\r\n            }\r\n        }\r\n\r\n        return arr.reverse();\r\n    }\r\n\r\n\r\n    function toExponential( str, e ) {\r\n        return ( str.length > 1 ? str.charAt(0) + '.' + str.slice(1) : str ) +\r\n          ( e < 0 ? 'e' : 'e+' ) + e;\r\n    }\r\n\r\n\r\n    function toFixedPoint( str, e ) {\r\n        var len, z;\r\n\r\n        // Negative exponent?\r\n        if ( e < 0 ) {\r\n\r\n            // Prepend zeros.\r\n            for ( z = '0.'; ++e; z += '0' );\r\n            str = z + str;\r\n\r\n        // Positive exponent\r\n        } else {\r\n            len = str.length;\r\n\r\n            // Append zeros.\r\n            if ( ++e > len ) {\r\n                for ( z = '0', e -= len; --e; z += '0' );\r\n                str += z;\r\n            } else if ( e < len ) {\r\n                str = str.slice( 0, e ) + '.' + str.slice(e);\r\n            }\r\n        }\r\n\r\n        return str;\r\n    }\r\n\r\n\r\n    function truncate(n) {\r\n        n = parseFloat(n);\r\n        return n < 0 ? mathceil(n) : mathfloor(n);\r\n    }\r\n\r\n\r\n    // EXPORT\r\n\r\n\r\n    BigNumber = constructorFactory();\r\n    BigNumber['default'] = BigNumber.BigNumber = BigNumber;\r\n\r\n\r\n    // AMD.\r\n    if ( typeof define == 'function' && define.amd ) {\r\n        define( function () { return BigNumber; } );\r\n\r\n    // Node.js and other environments that support module.exports.\r\n    } else if ( typeof module != 'undefined' && module.exports ) {\r\n        module.exports = BigNumber;\r\n\r\n    // Browser.\r\n    } else {\r\n        if ( !globalObj ) globalObj = typeof self != 'undefined' ? self : Function('return this')();\r\n        globalObj.BigNumber = BigNumber;\r\n    }\r\n})(this);\r\n"],"mappings":"AAAA;AAEA;;AAAC,CAAC,UAAUA,SAAV,EAAqB;EACnB;EAEA;AACJ;AACA;AACA;AACA;AACA;AACA;;EAGI,IAAIC,SAAJ;EAAA,IACIC,SAAS,GAAG,sCADhB;EAAA,IAEIC,QAAQ,GAAGC,IAAI,CAACC,IAFpB;EAAA,IAGIC,SAAS,GAAGF,IAAI,CAACG,KAHrB;EAAA,IAIIC,OAAO,GAAG,gCAJd;EAAA,IAKIC,YAAY,GAAG,eALnB;EAAA,IAMIC,aAAa,GAAG,iDANpB;EAAA,IAOIC,QAAQ,GAAG,kEAPf;EAAA,IAQIC,IAAI,GAAG,IARX;EAAA,IASIC,QAAQ,GAAG,EATf;EAAA,IAUIC,gBAAgB,GAAG,gBAVvB;EAAA,IAUiD;EAC7C;EACAC,QAAQ,GAAG,CAAC,CAAD,EAAI,EAAJ,EAAQ,GAAR,EAAa,GAAb,EAAkB,GAAlB,EAAuB,GAAvB,EAA4B,GAA5B,EAAiC,GAAjC,EAAsC,GAAtC,EAA2C,GAA3C,EAAgD,IAAhD,EAAsD,IAAtD,EAA4D,IAA5D,EAAkE,IAAlE,CAZf;EAAA,IAaIC,SAAS,GAAG,GAbhB;;EAeI;AACR;AACA;AACA;AACA;EACQC,GAAG,GAAG,GApBV,CAZmB,CAgC8B;;EAGjD;AACJ;AACA;;EACI,SAASC,kBAAT,CAA4BC,MAA5B,EAAoC;IAChC,IAAIC,GAAJ;IAAA,IAASC,YAAT;IAAA,IAEI;IACAC,EAAE,GAAG,CAHT;IAAA,IAIIC,CAAC,GAAGtB,SAAS,CAACuB,SAJlB;IAAA,IAKIC,GAAG,GAAG,IAAIxB,SAAJ,CAAc,CAAd,CALV;;IAQI;;IAGA;AACZ;AACA;AACA;IAEY;IACAyB,cAAc,GAAG,EAjBrB;IAAA,IAiB6C;;IAEzC;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACYC,aAAa,GAAG,CAhCpB;IAAA,IAgC6C;IAEzC;IAEA;IACA;IACAC,UAAU,GAAG,CAAC,CAtClB;IAAA,IAsC6C;IAEzC;IACA;IACAC,UAAU,GAAG,EA1CjB;IAAA,IA0C6C;IAEzC;IAEA;IACA;IACAC,OAAO,GAAG,CAAC,GAhDf;IAAA,IAgD6C;IAEzC;IACA;IACA;IACAC,OAAO,GAAG,GArDd;IAAA,IAqD6C;IAEzC;IACAC,MAAM,GAAG,IAxDb;IAAA,IAwD6C;IAEzC;IACAC,UAAU,GAAGC,sBA3DjB;IAAA,IA2D6C;IAEzC;IACAC,MAAM,GAAG,KA9Db;IAAA,IA8D6C;;IAEzC;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACYC,WAAW,GAAG,CAlFlB;IAAA,IAkF6C;IAEzC;IACA;IACAC,aAAa,GAAG,CAtFpB;IAAA,IAsF6C;IAEzC;IACAC,MAAM,GAAG;MACLC,gBAAgB,EAAE,GADb;MAELC,cAAc,EAAE,GAFX;MAGLC,SAAS,EAAE,CAHN;MAILC,kBAAkB,EAAE,CAJf;MAKLC,sBAAsB,EAAE,MALnB;MAKgC;MACrCC,iBAAiB,EAAE;IANd,CAzFb;IAmGA;IAGA;;IAGA;AACR;AACA;AACA;AACA;AACA;AACA;;IACQ,SAAS3C,SAAT,CAAoB4C,CAApB,EAAuBC,CAAvB,EAA2B;MACvB,IAAIC,CAAJ;MAAA,IAAOC,CAAP;MAAA,IAAUC,CAAV;MAAA,IAAaC,GAAb;MAAA,IAAkBC,GAAlB;MAAA,IAAuBC,GAAvB;MAAA,IACIC,CAAC,GAAG,IADR,CADuB,CAIvB;;MACA,IAAK,EAAGA,CAAC,YAAYpD,SAAhB,CAAL,EAAmC;QAE/B;QACA,IAAI+B,MAAJ,EAAYsB,KAAK,CAAE,EAAF,EAAM,8BAAN,EAAsCT,CAAtC,CAAL;QACZ,OAAO,IAAI5C,SAAJ,CAAe4C,CAAf,EAAkBC,CAAlB,CAAP;MACH,CAVsB,CAYvB;MACA;;;MACA,IAAKA,CAAC,IAAI,IAAL,IAAa,CAACb,UAAU,CAAEa,CAAF,EAAK,CAAL,EAAQ,EAAR,EAAYxB,EAAZ,EAAgB,MAAhB,CAA7B,EAAwD;QAEpD;QACA,IAAKuB,CAAC,YAAY5C,SAAlB,EAA8B;UAC1BoD,CAAC,CAACE,CAAF,GAAMV,CAAC,CAACU,CAAR;UACAF,CAAC,CAACL,CAAF,GAAMH,CAAC,CAACG,CAAR;UACAK,CAAC,CAACN,CAAF,GAAM,CAAEF,CAAC,GAAGA,CAAC,CAACE,CAAR,IAAcF,CAAC,CAACW,KAAF,EAAd,GAA0BX,CAAhC;UACAvB,EAAE,GAAG,CAAL;UACA;QACH;;QAED,IAAK,CAAE4B,GAAG,GAAG,OAAOL,CAAP,IAAY,QAApB,KAAkCA,CAAC,GAAG,CAAJ,IAAS,CAAhD,EAAoD;UAChDQ,CAAC,CAACE,CAAF,GAAM,IAAIV,CAAJ,GAAQ,CAAR,IAAcA,CAAC,GAAG,CAACA,CAAL,EAAQ,CAAC,CAAvB,IAA6B,CAAnC,CADgD,CAGhD;;UACA,IAAKA,CAAC,KAAK,CAAC,CAACA,CAAb,EAAiB;YACb,KAAMG,CAAC,GAAG,CAAJ,EAAOC,CAAC,GAAGJ,CAAjB,EAAoBI,CAAC,IAAI,EAAzB,EAA6BA,CAAC,IAAI,EAAL,EAASD,CAAC,EAAvC,CAA2C;;YAC3CK,CAAC,CAACL,CAAF,GAAMA,CAAN;YACAK,CAAC,CAACN,CAAF,GAAM,CAACF,CAAD,CAAN;YACAvB,EAAE,GAAG,CAAL;YACA;UACH;;UAED8B,GAAG,GAAGP,CAAC,GAAG,EAAV;QACH,CAbD,MAaO;UACH,IAAK,CAAC3C,SAAS,CAACuD,IAAV,CAAgBL,GAAG,GAAGP,CAAC,GAAG,EAA1B,CAAN,EAAuC,OAAOxB,YAAY,CAAEgC,CAAF,EAAKD,GAAL,EAAUF,GAAV,CAAnB;UACvCG,CAAC,CAACE,CAAF,GAAMH,GAAG,CAACM,UAAJ,CAAe,CAAf,MAAsB,EAAtB,IAA6BN,GAAG,GAAGA,GAAG,CAACI,KAAJ,CAAU,CAAV,CAAN,EAAoB,CAAC,CAAlD,IAAwD,CAA9D;QACH;MACJ,CA5BD,MA4BO;QACHV,CAAC,GAAGA,CAAC,GAAG,CAAR;QACAM,GAAG,GAAGP,CAAC,GAAG,EAAV,CAFG,CAIH;QACA;;QACA,IAAKC,CAAC,IAAI,EAAV,EAAe;UACXO,CAAC,GAAG,IAAIpD,SAAJ,CAAe4C,CAAC,YAAY5C,SAAb,GAAyB4C,CAAzB,GAA6BO,GAA5C,CAAJ;UACA,OAAOO,KAAK,CAAEN,CAAF,EAAK3B,cAAc,GAAG2B,CAAC,CAACL,CAAnB,GAAuB,CAA5B,EAA+BrB,aAA/B,CAAZ;QACH,CATE,CAWH;QACA;;;QACA,IAAK,CAAEuB,GAAG,GAAG,OAAOL,CAAP,IAAY,QAApB,KAAkCA,CAAC,GAAG,CAAJ,IAAS,CAA3C,IACH,CAAG,IAAIe,MAAJ,CAAY,SAAUb,CAAC,GAAG,MAAMpC,QAAQ,CAAC6C,KAAT,CAAgB,CAAhB,EAAmBV,CAAnB,CAAN,GAA+B,IAA7C,IACb,QADa,GACFC,CADE,GACE,KADd,EACoBD,CAAC,GAAG,EAAJ,GAAS,GAAT,GAAe,EADnC,CAAF,CAC4CW,IAD5C,CACiDL,GADjD,CADH,EAE2D;UACvD,OAAO/B,YAAY,CAAEgC,CAAF,EAAKD,GAAL,EAAUF,GAAV,EAAeJ,CAAf,CAAnB;QACH;;QAED,IAAII,GAAJ,EAAS;UACLG,CAAC,CAACE,CAAF,GAAM,IAAIV,CAAJ,GAAQ,CAAR,IAAcO,GAAG,GAAGA,GAAG,CAACI,KAAJ,CAAU,CAAV,CAAN,EAAoB,CAAC,CAAnC,IAAyC,CAA/C;;UAEA,IAAKxB,MAAM,IAAIoB,GAAG,CAACS,OAAJ,CAAa,WAAb,EAA0B,EAA1B,EAA+BC,MAA/B,GAAwC,EAAvD,EAA4D;YAExD;YACAR,KAAK,CAAEhC,EAAF,EAAMZ,aAAN,EAAqBmC,CAArB,CAAL;UACH,CAPI,CASL;;;UACAK,GAAG,GAAG,KAAN;QACH,CAXD,MAWO;UACHG,CAAC,CAACE,CAAF,GAAMH,GAAG,CAACM,UAAJ,CAAe,CAAf,MAAsB,EAAtB,IAA6BN,GAAG,GAAGA,GAAG,CAACI,KAAJ,CAAU,CAAV,CAAN,EAAoB,CAAC,CAAlD,IAAwD,CAA9D;QACH;;QAEDJ,GAAG,GAAGW,WAAW,CAAEX,GAAF,EAAO,EAAP,EAAWN,CAAX,EAAcO,CAAC,CAACE,CAAhB,CAAjB;MACH,CA7EsB,CA+EvB;;;MACA,IAAK,CAAEP,CAAC,GAAGI,GAAG,CAACY,OAAJ,CAAY,GAAZ,CAAN,IAA2B,CAAC,CAAjC,EAAqCZ,GAAG,GAAGA,GAAG,CAACS,OAAJ,CAAa,GAAb,EAAkB,EAAlB,CAAN,CAhFd,CAkFvB;;MACA,IAAK,CAAEZ,CAAC,GAAGG,GAAG,CAACa,MAAJ,CAAY,IAAZ,CAAN,IAA6B,CAAlC,EAAsC;QAElC;QACA,IAAKjB,CAAC,GAAG,CAAT,EAAaA,CAAC,GAAGC,CAAJ;QACbD,CAAC,IAAI,CAACI,GAAG,CAACI,KAAJ,CAAWP,CAAC,GAAG,CAAf,CAAN;QACAG,GAAG,GAAGA,GAAG,CAACc,SAAJ,CAAe,CAAf,EAAkBjB,CAAlB,CAAN;MACH,CAND,MAMO,IAAKD,CAAC,GAAG,CAAT,EAAa;QAEhB;QACAA,CAAC,GAAGI,GAAG,CAACU,MAAR;MACH,CA7FsB,CA+FvB;;;MACA,KAAMb,CAAC,GAAG,CAAV,EAAaG,GAAG,CAACM,UAAJ,CAAeT,CAAf,MAAsB,EAAnC,EAAuCA,CAAC,EAAxC,CAA4C,CAhGrB,CAkGvB;;;MACA,KAAME,GAAG,GAAGC,GAAG,CAACU,MAAhB,EAAwBV,GAAG,CAACM,UAAJ,CAAe,EAAEP,GAAjB,MAA0B,EAAlD,EAAuD;;MACvDC,GAAG,GAAGA,GAAG,CAACI,KAAJ,CAAWP,CAAX,EAAcE,GAAG,GAAG,CAApB,CAAN;;MAEA,IAAIC,GAAJ,EAAS;QACLD,GAAG,GAAGC,GAAG,CAACU,MAAV,CADK,CAGL;QACA;;QACA,IAAKZ,GAAG,IAAIlB,MAAP,IAAiBmB,GAAG,GAAG,EAAvB,KAA+BN,CAAC,GAAG/B,gBAAJ,IAAwB+B,CAAC,KAAKvC,SAAS,CAACuC,CAAD,CAAtE,CAAL,EAAmF;UAC/ES,KAAK,CAAEhC,EAAF,EAAMZ,aAAN,EAAqB2C,CAAC,CAACE,CAAF,GAAMV,CAA3B,CAAL;QACH;;QAEDG,CAAC,GAAGA,CAAC,GAAGC,CAAJ,GAAQ,CAAZ,CATK,CAWJ;;QACD,IAAKD,CAAC,GAAGjB,OAAT,EAAmB;UAEf;UACAsB,CAAC,CAACN,CAAF,GAAMM,CAAC,CAACL,CAAF,GAAM,IAAZ,CAHe,CAKnB;QACC,CAND,MAMO,IAAKA,CAAC,GAAGlB,OAAT,EAAmB;UAEtB;UACAuB,CAAC,CAACN,CAAF,GAAM,CAAEM,CAAC,CAACL,CAAF,GAAM,CAAR,CAAN;QACH,CAJM,MAIA;UACHK,CAAC,CAACL,CAAF,GAAMA,CAAN;UACAK,CAAC,CAACN,CAAF,GAAM,EAAN,CAFG,CAIH;UAEA;UACA;;UACAE,CAAC,GAAG,CAAED,CAAC,GAAG,CAAN,IAAYnC,QAAhB;UACA,IAAKmC,CAAC,GAAG,CAAT,EAAaC,CAAC,IAAIpC,QAAL;;UAEb,IAAKoC,CAAC,GAAGE,GAAT,EAAe;YACX,IAAIF,CAAJ,EAAOI,CAAC,CAACN,CAAF,CAAIoB,IAAJ,CAAU,CAACf,GAAG,CAACI,KAAJ,CAAW,CAAX,EAAcP,CAAd,CAAX;;YAEP,KAAME,GAAG,IAAItC,QAAb,EAAuBoC,CAAC,GAAGE,GAA3B,GAAkC;cAC9BE,CAAC,CAACN,CAAF,CAAIoB,IAAJ,CAAU,CAACf,GAAG,CAACI,KAAJ,CAAWP,CAAX,EAAcA,CAAC,IAAIpC,QAAnB,CAAX;YACH;;YAEDuC,GAAG,GAAGA,GAAG,CAACI,KAAJ,CAAUP,CAAV,CAAN;YACAA,CAAC,GAAGpC,QAAQ,GAAGuC,GAAG,CAACU,MAAnB;UACH,CATD,MASO;YACHb,CAAC,IAAIE,GAAL;UACH;;UAED,OAAQF,CAAC,EAAT,EAAaG,GAAG,IAAI,GAApB,CAAyB;;UACzBC,CAAC,CAACN,CAAF,CAAIoB,IAAJ,CAAU,CAACf,GAAX;QACH;MACJ,CAjDD,MAiDO;QAEH;QACAC,CAAC,CAACN,CAAF,GAAM,CAAEM,CAAC,CAACL,CAAF,GAAM,CAAR,CAAN;MACH;;MAED1B,EAAE,GAAG,CAAL;IACH,CA/Q+B,CAkRhC;;;IAGArB,SAAS,CAACmE,OAAV,GAAoBlD,kBAApB;IAEAjB,SAAS,CAACoE,QAAV,GAAqB,CAArB;IACApE,SAAS,CAACqE,UAAV,GAAuB,CAAvB;IACArE,SAAS,CAACsE,UAAV,GAAuB,CAAvB;IACAtE,SAAS,CAACuE,WAAV,GAAwB,CAAxB;IACAvE,SAAS,CAACwE,aAAV,GAA0B,CAA1B;IACAxE,SAAS,CAACyE,eAAV,GAA4B,CAA5B;IACAzE,SAAS,CAAC0E,eAAV,GAA4B,CAA5B;IACA1E,SAAS,CAAC2E,eAAV,GAA4B,CAA5B;IACA3E,SAAS,CAAC4E,gBAAV,GAA6B,CAA7B;IACA5E,SAAS,CAAC6E,MAAV,GAAmB,CAAnB;IAGA;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;IACQ7E,SAAS,CAACkB,MAAV,GAAmBlB,SAAS,CAAC8E,GAAV,GAAgB,YAAY;MAC3C,IAAIC,CAAJ;MAAA,IAAOC,CAAP;MAAA,IACIhC,CAAC,GAAG,CADR;MAAA,IAEIiC,CAAC,GAAG,EAFR;MAAA,IAGIC,CAAC,GAAGC,SAHR;MAAA,IAIIC,CAAC,GAAGF,CAAC,CAAC,CAAD,CAJT;MAAA,IAKIG,GAAG,GAAGD,CAAC,IAAI,OAAOA,CAAP,IAAY,QAAjB,GACF,YAAY;QAAE,IAAKA,CAAC,CAACE,cAAF,CAAiBN,CAAjB,CAAL,EAA2B,OAAO,CAAED,CAAC,GAAGK,CAAC,CAACJ,CAAD,CAAP,KAAgB,IAAvB;MAA8B,CADrE,GAEF,YAAY;QAAE,IAAKE,CAAC,CAACrB,MAAF,GAAWb,CAAhB,EAAoB,OAAO,CAAE+B,CAAC,GAAGG,CAAC,CAAClC,CAAC,EAAF,CAAP,KAAkB,IAAzB;MAAgC,CAP1E,CAD2C,CAU3C;MACA;MACA;;MACA,IAAKqC,GAAG,CAAEL,CAAC,GAAG,gBAAN,CAAH,IAA+BhD,UAAU,CAAE+C,CAAF,EAAK,CAAL,EAAQ/D,GAAR,EAAa,CAAb,EAAgBgE,CAAhB,CAA9C,EAAoE;QAChEvD,cAAc,GAAGsD,CAAC,GAAG,CAArB;MACH;;MACDE,CAAC,CAACD,CAAD,CAAD,GAAOvD,cAAP,CAhB2C,CAkB3C;MACA;MACA;;MACA,IAAK4D,GAAG,CAAEL,CAAC,GAAG,eAAN,CAAH,IAA8BhD,UAAU,CAAE+C,CAAF,EAAK,CAAL,EAAQ,CAAR,EAAW,CAAX,EAAcC,CAAd,CAA7C,EAAiE;QAC7DtD,aAAa,GAAGqD,CAAC,GAAG,CAApB;MACH;;MACDE,CAAC,CAACD,CAAD,CAAD,GAAOtD,aAAP,CAxB2C,CA0B3C;MACA;MACA;MACA;;MACA,IAAK2D,GAAG,CAAEL,CAAC,GAAG,gBAAN,CAAR,EAAmC;QAE/B,IAAKO,OAAO,CAACR,CAAD,CAAZ,EAAkB;UACd,IAAK/C,UAAU,CAAE+C,CAAC,CAAC,CAAD,CAAH,EAAQ,CAAC/D,GAAT,EAAc,CAAd,EAAiB,CAAjB,EAAoBgE,CAApB,CAAV,IAAqChD,UAAU,CAAE+C,CAAC,CAAC,CAAD,CAAH,EAAQ,CAAR,EAAW/D,GAAX,EAAgB,CAAhB,EAAmBgE,CAAnB,CAApD,EAA6E;YACzErD,UAAU,GAAGoD,CAAC,CAAC,CAAD,CAAD,GAAO,CAApB;YACAnD,UAAU,GAAGmD,CAAC,CAAC,CAAD,CAAD,GAAO,CAApB;UACH;QACJ,CALD,MAKO,IAAK/C,UAAU,CAAE+C,CAAF,EAAK,CAAC/D,GAAN,EAAWA,GAAX,EAAgB,CAAhB,EAAmBgE,CAAnB,CAAf,EAAwC;UAC3CrD,UAAU,GAAG,EAAGC,UAAU,GAAG,CAAEmD,CAAC,GAAG,CAAJ,GAAQ,CAACA,CAAT,GAAaA,CAAf,IAAqB,CAArC,CAAb;QACH;MACJ;;MACDE,CAAC,CAACD,CAAD,CAAD,GAAO,CAAErD,UAAF,EAAcC,UAAd,CAAP,CAzC2C,CA2C3C;MACA;MACA;MACA;MACA;;MACA,IAAKyD,GAAG,CAAEL,CAAC,GAAG,OAAN,CAAR,EAA0B;QAEtB,IAAKO,OAAO,CAACR,CAAD,CAAZ,EAAkB;UACd,IAAK/C,UAAU,CAAE+C,CAAC,CAAC,CAAD,CAAH,EAAQ,CAAC/D,GAAT,EAAc,CAAC,CAAf,EAAkB,CAAlB,EAAqBgE,CAArB,CAAV,IAAsChD,UAAU,CAAE+C,CAAC,CAAC,CAAD,CAAH,EAAQ,CAAR,EAAW/D,GAAX,EAAgB,CAAhB,EAAmBgE,CAAnB,CAArD,EAA8E;YAC1EnD,OAAO,GAAGkD,CAAC,CAAC,CAAD,CAAD,GAAO,CAAjB;YACAjD,OAAO,GAAGiD,CAAC,CAAC,CAAD,CAAD,GAAO,CAAjB;UACH;QACJ,CALD,MAKO,IAAK/C,UAAU,CAAE+C,CAAF,EAAK,CAAC/D,GAAN,EAAWA,GAAX,EAAgB,CAAhB,EAAmBgE,CAAnB,CAAf,EAAwC;UAC3C,IAAKD,CAAC,GAAG,CAAT,EAAalD,OAAO,GAAG,EAAGC,OAAO,GAAG,CAAEiD,CAAC,GAAG,CAAJ,GAAQ,CAACA,CAAT,GAAaA,CAAf,IAAqB,CAAlC,CAAV,CAAb,KACK,IAAIhD,MAAJ,EAAYsB,KAAK,CAAE,CAAF,EAAK2B,CAAC,GAAG,iBAAT,EAA4BD,CAA5B,CAAL;QACpB;MACJ;;MACDE,CAAC,CAACD,CAAD,CAAD,GAAO,CAAEnD,OAAF,EAAWC,OAAX,CAAP,CA5D2C,CA8D3C;MACA;;MACA,IAAKuD,GAAG,CAAEL,CAAC,GAAG,QAAN,CAAR,EAA2B;QAEvB,IAAKD,CAAC,KAAK,CAAC,CAACA,CAAR,IAAaA,CAAC,KAAK,CAAnB,IAAwBA,CAAC,KAAK,CAAnC,EAAuC;UACnC1D,EAAE,GAAG,CAAL;UACAW,UAAU,GAAG,CAAED,MAAM,GAAG,CAAC,CAACgD,CAAb,IAAmB9C,sBAAnB,GAA4CuD,oBAAzD;QACH,CAHD,MAGO,IAAIzD,MAAJ,EAAY;UACfsB,KAAK,CAAE,CAAF,EAAK2B,CAAC,GAAGzE,OAAT,EAAkBwE,CAAlB,CAAL;QACH;MACJ;;MACDE,CAAC,CAACD,CAAD,CAAD,GAAOjD,MAAP,CAzE2C,CA2E3C;MACA;MACA;;MACA,IAAKsD,GAAG,CAAEL,CAAC,GAAG,QAAN,CAAR,EAA2B;QAEvB,IAAKD,CAAC,KAAK,IAAN,IAAcA,CAAC,KAAK,KAApB,IAA6BA,CAAC,KAAK,CAAnC,IAAwCA,CAAC,KAAK,CAAnD,EAAuD;UACnD,IAAIA,CAAJ,EAAO;YACHA,CAAC,GAAG,OAAOU,MAAP,IAAiB,WAArB;;YACA,IAAK,CAACV,CAAD,IAAMU,MAAN,KAAiBA,MAAM,CAACC,eAAP,IAA0BD,MAAM,CAACE,WAAlD,CAAL,EAAqE;cACjEzD,MAAM,GAAG,IAAT;YACH,CAFD,MAEO,IAAIH,MAAJ,EAAY;cACfsB,KAAK,CAAE,CAAF,EAAK,oBAAL,EAA2B0B,CAAC,GAAG,KAAK,CAAR,GAAYU,MAAxC,CAAL;YACH,CAFM,MAEA;cACHvD,MAAM,GAAG,KAAT;YACH;UACJ,CATD,MASO;YACHA,MAAM,GAAG,KAAT;UACH;QACJ,CAbD,MAaO,IAAIH,MAAJ,EAAY;UACfsB,KAAK,CAAE,CAAF,EAAK2B,CAAC,GAAGzE,OAAT,EAAkBwE,CAAlB,CAAL;QACH;MACJ;;MACDE,CAAC,CAACD,CAAD,CAAD,GAAO9C,MAAP,CAjG2C,CAmG3C;MACA;MACA;;MACA,IAAKmD,GAAG,CAAEL,CAAC,GAAG,aAAN,CAAH,IAA4BhD,UAAU,CAAE+C,CAAF,EAAK,CAAL,EAAQ,CAAR,EAAW,CAAX,EAAcC,CAAd,CAA3C,EAA+D;QAC3D7C,WAAW,GAAG4C,CAAC,GAAG,CAAlB;MACH;;MACDE,CAAC,CAACD,CAAD,CAAD,GAAO7C,WAAP,CAzG2C,CA2G3C;MACA;MACA;;MACA,IAAKkD,GAAG,CAAEL,CAAC,GAAG,eAAN,CAAH,IAA8BhD,UAAU,CAAE+C,CAAF,EAAK,CAAL,EAAQ/D,GAAR,EAAa,CAAb,EAAgBgE,CAAhB,CAA7C,EAAmE;QAC/D5C,aAAa,GAAG2C,CAAC,GAAG,CAApB;MACH;;MACDE,CAAC,CAACD,CAAD,CAAD,GAAO5C,aAAP,CAjH2C,CAmH3C;MACA;;MACA,IAAKiD,GAAG,CAAEL,CAAC,GAAG,QAAN,CAAR,EAA2B;QAEvB,IAAK,OAAOD,CAAP,IAAY,QAAjB,EAA4B;UACxB1C,MAAM,GAAG0C,CAAT;QACH,CAFD,MAEO,IAAIhD,MAAJ,EAAY;UACfsB,KAAK,CAAE,CAAF,EAAK2B,CAAC,GAAG,gBAAT,EAA2BD,CAA3B,CAAL;QACH;MACJ;;MACDE,CAAC,CAACD,CAAD,CAAD,GAAO3C,MAAP;MAEA,OAAO4C,CAAP;IACH,CAhID;IAmIA;AACR;AACA;AACA;AACA;;;IACQjF,SAAS,CAAC4F,GAAV,GAAgB,YAAY;MAAE,OAAOC,QAAQ,CAAEV,SAAF,EAAa7D,CAAC,CAACwE,EAAf,CAAf;IAAqC,CAAnE;IAGA;AACR;AACA;AACA;AACA;;;IACQ9F,SAAS,CAAC+F,GAAV,GAAgB,YAAY;MAAE,OAAOF,QAAQ,CAAEV,SAAF,EAAa7D,CAAC,CAAC0E,EAAf,CAAf;IAAqC,CAAnE;IAGA;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;IACQhG,SAAS,CAACiG,MAAV,GAAoB,YAAY;MAC5B,IAAIC,OAAO,GAAG,gBAAd,CAD4B,CAG5B;MACA;MACA;MACA;;MACA,IAAIC,cAAc,GAAIhG,IAAI,CAAC8F,MAAL,KAAgBC,OAAjB,GAA4B,QAA5B,GACjB,YAAY;QAAE,OAAO7F,SAAS,CAAEF,IAAI,CAAC8F,MAAL,KAAgBC,OAAlB,CAAhB;MAA8C,CAD3C,GAEjB,YAAY;QAAE,OAAQ,CAAC/F,IAAI,CAAC8F,MAAL,KAAgB,UAAhB,GAA6B,CAA9B,IAAmC,QAApC,IAClB9F,IAAI,CAAC8F,MAAL,KAAgB,QAAhB,GAA2B,CADT,CAAP;MACqB,CAHvC;MAKA,OAAO,UAAUG,EAAV,EAAc;QACjB,IAAIlB,CAAJ;QAAA,IAAOrC,CAAP;QAAA,IAAUE,CAAV;QAAA,IAAasD,CAAb;QAAA,IAAgBtB,CAAhB;QAAA,IACI/B,CAAC,GAAG,CADR;QAAA,IAEIF,CAAC,GAAG,EAFR;QAAA,IAGIwD,IAAI,GAAG,IAAItG,SAAJ,CAAcwB,GAAd,CAHX;QAKA4E,EAAE,GAAGA,EAAE,IAAI,IAAN,IAAc,CAACpE,UAAU,CAAEoE,EAAF,EAAM,CAAN,EAASpF,GAAT,EAAc,EAAd,CAAzB,GAA8CS,cAA9C,GAA+D2E,EAAE,GAAG,CAAzE;QACAC,CAAC,GAAGnG,QAAQ,CAAEkG,EAAE,GAAGxF,QAAP,CAAZ;;QAEA,IAAIsB,MAAJ,EAAY;UAER;UACA,IAAIuD,MAAM,CAACC,eAAX,EAA4B;YAExBR,CAAC,GAAGO,MAAM,CAACC,eAAP,CAAwB,IAAIa,WAAJ,CAAiBF,CAAC,IAAI,CAAtB,CAAxB,CAAJ;;YAEA,OAAQrD,CAAC,GAAGqD,CAAZ,GAAiB;cAEb;cACA;cACA;cACA;cACA;cACA;cACAtB,CAAC,GAAGG,CAAC,CAAClC,CAAD,CAAD,GAAO,OAAP,IAAkBkC,CAAC,CAAClC,CAAC,GAAG,CAAL,CAAD,KAAa,EAA/B,CAAJ,CARa,CAUb;cACA;cACA;cACA;;cACA,IAAK+B,CAAC,IAAI,IAAV,EAAiB;gBACblC,CAAC,GAAG4C,MAAM,CAACC,eAAP,CAAwB,IAAIa,WAAJ,CAAgB,CAAhB,CAAxB,CAAJ;gBACArB,CAAC,CAAClC,CAAD,CAAD,GAAOH,CAAC,CAAC,CAAD,CAAR;gBACAqC,CAAC,CAAClC,CAAC,GAAG,CAAL,CAAD,GAAWH,CAAC,CAAC,CAAD,CAAZ;cACH,CAJD,MAIO;gBAEH;gBACA;gBACAC,CAAC,CAACoB,IAAF,CAAQa,CAAC,GAAG,IAAZ;gBACA/B,CAAC,IAAI,CAAL;cACH;YACJ;;YACDA,CAAC,GAAGqD,CAAC,GAAG,CAAR,CA9BwB,CAgC5B;UACC,CAjCD,MAiCO,IAAIZ,MAAM,CAACE,WAAX,EAAwB;YAE3B;YACAT,CAAC,GAAGO,MAAM,CAACE,WAAP,CAAoBU,CAAC,IAAI,CAAzB,CAAJ;;YAEA,OAAQrD,CAAC,GAAGqD,CAAZ,GAAiB;cAEb;cACA;cACA;cACA;cACAtB,CAAC,GAAK,CAAEG,CAAC,CAAClC,CAAD,CAAD,GAAO,EAAT,IAAgB,eAAlB,GAAwCkC,CAAC,CAAClC,CAAC,GAAG,CAAL,CAAD,GAAW,aAAnD,GACIkC,CAAC,CAAClC,CAAC,GAAG,CAAL,CAAD,GAAW,WADf,GACiCkC,CAAC,CAAClC,CAAC,GAAG,CAAL,CAAD,GAAW,SAD5C,IAEIkC,CAAC,CAAClC,CAAC,GAAG,CAAL,CAAD,IAAY,EAFhB,KAEyBkC,CAAC,CAAClC,CAAC,GAAG,CAAL,CAAD,IAAY,CAFrC,IAE2CkC,CAAC,CAAClC,CAAC,GAAG,CAAL,CAFhD;;cAIA,IAAK+B,CAAC,IAAI,IAAV,EAAiB;gBACbU,MAAM,CAACE,WAAP,CAAmB,CAAnB,EAAsBa,IAAtB,CAA4BtB,CAA5B,EAA+BlC,CAA/B;cACH,CAFD,MAEO;gBAEH;gBACAF,CAAC,CAACoB,IAAF,CAAQa,CAAC,GAAG,IAAZ;gBACA/B,CAAC,IAAI,CAAL;cACH;YACJ;;YACDA,CAAC,GAAGqD,CAAC,GAAG,CAAR;UACH,CAzBM,MAyBA;YACHnE,MAAM,GAAG,KAAT;YACA,IAAIH,MAAJ,EAAYsB,KAAK,CAAE,EAAF,EAAM,oBAAN,EAA4BoC,MAA5B,CAAL;UACf;QACJ,CA1EgB,CA4EjB;;;QACA,IAAI,CAACvD,MAAL,EAAa;UAET,OAAQc,CAAC,GAAGqD,CAAZ,GAAiB;YACbtB,CAAC,GAAGoB,cAAc,EAAlB;YACA,IAAKpB,CAAC,GAAG,IAAT,EAAgBjC,CAAC,CAACE,CAAC,EAAF,CAAD,GAAS+B,CAAC,GAAG,IAAb;UACnB;QACJ;;QAEDsB,CAAC,GAAGvD,CAAC,CAAC,EAAEE,CAAH,CAAL;QACAoD,EAAE,IAAIxF,QAAN,CAtFiB,CAwFjB;;QACA,IAAKyF,CAAC,IAAID,EAAV,EAAe;UACXrB,CAAC,GAAGjE,QAAQ,CAACF,QAAQ,GAAGwF,EAAZ,CAAZ;UACAtD,CAAC,CAACE,CAAD,CAAD,GAAO3C,SAAS,CAAEgG,CAAC,GAAGtB,CAAN,CAAT,GAAqBA,CAA5B;QACH,CA5FgB,CA8FjB;;;QACA,OAAQjC,CAAC,CAACE,CAAD,CAAD,KAAS,CAAjB,EAAoBF,CAAC,CAAC2D,GAAF,IAASzD,CAAC,EAA9B,CAAkC,CA/FjB,CAiGjB;;;QACA,IAAKA,CAAC,GAAG,CAAT,EAAa;UACTF,CAAC,GAAG,CAAEC,CAAC,GAAG,CAAN,CAAJ;QACH,CAFD,MAEO;UAEH;UACA,KAAMA,CAAC,GAAG,CAAC,CAAX,EAAeD,CAAC,CAAC,CAAD,CAAD,KAAS,CAAxB,EAA2BA,CAAC,CAAC4D,MAAF,CAAS,CAAT,EAAY,CAAZ,GAAgB3D,CAAC,IAAInC,QAAhD,CAAyD,CAHtD,CAKH;;;UACA,KAAMoC,CAAC,GAAG,CAAJ,EAAO+B,CAAC,GAAGjC,CAAC,CAAC,CAAD,CAAlB,EAAuBiC,CAAC,IAAI,EAA5B,EAAgCA,CAAC,IAAI,EAAL,EAAS/B,CAAC,EAA1C,CAA6C,CAN1C,CAQH;;;UACA,IAAKA,CAAC,GAAGpC,QAAT,EAAoBmC,CAAC,IAAInC,QAAQ,GAAGoC,CAAhB;QACvB;;QAEDsD,IAAI,CAACvD,CAAL,GAASA,CAAT;QACAuD,IAAI,CAACxD,CAAL,GAASA,CAAT;QACA,OAAOwD,IAAP;MACH,CAnHD;IAoHH,CAhIkB,EAAnB,CAlegC,CAqmBhC;IAGA;;;IACA,SAASxC,WAAT,CAAsBX,GAAtB,EAA2BwD,OAA3B,EAAoCC,MAApC,EAA4CC,IAA5C,EAAmD;MAC/C,IAAIC,CAAJ;MAAA,IAAO/D,CAAP;MAAA,IAAUsD,CAAV;MAAA,IAAapB,CAAb;MAAA,IAAgB7B,CAAhB;MAAA,IAAmB2D,EAAnB;MAAA,IAAuBC,CAAvB;MAAA,IACIhE,CAAC,GAAGG,GAAG,CAACY,OAAJ,CAAa,GAAb,CADR;MAAA,IAEIqC,EAAE,GAAG3E,cAFT;MAAA,IAGIwF,EAAE,GAAGvF,aAHT;MAKA,IAAKkF,MAAM,GAAG,EAAd,EAAmBzD,GAAG,GAAGA,GAAG,CAAC+D,WAAJ,EAAN,CAN4B,CAQ/C;;MACA,IAAKlE,CAAC,IAAI,CAAV,EAAc;QACVqD,CAAC,GAAGjE,aAAJ,CADU,CAGV;;QACAA,aAAa,GAAG,CAAhB;QACAe,GAAG,GAAGA,GAAG,CAACS,OAAJ,CAAa,GAAb,EAAkB,EAAlB,CAAN;QACAoD,CAAC,GAAG,IAAIhH,SAAJ,CAAc4G,MAAd,CAAJ;QACAxD,CAAC,GAAG4D,CAAC,CAACG,GAAF,CAAOhE,GAAG,CAACU,MAAJ,GAAab,CAApB,CAAJ;QACAZ,aAAa,GAAGiE,CAAhB,CARU,CAUV;QACA;;QACAW,CAAC,CAAClE,CAAF,GAAMsE,SAAS,CAAEC,YAAY,CAAEC,aAAa,CAAElE,CAAC,CAACN,CAAJ,CAAf,EAAwBM,CAAC,CAACL,CAA1B,CAAd,EAA6C,EAA7C,EAAiD4D,OAAjD,CAAf;QACAK,CAAC,CAACjE,CAAF,GAAMiE,CAAC,CAAClE,CAAF,CAAIe,MAAV;MACH,CAvB8C,CAyB/C;;;MACAkD,EAAE,GAAGK,SAAS,CAAEjE,GAAF,EAAOyD,MAAP,EAAeD,OAAf,CAAd;MACA5D,CAAC,GAAGsD,CAAC,GAAGU,EAAE,CAAClD,MAAX,CA3B+C,CA6B/C;;MACA,OAAQkD,EAAE,CAAC,EAAEV,CAAH,CAAF,IAAW,CAAnB,EAAsBU,EAAE,CAACN,GAAH,EAAtB,CAAgC;;MAChC,IAAK,CAACM,EAAE,CAAC,CAAD,CAAR,EAAc,OAAO,GAAP;;MAEd,IAAK/D,CAAC,GAAG,CAAT,EAAa;QACT,EAAED,CAAF;MACH,CAFD,MAEO;QACHK,CAAC,CAACN,CAAF,GAAMiE,EAAN;QACA3D,CAAC,CAACL,CAAF,GAAMA,CAAN,CAFG,CAIH;;QACAK,CAAC,CAACE,CAAF,GAAMuD,IAAN;QACAzD,CAAC,GAAGjC,GAAG,CAAEiC,CAAF,EAAK4D,CAAL,EAAQZ,EAAR,EAAYa,EAAZ,EAAgBN,OAAhB,CAAP;QACAI,EAAE,GAAG3D,CAAC,CAACN,CAAP;QACAmC,CAAC,GAAG7B,CAAC,CAAC6B,CAAN;QACAlC,CAAC,GAAGK,CAAC,CAACL,CAAN;MACH;;MAED+D,CAAC,GAAG/D,CAAC,GAAGqD,EAAJ,GAAS,CAAb,CA/C+C,CAiD/C;;MACApD,CAAC,GAAG+D,EAAE,CAACD,CAAD,CAAN;MACAT,CAAC,GAAGM,OAAO,GAAG,CAAd;MACA1B,CAAC,GAAGA,CAAC,IAAI6B,CAAC,GAAG,CAAT,IAAcC,EAAE,CAACD,CAAC,GAAG,CAAL,CAAF,IAAa,IAA/B;MAEA7B,CAAC,GAAGgC,EAAE,GAAG,CAAL,GAAS,CAAEjE,CAAC,IAAI,IAAL,IAAaiC,CAAf,MAAwBgC,EAAE,IAAI,CAAN,IAAWA,EAAE,KAAM7D,CAAC,CAACE,CAAF,GAAM,CAAN,GAAU,CAAV,GAAc,CAApB,CAArC,CAAT,GACSN,CAAC,GAAGqD,CAAJ,IAASrD,CAAC,IAAIqD,CAAL,KAAWY,EAAE,IAAI,CAAN,IAAWhC,CAAX,IAAgBgC,EAAE,IAAI,CAAN,IAAWF,EAAE,CAACD,CAAC,GAAG,CAAL,CAAF,GAAY,CAAvC,IACpBG,EAAE,KAAM7D,CAAC,CAACE,CAAF,GAAM,CAAN,GAAU,CAAV,GAAc,CAApB,CADO,CADtB;;MAIA,IAAKwD,CAAC,GAAG,CAAJ,IAAS,CAACC,EAAE,CAAC,CAAD,CAAjB,EAAuB;QAEnB;QACA5D,GAAG,GAAG8B,CAAC,GAAGoC,YAAY,CAAE,GAAF,EAAO,CAACjB,EAAR,CAAf,GAA8B,GAArC;MACH,CAJD,MAIO;QACHW,EAAE,CAAClD,MAAH,GAAYiD,CAAZ;;QAEA,IAAI7B,CAAJ,EAAO;UAEH;UACA,KAAM,EAAE0B,OAAR,EAAiB,EAAEI,EAAE,CAAC,EAAED,CAAH,CAAJ,GAAYH,OAA7B,GAAwC;YACpCI,EAAE,CAACD,CAAD,CAAF,GAAQ,CAAR;;YAEA,IAAK,CAACA,CAAN,EAAU;cACN,EAAE/D,CAAF;cACAgE,EAAE,GAAG,CAAC,CAAD,EAAIQ,MAAJ,CAAWR,EAAX,CAAL;YACH;UACJ;QACJ,CAdE,CAgBH;;;QACA,KAAMV,CAAC,GAAGU,EAAE,CAAClD,MAAb,EAAqB,CAACkD,EAAE,CAAC,EAAEV,CAAH,CAAxB,EAAgC,CAjB7B,CAmBH;;;QACA,KAAMrD,CAAC,GAAG,CAAJ,EAAOG,GAAG,GAAG,EAAnB,EAAuBH,CAAC,IAAIqD,CAA5B,EAA+BlD,GAAG,IAAIzC,QAAQ,CAAC8G,MAAT,CAAiBT,EAAE,CAAC/D,CAAC,EAAF,CAAnB,CAAtC,CAAkE;;QAClEG,GAAG,GAAGkE,YAAY,CAAElE,GAAF,EAAOJ,CAAP,CAAlB;MACH,CApF8C,CAsF/C;;;MACA,OAAOI,GAAP;IACH,CAjsB+B,CAosBhC;;;IACAhC,GAAG,GAAI,YAAY;MAEf;MACA,SAASsG,QAAT,CAAmBrE,CAAnB,EAAsBiD,CAAtB,EAAyBqB,IAAzB,EAAgC;QAC5B,IAAIC,CAAJ;QAAA,IAAOC,IAAP;QAAA,IAAaC,GAAb;QAAA,IAAkBC,GAAlB;QAAA,IACIC,KAAK,GAAG,CADZ;QAAA,IAEI/E,CAAC,GAAGI,CAAC,CAACS,MAFV;QAAA,IAGImE,GAAG,GAAG3B,CAAC,GAAGtF,SAHd;QAAA,IAIIkH,GAAG,GAAG5B,CAAC,GAAGtF,SAAJ,GAAgB,CAJ1B;;QAMA,KAAMqC,CAAC,GAAGA,CAAC,CAACG,KAAF,EAAV,EAAqBP,CAAC,EAAtB,GAA4B;UACxB6E,GAAG,GAAGzE,CAAC,CAACJ,CAAD,CAAD,GAAOjC,SAAb;UACA+G,GAAG,GAAG1E,CAAC,CAACJ,CAAD,CAAD,GAAOjC,SAAP,GAAmB,CAAzB;UACA4G,CAAC,GAAGM,GAAG,GAAGJ,GAAN,GAAYC,GAAG,GAAGE,GAAtB;UACAJ,IAAI,GAAGI,GAAG,GAAGH,GAAN,GAAgBF,CAAC,GAAG5G,SAAN,GAAoBA,SAAlC,GAAgDgH,KAAvD;UACAA,KAAK,GAAG,CAAEH,IAAI,GAAGF,IAAP,GAAc,CAAhB,KAAwBC,CAAC,GAAG5G,SAAJ,GAAgB,CAAxC,IAA8CkH,GAAG,GAAGH,GAA5D;UACA1E,CAAC,CAACJ,CAAD,CAAD,GAAO4E,IAAI,GAAGF,IAAd;QACH;;QAED,IAAIK,KAAJ,EAAW3E,CAAC,GAAG,CAAC2E,KAAD,EAAQR,MAAR,CAAenE,CAAf,CAAJ;QAEX,OAAOA,CAAP;MACH;;MAED,SAAS8E,OAAT,CAAkBhD,CAAlB,EAAqBrC,CAArB,EAAwBsF,EAAxB,EAA4BC,EAA5B,EAAiC;QAC7B,IAAIpF,CAAJ,EAAOqF,GAAP;;QAEA,IAAKF,EAAE,IAAIC,EAAX,EAAgB;UACZC,GAAG,GAAGF,EAAE,GAAGC,EAAL,GAAU,CAAV,GAAc,CAAC,CAArB;QACH,CAFD,MAEO;UAEH,KAAMpF,CAAC,GAAGqF,GAAG,GAAG,CAAhB,EAAmBrF,CAAC,GAAGmF,EAAvB,EAA2BnF,CAAC,EAA5B,EAAiC;YAE7B,IAAKkC,CAAC,CAAClC,CAAD,CAAD,IAAQH,CAAC,CAACG,CAAD,CAAd,EAAoB;cAChBqF,GAAG,GAAGnD,CAAC,CAAClC,CAAD,CAAD,GAAOH,CAAC,CAACG,CAAD,CAAR,GAAc,CAAd,GAAkB,CAAC,CAAzB;cACA;YACH;UACJ;QACJ;;QACD,OAAOqF,GAAP;MACH;;MAED,SAASC,QAAT,CAAmBpD,CAAnB,EAAsBrC,CAAtB,EAAyBsF,EAAzB,EAA6BT,IAA7B,EAAoC;QAChC,IAAI1E,CAAC,GAAG,CAAR,CADgC,CAGhC;;QACA,OAAQmF,EAAE,EAAV,GAAgB;UACZjD,CAAC,CAACiD,EAAD,CAAD,IAASnF,CAAT;UACAA,CAAC,GAAGkC,CAAC,CAACiD,EAAD,CAAD,GAAQtF,CAAC,CAACsF,EAAD,CAAT,GAAgB,CAAhB,GAAoB,CAAxB;UACAjD,CAAC,CAACiD,EAAD,CAAD,GAAQnF,CAAC,GAAG0E,IAAJ,GAAWxC,CAAC,CAACiD,EAAD,CAAZ,GAAmBtF,CAAC,CAACsF,EAAD,CAA5B;QACH,CAR+B,CAUhC;;;QACA,OAAQ,CAACjD,CAAC,CAAC,CAAD,CAAF,IAASA,CAAC,CAACrB,MAAF,GAAW,CAA5B,EAA+BqB,CAAC,CAACwB,MAAF,CAAS,CAAT,EAAY,CAAZ,CAA/B,CAA+C;MAClD,CAtDc,CAwDf;;;MACA,OAAO,UAAWtD,CAAX,EAAc4D,CAAd,EAAiBZ,EAAjB,EAAqBa,EAArB,EAAyBS,IAAzB,EAAgC;QACnC,IAAIW,GAAJ;QAAA,IAAStF,CAAT;QAAA,IAAYC,CAAZ;QAAA,IAAeuF,IAAf;QAAA,IAAqB3F,CAArB;QAAA,IAAwB4F,IAAxB;QAAA,IAA8BC,KAA9B;QAAA,IAAqCC,CAArC;QAAA,IAAwCC,EAAxC;QAAA,IAA4CC,GAA5C;QAAA,IAAiDC,IAAjD;QAAA,IAAuDC,IAAvD;QAAA,IAA6DC,EAA7D;QAAA,IAAiEC,EAAjE;QAAA,IAAqEC,GAArE;QAAA,IACIC,EADJ;QAAA,IACQC,EADR;QAAA,IAEI7F,CAAC,GAAGF,CAAC,CAACE,CAAF,IAAO0D,CAAC,CAAC1D,CAAT,GAAa,CAAb,GAAiB,CAAC,CAF1B;QAAA,IAGIyD,EAAE,GAAG3D,CAAC,CAACN,CAHX;QAAA,IAIIsG,EAAE,GAAGpC,CAAC,CAAClE,CAJX,CADmC,CAOnC;;QACA,IAAK,CAACiE,EAAD,IAAO,CAACA,EAAE,CAAC,CAAD,CAAV,IAAiB,CAACqC,EAAlB,IAAwB,CAACA,EAAE,CAAC,CAAD,CAAhC,EAAsC;UAElC,OAAO,IAAIpJ,SAAJ,EAEL;UACA,CAACoD,CAAC,CAACE,CAAH,IAAQ,CAAC0D,CAAC,CAAC1D,CAAX,KAAkByD,EAAE,GAAGqC,EAAE,IAAIrC,EAAE,CAAC,CAAD,CAAF,IAASqC,EAAE,CAAC,CAAD,CAApB,GAA0B,CAACA,EAA/C,IAAsDC,GAAtD,GAEE;UACAtC,EAAE,IAAIA,EAAE,CAAC,CAAD,CAAF,IAAS,CAAf,IAAoB,CAACqC,EAArB,GAA0B9F,CAAC,GAAG,CAA9B,GAAkCA,CAAC,GAAG,CANnC,CAAP;QAQH;;QAEDoF,CAAC,GAAG,IAAI1I,SAAJ,CAAcsD,CAAd,CAAJ;QACAqF,EAAE,GAAGD,CAAC,CAAC5F,CAAF,GAAM,EAAX;QACAC,CAAC,GAAGK,CAAC,CAACL,CAAF,GAAMiE,CAAC,CAACjE,CAAZ;QACAO,CAAC,GAAG8C,EAAE,GAAGrD,CAAL,GAAS,CAAb;;QAEA,IAAK,CAAC2E,IAAN,EAAa;UACTA,IAAI,GAAG/G,IAAP;UACAoC,CAAC,GAAGuG,QAAQ,CAAElG,CAAC,CAACL,CAAF,GAAMnC,QAAR,CAAR,GAA6B0I,QAAQ,CAAEtC,CAAC,CAACjE,CAAF,GAAMnC,QAAR,CAAzC;UACA0C,CAAC,GAAGA,CAAC,GAAG1C,QAAJ,GAAe,CAAnB;QACH,CA7BkC,CA+BnC;QACA;;;QACA,KAAMoC,CAAC,GAAG,CAAV,EAAaoG,EAAE,CAACpG,CAAD,CAAF,KAAW+D,EAAE,CAAC/D,CAAD,CAAF,IAAS,CAApB,CAAb,EAAsCA,CAAC,EAAvC,CAA2C;;QAC3C,IAAKoG,EAAE,CAACpG,CAAD,CAAF,IAAU+D,EAAE,CAAC/D,CAAD,CAAF,IAAS,CAAnB,CAAL,EAA8BD,CAAC;;QAE/B,IAAKO,CAAC,GAAG,CAAT,EAAa;UACTqF,EAAE,CAACzE,IAAH,CAAQ,CAAR;UACAqE,IAAI,GAAG,IAAP;QACH,CAHD,MAGO;UACHS,EAAE,GAAGjC,EAAE,CAAClD,MAAR;UACAqF,EAAE,GAAGE,EAAE,CAACvF,MAAR;UACAb,CAAC,GAAG,CAAJ;UACAM,CAAC,IAAI,CAAL,CAJG,CAMH;;UAEAV,CAAC,GAAGvC,SAAS,CAAEqH,IAAI,IAAK0B,EAAE,CAAC,CAAD,CAAF,GAAQ,CAAb,CAAN,CAAb,CARG,CAUH;UACA;;UACA,IAAKxG,CAAC,GAAG,CAAT,EAAa;YACTwG,EAAE,GAAG3B,QAAQ,CAAE2B,EAAF,EAAMxG,CAAN,EAAS8E,IAAT,CAAb;YACAX,EAAE,GAAGU,QAAQ,CAAEV,EAAF,EAAMnE,CAAN,EAAS8E,IAAT,CAAb;YACAwB,EAAE,GAAGE,EAAE,CAACvF,MAAR;YACAmF,EAAE,GAAGjC,EAAE,CAAClD,MAAR;UACH;;UAEDkF,EAAE,GAAGG,EAAL;UACAN,GAAG,GAAG7B,EAAE,CAACxD,KAAH,CAAU,CAAV,EAAa2F,EAAb,CAAN;UACAL,IAAI,GAAGD,GAAG,CAAC/E,MAAX,CArBG,CAuBH;;UACA,OAAQgF,IAAI,GAAGK,EAAf,EAAmBN,GAAG,CAACC,IAAI,EAAL,CAAH,GAAc,CAAjC,CAAoC;;UACpCM,EAAE,GAAGC,EAAE,CAAC7F,KAAH,EAAL;UACA4F,EAAE,GAAG,CAAC,CAAD,EAAI5B,MAAJ,CAAW4B,EAAX,CAAL;UACAF,GAAG,GAAGG,EAAE,CAAC,CAAD,CAAR;UACA,IAAKA,EAAE,CAAC,CAAD,CAAF,IAAS1B,IAAI,GAAG,CAArB,EAAyBuB,GAAG,GA5BzB,CA6BH;UACA;;UAEA,GAAG;YACCrG,CAAC,GAAG,CAAJ,CADD,CAGC;;YACAyF,GAAG,GAAGH,OAAO,CAAEkB,EAAF,EAAMR,GAAN,EAAWM,EAAX,EAAeL,IAAf,CAAb,CAJD,CAMC;;YACA,IAAKR,GAAG,GAAG,CAAX,EAAe;cAEX;cAEAS,IAAI,GAAGF,GAAG,CAAC,CAAD,CAAV;cACA,IAAKM,EAAE,IAAIL,IAAX,EAAkBC,IAAI,GAAGA,IAAI,GAAGpB,IAAP,IAAgBkB,GAAG,CAAC,CAAD,CAAH,IAAU,CAA1B,CAAP,CALP,CAOX;;cACAhG,CAAC,GAAGvC,SAAS,CAAEyI,IAAI,GAAGG,GAAT,CAAb,CARW,CAUX;cACA;cACA;cACA;cACA;cACA;cACA;;cAEA,IAAKrG,CAAC,GAAG,CAAT,EAAa;gBAET;gBACA,IAAIA,CAAC,IAAI8E,IAAT,EAAe9E,CAAC,GAAG8E,IAAI,GAAG,CAAX,CAHN,CAKT;;gBACAc,IAAI,GAAGf,QAAQ,CAAE2B,EAAF,EAAMxG,CAAN,EAAS8E,IAAT,CAAf;gBACAe,KAAK,GAAGD,IAAI,CAAC3E,MAAb;gBACAgF,IAAI,GAAGD,GAAG,CAAC/E,MAAX,CARS,CAUT;gBACA;gBACA;gBACA;gBACA;;gBACA,OAAQqE,OAAO,CAAEM,IAAF,EAAQI,GAAR,EAAaH,KAAb,EAAoBI,IAApB,CAAP,IAAqC,CAA7C,EAAiD;kBAC7CjG,CAAC,GAD4C,CAG7C;;kBACA0F,QAAQ,CAAEE,IAAF,EAAQU,EAAE,GAAGT,KAAL,GAAaU,EAAb,GAAkBC,EAA1B,EAA8BX,KAA9B,EAAqCf,IAArC,CAAR;kBACAe,KAAK,GAAGD,IAAI,CAAC3E,MAAb;kBACAwE,GAAG,GAAG,CAAN;gBACH;cACJ,CAvBD,MAuBO;gBAEH;gBACA;gBACA;gBACA;gBACA,IAAKzF,CAAC,IAAI,CAAV,EAAc;kBAEV;kBACAyF,GAAG,GAAGzF,CAAC,GAAG,CAAV;gBACH,CAVE,CAYH;;;gBACA4F,IAAI,GAAGY,EAAE,CAAC7F,KAAH,EAAP;gBACAkF,KAAK,GAAGD,IAAI,CAAC3E,MAAb;cACH;;cAED,IAAK4E,KAAK,GAAGI,IAAb,EAAoBL,IAAI,GAAG,CAAC,CAAD,EAAIjB,MAAJ,CAAWiB,IAAX,CAAP,CA1DT,CA4DX;;cACAF,QAAQ,CAAEM,GAAF,EAAOJ,IAAP,EAAaK,IAAb,EAAmBnB,IAAnB,CAAR;cACAmB,IAAI,GAAGD,GAAG,CAAC/E,MAAX,CA9DW,CAgEV;;cACD,IAAKwE,GAAG,IAAI,CAAC,CAAb,EAAiB;gBAEb;gBACA;gBACA;gBACA;gBACA,OAAQH,OAAO,CAAEkB,EAAF,EAAMR,GAAN,EAAWM,EAAX,EAAeL,IAAf,CAAP,GAA+B,CAAvC,EAA2C;kBACvCjG,CAAC,GADsC,CAGvC;;kBACA0F,QAAQ,CAAEM,GAAF,EAAOM,EAAE,GAAGL,IAAL,GAAYM,EAAZ,GAAiBC,EAAxB,EAA4BP,IAA5B,EAAkCnB,IAAlC,CAAR;kBACAmB,IAAI,GAAGD,GAAG,CAAC/E,MAAX;gBACH;cACJ;YACJ,CA/ED,MA+EO,IAAKwE,GAAG,KAAK,CAAb,EAAiB;cACpBzF,CAAC;cACDgG,GAAG,GAAG,CAAC,CAAD,CAAN;YACH,CAzFF,CAyFG;YAEF;;;YACAD,EAAE,CAAC3F,CAAC,EAAF,CAAF,GAAUJ,CAAV,CA5FD,CA8FC;;YACA,IAAKgG,GAAG,CAAC,CAAD,CAAR,EAAc;cACVA,GAAG,CAACC,IAAI,EAAL,CAAH,GAAc9B,EAAE,CAACgC,EAAD,CAAF,IAAU,CAAxB;YACH,CAFD,MAEO;cACHH,GAAG,GAAG,CAAE7B,EAAE,CAACgC,EAAD,CAAJ,CAAN;cACAF,IAAI,GAAG,CAAP;YACH;UACJ,CArGD,QAqGU,CAAEE,EAAE,KAAKC,EAAP,IAAaJ,GAAG,CAAC,CAAD,CAAH,IAAU,IAAzB,KAAmCtF,CAAC,EArG9C;;UAuGAiF,IAAI,GAAGK,GAAG,CAAC,CAAD,CAAH,IAAU,IAAjB,CAvIG,CAyIH;;UACA,IAAK,CAACD,EAAE,CAAC,CAAD,CAAR,EAAcA,EAAE,CAACjC,MAAH,CAAU,CAAV,EAAa,CAAb;QACjB;;QAED,IAAKgB,IAAI,IAAI/G,IAAb,EAAoB;UAEhB;UACA,KAAMqC,CAAC,GAAG,CAAJ,EAAOM,CAAC,GAAGqF,EAAE,CAAC,CAAD,CAAnB,EAAwBrF,CAAC,IAAI,EAA7B,EAAiCA,CAAC,IAAI,EAAL,EAASN,CAAC,EAA3C,CAA+C;;UAC/CU,KAAK,CAAEgF,CAAF,EAAKtC,EAAE,IAAKsC,CAAC,CAAC3F,CAAF,GAAMC,CAAC,GAAGD,CAAC,GAAGnC,QAAR,GAAmB,CAA9B,CAAF,GAAsC,CAA3C,EAA8CqG,EAA9C,EAAkDsB,IAAlD,CAAL,CAJgB,CAMpB;QACC,CAPD,MAOO;UACHG,CAAC,CAAC3F,CAAF,GAAMA,CAAN;UACA2F,CAAC,CAACzD,CAAF,GAAM,CAACsD,IAAP;QACH;;QAED,OAAOG,CAAP;MACH,CAjMD;IAkMH,CA3PK,EAAN;IA8PA;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;IACQ,SAASa,MAAT,CAAiB3G,CAAjB,EAAoBI,CAApB,EAAuBiE,EAAvB,EAA2BuC,MAA3B,EAAoC;MAChC,IAAIC,EAAJ,EAAQ1G,CAAR,EAAW2G,EAAX,EAAexG,GAAf,EAAoBC,GAApB;MAEA8D,EAAE,GAAGA,EAAE,IAAI,IAAN,IAAcjF,UAAU,CAAEiF,EAAF,EAAM,CAAN,EAAS,CAAT,EAAYuC,MAAZ,EAAoBhJ,YAApB,CAAxB,GACDyG,EAAE,GAAG,CADJ,GACQvF,aADb;MAGA,IAAK,CAACkB,CAAC,CAACE,CAAR,EAAY,OAAOF,CAAC,CAAC+G,QAAF,EAAP;MACZF,EAAE,GAAG7G,CAAC,CAACE,CAAF,CAAI,CAAJ,CAAL;MACA4G,EAAE,GAAG9G,CAAC,CAACG,CAAP;;MAEA,IAAKC,CAAC,IAAI,IAAV,EAAiB;QACbG,GAAG,GAAGmE,aAAa,CAAE1E,CAAC,CAACE,CAAJ,CAAnB;QACAK,GAAG,GAAGqG,MAAM,IAAI,EAAV,IAAgBA,MAAM,IAAI,EAAV,IAAgBE,EAAE,IAAI/H,UAAtC,GACFiI,aAAa,CAAEzG,GAAF,EAAOuG,EAAP,CADX,GAEFrC,YAAY,CAAElE,GAAF,EAAOuG,EAAP,CAFhB;MAGH,CALD,MAKO;QACH9G,CAAC,GAAGc,KAAK,CAAE,IAAI1D,SAAJ,CAAc4C,CAAd,CAAF,EAAoBI,CAApB,EAAuBiE,EAAvB,CAAT,CADG,CAGH;;QACAlE,CAAC,GAAGH,CAAC,CAACG,CAAN;QAEAI,GAAG,GAAGmE,aAAa,CAAE1E,CAAC,CAACE,CAAJ,CAAnB;QACAI,GAAG,GAAGC,GAAG,CAACU,MAAV,CAPG,CASH;QACA;QACA;QAEA;;QACA,IAAK2F,MAAM,IAAI,EAAV,IAAgBA,MAAM,IAAI,EAAV,KAAkBxG,CAAC,IAAID,CAAL,IAAUA,CAAC,IAAIpB,UAAjC,CAArB,EAAqE;UAEjE;UACA,OAAQuB,GAAG,GAAGF,CAAd,EAAiBG,GAAG,IAAI,GAAP,EAAYD,GAAG,EAAhC,CAAoC;;UACpCC,GAAG,GAAGyG,aAAa,CAAEzG,GAAF,EAAOJ,CAAP,CAAnB,CAJiE,CAMrE;QACC,CAPD,MAOO;UACHC,CAAC,IAAI0G,EAAL;UACAvG,GAAG,GAAGkE,YAAY,CAAElE,GAAF,EAAOJ,CAAP,CAAlB,CAFG,CAIH;;UACA,IAAKA,CAAC,GAAG,CAAJ,GAAQG,GAAb,EAAmB;YACf,IAAK,EAAEF,CAAF,GAAM,CAAX,EAAe,KAAMG,GAAG,IAAI,GAAb,EAAkBH,CAAC,EAAnB,EAAuBG,GAAG,IAAI,GAA9B,CAAmC;UACrD,CAFD,MAEO;YACHH,CAAC,IAAID,CAAC,GAAGG,GAAT;;YACA,IAAKF,CAAC,GAAG,CAAT,EAAa;cACT,IAAKD,CAAC,GAAG,CAAJ,IAASG,GAAd,EAAoBC,GAAG,IAAI,GAAP;;cACpB,OAAQH,CAAC,EAAT,EAAaG,GAAG,IAAI,GAApB,CAAyB;YAC5B;UACJ;QACJ;MACJ;;MAED,OAAOP,CAAC,CAACU,CAAF,GAAM,CAAN,IAAWmG,EAAX,GAAgB,MAAMtG,GAAtB,GAA4BA,GAAnC;IACH,CAlgC+B,CAqgChC;;;IACA,SAAS0C,QAAT,CAAmBgE,IAAnB,EAAyBC,MAAzB,EAAkC;MAC9B,IAAInC,CAAJ;MAAA,IAAO/E,CAAP;MAAA,IACII,CAAC,GAAG,CADR;MAGA,IAAKuC,OAAO,CAAEsE,IAAI,CAAC,CAAD,CAAN,CAAZ,EAA0BA,IAAI,GAAGA,IAAI,CAAC,CAAD,CAAX;MAC1BlC,CAAC,GAAG,IAAI3H,SAAJ,CAAe6J,IAAI,CAAC,CAAD,CAAnB,CAAJ;;MAEA,OAAQ,EAAE7G,CAAF,GAAM6G,IAAI,CAAChG,MAAnB,GAA6B;QACzBjB,CAAC,GAAG,IAAI5C,SAAJ,CAAe6J,IAAI,CAAC7G,CAAD,CAAnB,CAAJ,CADyB,CAGzB;;QACA,IAAK,CAACJ,CAAC,CAACU,CAAR,EAAY;UACRqE,CAAC,GAAG/E,CAAJ;UACA;QACH,CAHD,MAGO,IAAKkH,MAAM,CAACC,IAAP,CAAapC,CAAb,EAAgB/E,CAAhB,CAAL,EAA2B;UAC9B+E,CAAC,GAAG/E,CAAJ;QACH;MACJ;;MAED,OAAO+E,CAAP;IACH;IAGD;AACR;AACA;AACA;;;IACQ,SAAS1F,sBAAT,CAAiCW,CAAjC,EAAoCmD,GAApC,EAAyCH,GAAzC,EAA8C4D,MAA9C,EAAsDQ,IAAtD,EAA6D;MACzD,IAAKpH,CAAC,GAAGmD,GAAJ,IAAWnD,CAAC,GAAGgD,GAAf,IAAsBhD,CAAC,IAAIqH,QAAQ,CAACrH,CAAD,CAAxC,EAA8C;QAC1CS,KAAK,CAAEmG,MAAF,EAAU,CAAEQ,IAAI,IAAI,gBAAV,KACXpH,CAAC,GAAGmD,GAAJ,IAAWnD,CAAC,GAAGgD,GAAf,GAAqB,eAArB,GAAuC,iBAD5B,CAAV,EAC2DhD,CAD3D,CAAL;MAEH;;MAED,OAAO,IAAP;IACH;IAGD;AACR;AACA;AACA;;;IACQ,SAASsH,SAAT,CAAoBtH,CAApB,EAAuBE,CAAvB,EAA0BC,CAA1B,EAA8B;MAC1B,IAAIC,CAAC,GAAG,CAAR;MAAA,IACImH,CAAC,GAAGrH,CAAC,CAACe,MADV,CAD0B,CAIzB;;MACD,OAAQ,CAACf,CAAC,CAAC,EAAEqH,CAAH,CAAV,EAAiBrH,CAAC,CAAC2D,GAAF,EAAjB,CAA0B,CALA,CAO1B;;;MACA,KAAM0D,CAAC,GAAGrH,CAAC,CAAC,CAAD,CAAX,EAAgBqH,CAAC,IAAI,EAArB,EAAyBA,CAAC,IAAI,EAAL,EAASnH,CAAC,EAAnC,CAAuC,CARb,CAU1B;;;MACA,IAAK,CAAED,CAAC,GAAGC,CAAC,GAAGD,CAAC,GAAGnC,QAAR,GAAmB,CAAzB,IAA+BkB,OAApC,EAA8C;QAE1C;QACAc,CAAC,CAACE,CAAF,GAAMF,CAAC,CAACG,CAAF,GAAM,IAAZ,CAH0C,CAK9C;MACC,CAND,MAMO,IAAKA,CAAC,GAAGlB,OAAT,EAAmB;QAEtB;QACAe,CAAC,CAACE,CAAF,GAAM,CAAEF,CAAC,CAACG,CAAF,GAAM,CAAR,CAAN;MACH,CAJM,MAIA;QACHH,CAAC,CAACG,CAAF,GAAMA,CAAN;QACAH,CAAC,CAACE,CAAF,GAAMA,CAAN;MACH;;MAED,OAAOF,CAAP;IACH,CA1kC+B,CA6kChC;;;IACAxB,YAAY,GAAI,YAAY;MACxB,IAAIgJ,UAAU,GAAG,6BAAjB;MAAA,IACIC,QAAQ,GAAG,aADf;MAAA,IAEIC,SAAS,GAAG,aAFhB;MAAA,IAGIC,eAAe,GAAG,oBAHtB;MAAA,IAIIC,gBAAgB,GAAG,4BAJvB;MAMA,OAAO,UAAWpH,CAAX,EAAcD,GAAd,EAAmBF,GAAnB,EAAwBJ,CAAxB,EAA4B;QAC/B,IAAI6E,IAAJ;QAAA,IACIpE,CAAC,GAAGL,GAAG,GAAGE,GAAH,GAASA,GAAG,CAACS,OAAJ,CAAa4G,gBAAb,EAA+B,EAA/B,CADpB,CAD+B,CAI/B;;QACA,IAAKD,eAAe,CAAC/G,IAAhB,CAAqBF,CAArB,CAAL,EAA+B;UAC3BF,CAAC,CAACE,CAAF,GAAMmH,KAAK,CAACnH,CAAD,CAAL,GAAW,IAAX,GAAkBA,CAAC,GAAG,CAAJ,GAAQ,CAAC,CAAT,GAAa,CAArC;QACH,CAFD,MAEO;UACH,IAAK,CAACL,GAAN,EAAY;YAER;YACAK,CAAC,GAAGA,CAAC,CAACM,OAAF,CAAWwG,UAAX,EAAuB,UAAWzC,CAAX,EAAc+C,EAAd,EAAkBC,EAAlB,EAAuB;cAC9CjD,IAAI,GAAG,CAAEiD,EAAE,GAAGA,EAAE,CAACzD,WAAH,EAAP,KAA6B,GAA7B,GAAmC,EAAnC,GAAwCyD,EAAE,IAAI,GAAN,GAAY,CAAZ,GAAgB,CAA/D;cACA,OAAO,CAAC9H,CAAD,IAAMA,CAAC,IAAI6E,IAAX,GAAkBgD,EAAlB,GAAuB/C,CAA9B;YACH,CAHG,CAAJ;;YAKA,IAAI9E,CAAJ,EAAO;cACH6E,IAAI,GAAG7E,CAAP,CADG,CAGH;;cACAS,CAAC,GAAGA,CAAC,CAACM,OAAF,CAAWyG,QAAX,EAAqB,IAArB,EAA4BzG,OAA5B,CAAqC0G,SAArC,EAAgD,MAAhD,CAAJ;YACH;;YAED,IAAKnH,GAAG,IAAIG,CAAZ,EAAgB,OAAO,IAAItD,SAAJ,CAAesD,CAAf,EAAkBoE,IAAlB,CAAP;UACnB,CAjBE,CAmBH;UACA;;;UACA,IAAI3F,MAAJ,EAAYsB,KAAK,CAAEhC,EAAF,EAAM,WAAYwB,CAAC,GAAG,WAAWA,CAAd,GAAkB,EAA/B,IAAsC,SAA5C,EAAuDM,GAAvD,CAAL;UACZC,CAAC,CAACE,CAAF,GAAM,IAAN;QACH;;QAEDF,CAAC,CAACN,CAAF,GAAMM,CAAC,CAACL,CAAF,GAAM,IAAZ;QACA1B,EAAE,GAAG,CAAL;MACH,CAlCD;IAmCH,CA1Cc,EAAf,CA9kCgC,CA2nChC;;;IACA,SAASgC,KAAT,CAAgBmG,MAAhB,EAAwBoB,GAAxB,EAA6BC,GAA7B,EAAmC;MAC/B,IAAIC,KAAK,GAAG,IAAIC,KAAJ,CAAW,CACnB,eADmB,EACE;MACrB,KAFmB,EAEE;MACrB,QAHmB,EAGE;MACrB,KAJmB,EAIE;MACrB,UALmB,EAKE;MACrB,IANmB,EAME;MACrB,IAPmB,EAOE;MACrB,KARmB,EAQE;MACrB,IATmB,EASE;MACrB,KAVmB,EAUE;MACrB,OAXmB,EAWE;MACrB,KAZmB,EAYE;MACrB,MAbmB,EAaE;MACrB,WAdmB,EAcE;MACrB,QAfmB,EAeE;MACrB,OAhBmB,EAgBE;MACrB,OAjBmB,EAiBE;MACrB,OAlBmB,EAkBE;MACrB,UAnBmB,EAmBE;MACrB,eApBmB,EAoBE;MACrB,SArBmB,EAqBE;MACrB,UAtBmB,EAsBE;MACrB,YAvBmB,EAuBE;MACrB,KAxBmB,EAwBE;MACrB,aAzBmB,EAyBE;MACrB,UA1BmB,EA0BE;MACrB,WA3BmB,CA2BE;MA3BF,EA4BrBvB,MA5BqB,IA4BX,KA5BW,GA4BHoB,GA5BG,GA4BG,IA5BH,GA4BUC,GA5BrB,CAAZ;MA8BAC,KAAK,CAACd,IAAN,GAAa,iBAAb;MACA3I,EAAE,GAAG,CAAL;MACA,MAAMyJ,KAAN;IACH;IAGD;AACR;AACA;AACA;;;IACQ,SAASpH,KAAT,CAAgBN,CAAhB,EAAmB4H,EAAnB,EAAuB/D,EAAvB,EAA2BhC,CAA3B,EAA+B;MAC3B,IAAI6B,CAAJ;MAAA,IAAO9D,CAAP;MAAA,IAAUmH,CAAV;MAAA,IAAa9D,CAAb;MAAA,IAAgBzD,CAAhB;MAAA,IAAmBqI,EAAnB;MAAA,IAAuBC,EAAvB;MAAA,IACInE,EAAE,GAAG3D,CAAC,CAACN,CADX;MAAA,IAEIqI,MAAM,GAAGrK,QAFb,CAD2B,CAK3B;;MACA,IAAIiG,EAAJ,EAAQ;QAEJ;QACA;QACA;QACA;QACA;QACA;QACAqE,GAAG,EAAE;UAED;UACA,KAAMtE,CAAC,GAAG,CAAJ,EAAOT,CAAC,GAAGU,EAAE,CAAC,CAAD,CAAnB,EAAwBV,CAAC,IAAI,EAA7B,EAAiCA,CAAC,IAAI,EAAL,EAASS,CAAC,EAA3C,CAA+C;;UAC/C9D,CAAC,GAAGgI,EAAE,GAAGlE,CAAT,CAJC,CAMD;;UACA,IAAK9D,CAAC,GAAG,CAAT,EAAa;YACTA,CAAC,IAAIpC,QAAL;YACAuJ,CAAC,GAAGa,EAAJ;YACApI,CAAC,GAAGmE,EAAE,CAAEkE,EAAE,GAAG,CAAP,CAAN,CAHS,CAKT;;YACAC,EAAE,GAAGtI,CAAC,GAAGuI,MAAM,CAAErE,CAAC,GAAGqD,CAAJ,GAAQ,CAAV,CAAV,GAA0B,EAA1B,GAA+B,CAApC;UACH,CAPD,MAOO;YACHc,EAAE,GAAG/K,QAAQ,CAAE,CAAE8C,CAAC,GAAG,CAAN,IAAYpC,QAAd,CAAb;;YAEA,IAAKqK,EAAE,IAAIlE,EAAE,CAAClD,MAAd,EAAuB;cAEnB,IAAIoB,CAAJ,EAAO;gBAEH;gBACA,OAAQ8B,EAAE,CAAClD,MAAH,IAAaoH,EAArB,EAAyBlE,EAAE,CAAC7C,IAAH,CAAQ,CAAR,CAAzB,CAAqC;;gBACrCtB,CAAC,GAAGsI,EAAE,GAAG,CAAT;gBACApE,CAAC,GAAG,CAAJ;gBACA9D,CAAC,IAAIpC,QAAL;gBACAuJ,CAAC,GAAGnH,CAAC,GAAGpC,QAAJ,GAAe,CAAnB;cACH,CARD,MAQO;gBACH,MAAMwK,GAAN;cACH;YACJ,CAbD,MAaO;cACHxI,CAAC,GAAGyD,CAAC,GAAGU,EAAE,CAACkE,EAAD,CAAV,CADG,CAGH;;cACA,KAAMnE,CAAC,GAAG,CAAV,EAAaT,CAAC,IAAI,EAAlB,EAAsBA,CAAC,IAAI,EAAL,EAASS,CAAC,EAAhC,CAAoC,CAJjC,CAMH;;;cACA9D,CAAC,IAAIpC,QAAL,CAPG,CASH;cACA;;cACAuJ,CAAC,GAAGnH,CAAC,GAAGpC,QAAJ,GAAekG,CAAnB,CAXG,CAaH;;cACAoE,EAAE,GAAGf,CAAC,GAAG,CAAJ,GAAQ,CAAR,GAAYvH,CAAC,GAAGuI,MAAM,CAAErE,CAAC,GAAGqD,CAAJ,GAAQ,CAAV,CAAV,GAA0B,EAA1B,GAA+B,CAAhD;YACH;UACJ;;UAEDlF,CAAC,GAAGA,CAAC,IAAI+F,EAAE,GAAG,CAAV,IAEJ;UACA;UACA;UACEjE,EAAE,CAACkE,EAAE,GAAG,CAAN,CAAF,IAAc,IALZ,KAKsBd,CAAC,GAAG,CAAJ,GAAQvH,CAAR,GAAYA,CAAC,GAAGuI,MAAM,CAAErE,CAAC,GAAGqD,CAAJ,GAAQ,CAAV,CAL5C,CAAJ;UAOAlF,CAAC,GAAGgC,EAAE,GAAG,CAAL,GACA,CAAEiE,EAAE,IAAIjG,CAAR,MAAiBgC,EAAE,IAAI,CAAN,IAAWA,EAAE,KAAM7D,CAAC,CAACE,CAAF,GAAM,CAAN,GAAU,CAAV,GAAc,CAApB,CAA9B,CADA,GAEA4H,EAAE,GAAG,CAAL,IAAUA,EAAE,IAAI,CAAN,KAAajE,EAAE,IAAI,CAAN,IAAWhC,CAAX,IAAgBgC,EAAE,IAAI,CAAN,IAEvC;UACE,CAAEjE,CAAC,GAAG,CAAJ,GAAQmH,CAAC,GAAG,CAAJ,GAAQvH,CAAC,GAAGuI,MAAM,CAAErE,CAAC,GAAGqD,CAAN,CAAlB,GAA8B,CAAtC,GAA0CpD,EAAE,CAACkE,EAAE,GAAG,CAAN,CAA9C,IAA2D,EAA7D,GAAoE,CAH7C,IAIrBhE,EAAE,KAAM7D,CAAC,CAACE,CAAF,GAAM,CAAN,GAAU,CAAV,GAAc,CAApB,CAJM,CAFd;;UAQA,IAAK0H,EAAE,GAAG,CAAL,IAAU,CAACjE,EAAE,CAAC,CAAD,CAAlB,EAAwB;YACpBA,EAAE,CAAClD,MAAH,GAAY,CAAZ;;YAEA,IAAIoB,CAAJ,EAAO;cAEH;cACA+F,EAAE,IAAI5H,CAAC,CAACL,CAAF,GAAM,CAAZ,CAHG,CAKH;;cACAgE,EAAE,CAAC,CAAD,CAAF,GAAQoE,MAAM,CAAE,CAAEvK,QAAQ,GAAGoK,EAAE,GAAGpK,QAAlB,IAA+BA,QAAjC,CAAd;cACAwC,CAAC,CAACL,CAAF,GAAM,CAACiI,EAAD,IAAO,CAAb;YACH,CARD,MAQO;cAEH;cACAjE,EAAE,CAAC,CAAD,CAAF,GAAQ3D,CAAC,CAACL,CAAF,GAAM,CAAd;YACH;;YAED,OAAOK,CAAP;UACH,CAjFA,CAmFD;;;UACA,IAAKJ,CAAC,IAAI,CAAV,EAAc;YACV+D,EAAE,CAAClD,MAAH,GAAYoH,EAAZ;YACA5E,CAAC,GAAG,CAAJ;YACA4E,EAAE;UACL,CAJD,MAIO;YACHlE,EAAE,CAAClD,MAAH,GAAYoH,EAAE,GAAG,CAAjB;YACA5E,CAAC,GAAG8E,MAAM,CAAEvK,QAAQ,GAAGoC,CAAb,CAAV,CAFG,CAIH;YACA;;YACA+D,EAAE,CAACkE,EAAD,CAAF,GAASd,CAAC,GAAG,CAAJ,GAAQ9J,SAAS,CAAEuC,CAAC,GAAGuI,MAAM,CAAErE,CAAC,GAAGqD,CAAN,CAAV,GAAsBgB,MAAM,CAAChB,CAAD,CAA9B,CAAT,GAA+C9D,CAAvD,GAA2D,CAApE;UACH,CA/FA,CAiGD;;;UACA,IAAIpB,CAAJ,EAAO;YAEH,SAAY;cAER;cACA,IAAKgG,EAAE,IAAI,CAAX,EAAe;gBAEX;gBACA,KAAMjI,CAAC,GAAG,CAAJ,EAAOmH,CAAC,GAAGpD,EAAE,CAAC,CAAD,CAAnB,EAAwBoD,CAAC,IAAI,EAA7B,EAAiCA,CAAC,IAAI,EAAL,EAASnH,CAAC,EAA3C,CAA+C;;gBAC/CmH,CAAC,GAAGpD,EAAE,CAAC,CAAD,CAAF,IAASV,CAAb;;gBACA,KAAMA,CAAC,GAAG,CAAV,EAAa8D,CAAC,IAAI,EAAlB,EAAsBA,CAAC,IAAI,EAAL,EAAS9D,CAAC,EAAhC,CAAoC,CALzB,CAOX;;;gBACA,IAAKrD,CAAC,IAAIqD,CAAV,EAAc;kBACVjD,CAAC,CAACL,CAAF;kBACA,IAAKgE,EAAE,CAAC,CAAD,CAAF,IAASpG,IAAd,EAAqBoG,EAAE,CAAC,CAAD,CAAF,GAAQ,CAAR;gBACxB;;gBAED;cACH,CAdD,MAcO;gBACHA,EAAE,CAACkE,EAAD,CAAF,IAAU5E,CAAV;gBACA,IAAKU,EAAE,CAACkE,EAAD,CAAF,IAAUtK,IAAf,EAAsB;gBACtBoG,EAAE,CAACkE,EAAE,EAAH,CAAF,GAAW,CAAX;gBACA5E,CAAC,GAAG,CAAJ;cACH;YACJ;UACJ,CA5HA,CA8HD;;;UACA,KAAMrD,CAAC,GAAG+D,EAAE,CAAClD,MAAb,EAAqBkD,EAAE,CAAC,EAAE/D,CAAH,CAAF,KAAY,CAAjC,EAAoC+D,EAAE,CAACN,GAAH,EAApC,CAA8C;QACjD,CAxIG,CA0IJ;;;QACA,IAAKrD,CAAC,CAACL,CAAF,GAAMjB,OAAX,EAAqB;UACjBsB,CAAC,CAACN,CAAF,GAAMM,CAAC,CAACL,CAAF,GAAM,IAAZ,CADiB,CAGrB;QACC,CAJD,MAIO,IAAKK,CAAC,CAACL,CAAF,GAAMlB,OAAX,EAAqB;UACxBuB,CAAC,CAACN,CAAF,GAAM,CAAEM,CAAC,CAACL,CAAF,GAAM,CAAR,CAAN;QACH;MACJ;;MAED,OAAOK,CAAP;IACH,CAh0C+B,CAm0ChC;;IAGA;AACR;AACA;;;IACQ9B,CAAC,CAAC+J,aAAF,GAAkB/J,CAAC,CAACgK,GAAF,GAAQ,YAAY;MAClC,IAAIlI,CAAC,GAAG,IAAIpD,SAAJ,CAAc,IAAd,CAAR;MACA,IAAKoD,CAAC,CAACE,CAAF,GAAM,CAAX,EAAeF,CAAC,CAACE,CAAF,GAAM,CAAN;MACf,OAAOF,CAAP;IACH,CAJD;IAOA;AACR;AACA;AACA;;;IACQ9B,CAAC,CAAClB,IAAF,GAAS,YAAY;MACjB,OAAOsD,KAAK,CAAE,IAAI1D,SAAJ,CAAc,IAAd,CAAF,EAAuB,KAAK+C,CAAL,GAAS,CAAhC,EAAmC,CAAnC,CAAZ;IACH,CAFD;IAKA;AACR;AACA;AACA;AACA;AACA;AACA;;;IACQzB,CAAC,CAACiK,UAAF,GAAejK,CAAC,CAAC+G,GAAF,GAAQ,UAAWrB,CAAX,EAAcnE,CAAd,EAAkB;MACrCxB,EAAE,GAAG,CAAL;MACA,OAAO6G,OAAO,CAAE,IAAF,EAAQ,IAAIlI,SAAJ,CAAegH,CAAf,EAAkBnE,CAAlB,CAAR,CAAd;IACH,CAHD;IAMA;AACR;AACA;AACA;;;IACQvB,CAAC,CAACkK,aAAF,GAAkBlK,CAAC,CAAC8E,EAAF,GAAO,YAAY;MACjC,IAAIxD,CAAJ;MAAA,IAAOmC,CAAP;MAAA,IACIjC,CAAC,GAAG,KAAKA,CADb;MAGA,IAAK,CAACA,CAAN,EAAU,OAAO,IAAP;MACVF,CAAC,GAAG,CAAE,CAAEmC,CAAC,GAAGjC,CAAC,CAACe,MAAF,GAAW,CAAjB,IAAuByF,QAAQ,CAAE,KAAKvG,CAAL,GAASnC,QAAX,CAAjC,IAA2DA,QAA/D,CALiC,CAOjC;;MACA,IAAKmE,CAAC,GAAGjC,CAAC,CAACiC,CAAD,CAAV,EAAgB,OAAQA,CAAC,GAAG,EAAJ,IAAU,CAAlB,EAAqBA,CAAC,IAAI,EAAL,EAASnC,CAAC,EAA/B,CAAmC;MACnD,IAAKA,CAAC,GAAG,CAAT,EAAaA,CAAC,GAAG,CAAJ;MAEb,OAAOA,CAAP;IACH,CAZD;IAeA;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;IACQtB,CAAC,CAACmK,SAAF,GAAcnK,CAAC,CAACH,GAAF,GAAQ,UAAW6F,CAAX,EAAcnE,CAAd,EAAkB;MACpCxB,EAAE,GAAG,CAAL;MACA,OAAOF,GAAG,CAAE,IAAF,EAAQ,IAAInB,SAAJ,CAAegH,CAAf,EAAkBnE,CAAlB,CAAR,EAA+BpB,cAA/B,EAA+CC,aAA/C,CAAV;IACH,CAHD;IAMA;AACR;AACA;AACA;;;IACQJ,CAAC,CAACoK,kBAAF,GAAuBpK,CAAC,CAACqK,QAAF,GAAa,UAAW3E,CAAX,EAAcnE,CAAd,EAAkB;MAClDxB,EAAE,GAAG,CAAL;MACA,OAAOF,GAAG,CAAE,IAAF,EAAQ,IAAInB,SAAJ,CAAegH,CAAf,EAAkBnE,CAAlB,CAAR,EAA+B,CAA/B,EAAkC,CAAlC,CAAV;IACH,CAHD;IAMA;AACR;AACA;AACA;;;IACQvB,CAAC,CAACsK,MAAF,GAAWtK,CAAC,CAACuK,EAAF,GAAO,UAAW7E,CAAX,EAAcnE,CAAd,EAAkB;MAChCxB,EAAE,GAAG,CAAL;MACA,OAAO6G,OAAO,CAAE,IAAF,EAAQ,IAAIlI,SAAJ,CAAegH,CAAf,EAAkBnE,CAAlB,CAAR,CAAP,KAA2C,CAAlD;IACH,CAHD;IAMA;AACR;AACA;AACA;;;IACQvB,CAAC,CAAChB,KAAF,GAAU,YAAY;MAClB,OAAOoD,KAAK,CAAE,IAAI1D,SAAJ,CAAc,IAAd,CAAF,EAAuB,KAAK+C,CAAL,GAAS,CAAhC,EAAmC,CAAnC,CAAZ;IACH,CAFD;IAKA;AACR;AACA;AACA;;;IACQzB,CAAC,CAACwK,WAAF,GAAgBxK,CAAC,CAAC0E,EAAF,GAAO,UAAWgB,CAAX,EAAcnE,CAAd,EAAkB;MACrCxB,EAAE,GAAG,CAAL;MACA,OAAO6G,OAAO,CAAE,IAAF,EAAQ,IAAIlI,SAAJ,CAAegH,CAAf,EAAkBnE,CAAlB,CAAR,CAAP,GAAyC,CAAhD;IACH,CAHD;IAMA;AACR;AACA;AACA;;;IACQvB,CAAC,CAACyK,oBAAF,GAAyBzK,CAAC,CAAC0K,GAAF,GAAQ,UAAWhF,CAAX,EAAcnE,CAAd,EAAkB;MAC/CxB,EAAE,GAAG,CAAL;MACA,OAAO,CAAEwB,CAAC,GAAGqF,OAAO,CAAE,IAAF,EAAQ,IAAIlI,SAAJ,CAAegH,CAAf,EAAkBnE,CAAlB,CAAR,CAAb,MAAmD,CAAnD,IAAwDA,CAAC,KAAK,CAArE;IAEH,CAJD;IAOA;AACR;AACA;;;IACQvB,CAAC,CAAC2K,QAAF,GAAa,YAAY;MACrB,OAAO,CAAC,CAAC,KAAKnJ,CAAd;IACH,CAFD;IAKA;AACR;AACA;;;IACQxB,CAAC,CAAC4K,SAAF,GAAc5K,CAAC,CAAC6K,KAAF,GAAU,YAAY;MAChC,OAAO,CAAC,CAAC,KAAKrJ,CAAP,IAAYwG,QAAQ,CAAE,KAAKvG,CAAL,GAASnC,QAAX,CAAR,GAAgC,KAAKkC,CAAL,CAAOe,MAAP,GAAgB,CAAnE;IACH,CAFD;IAKA;AACR;AACA;;;IACQvC,CAAC,CAACmJ,KAAF,GAAU,YAAY;MAClB,OAAO,CAAC,KAAKnH,CAAb;IACH,CAFD;IAKA;AACR;AACA;;;IACQhC,CAAC,CAAC8K,UAAF,GAAe9K,CAAC,CAAC+K,KAAF,GAAU,YAAY;MACjC,OAAO,KAAK/I,CAAL,GAAS,CAAhB;IACH,CAFD;IAKA;AACR;AACA;;;IACQhC,CAAC,CAACgL,MAAF,GAAW,YAAY;MACnB,OAAO,CAAC,CAAC,KAAKxJ,CAAP,IAAY,KAAKA,CAAL,CAAO,CAAP,KAAa,CAAhC;IACH,CAFD;IAKA;AACR;AACA;AACA;;;IACQxB,CAAC,CAACiL,QAAF,GAAajL,CAAC,CAACwE,EAAF,GAAO,UAAWkB,CAAX,EAAcnE,CAAd,EAAkB;MAClCxB,EAAE,GAAG,CAAL;MACA,OAAO6G,OAAO,CAAE,IAAF,EAAQ,IAAIlI,SAAJ,CAAegH,CAAf,EAAkBnE,CAAlB,CAAR,CAAP,GAAyC,CAAhD;IACH,CAHD;IAMA;AACR;AACA;AACA;;;IACQvB,CAAC,CAACkL,iBAAF,GAAsBlL,CAAC,CAACmL,GAAF,GAAQ,UAAWzF,CAAX,EAAcnE,CAAd,EAAkB;MAC5CxB,EAAE,GAAG,CAAL;MACA,OAAO,CAAEwB,CAAC,GAAGqF,OAAO,CAAE,IAAF,EAAQ,IAAIlI,SAAJ,CAAegH,CAAf,EAAkBnE,CAAlB,CAAR,CAAb,MAAmD,CAAC,CAApD,IAAyDA,CAAC,KAAK,CAAtE;IACH,CAHD;IAMA;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;IACQvB,CAAC,CAACoL,KAAF,GAAUpL,CAAC,CAACqL,GAAF,GAAQ,UAAW3F,CAAX,EAAcnE,CAAd,EAAkB;MAChC,IAAIG,CAAJ;MAAA,IAAOmH,CAAP;MAAA,IAAUyC,CAAV;MAAA,IAAaC,IAAb;MAAA,IACIzJ,CAAC,GAAG,IADR;MAAA,IAEI8B,CAAC,GAAG9B,CAAC,CAACE,CAFV;MAIAjC,EAAE,GAAG,EAAL;MACA2F,CAAC,GAAG,IAAIhH,SAAJ,CAAegH,CAAf,EAAkBnE,CAAlB,CAAJ;MACAA,CAAC,GAAGmE,CAAC,CAAC1D,CAAN,CAPgC,CAShC;;MACA,IAAK,CAAC4B,CAAD,IAAM,CAACrC,CAAZ,EAAgB,OAAO,IAAI7C,SAAJ,CAAcqJ,GAAd,CAAP,CAVgB,CAYhC;;MACA,IAAKnE,CAAC,IAAIrC,CAAV,EAAc;QACVmE,CAAC,CAAC1D,CAAF,GAAM,CAACT,CAAP;QACA,OAAOO,CAAC,CAAC0J,IAAF,CAAO9F,CAAP,CAAP;MACH;;MAED,IAAI+F,EAAE,GAAG3J,CAAC,CAACL,CAAF,GAAMnC,QAAf;MAAA,IACIoM,EAAE,GAAGhG,CAAC,CAACjE,CAAF,GAAMnC,QADf;MAAA,IAEImG,EAAE,GAAG3D,CAAC,CAACN,CAFX;MAAA,IAGIsG,EAAE,GAAGpC,CAAC,CAAClE,CAHX;;MAKA,IAAK,CAACiK,EAAD,IAAO,CAACC,EAAb,EAAkB;QAEd;QACA,IAAK,CAACjG,EAAD,IAAO,CAACqC,EAAb,EAAkB,OAAOrC,EAAE,IAAKC,CAAC,CAAC1D,CAAF,GAAM,CAACT,CAAP,EAAUmE,CAAf,IAAqB,IAAIhH,SAAJ,CAAeoJ,EAAE,GAAGhG,CAAH,GAAOiG,GAAxB,CAA9B,CAHJ,CAKd;;QACA,IAAK,CAACtC,EAAE,CAAC,CAAD,CAAH,IAAU,CAACqC,EAAE,CAAC,CAAD,CAAlB,EAAwB;UAEpB;UACA,OAAOA,EAAE,CAAC,CAAD,CAAF,IAAUpC,CAAC,CAAC1D,CAAF,GAAM,CAACT,CAAP,EAAUmE,CAApB,IAA0B,IAAIhH,SAAJ,CAAe+G,EAAE,CAAC,CAAD,CAAF,GAAQ3D,CAAR,GAE9C;UACA1B,aAAa,IAAI,CAAjB,GAAqB,CAAC,CAAtB,GAA0B,CAHK,CAAjC;QAIH;MACJ;;MAEDqL,EAAE,GAAGzD,QAAQ,CAACyD,EAAD,CAAb;MACAC,EAAE,GAAG1D,QAAQ,CAAC0D,EAAD,CAAb;MACAjG,EAAE,GAAGA,EAAE,CAACxD,KAAH,EAAL,CAzCgC,CA2ChC;;MACA,IAAK2B,CAAC,GAAG6H,EAAE,GAAGC,EAAd,EAAmB;QAEf,IAAKH,IAAI,GAAG3H,CAAC,GAAG,CAAhB,EAAoB;UAChBA,CAAC,GAAG,CAACA,CAAL;UACA0H,CAAC,GAAG7F,EAAJ;QACH,CAHD,MAGO;UACHiG,EAAE,GAAGD,EAAL;UACAH,CAAC,GAAGxD,EAAJ;QACH;;QAEDwD,CAAC,CAACK,OAAF,GAVe,CAYf;;QACA,KAAMpK,CAAC,GAAGqC,CAAV,EAAarC,CAAC,EAAd,EAAkB+J,CAAC,CAAC1I,IAAF,CAAO,CAAP,CAAlB,CAA6B;;QAC7B0I,CAAC,CAACK,OAAF;MACH,CAfD,MAeO;QAEH;QACA9C,CAAC,GAAG,CAAE0C,IAAI,GAAG,CAAE3H,CAAC,GAAG6B,EAAE,CAAClD,MAAT,KAAsBhB,CAAC,GAAGuG,EAAE,CAACvF,MAA7B,CAAT,IAAmDqB,CAAnD,GAAuDrC,CAA3D;;QAEA,KAAMqC,CAAC,GAAGrC,CAAC,GAAG,CAAd,EAAiBA,CAAC,GAAGsH,CAArB,EAAwBtH,CAAC,EAAzB,EAA8B;UAE1B,IAAKkE,EAAE,CAAClE,CAAD,CAAF,IAASuG,EAAE,CAACvG,CAAD,CAAhB,EAAsB;YAClBgK,IAAI,GAAG9F,EAAE,CAAClE,CAAD,CAAF,GAAQuG,EAAE,CAACvG,CAAD,CAAjB;YACA;UACH;QACJ;MACJ,CAvE+B,CAyEhC;;;MACA,IAAIgK,IAAJ,EAAUD,CAAC,GAAG7F,EAAJ,EAAQA,EAAE,GAAGqC,EAAb,EAAiBA,EAAE,GAAGwD,CAAtB,EAAyB5F,CAAC,CAAC1D,CAAF,GAAM,CAAC0D,CAAC,CAAC1D,CAAlC;MAEVT,CAAC,GAAG,CAAEsH,CAAC,GAAGf,EAAE,CAACvF,MAAT,KAAsBb,CAAC,GAAG+D,EAAE,CAAClD,MAA7B,CAAJ,CA5EgC,CA8EhC;MACA;;MACA,IAAKhB,CAAC,GAAG,CAAT,EAAa,OAAQA,CAAC,EAAT,EAAakE,EAAE,CAAC/D,CAAC,EAAF,CAAF,GAAU,CAAvB,CAA0B;MACvCH,CAAC,GAAGlC,IAAI,GAAG,CAAX,CAjFgC,CAmFhC;;MACA,OAAQwJ,CAAC,GAAGjF,CAAZ,GAAiB;QAEb,IAAK6B,EAAE,CAAC,EAAEoD,CAAH,CAAF,GAAUf,EAAE,CAACe,CAAD,CAAjB,EAAuB;UACnB,KAAMnH,CAAC,GAAGmH,CAAV,EAAanH,CAAC,IAAI,CAAC+D,EAAE,CAAC,EAAE/D,CAAH,CAArB,EAA4B+D,EAAE,CAAC/D,CAAD,CAAF,GAAQH,CAApC,CAAuC;;UACvC,EAAEkE,EAAE,CAAC/D,CAAD,CAAJ;UACA+D,EAAE,CAACoD,CAAD,CAAF,IAASxJ,IAAT;QACH;;QAEDoG,EAAE,CAACoD,CAAD,CAAF,IAASf,EAAE,CAACe,CAAD,CAAX;MACH,CA7F+B,CA+FhC;;;MACA,OAAQpD,EAAE,CAAC,CAAD,CAAF,IAAS,CAAjB,EAAoBA,EAAE,CAACL,MAAH,CAAU,CAAV,EAAa,CAAb,GAAiB,EAAEsG,EAAvC,CAA2C,CAhGX,CAkGhC;;;MACA,IAAK,CAACjG,EAAE,CAAC,CAAD,CAAR,EAAc;QAEV;QACA;QACAC,CAAC,CAAC1D,CAAF,GAAM5B,aAAa,IAAI,CAAjB,GAAqB,CAAC,CAAtB,GAA0B,CAAhC;QACAsF,CAAC,CAAClE,CAAF,GAAM,CAAEkE,CAAC,CAACjE,CAAF,GAAM,CAAR,CAAN;QACA,OAAOiE,CAAP;MACH,CA1G+B,CA4GhC;MACA;;;MACA,OAAOkD,SAAS,CAAElD,CAAF,EAAKD,EAAL,EAASiG,EAAT,CAAhB;IACH,CA/GD;IAkHA;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;IACQ1L,CAAC,CAAC4L,MAAF,GAAW5L,CAAC,CAAC6L,GAAF,GAAQ,UAAWnG,CAAX,EAAcnE,CAAd,EAAkB;MACjC,IAAI6F,CAAJ;MAAA,IAAOpF,CAAP;MAAA,IACIF,CAAC,GAAG,IADR;MAGA/B,EAAE,GAAG,EAAL;MACA2F,CAAC,GAAG,IAAIhH,SAAJ,CAAegH,CAAf,EAAkBnE,CAAlB,CAAJ,CALiC,CAOjC;;MACA,IAAK,CAACO,CAAC,CAACN,CAAH,IAAQ,CAACkE,CAAC,CAAC1D,CAAX,IAAgB0D,CAAC,CAAClE,CAAF,IAAO,CAACkE,CAAC,CAAClE,CAAF,CAAI,CAAJ,CAA7B,EAAsC;QAClC,OAAO,IAAI9C,SAAJ,CAAcqJ,GAAd,CAAP,CADkC,CAGtC;MACC,CAJD,MAIO,IAAK,CAACrC,CAAC,CAAClE,CAAH,IAAQM,CAAC,CAACN,CAAF,IAAO,CAACM,CAAC,CAACN,CAAF,CAAI,CAAJ,CAArB,EAA8B;QACjC,OAAO,IAAI9C,SAAJ,CAAcoD,CAAd,CAAP;MACH;;MAED,IAAKjB,WAAW,IAAI,CAApB,EAAwB;QAEpB;QACA;QACAmB,CAAC,GAAG0D,CAAC,CAAC1D,CAAN;QACA0D,CAAC,CAAC1D,CAAF,GAAM,CAAN;QACAoF,CAAC,GAAGvH,GAAG,CAAEiC,CAAF,EAAK4D,CAAL,EAAQ,CAAR,EAAW,CAAX,CAAP;QACAA,CAAC,CAAC1D,CAAF,GAAMA,CAAN;QACAoF,CAAC,CAACpF,CAAF,IAAOA,CAAP;MACH,CATD,MASO;QACHoF,CAAC,GAAGvH,GAAG,CAAEiC,CAAF,EAAK4D,CAAL,EAAQ,CAAR,EAAW7E,WAAX,CAAP;MACH;;MAED,OAAOiB,CAAC,CAACsJ,KAAF,CAAShE,CAAC,CAAC0E,KAAF,CAAQpG,CAAR,CAAT,CAAP;IACH,CA9BD;IAiCA;AACR;AACA;AACA;;;IACQ1F,CAAC,CAAC+L,OAAF,GAAY/L,CAAC,CAACgM,GAAF,GAAQ,YAAY;MAC5B,IAAIlK,CAAC,GAAG,IAAIpD,SAAJ,CAAc,IAAd,CAAR;MACAoD,CAAC,CAACE,CAAF,GAAM,CAACF,CAAC,CAACE,CAAH,IAAQ,IAAd;MACA,OAAOF,CAAP;IACH,CAJD;IAOA;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;IACQ9B,CAAC,CAACwL,IAAF,GAASxL,CAAC,CAACiM,GAAF,GAAQ,UAAWvG,CAAX,EAAcnE,CAAd,EAAkB;MAC/B,IAAI+J,CAAJ;MAAA,IACIxJ,CAAC,GAAG,IADR;MAAA,IAEI8B,CAAC,GAAG9B,CAAC,CAACE,CAFV;MAIAjC,EAAE,GAAG,EAAL;MACA2F,CAAC,GAAG,IAAIhH,SAAJ,CAAegH,CAAf,EAAkBnE,CAAlB,CAAJ;MACAA,CAAC,GAAGmE,CAAC,CAAC1D,CAAN,CAP+B,CAS/B;;MACA,IAAK,CAAC4B,CAAD,IAAM,CAACrC,CAAZ,EAAgB,OAAO,IAAI7C,SAAJ,CAAcqJ,GAAd,CAAP,CAVe,CAY/B;;MACC,IAAKnE,CAAC,IAAIrC,CAAV,EAAc;QACXmE,CAAC,CAAC1D,CAAF,GAAM,CAACT,CAAP;QACA,OAAOO,CAAC,CAACsJ,KAAF,CAAQ1F,CAAR,CAAP;MACH;;MAED,IAAI+F,EAAE,GAAG3J,CAAC,CAACL,CAAF,GAAMnC,QAAf;MAAA,IACIoM,EAAE,GAAGhG,CAAC,CAACjE,CAAF,GAAMnC,QADf;MAAA,IAEImG,EAAE,GAAG3D,CAAC,CAACN,CAFX;MAAA,IAGIsG,EAAE,GAAGpC,CAAC,CAAClE,CAHX;;MAKA,IAAK,CAACiK,EAAD,IAAO,CAACC,EAAb,EAAkB;QAEd;QACA,IAAK,CAACjG,EAAD,IAAO,CAACqC,EAAb,EAAkB,OAAO,IAAIpJ,SAAJ,CAAekF,CAAC,GAAG,CAAnB,CAAP,CAHJ,CAKd;QACA;;QACA,IAAK,CAAC6B,EAAE,CAAC,CAAD,CAAH,IAAU,CAACqC,EAAE,CAAC,CAAD,CAAlB,EAAwB,OAAOA,EAAE,CAAC,CAAD,CAAF,GAAQpC,CAAR,GAAY,IAAIhH,SAAJ,CAAe+G,EAAE,CAAC,CAAD,CAAF,GAAQ3D,CAAR,GAAY8B,CAAC,GAAG,CAA/B,CAAnB;MAC3B;;MAED6H,EAAE,GAAGzD,QAAQ,CAACyD,EAAD,CAAb;MACAC,EAAE,GAAG1D,QAAQ,CAAC0D,EAAD,CAAb;MACAjG,EAAE,GAAGA,EAAE,CAACxD,KAAH,EAAL,CAnC+B,CAqC/B;;MACA,IAAK2B,CAAC,GAAG6H,EAAE,GAAGC,EAAd,EAAmB;QACf,IAAK9H,CAAC,GAAG,CAAT,EAAa;UACT8H,EAAE,GAAGD,EAAL;UACAH,CAAC,GAAGxD,EAAJ;QACH,CAHD,MAGO;UACHlE,CAAC,GAAG,CAACA,CAAL;UACA0H,CAAC,GAAG7F,EAAJ;QACH;;QAED6F,CAAC,CAACK,OAAF;;QACA,OAAQ/H,CAAC,EAAT,EAAa0H,CAAC,CAAC1I,IAAF,CAAO,CAAP,CAAb,CAAwB;;QACxB0I,CAAC,CAACK,OAAF;MACH;;MAED/H,CAAC,GAAG6B,EAAE,CAAClD,MAAP;MACAhB,CAAC,GAAGuG,EAAE,CAACvF,MAAP,CArD+B,CAuD/B;;MACA,IAAKqB,CAAC,GAAGrC,CAAJ,GAAQ,CAAb,EAAiB+J,CAAC,GAAGxD,EAAJ,EAAQA,EAAE,GAAGrC,EAAb,EAAiBA,EAAE,GAAG6F,CAAtB,EAAyB/J,CAAC,GAAGqC,CAA7B,CAxDc,CA0D/B;;MACA,KAAMA,CAAC,GAAG,CAAV,EAAarC,CAAb,GAAkB;QACdqC,CAAC,GAAG,CAAE6B,EAAE,CAAC,EAAElE,CAAH,CAAF,GAAUkE,EAAE,CAAClE,CAAD,CAAF,GAAQuG,EAAE,CAACvG,CAAD,CAAV,GAAgBqC,CAA5B,IAAkCvE,IAAlC,GAAyC,CAA7C;QACAoG,EAAE,CAAClE,CAAD,CAAF,GAAQlC,IAAI,KAAKoG,EAAE,CAAClE,CAAD,CAAX,GAAiB,CAAjB,GAAqBkE,EAAE,CAAClE,CAAD,CAAF,GAAQlC,IAArC;MACH;;MAED,IAAIuE,CAAJ,EAAO;QACH6B,EAAE,GAAG,CAAC7B,CAAD,EAAIqC,MAAJ,CAAWR,EAAX,CAAL;QACA,EAAEiG,EAAF;MACH,CAnE8B,CAqE/B;MACA;;;MACA,OAAO9C,SAAS,CAAElD,CAAF,EAAKD,EAAL,EAASiG,EAAT,CAAhB;IACH,CAxED;IA2EA;AACR;AACA;AACA;AACA;;;IACQ1L,CAAC,CAACkM,SAAF,GAAclM,CAAC,CAAC0J,EAAF,GAAO,UAAUyC,CAAV,EAAa;MAC9B,IAAI7K,CAAJ;MAAA,IAAOmC,CAAP;MAAA,IACI3B,CAAC,GAAG,IADR;MAAA,IAEIN,CAAC,GAAGM,CAAC,CAACN,CAFV,CAD8B,CAK9B;;MACA,IAAK2K,CAAC,IAAI,IAAL,IAAaA,CAAC,KAAK,CAAC,CAACA,CAArB,IAA0BA,CAAC,KAAK,CAAhC,IAAqCA,CAAC,KAAK,CAAhD,EAAoD;QAChD,IAAI1L,MAAJ,EAAYsB,KAAK,CAAE,EAAF,EAAM,aAAa9C,OAAnB,EAA4BkN,CAA5B,CAAL;QACZ,IAAKA,CAAC,IAAI,CAAC,CAACA,CAAZ,EAAgBA,CAAC,GAAG,IAAJ;MACnB;;MAED,IAAK,CAAC3K,CAAN,EAAU,OAAO,IAAP;MACViC,CAAC,GAAGjC,CAAC,CAACe,MAAF,GAAW,CAAf;MACAjB,CAAC,GAAGmC,CAAC,GAAGnE,QAAJ,GAAe,CAAnB;;MAEA,IAAKmE,CAAC,GAAGjC,CAAC,CAACiC,CAAD,CAAV,EAAgB;QAEZ;QACA,OAAQA,CAAC,GAAG,EAAJ,IAAU,CAAlB,EAAqBA,CAAC,IAAI,EAAL,EAASnC,CAAC,EAA/B,CAAmC,CAHvB,CAKZ;;;QACA,KAAMmC,CAAC,GAAGjC,CAAC,CAAC,CAAD,CAAX,EAAgBiC,CAAC,IAAI,EAArB,EAAyBA,CAAC,IAAI,EAAL,EAASnC,CAAC,EAAnC,CAAuC;MAC1C;;MAED,IAAK6K,CAAC,IAAIrK,CAAC,CAACL,CAAF,GAAM,CAAN,GAAUH,CAApB,EAAwBA,CAAC,GAAGQ,CAAC,CAACL,CAAF,GAAM,CAAV;MAExB,OAAOH,CAAP;IACH,CA3BD;IA8BA;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;IACQtB,CAAC,CAACoC,KAAF,GAAU,UAAW0C,EAAX,EAAea,EAAf,EAAoB;MAC1B,IAAIrE,CAAC,GAAG,IAAI5C,SAAJ,CAAc,IAAd,CAAR;;MAEA,IAAKoG,EAAE,IAAI,IAAN,IAAcpE,UAAU,CAAEoE,EAAF,EAAM,CAAN,EAASpF,GAAT,EAAc,EAAd,CAA7B,EAAkD;QAC9C0C,KAAK,CAAEd,CAAF,EAAK,CAAC,CAACwD,EAAF,GAAO,KAAKrD,CAAZ,GAAgB,CAArB,EAAwBkE,EAAE,IAAI,IAAN,IAC3B,CAACjF,UAAU,CAAEiF,EAAF,EAAM,CAAN,EAAS,CAAT,EAAY,EAAZ,EAAgBzG,YAAhB,CADgB,GACiBkB,aADjB,GACiCuF,EAAE,GAAG,CAD9D,CAAL;MAEH;;MAED,OAAOrE,CAAP;IACH,CATD;IAYA;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;IACQtB,CAAC,CAACoM,KAAF,GAAU,UAAUrH,CAAV,EAAa;MACnB,IAAIzD,CAAC,GAAG,IAAR;MACA,OAAOZ,UAAU,CAAEqE,CAAF,EAAK,CAACxF,gBAAN,EAAwBA,gBAAxB,EAA0C,EAA1C,EAA8C,UAA9C,CAAV,CAEL;MAFK,EAGH+B,CAAC,CAACwK,KAAF,CAAS,OAAOnD,QAAQ,CAAC5D,CAAD,CAAxB,CAHG,GAIH,IAAIrG,SAAJ,CAAe4C,CAAC,CAACE,CAAF,IAAOF,CAAC,CAACE,CAAF,CAAI,CAAJ,CAAP,KAAmBuD,CAAC,GAAG,CAACxF,gBAAL,IAAyBwF,CAAC,GAAGxF,gBAAhD,IACb+B,CAAC,CAACU,CAAF,IAAQ+C,CAAC,GAAG,CAAJ,GAAQ,CAAR,GAAY,IAAI,CAAxB,CADa,GAEbzD,CAFF,CAJJ;IAOH,CATD;IAYA;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;IACQtB,CAAC,CAACqM,UAAF,GAAerM,CAAC,CAACsM,IAAF,GAAS,YAAY;MAChC,IAAIjG,CAAJ;MAAA,IAAO/E,CAAP;MAAA,IAAUqC,CAAV;MAAA,IAAa4I,GAAb;MAAA,IAAkBjB,CAAlB;MAAA,IACIxJ,CAAC,GAAG,IADR;MAAA,IAEIN,CAAC,GAAGM,CAAC,CAACN,CAFV;MAAA,IAGIQ,CAAC,GAAGF,CAAC,CAACE,CAHV;MAAA,IAIIP,CAAC,GAAGK,CAAC,CAACL,CAJV;MAAA,IAKIqD,EAAE,GAAG3E,cAAc,GAAG,CAL1B;MAAA,IAMIqM,IAAI,GAAG,IAAI9N,SAAJ,CAAc,KAAd,CANX,CADgC,CAShC;;MACA,IAAKsD,CAAC,KAAK,CAAN,IAAW,CAACR,CAAZ,IAAiB,CAACA,CAAC,CAAC,CAAD,CAAxB,EAA8B;QAC1B,OAAO,IAAI9C,SAAJ,CAAe,CAACsD,CAAD,IAAMA,CAAC,GAAG,CAAJ,KAAW,CAACR,CAAD,IAAMA,CAAC,CAAC,CAAD,CAAlB,CAAN,GAAgCuG,GAAhC,GAAsCvG,CAAC,GAAGM,CAAH,GAAO,IAAI,CAAjE,CAAP;MACH,CAZ+B,CAchC;;;MACAE,CAAC,GAAGnD,IAAI,CAACyN,IAAL,CAAW,CAACxK,CAAZ,CAAJ,CAfgC,CAiBhC;MACA;;MACA,IAAKE,CAAC,IAAI,CAAL,IAAUA,CAAC,IAAI,IAAI,CAAxB,EAA4B;QACxBV,CAAC,GAAG0E,aAAa,CAACxE,CAAD,CAAjB;QACA,IAAK,CAAEF,CAAC,CAACiB,MAAF,GAAWd,CAAb,IAAmB,CAAnB,IAAwB,CAA7B,EAAiCH,CAAC,IAAI,GAAL;QACjCU,CAAC,GAAGnD,IAAI,CAACyN,IAAL,CAAUhL,CAAV,CAAJ;QACAG,CAAC,GAAGuG,QAAQ,CAAE,CAAEvG,CAAC,GAAG,CAAN,IAAY,CAAd,CAAR,IAA8BA,CAAC,GAAG,CAAJ,IAASA,CAAC,GAAG,CAA3C,CAAJ;;QAEA,IAAKO,CAAC,IAAI,IAAI,CAAd,EAAkB;UACdV,CAAC,GAAG,OAAOG,CAAX;QACH,CAFD,MAEO;UACHH,CAAC,GAAGU,CAAC,CAACsG,aAAF,EAAJ;UACAhH,CAAC,GAAGA,CAAC,CAACW,KAAF,CAAS,CAAT,EAAYX,CAAC,CAACmB,OAAF,CAAU,GAAV,IAAiB,CAA7B,IAAmChB,CAAvC;QACH;;QAEDkC,CAAC,GAAG,IAAIjF,SAAJ,CAAc4C,CAAd,CAAJ;MACH,CAdD,MAcO;QACHqC,CAAC,GAAG,IAAIjF,SAAJ,CAAesD,CAAC,GAAG,EAAnB,CAAJ;MACH,CAnC+B,CAqChC;MACA;MACA;MACA;;;MACA,IAAK2B,CAAC,CAACnC,CAAF,CAAI,CAAJ,CAAL,EAAc;QACVC,CAAC,GAAGkC,CAAC,CAAClC,CAAN;QACAO,CAAC,GAAGP,CAAC,GAAGqD,EAAR;QACA,IAAK9C,CAAC,GAAG,CAAT,EAAaA,CAAC,GAAG,CAAJ,CAHH,CAKV;;QACA,SAAY;UACRsJ,CAAC,GAAG3H,CAAJ;UACAA,CAAC,GAAG6I,IAAI,CAACV,KAAL,CAAYR,CAAC,CAACE,IAAF,CAAQ3L,GAAG,CAAEiC,CAAF,EAAKwJ,CAAL,EAAQxG,EAAR,EAAY,CAAZ,CAAX,CAAZ,CAAJ;;UAEA,IAAKkB,aAAa,CAAEsF,CAAC,CAAC9J,CAAJ,CAAb,CAAuBS,KAAvB,CAA8B,CAA9B,EAAiCD,CAAjC,MAAyC,CAAEV,CAAC,GAC5C0E,aAAa,CAAErC,CAAC,CAACnC,CAAJ,CAD4B,EAClBS,KADkB,CACX,CADW,EACRD,CADQ,CAA9C,EAC4C;YAExC;YACA;YACA;YACA,IAAK2B,CAAC,CAAClC,CAAF,GAAMA,CAAX,EAAe,EAAEO,CAAF;YACfV,CAAC,GAAGA,CAAC,CAACW,KAAF,CAASD,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,CAApB,CAAJ,CANwC,CAQxC;YACA;YACA;;YACA,IAAKV,CAAC,IAAI,MAAL,IAAe,CAACiL,GAAD,IAAQjL,CAAC,IAAI,MAAjC,EAA0C;cAEtC;cACA;cACA,IAAK,CAACiL,GAAN,EAAY;gBACRnK,KAAK,CAAEkJ,CAAF,EAAKA,CAAC,CAAC7J,CAAF,GAAMtB,cAAN,GAAuB,CAA5B,EAA+B,CAA/B,CAAL;;gBAEA,IAAKmL,CAAC,CAACQ,KAAF,CAAQR,CAAR,EAAWf,EAAX,CAAczI,CAAd,CAAL,EAAwB;kBACpB6B,CAAC,GAAG2H,CAAJ;kBACA;gBACH;cACJ;;cAEDxG,EAAE,IAAI,CAAN;cACA9C,CAAC,IAAI,CAAL;cACAuK,GAAG,GAAG,CAAN;YACH,CAhBD,MAgBO;cAEH;cACA;cACA,IAAK,CAAC,CAACjL,CAAF,IAAO,CAAC,CAACA,CAAC,CAACW,KAAF,CAAQ,CAAR,CAAF,IAAgBX,CAAC,CAAC4E,MAAF,CAAS,CAAT,KAAe,GAA3C,EAAiD;gBAE7C;gBACA9D,KAAK,CAAEuB,CAAF,EAAKA,CAAC,CAAClC,CAAF,GAAMtB,cAAN,GAAuB,CAA5B,EAA+B,CAA/B,CAAL;gBACAkG,CAAC,GAAG,CAAC1C,CAAC,CAACmI,KAAF,CAAQnI,CAAR,EAAW4G,EAAX,CAAczI,CAAd,CAAL;cACH;;cAED;YACH;UACJ;QACJ;MACJ;;MAED,OAAOM,KAAK,CAAEuB,CAAF,EAAKA,CAAC,CAAClC,CAAF,GAAMtB,cAAN,GAAuB,CAA5B,EAA+BC,aAA/B,EAA8CiG,CAA9C,CAAZ;IACH,CAjGD;IAoGA;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;IACQrG,CAAC,CAAC8L,KAAF,GAAU9L,CAAC,CAACyM,GAAF,GAAQ,UAAW/G,CAAX,EAAcnE,CAAd,EAAkB;MAChC,IAAIC,CAAJ;MAAA,IAAOC,CAAP;MAAA,IAAUC,CAAV;MAAA,IAAamH,CAAb;MAAA,IAAgB9D,CAAhB;MAAA,IAAmBsB,CAAnB;MAAA,IAAsBqG,GAAtB;MAAA,IAA2BnG,GAA3B;MAAA,IAAgCC,GAAhC;MAAA,IAAqCmG,GAArC;MAAA,IAA0CC,GAA1C;MAAA,IAA+CC,GAA/C;MAAA,IAAoDC,EAApD;MAAA,IACI1G,IADJ;MAAA,IACU2G,QADV;MAAA,IAEIjL,CAAC,GAAG,IAFR;MAAA,IAGI2D,EAAE,GAAG3D,CAAC,CAACN,CAHX;MAAA,IAIIsG,EAAE,GAAG,CAAE/H,EAAE,GAAG,EAAL,EAAS2F,CAAC,GAAG,IAAIhH,SAAJ,CAAegH,CAAf,EAAkBnE,CAAlB,CAAf,EAAuCC,CAJhD,CADgC,CAOhC;;MACA,IAAK,CAACiE,EAAD,IAAO,CAACqC,EAAR,IAAc,CAACrC,EAAE,CAAC,CAAD,CAAjB,IAAwB,CAACqC,EAAE,CAAC,CAAD,CAAhC,EAAsC;QAElC;QACA,IAAK,CAAChG,CAAC,CAACE,CAAH,IAAQ,CAAC0D,CAAC,CAAC1D,CAAX,IAAgByD,EAAE,IAAI,CAACA,EAAE,CAAC,CAAD,CAAT,IAAgB,CAACqC,EAAjC,IAAuCA,EAAE,IAAI,CAACA,EAAE,CAAC,CAAD,CAAT,IAAgB,CAACrC,EAA7D,EAAkE;UAC9DC,CAAC,CAAClE,CAAF,GAAMkE,CAAC,CAACjE,CAAF,GAAMiE,CAAC,CAAC1D,CAAF,GAAM,IAAlB;QACH,CAFD,MAEO;UACH0D,CAAC,CAAC1D,CAAF,IAAOF,CAAC,CAACE,CAAT,CADG,CAGH;;UACA,IAAK,CAACyD,EAAD,IAAO,CAACqC,EAAb,EAAkB;YACdpC,CAAC,CAAClE,CAAF,GAAMkE,CAAC,CAACjE,CAAF,GAAM,IAAZ,CADc,CAGlB;UACC,CAJD,MAIO;YACHiE,CAAC,CAAClE,CAAF,GAAM,CAAC,CAAD,CAAN;YACAkE,CAAC,CAACjE,CAAF,GAAM,CAAN;UACH;QACJ;;QAED,OAAOiE,CAAP;MACH;;MAEDjE,CAAC,GAAGuG,QAAQ,CAAElG,CAAC,CAACL,CAAF,GAAMnC,QAAR,CAAR,GAA6B0I,QAAQ,CAAEtC,CAAC,CAACjE,CAAF,GAAMnC,QAAR,CAAzC;MACAoG,CAAC,CAAC1D,CAAF,IAAOF,CAAC,CAACE,CAAT;MACA0K,GAAG,GAAGjH,EAAE,CAAClD,MAAT;MACAoK,GAAG,GAAG7E,EAAE,CAACvF,MAAT,CAjCgC,CAmChC;;MACA,IAAKmK,GAAG,GAAGC,GAAX,EAAiBG,EAAE,GAAGrH,EAAL,EAASA,EAAE,GAAGqC,EAAd,EAAkBA,EAAE,GAAGgF,EAAvB,EAA2BpL,CAAC,GAAGgL,GAA/B,EAAoCA,GAAG,GAAGC,GAA1C,EAA+CA,GAAG,GAAGjL,CAArD,CApCe,CAsChC;;MACA,KAAMA,CAAC,GAAGgL,GAAG,GAAGC,GAAV,EAAeG,EAAE,GAAG,EAA1B,EAA8BpL,CAAC,EAA/B,EAAmCoL,EAAE,CAAClK,IAAH,CAAQ,CAAR,CAAnC,CAA+C;;MAE/CwD,IAAI,GAAG/G,IAAP;MACA0N,QAAQ,GAAGtN,SAAX;;MAEA,KAAMiC,CAAC,GAAGiL,GAAV,EAAe,EAAEjL,CAAF,IAAO,CAAtB,GAA2B;QACvBF,CAAC,GAAG,CAAJ;QACAoL,GAAG,GAAG9E,EAAE,CAACpG,CAAD,CAAF,GAAQqL,QAAd;QACAF,GAAG,GAAG/E,EAAE,CAACpG,CAAD,CAAF,GAAQqL,QAAR,GAAmB,CAAzB;;QAEA,KAAMhI,CAAC,GAAG2H,GAAJ,EAAS7D,CAAC,GAAGnH,CAAC,GAAGqD,CAAvB,EAA0B8D,CAAC,GAAGnH,CAA9B,GAAmC;UAC/B6E,GAAG,GAAGd,EAAE,CAAC,EAAEV,CAAH,CAAF,GAAUgI,QAAhB;UACAvG,GAAG,GAAGf,EAAE,CAACV,CAAD,CAAF,GAAQgI,QAAR,GAAmB,CAAzB;UACA1G,CAAC,GAAGwG,GAAG,GAAGtG,GAAN,GAAYC,GAAG,GAAGoG,GAAtB;UACArG,GAAG,GAAGqG,GAAG,GAAGrG,GAAN,GAAgBF,CAAC,GAAG0G,QAAN,GAAmBA,QAAjC,GAA8CD,EAAE,CAACjE,CAAD,CAAhD,GAAsDrH,CAA5D;UACAA,CAAC,GAAG,CAAE+E,GAAG,GAAGH,IAAN,GAAa,CAAf,KAAuBC,CAAC,GAAG0G,QAAJ,GAAe,CAAtC,IAA4CF,GAAG,GAAGrG,GAAtD;UACAsG,EAAE,CAACjE,CAAC,EAAF,CAAF,GAAUtC,GAAG,GAAGH,IAAhB;QACH;;QAED0G,EAAE,CAACjE,CAAD,CAAF,GAAQrH,CAAR;MACH;;MAED,IAAIA,CAAJ,EAAO;QACH,EAAEC,CAAF;MACH,CAFD,MAEO;QACHqL,EAAE,CAAC1H,MAAH,CAAU,CAAV,EAAa,CAAb;MACH;;MAED,OAAOwD,SAAS,CAAElD,CAAF,EAAKoH,EAAL,EAASrL,CAAT,CAAhB;IACH,CApED;IAuEA;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;IACQzB,CAAC,CAACgN,QAAF,GAAa,UAAWtD,EAAX,EAAe/D,EAAf,EAAoB;MAC7B,IAAIrE,CAAC,GAAG,IAAI5C,SAAJ,CAAc,IAAd,CAAR;MACAgL,EAAE,GAAGA,EAAE,IAAI,IAAN,IAAc,CAAChJ,UAAU,CAAEgJ,EAAF,EAAM,CAAN,EAAShK,GAAT,EAAc,EAAd,EAAkB,WAAlB,CAAzB,GAA2D,IAA3D,GAAkEgK,EAAE,GAAG,CAA5E;MACA/D,EAAE,GAAGA,EAAE,IAAI,IAAN,IAAc,CAACjF,UAAU,CAAEiF,EAAF,EAAM,CAAN,EAAS,CAAT,EAAY,EAAZ,EAAgBzG,YAAhB,CAAzB,GAA0DkB,aAA1D,GAA0EuF,EAAE,GAAG,CAApF;MACA,OAAO+D,EAAE,GAAGtH,KAAK,CAAEd,CAAF,EAAKoI,EAAL,EAAS/D,EAAT,CAAR,GAAwBrE,CAAjC;IACH,CALD;IAQA;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;IACQtB,CAAC,CAACsI,aAAF,GAAkB,UAAWxD,EAAX,EAAea,EAAf,EAAoB;MAClC,OAAOsC,MAAM,CAAE,IAAF,EACXnD,EAAE,IAAI,IAAN,IAAcpE,UAAU,CAAEoE,EAAF,EAAM,CAAN,EAASpF,GAAT,EAAc,EAAd,CAAxB,GAA6C,CAAC,CAACoF,EAAF,GAAO,CAApD,GAAwD,IAD7C,EACmDa,EADnD,EACuD,EADvD,CAAb;IAEH,CAHD;IAMA;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;IACQ3F,CAAC,CAACiN,OAAF,GAAY,UAAWnI,EAAX,EAAea,EAAf,EAAoB;MAC5B,OAAOsC,MAAM,CAAE,IAAF,EAAQnD,EAAE,IAAI,IAAN,IAAcpE,UAAU,CAAEoE,EAAF,EAAM,CAAN,EAASpF,GAAT,EAAc,EAAd,CAAxB,GACjB,CAAC,CAACoF,EAAF,GAAO,KAAKrD,CAAZ,GAAgB,CADC,GACG,IADX,EACiBkE,EADjB,EACqB,EADrB,CAAb;IAEH,CAHD;IAMA;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;IACQ3F,CAAC,CAACkN,QAAF,GAAa,UAAWpI,EAAX,EAAea,EAAf,EAAoB;MAC7B,IAAI9D,GAAG,GAAGoG,MAAM,CAAE,IAAF,EAAQnD,EAAE,IAAI,IAAN,IAAcpE,UAAU,CAAEoE,EAAF,EAAM,CAAN,EAASpF,GAAT,EAAc,EAAd,CAAxB,GACpB,CAAC,CAACoF,EAAF,GAAO,KAAKrD,CAAZ,GAAgB,CADI,GACA,IADR,EACckE,EADd,EACkB,EADlB,CAAhB;;MAGA,IAAK,KAAKnE,CAAV,EAAc;QACV,IAAIE,CAAJ;QAAA,IACIyL,GAAG,GAAGtL,GAAG,CAACuL,KAAJ,CAAU,GAAV,CADV;QAAA,IAEIC,EAAE,GAAG,CAACtM,MAAM,CAACG,SAFjB;QAAA,IAGIoM,EAAE,GAAG,CAACvM,MAAM,CAACI,kBAHjB;QAAA,IAIIF,cAAc,GAAGF,MAAM,CAACE,cAJ5B;QAAA,IAKIsM,OAAO,GAAGJ,GAAG,CAAC,CAAD,CALjB;QAAA,IAMIK,YAAY,GAAGL,GAAG,CAAC,CAAD,CANtB;QAAA,IAOIpC,KAAK,GAAG,KAAK/I,CAAL,GAAS,CAPrB;QAAA,IAQIyL,SAAS,GAAG1C,KAAK,GAAGwC,OAAO,CAACtL,KAAR,CAAc,CAAd,CAAH,GAAsBsL,OAR3C;QAAA,IASI3L,GAAG,GAAG6L,SAAS,CAAClL,MATpB;QAWA,IAAI+K,EAAJ,EAAQ5L,CAAC,GAAG2L,EAAJ,EAAQA,EAAE,GAAGC,EAAb,EAAiBA,EAAE,GAAG5L,CAAtB,EAAyBE,GAAG,IAAIF,CAAhC;;QAER,IAAK2L,EAAE,GAAG,CAAL,IAAUzL,GAAG,GAAG,CAArB,EAAyB;UACrBF,CAAC,GAAGE,GAAG,GAAGyL,EAAN,IAAYA,EAAhB;UACAE,OAAO,GAAGE,SAAS,CAACC,MAAV,CAAkB,CAAlB,EAAqBhM,CAArB,CAAV;;UAEA,OAAQA,CAAC,GAAGE,GAAZ,EAAiBF,CAAC,IAAI2L,EAAtB,EAA2B;YACvBE,OAAO,IAAItM,cAAc,GAAGwM,SAAS,CAACC,MAAV,CAAkBhM,CAAlB,EAAqB2L,EAArB,CAA5B;UACH;;UAED,IAAKC,EAAE,GAAG,CAAV,EAAcC,OAAO,IAAItM,cAAc,GAAGwM,SAAS,CAACxL,KAAV,CAAgBP,CAAhB,CAA5B;UACd,IAAIqJ,KAAJ,EAAWwC,OAAO,GAAG,MAAMA,OAAhB;QACd;;QAED1L,GAAG,GAAG2L,YAAY,GACdD,OAAO,GAAGxM,MAAM,CAACC,gBAAjB,IAAsC,CAAEsM,EAAE,GAAG,CAACvM,MAAM,CAACM,iBAAf,IACpCmM,YAAY,CAAClL,OAAb,CAAsB,IAAID,MAAJ,CAAY,SAASiL,EAAT,GAAc,MAA1B,EAAkC,GAAlC,CAAtB,EACA,OAAOvM,MAAM,CAACK,sBADd,CADoC,GAGpCoM,YAHF,CADc,GAKdD,OALJ;MAMH;;MAED,OAAO1L,GAAP;IACH,CAvCD;IA0CA;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;IACQ7B,CAAC,CAAC2N,UAAF,GAAe,UAAUC,EAAV,EAAc;MACzB,IAAIT,GAAJ;MAAA,IAASU,EAAT;MAAA,IAAaC,EAAb;MAAA,IAAiBrM,CAAjB;MAAA,IAAoBsM,GAApB;MAAA,IAAyBzM,CAAzB;MAAA,IAA4B0M,EAA5B;MAAA,IAAgC5G,CAAhC;MAAA,IAAmCpF,CAAnC;MAAA,IACI+C,CAAC,GAAGtE,MADR;MAAA,IAEIqB,CAAC,GAAG,IAFR;MAAA,IAGI2D,EAAE,GAAG3D,CAAC,CAACN,CAHX;MAAA,IAIIgE,CAAC,GAAG,IAAI9G,SAAJ,CAAcwB,GAAd,CAJR;MAAA,IAKI+N,EAAE,GAAGJ,EAAE,GAAG,IAAInP,SAAJ,CAAcwB,GAAd,CALd;MAAA,IAMIgO,EAAE,GAAGF,EAAE,GAAG,IAAItP,SAAJ,CAAcwB,GAAd,CANd;;MAQA,IAAK0N,EAAE,IAAI,IAAX,EAAkB;QACdnN,MAAM,GAAG,KAAT;QACAa,CAAC,GAAG,IAAI5C,SAAJ,CAAckP,EAAd,CAAJ;QACAnN,MAAM,GAAGsE,CAAT;;QAEA,IAAK,EAAGA,CAAC,GAAGzD,CAAC,CAACuJ,KAAF,EAAP,KAAsBvJ,CAAC,CAACkD,EAAF,CAAKtE,GAAL,CAA3B,EAAuC;UAEnC,IAAIO,MAAJ,EAAY;YACRsB,KAAK,CAAE,EAAF,EACH,sBAAuBgD,CAAC,GAAG,cAAH,GAAoB,gBAA5C,CADG,EAC6D6I,EAD7D,CAAL;UAEH,CALkC,CAOnC;UACA;;;UACAA,EAAE,GAAG,CAAC7I,CAAD,IAAMzD,CAAC,CAACE,CAAR,IAAaY,KAAK,CAAEd,CAAF,EAAKA,CAAC,CAACG,CAAF,GAAM,CAAX,EAAc,CAAd,CAAL,CAAuBiJ,GAAvB,CAA2BxK,GAA3B,CAAb,GAA+CoB,CAA/C,GAAmD,IAAxD;QACH;MACJ;;MAED,IAAK,CAACmE,EAAN,EAAW,OAAO3D,CAAC,CAACuG,QAAF,EAAP;MACXrG,CAAC,GAAGgE,aAAa,CAACP,EAAD,CAAjB,CA5ByB,CA8BzB;MACA;;MACAhE,CAAC,GAAG+D,CAAC,CAAC/D,CAAF,GAAMO,CAAC,CAACO,MAAF,GAAWT,CAAC,CAACL,CAAb,GAAiB,CAA3B;MACA+D,CAAC,CAAChE,CAAF,CAAI,CAAJ,IAAShC,QAAQ,CAAE,CAAEuO,GAAG,GAAGtM,CAAC,GAAGnC,QAAZ,IAAyB,CAAzB,GAA6BA,QAAQ,GAAGyO,GAAxC,GAA8CA,GAAhD,CAAjB;MACAH,EAAE,GAAG,CAACA,EAAD,IAAOtM,CAAC,CAACyF,GAAF,CAAMvB,CAAN,IAAW,CAAlB,GAAwB/D,CAAC,GAAG,CAAJ,GAAQ+D,CAAR,GAAYyI,EAApC,GAA2C3M,CAAhD;MAEAyM,GAAG,GAAGvN,OAAN;MACAA,OAAO,GAAG,IAAI,CAAd;MACAc,CAAC,GAAG,IAAI5C,SAAJ,CAAcsD,CAAd,CAAJ,CAtCyB,CAwCzB;;MACAgM,EAAE,CAACxM,CAAH,CAAK,CAAL,IAAU,CAAV;;MAEA,SAAa;QACT4F,CAAC,GAAGvH,GAAG,CAAEyB,CAAF,EAAKkE,CAAL,EAAQ,CAAR,EAAW,CAAX,CAAP;QACAsI,EAAE,GAAGD,EAAE,CAACrC,IAAH,CAASpE,CAAC,CAAC0E,KAAF,CAAQoC,EAAR,CAAT,CAAL;QACA,IAAKJ,EAAE,CAAC/G,GAAH,CAAO6G,EAAP,KAAc,CAAnB,EAAuB;QACvBC,EAAE,GAAGK,EAAL;QACAA,EAAE,GAAGJ,EAAL;QACAG,EAAE,GAAGD,EAAE,CAACxC,IAAH,CAASpE,CAAC,CAAC0E,KAAF,CAASgC,EAAE,GAAGG,EAAd,CAAT,CAAL;QACAD,EAAE,GAAGF,EAAL;QACAtI,CAAC,GAAGlE,CAAC,CAAC8J,KAAF,CAAShE,CAAC,CAAC0E,KAAF,CAASgC,EAAE,GAAGtI,CAAd,CAAT,CAAJ;QACAlE,CAAC,GAAGwM,EAAJ;MACH;;MAEDA,EAAE,GAAGjO,GAAG,CAAE+N,EAAE,CAACxC,KAAH,CAASyC,EAAT,CAAF,EAAgBK,EAAhB,EAAoB,CAApB,EAAuB,CAAvB,CAAR;MACAF,EAAE,GAAGA,EAAE,CAACxC,IAAH,CAASsC,EAAE,CAAChC,KAAH,CAASmC,EAAT,CAAT,CAAL;MACAJ,EAAE,GAAGA,EAAE,CAACrC,IAAH,CAASsC,EAAE,CAAChC,KAAH,CAASoC,EAAT,CAAT,CAAL;MACAF,EAAE,CAAChM,CAAH,GAAOiM,EAAE,CAACjM,CAAH,GAAOF,CAAC,CAACE,CAAhB;MACAP,CAAC,IAAI,CAAL,CA3DyB,CA6DzB;;MACA0L,GAAG,GAAGtN,GAAG,CAAEoO,EAAF,EAAMC,EAAN,EAAUzM,CAAV,EAAarB,aAAb,CAAH,CAAgCgL,KAAhC,CAAsCtJ,CAAtC,EAAyCkI,GAAzC,GAA+CjD,GAA/C,CACAlH,GAAG,CAAEmO,EAAF,EAAMH,EAAN,EAAUpM,CAAV,EAAarB,aAAb,CAAH,CAAgCgL,KAAhC,CAAsCtJ,CAAtC,EAAyCkI,GAAzC,EADA,IACmD,CADnD,GAEI,CAAEiE,EAAE,CAAC5F,QAAH,EAAF,EAAiB6F,EAAE,CAAC7F,QAAH,EAAjB,CAFJ,GAGI,CAAE2F,EAAE,CAAC3F,QAAH,EAAF,EAAiBwF,EAAE,CAACxF,QAAH,EAAjB,CAHV;MAKA7H,OAAO,GAAGuN,GAAV;MACA,OAAOZ,GAAP;IACH,CArED;IAwEA;AACR;AACA;;;IACQnN,CAAC,CAACmO,QAAF,GAAa,YAAY;MACrB,OAAO,CAAC,IAAR;IACH,CAFD;IAKA;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;IACQnO,CAAC,CAACoO,OAAF,GAAYpO,CAAC,CAAC6F,GAAF,GAAQ,UAAWvE,CAAX,EAAc+E,CAAd,EAAkB;MAClC,IAAItB,CAAJ;MAAA,IAAOW,CAAP;MAAA,IAAUyG,CAAV;MAAA,IACIzK,CAAC,GAAG3C,SAAS,CAAEuC,CAAC,GAAG,CAAJ,GAAQ,CAACA,CAAT,GAAa,CAACA,CAAhB,CADjB;MAAA,IAEIQ,CAAC,GAAG,IAFR;;MAIA,IAAKuE,CAAC,IAAI,IAAV,EAAiB;QACbtG,EAAE,GAAG,EAAL;QACAsG,CAAC,GAAG,IAAI3H,SAAJ,CAAc2H,CAAd,CAAJ;MACH,CARiC,CAUlC;;;MACA,IAAK,CAAC3F,UAAU,CAAEY,CAAF,EAAK,CAAC/B,gBAAN,EAAwBA,gBAAxB,EAA0C,EAA1C,EAA8C,UAA9C,CAAX,KACD,CAACoL,QAAQ,CAACrJ,CAAD,CAAT,IAAgBI,CAAC,GAAGnC,gBAAJ,KAA0B+B,CAAC,IAAI,CAA/B,CAAhB,IACA+M,UAAU,CAAC/M,CAAD,CAAV,IAAiBA,CAAjB,IAAsB,EAAGA,CAAC,GAAGyG,GAAP,CAFrB,KAEuCzG,CAAC,IAAI,CAFjD,EAEqD;QACjDyD,CAAC,GAAGlG,IAAI,CAACgH,GAAL,CAAU,CAAC/D,CAAX,EAAcR,CAAd,CAAJ;QACA,OAAO,IAAI5C,SAAJ,CAAe2H,CAAC,GAAGtB,CAAC,GAAGsB,CAAP,GAAWtB,CAA3B,CAAP;MACH;;MAED,IAAIsB,CAAJ,EAAO;QACH,IAAK/E,CAAC,GAAG,CAAJ,IAASQ,CAAC,CAAC4C,EAAF,CAAKxE,GAAL,CAAT,IAAsB4B,CAAC,CAAC+I,KAAF,EAAtB,IAAmCxE,CAAC,CAAC3B,EAAF,CAAKxE,GAAL,CAAnC,IAAgDmG,CAAC,CAACwE,KAAF,EAArD,EAAiE;UAC7D/I,CAAC,GAAGA,CAAC,CAAC+J,GAAF,CAAMxF,CAAN,CAAJ;QACH,CAFD,MAEO;UACH8F,CAAC,GAAG9F,CAAJ,CADG,CAGH;;UACAA,CAAC,GAAG,IAAJ;QACH;MACJ,CATD,MASO,IAAIvF,aAAJ,EAAmB;QAEtB;QACA;QACA;QACA;QACAiE,CAAC,GAAGnG,QAAQ,CAAEkC,aAAa,GAAGxB,QAAhB,GAA2B,CAA7B,CAAZ;MACH;;MAEDoG,CAAC,GAAG,IAAIhH,SAAJ,CAAcwB,GAAd,CAAJ;;MAEA,SAAY;QACR,IAAKwB,CAAC,GAAG,CAAT,EAAa;UACTgE,CAAC,GAAGA,CAAC,CAACoG,KAAF,CAAQhK,CAAR,CAAJ;UACA,IAAK,CAAC4D,CAAC,CAAClE,CAAR,EAAY;;UACZ,IAAIuD,CAAJ,EAAO;YACH,IAAKW,CAAC,CAAClE,CAAF,CAAIe,MAAJ,GAAawC,CAAlB,EAAsBW,CAAC,CAAClE,CAAF,CAAIe,MAAJ,GAAawC,CAAb;UACzB,CAFD,MAEO,IAAIsB,CAAJ,EAAO;YACVX,CAAC,GAAGA,CAAC,CAACmG,GAAF,CAAMxF,CAAN,CAAJ;UACH;QACJ;;QAED3E,CAAC,GAAG3C,SAAS,CAAE2C,CAAC,GAAG,CAAN,CAAb;QACA,IAAK,CAACA,CAAN,EAAU;QACVI,CAAC,GAAGA,CAAC,CAACgK,KAAF,CAAQhK,CAAR,CAAJ;;QACA,IAAIiD,CAAJ,EAAO;UACH,IAAKjD,CAAC,CAACN,CAAF,IAAOM,CAAC,CAACN,CAAF,CAAIe,MAAJ,GAAawC,CAAzB,EAA6BjD,CAAC,CAACN,CAAF,CAAIe,MAAJ,GAAawC,CAAb;QAChC,CAFD,MAEO,IAAIsB,CAAJ,EAAO;UACVvE,CAAC,GAAGA,CAAC,CAAC+J,GAAF,CAAMxF,CAAN,CAAJ;QACH;MACJ;;MAED,IAAIA,CAAJ,EAAO,OAAOX,CAAP;MACP,IAAKpE,CAAC,GAAG,CAAT,EAAaoE,CAAC,GAAGxF,GAAG,CAACL,GAAJ,CAAQ6F,CAAR,CAAJ;MAEb,OAAOyG,CAAC,GAAGzG,CAAC,CAACmG,GAAF,CAAMM,CAAN,CAAH,GAAcpH,CAAC,GAAG3C,KAAK,CAAEsD,CAAF,EAAK5E,aAAL,EAAoBV,aAApB,CAAR,GAA8CsF,CAArE;IACH,CA/DD;IAkEA;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;IACQ1F,CAAC,CAACsO,WAAF,GAAgB,UAAW5E,EAAX,EAAe/D,EAAf,EAAoB;MAChC,OAAOsC,MAAM,CAAE,IAAF,EAAQyB,EAAE,IAAI,IAAN,IAAchJ,UAAU,CAAEgJ,EAAF,EAAM,CAAN,EAAShK,GAAT,EAAc,EAAd,EAAkB,WAAlB,CAAxB,GACjBgK,EAAE,GAAG,CADY,GACR,IADA,EACM/D,EADN,EACU,EADV,CAAb;IAEH,CAHD;IAMA;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;IACQ3F,CAAC,CAACqI,QAAF,GAAa,UAAU9G,CAAV,EAAa;MACtB,IAAIM,GAAJ;MAAA,IACIP,CAAC,GAAG,IADR;MAAA,IAEIU,CAAC,GAAGV,CAAC,CAACU,CAFV;MAAA,IAGIP,CAAC,GAAGH,CAAC,CAACG,CAHV,CADsB,CAMtB;;MACA,IAAKA,CAAC,KAAK,IAAX,EAAkB;QAEd,IAAIO,CAAJ,EAAO;UACHH,GAAG,GAAG,UAAN;UACA,IAAKG,CAAC,GAAG,CAAT,EAAaH,GAAG,GAAG,MAAMA,GAAZ;QAChB,CAHD,MAGO;UACHA,GAAG,GAAG,KAAN;QACH;MACJ,CARD,MAQO;QACHA,GAAG,GAAGmE,aAAa,CAAE1E,CAAC,CAACE,CAAJ,CAAnB;;QAEA,IAAKD,CAAC,IAAI,IAAL,IAAa,CAACb,UAAU,CAAEa,CAAF,EAAK,CAAL,EAAQ,EAAR,EAAY,EAAZ,EAAgB,MAAhB,CAA7B,EAAwD;UACpDM,GAAG,GAAGJ,CAAC,IAAIpB,UAAL,IAAmBoB,CAAC,IAAInB,UAAxB,GACFgI,aAAa,CAAEzG,GAAF,EAAOJ,CAAP,CADX,GAEFsE,YAAY,CAAElE,GAAF,EAAOJ,CAAP,CAFhB;QAGH,CAJD,MAIO;UACHI,GAAG,GAAGW,WAAW,CAAEuD,YAAY,CAAElE,GAAF,EAAOJ,CAAP,CAAd,EAA0BF,CAAC,GAAG,CAA9B,EAAiC,EAAjC,EAAqCS,CAArC,CAAjB;QACH;;QAED,IAAKA,CAAC,GAAG,CAAJ,IAASV,CAAC,CAACE,CAAF,CAAI,CAAJ,CAAd,EAAuBK,GAAG,GAAG,MAAMA,GAAZ;MAC1B;;MAED,OAAOA,GAAP;IACH,CA9BD;IAiCA;AACR;AACA;AACA;;;IACQ7B,CAAC,CAACuO,SAAF,GAAcvO,CAAC,CAACwO,KAAF,GAAU,YAAY;MAChC,OAAOpM,KAAK,CAAE,IAAI1D,SAAJ,CAAc,IAAd,CAAF,EAAuB,KAAK+C,CAAL,GAAS,CAAhC,EAAmC,CAAnC,CAAZ;IACH,CAFD;IAKA;AACR;AACA;AACA;;;IACQzB,CAAC,CAACyO,OAAF,GAAYzO,CAAC,CAAC0O,MAAF,GAAW,YAAY;MAC/B,IAAI7M,GAAJ;MAAA,IACIP,CAAC,GAAG,IADR;MAAA,IAEIG,CAAC,GAAGH,CAAC,CAACG,CAFV;MAIA,IAAKA,CAAC,KAAK,IAAX,EAAkB,OAAOH,CAAC,CAAC+G,QAAF,EAAP;MAElBxG,GAAG,GAAGmE,aAAa,CAAE1E,CAAC,CAACE,CAAJ,CAAnB;MAEAK,GAAG,GAAGJ,CAAC,IAAIpB,UAAL,IAAmBoB,CAAC,IAAInB,UAAxB,GACAgI,aAAa,CAAEzG,GAAF,EAAOJ,CAAP,CADb,GAEAsE,YAAY,CAAElE,GAAF,EAAOJ,CAAP,CAFlB;MAIA,OAAOH,CAAC,CAACU,CAAF,GAAM,CAAN,GAAU,MAAMH,GAAhB,GAAsBA,GAA7B;IACH,CAdD;;IAiBA7B,CAAC,CAAC2O,WAAF,GAAgB,IAAhB;IAEA,IAAK/O,MAAM,IAAI,IAAf,EAAsBlB,SAAS,CAACkB,MAAV,CAAiBA,MAAjB;IAEtB,OAAOlB,SAAP;EACH,CA1/EkB,CA6/EnB;;;EAGA,SAASsJ,QAAT,CAAkB1G,CAAlB,EAAqB;IACjB,IAAII,CAAC,GAAGJ,CAAC,GAAG,CAAZ;IACA,OAAOA,CAAC,GAAG,CAAJ,IAASA,CAAC,KAAKI,CAAf,GAAmBA,CAAnB,GAAuBA,CAAC,GAAG,CAAlC;EACH,CAngFkB,CAsgFnB;;;EACA,SAASsE,aAAT,CAAuBpC,CAAvB,EAA0B;IACtB,IAAI5B,CAAJ;IAAA,IAAOmK,CAAP;IAAA,IACIzK,CAAC,GAAG,CADR;IAAA,IAEImH,CAAC,GAAGjF,CAAC,CAACrB,MAFV;IAAA,IAGIoB,CAAC,GAAGC,CAAC,CAAC,CAAD,CAAD,GAAO,EAHf;;IAKA,OAAQlC,CAAC,GAAGmH,CAAZ,GAAiB;MACb7G,CAAC,GAAG4B,CAAC,CAAClC,CAAC,EAAF,CAAD,GAAS,EAAb;MACAyK,CAAC,GAAG7M,QAAQ,GAAG0C,CAAC,CAACO,MAAjB;;MACA,OAAQ4J,CAAC,EAAT,EAAanK,CAAC,GAAG,MAAMA,CAAvB,CAA0B;;MAC1B2B,CAAC,IAAI3B,CAAL;IACH,CAXqB,CAatB;;;IACA,KAAM6G,CAAC,GAAGlF,CAAC,CAACpB,MAAZ,EAAoBoB,CAAC,CAACxB,UAAF,CAAa,EAAE0G,CAAf,MAAsB,EAA1C,EAA+C;;IAC/C,OAAOlF,CAAC,CAAC1B,KAAF,CAAS,CAAT,EAAY4G,CAAC,GAAG,CAAJ,IAAS,CAArB,CAAP;EACH,CAvhFkB,CA0hFnB;;;EACA,SAASjC,OAAT,CAAkB9E,CAAlB,EAAqB4D,CAArB,EAAyB;IACrB,IAAI9B,CAAJ;IAAA,IAAOrC,CAAP;IAAA,IACIkE,EAAE,GAAG3D,CAAC,CAACN,CADX;IAAA,IAEIsG,EAAE,GAAGpC,CAAC,CAAClE,CAFX;IAAA,IAGIE,CAAC,GAAGI,CAAC,CAACE,CAHV;IAAA,IAII6G,CAAC,GAAGnD,CAAC,CAAC1D,CAJV;IAAA,IAKI+C,CAAC,GAAGjD,CAAC,CAACL,CALV;IAAA,IAMImN,CAAC,GAAGlJ,CAAC,CAACjE,CANV,CADqB,CASrB;;IACA,IAAK,CAACC,CAAD,IAAM,CAACmH,CAAZ,EAAgB,OAAO,IAAP;IAEhBjF,CAAC,GAAG6B,EAAE,IAAI,CAACA,EAAE,CAAC,CAAD,CAAb;IACAlE,CAAC,GAAGuG,EAAE,IAAI,CAACA,EAAE,CAAC,CAAD,CAAb,CAbqB,CAerB;;IACA,IAAKlE,CAAC,IAAIrC,CAAV,EAAc,OAAOqC,CAAC,GAAGrC,CAAC,GAAG,CAAH,GAAO,CAACsH,CAAZ,GAAgBnH,CAAxB,CAhBO,CAkBrB;;IACA,IAAKA,CAAC,IAAImH,CAAV,EAAc,OAAOnH,CAAP;IAEdkC,CAAC,GAAGlC,CAAC,GAAG,CAAR;IACAH,CAAC,GAAGwD,CAAC,IAAI6J,CAAT,CAtBqB,CAwBrB;;IACA,IAAK,CAACnJ,EAAD,IAAO,CAACqC,EAAb,EAAkB,OAAOvG,CAAC,GAAG,CAAH,GAAO,CAACkE,EAAD,GAAM7B,CAAN,GAAU,CAAV,GAAc,CAAC,CAA9B,CAzBG,CA2BrB;;IACA,IAAK,CAACrC,CAAN,EAAU,OAAOwD,CAAC,GAAG6J,CAAJ,GAAQhL,CAAR,GAAY,CAAZ,GAAgB,CAAC,CAAxB;IAEViF,CAAC,GAAG,CAAE9D,CAAC,GAAGU,EAAE,CAAClD,MAAT,KAAsBqM,CAAC,GAAG9G,EAAE,CAACvF,MAA7B,IAAwCwC,CAAxC,GAA4C6J,CAAhD,CA9BqB,CAgCrB;;IACA,KAAMlN,CAAC,GAAG,CAAV,EAAaA,CAAC,GAAGmH,CAAjB,EAAoBnH,CAAC,EAArB,EAA0B,IAAK+D,EAAE,CAAC/D,CAAD,CAAF,IAASoG,EAAE,CAACpG,CAAD,CAAhB,EAAsB,OAAO+D,EAAE,CAAC/D,CAAD,CAAF,GAAQoG,EAAE,CAACpG,CAAD,CAAV,GAAgBkC,CAAhB,GAAoB,CAApB,GAAwB,CAAC,CAAhC,CAjC3B,CAmCrB;;;IACA,OAAOmB,CAAC,IAAI6J,CAAL,GAAS,CAAT,GAAa7J,CAAC,GAAG6J,CAAJ,GAAQhL,CAAR,GAAY,CAAZ,GAAgB,CAAC,CAArC;EACH;EAGD;AACJ;AACA;AACA;AACA;;;EACI,SAASM,oBAAT,CAA+B5C,CAA/B,EAAkCmD,GAAlC,EAAuCH,GAAvC,EAA6C;IACzC,OAAO,CAAEhD,CAAC,GAAGqH,QAAQ,CAACrH,CAAD,CAAd,KAAuBmD,GAAvB,IAA8BnD,CAAC,IAAIgD,GAA1C;EACH;;EAGD,SAASL,OAAT,CAAiB4K,GAAjB,EAAsB;IAClB,OAAOC,MAAM,CAAC7O,SAAP,CAAiBoI,QAAjB,CAA0BI,IAA1B,CAA+BoG,GAA/B,KAAuC,gBAA9C;EACH;EAGD;AACJ;AACA;AACA;AACA;;;EACI,SAAS/I,SAAT,CAAoBjE,GAApB,EAAyByD,MAAzB,EAAiCD,OAAjC,EAA2C;IACvC,IAAIwD,CAAJ;IAAA,IACIsE,GAAG,GAAG,CAAC,CAAD,CADV;IAAA,IAEI4B,IAFJ;IAAA,IAGIrN,CAAC,GAAG,CAHR;IAAA,IAIIE,GAAG,GAAGC,GAAG,CAACU,MAJd;;IAMA,OAAQb,CAAC,GAAGE,GAAZ,GAAmB;MACf,KAAMmN,IAAI,GAAG5B,GAAG,CAAC5K,MAAjB,EAAyBwM,IAAI,EAA7B,EAAiC5B,GAAG,CAAC4B,IAAD,CAAH,IAAazJ,MAA9C,CAAsD;;MACtD6H,GAAG,CAAEtE,CAAC,GAAG,CAAN,CAAH,IAAgBzJ,QAAQ,CAACqD,OAAT,CAAkBZ,GAAG,CAACqE,MAAJ,CAAYxE,CAAC,EAAb,CAAlB,CAAhB;;MAEA,OAAQmH,CAAC,GAAGsE,GAAG,CAAC5K,MAAhB,EAAwBsG,CAAC,EAAzB,EAA8B;QAE1B,IAAKsE,GAAG,CAACtE,CAAD,CAAH,GAASxD,OAAO,GAAG,CAAxB,EAA4B;UACxB,IAAK8H,GAAG,CAACtE,CAAC,GAAG,CAAL,CAAH,IAAc,IAAnB,EAA0BsE,GAAG,CAACtE,CAAC,GAAG,CAAL,CAAH,GAAa,CAAb;UAC1BsE,GAAG,CAACtE,CAAC,GAAG,CAAL,CAAH,IAAcsE,GAAG,CAACtE,CAAD,CAAH,GAASxD,OAAT,GAAmB,CAAjC;UACA8H,GAAG,CAACtE,CAAD,CAAH,IAAUxD,OAAV;QACH;MACJ;IACJ;;IAED,OAAO8H,GAAG,CAACxB,OAAJ,EAAP;EACH;;EAGD,SAASrD,aAAT,CAAwBzG,GAAxB,EAA6BJ,CAA7B,EAAiC;IAC7B,OAAO,CAAEI,GAAG,CAACU,MAAJ,GAAa,CAAb,GAAiBV,GAAG,CAACqE,MAAJ,CAAW,CAAX,IAAgB,GAAhB,GAAsBrE,GAAG,CAACI,KAAJ,CAAU,CAAV,CAAvC,GAAsDJ,GAAxD,KACHJ,CAAC,GAAG,CAAJ,GAAQ,GAAR,GAAc,IADX,IACoBA,CAD3B;EAEH;;EAGD,SAASsE,YAAT,CAAuBlE,GAAvB,EAA4BJ,CAA5B,EAAgC;IAC5B,IAAIG,GAAJ,EAASuK,CAAT,CAD4B,CAG5B;;IACA,IAAK1K,CAAC,GAAG,CAAT,EAAa;MAET;MACA,KAAM0K,CAAC,GAAG,IAAV,EAAgB,EAAE1K,CAAlB,EAAqB0K,CAAC,IAAI,GAA1B,CAA+B;;MAC/BtK,GAAG,GAAGsK,CAAC,GAAGtK,GAAV,CAJS,CAMb;IACC,CAPD,MAOO;MACHD,GAAG,GAAGC,GAAG,CAACU,MAAV,CADG,CAGH;;MACA,IAAK,EAAEd,CAAF,GAAMG,GAAX,EAAiB;QACb,KAAMuK,CAAC,GAAG,GAAJ,EAAS1K,CAAC,IAAIG,GAApB,EAAyB,EAAEH,CAA3B,EAA8B0K,CAAC,IAAI,GAAnC,CAAwC;;QACxCtK,GAAG,IAAIsK,CAAP;MACH,CAHD,MAGO,IAAK1K,CAAC,GAAGG,GAAT,EAAe;QAClBC,GAAG,GAAGA,GAAG,CAACI,KAAJ,CAAW,CAAX,EAAcR,CAAd,IAAoB,GAApB,GAA0BI,GAAG,CAACI,KAAJ,CAAUR,CAAV,CAAhC;MACH;IACJ;;IAED,OAAOI,GAAP;EACH;;EAGD,SAAS8G,QAAT,CAAkBrH,CAAlB,EAAqB;IACjBA,CAAC,GAAG+M,UAAU,CAAC/M,CAAD,CAAd;IACA,OAAOA,CAAC,GAAG,CAAJ,GAAQ1C,QAAQ,CAAC0C,CAAD,CAAhB,GAAsBvC,SAAS,CAACuC,CAAD,CAAtC;EACH,CAppFkB,CAupFnB;;;EAGA5C,SAAS,GAAGiB,kBAAkB,EAA9B;EACAjB,SAAS,CAAC,SAAD,CAAT,GAAuBA,SAAS,CAACA,SAAV,GAAsBA,SAA7C,CA3pFmB,CA8pFnB;;EACA,IAAK,OAAOsQ,MAAP,IAAiB,UAAjB,IAA+BA,MAAM,CAACC,GAA3C,EAAiD;IAC7CD,MAAM,CAAE,YAAY;MAAE,OAAOtQ,SAAP;IAAmB,CAAnC,CAAN,CAD6C,CAGjD;EACC,CAJD,MAIO,IAAK,OAAOwQ,MAAP,IAAiB,WAAjB,IAAgCA,MAAM,CAACC,OAA5C,EAAsD;IACzDD,MAAM,CAACC,OAAP,GAAiBzQ,SAAjB,CADyD,CAG7D;EACC,CAJM,MAIA;IACH,IAAK,CAACD,SAAN,EAAkBA,SAAS,GAAG,OAAO2Q,IAAP,IAAe,WAAf,GAA6BA,IAA7B,GAAoCC,QAAQ,CAAC,aAAD,CAAR,EAAhD;IAClB5Q,SAAS,CAACC,SAAV,GAAsBA,SAAtB;EACH;AACJ,CA3qFA,EA2qFE,IA3qFF"},"metadata":{},"sourceType":"script"}