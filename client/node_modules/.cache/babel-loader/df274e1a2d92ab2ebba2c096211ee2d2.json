{"ast":null,"code":"var index = typeof fetch == 'function' ? fetch.bind() : function (url, options) {\n  options = options || {};\n  return new Promise(function (resolve, reject) {\n    var request = new XMLHttpRequest();\n    request.open(options.method || 'get', url, true);\n\n    for (var i in options.headers) {\n      request.setRequestHeader(i, options.headers[i]);\n    }\n\n    request.withCredentials = options.credentials == 'include';\n\n    request.onload = function () {\n      resolve(response());\n    };\n\n    request.onerror = reject;\n    request.send(options.body || null);\n\n    function response() {\n      var keys = [],\n          all = [],\n          headers = {},\n          header;\n      request.getAllResponseHeaders().replace(/^(.*?):[^\\S\\n]*([\\s\\S]*?)$/gm, function (m, key, value) {\n        keys.push(key = key.toLowerCase());\n        all.push([key, value]);\n        header = headers[key];\n        headers[key] = header ? header + \",\" + value : value;\n      });\n      return {\n        ok: (request.status / 100 | 0) == 2,\n        // 200-299\n        status: request.status,\n        statusText: request.statusText,\n        url: request.responseURL,\n        clone: response,\n        text: function () {\n          return Promise.resolve(request.responseText);\n        },\n        json: function () {\n          return Promise.resolve(request.responseText).then(JSON.parse);\n        },\n        blob: function () {\n          return Promise.resolve(new Blob([request.response]));\n        },\n        headers: {\n          keys: function () {\n            return keys;\n          },\n          entries: function () {\n            return all;\n          },\n          get: function (n) {\n            return headers[n.toLowerCase()];\n          },\n          has: function (n) {\n            return n.toLowerCase() in headers;\n          }\n        }\n      };\n    }\n  });\n};\nexport default index;","map":{"version":3,"sources":["../src/index.js"],"names":["let"],"mappings":"AAAA,IAAA,KAAA,GAAe,OAAO,KAAP,IAAc,UAAd,GAA2B,KAAK,CAAC,IAAN,EAA3B,GAA0C,UAAS,GAAT,EAAc,OAAd,EAAuB;EAC/E,OAAO,GAAG,OAAO,IAAI,EAArB;EACA,OAAO,IAAI,OAAJ,CAAa,UAAC,OAAD,EAAU,MAAV,EAAkB;IACrCA,IAAI,OAAO,GAAG,IAAI,cAAJ,EAAdA;IAEA,OAAO,CAAC,IAAR,CAAa,OAAO,CAAC,MAAR,IAAkB,KAA/B,EAAsC,GAAtC,EAA2C,IAA3C;;IAEA,KAAKA,IAAI,CAAT,IAAc,OAAO,CAAC,OAAtB,EAA+B;MAC9B,OAAO,CAAC,gBAAR,CAAyB,CAAzB,EAA4B,OAAO,CAAC,OAAR,CAAgB,CAAhB,CAA5B;IACA;;IAED,OAAO,CAAC,eAAR,GAA0B,OAAO,CAAC,WAAR,IAAqB,SAA/C;;IAEA,OAAO,CAAC,MAAR,GAAiB,YAAG;MACnB,OAAO,CAAC,QAAQ,EAAT,CAAP;IACA,CAFD;;IAIA,OAAO,CAAC,OAAR,GAAkB,MAAlB;IAEA,OAAO,CAAC,IAAR,CAAa,OAAO,CAAC,IAAR,IAAgB,IAA7B;;IAEA,SAAS,QAAT,GAAoB;MACnBA,IAAI,IAAI,GAAG,EAAXA;MAAAA,IACC,GAAG,GAAG,EADPA;MAAAA,IAEC,OAAO,GAAG,EAFXA;MAAAA,IAGC,MAHDA;MAKA,OAAO,CAAC,qBAAR,GAAgC,OAAhC,CAAwC,8BAAxC,EAAwE,UAAC,CAAD,EAAI,GAAJ,EAAS,KAAT,EAAgB;QACvF,IAAI,CAAC,IAAL,CAAU,GAAG,GAAG,GAAG,CAAC,WAAJ,EAAhB;QACA,GAAG,CAAC,IAAJ,CAAS,CAAC,GAAD,EAAM,KAAN,CAAT;QACA,MAAM,GAAG,OAAO,CAAC,GAAD,CAAhB;QACA,OAAO,CAAC,GAAD,CAAP,GAAe,MAAM,GAAG,MAAS,GAAA,GAAT,GAAa,KAAhB,GAA0B,KAA/C;MACA,CALD;MAOA,OAAO;QACN,EAAE,EAAE,CAAC,OAAO,CAAC,MAAR,GAAe,GAAf,GAAmB,CAApB,KAA0B,CADxB;QACyB;QAC/B,MAAM,EAAE,OAAO,CAAC,MAFV;QAGN,UAAU,EAAE,OAAO,CAAC,UAHd;QAIN,GAAG,EAAE,OAAO,CAAC,WAJP;QAKN,KAAK,EAAE,QALD;QAMN,IAAI,EAAE,YAAG;UAAA,OAAG,OAAO,CAAC,OAAR,CAAgB,OAAO,CAAC,YAAxB,CAAH;QAAwC,CAN3C;QAON,IAAI,EAAE,YAAG;UAAA,OAAG,OAAO,CAAC,OAAR,CAAgB,OAAO,CAAC,YAAxB,EAAsC,IAAtC,CAA2C,IAAI,CAAC,KAAhD,CAAH;QAAyD,CAP5D;QAQN,IAAI,EAAE,YAAG;UAAA,OAAG,OAAO,CAAC,OAAR,CAAgB,IAAI,IAAJ,CAAS,CAAC,OAAO,CAAC,QAAT,CAAT,CAAhB,CAAH;QAAgD,CARnD;QASN,OAAO,EAAE;UACR,IAAI,EAAE,YAAG;YAAA,OAAG,IAAH;UAAO,CADR;UAER,OAAO,EAAE,YAAG;YAAA,OAAG,GAAH;UAAM,CAFV;UAGR,GAAG,EAAE,UAAA,CAAA,EAAE;YAAA,OAAG,OAAO,CAAC,CAAC,CAAC,WAAF,EAAD,CAAV;UAA2B,CAH1B;UAIR,GAAG,EAAE,UAAA,CAAA,EAAE;YAAA,OAAG,CAAC,CAAC,WAAF,MAAmB,OAAtB;UAA6B;QAJ5B;MATH,CAAP;IAgBA;EACD,CAjDM,CAAP;AAkDA,CApDD","sourcesContent":["export default typeof fetch=='function' ? fetch.bind() : function(url, options) {\n\toptions = options || {};\n\treturn new Promise( (resolve, reject) => {\n\t\tlet request = new XMLHttpRequest();\n\n\t\trequest.open(options.method || 'get', url, true);\n\n\t\tfor (let i in options.headers) {\n\t\t\trequest.setRequestHeader(i, options.headers[i]);\n\t\t}\n\n\t\trequest.withCredentials = options.credentials=='include';\n\n\t\trequest.onload = () => {\n\t\t\tresolve(response());\n\t\t};\n\n\t\trequest.onerror = reject;\n\n\t\trequest.send(options.body || null);\n\n\t\tfunction response() {\n\t\t\tlet keys = [],\n\t\t\t\tall = [],\n\t\t\t\theaders = {},\n\t\t\t\theader;\n\n\t\t\trequest.getAllResponseHeaders().replace(/^(.*?):[^\\S\\n]*([\\s\\S]*?)$/gm, (m, key, value) => {\n\t\t\t\tkeys.push(key = key.toLowerCase());\n\t\t\t\tall.push([key, value]);\n\t\t\t\theader = headers[key];\n\t\t\t\theaders[key] = header ? `${header},${value}` : value;\n\t\t\t});\n\n\t\t\treturn {\n\t\t\t\tok: (request.status/100|0) == 2,\t\t// 200-299\n\t\t\t\tstatus: request.status,\n\t\t\t\tstatusText: request.statusText,\n\t\t\t\turl: request.responseURL,\n\t\t\t\tclone: response,\n\t\t\t\ttext: () => Promise.resolve(request.responseText),\n\t\t\t\tjson: () => Promise.resolve(request.responseText).then(JSON.parse),\n\t\t\t\tblob: () => Promise.resolve(new Blob([request.response])),\n\t\t\t\theaders: {\n\t\t\t\t\tkeys: () => keys,\n\t\t\t\t\tentries: () => all,\n\t\t\t\t\tget: n => headers[n.toLowerCase()],\n\t\t\t\t\thas: n => n.toLowerCase() in headers\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\t});\n}\n"]},"metadata":{},"sourceType":"module"}