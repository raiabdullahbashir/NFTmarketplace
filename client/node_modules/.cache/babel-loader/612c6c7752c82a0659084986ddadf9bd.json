{"ast":null,"code":"\"use strict\";\n\nvar urilib = require('url');\n\nvar helpers = require('./helpers');\n\nmodule.exports.SchemaScanResult = SchemaScanResult;\n\nfunction SchemaScanResult(found, ref) {\n  this.id = found;\n  this.ref = ref;\n}\n/**\n * Adds a schema with a certain urn to the Validator instance.\n * @param string uri\n * @param object schema\n * @return {Object}\n */\n\n\nmodule.exports.scan = function scan(base, schema) {\n  function scanSchema(baseuri, schema) {\n    if (!schema || typeof schema != 'object') return; // Mark all referenced schemas so we can tell later which schemas are referred to, but never defined\n\n    if (schema.$ref) {\n      var resolvedUri = urilib.resolve(baseuri, schema.$ref);\n      ref[resolvedUri] = ref[resolvedUri] ? ref[resolvedUri] + 1 : 0;\n      return;\n    }\n\n    var id = schema.$id || schema.id;\n    var ourBase = id ? urilib.resolve(baseuri, id) : baseuri;\n\n    if (ourBase) {\n      // If there's no fragment, append an empty one\n      if (ourBase.indexOf('#') < 0) ourBase += '#';\n\n      if (found[ourBase]) {\n        if (!helpers.deepCompareStrict(found[ourBase], schema)) {\n          throw new Error('Schema <' + ourBase + '> already exists with different definition');\n        }\n\n        return found[ourBase];\n      }\n\n      found[ourBase] = schema; // strip trailing fragment\n\n      if (ourBase[ourBase.length - 1] == '#') {\n        found[ourBase.substring(0, ourBase.length - 1)] = schema;\n      }\n    }\n\n    scanArray(ourBase + '/items', Array.isArray(schema.items) ? schema.items : [schema.items]);\n    scanArray(ourBase + '/extends', Array.isArray(schema.extends) ? schema.extends : [schema.extends]);\n    scanSchema(ourBase + '/additionalItems', schema.additionalItems);\n    scanObject(ourBase + '/properties', schema.properties);\n    scanSchema(ourBase + '/additionalProperties', schema.additionalProperties);\n    scanObject(ourBase + '/definitions', schema.definitions);\n    scanObject(ourBase + '/patternProperties', schema.patternProperties);\n    scanObject(ourBase + '/dependencies', schema.dependencies);\n    scanArray(ourBase + '/disallow', schema.disallow);\n    scanArray(ourBase + '/allOf', schema.allOf);\n    scanArray(ourBase + '/anyOf', schema.anyOf);\n    scanArray(ourBase + '/oneOf', schema.oneOf);\n    scanSchema(ourBase + '/not', schema.not);\n  }\n\n  function scanArray(baseuri, schemas) {\n    if (!Array.isArray(schemas)) return;\n\n    for (var i = 0; i < schemas.length; i++) {\n      scanSchema(baseuri + '/' + i, schemas[i]);\n    }\n  }\n\n  function scanObject(baseuri, schemas) {\n    if (!schemas || typeof schemas != 'object') return;\n\n    for (var p in schemas) {\n      scanSchema(baseuri + '/' + p, schemas[p]);\n    }\n  }\n\n  var found = {};\n  var ref = {};\n  scanSchema(base, schema);\n  return new SchemaScanResult(found, ref);\n};","map":{"version":3,"names":["urilib","require","helpers","module","exports","SchemaScanResult","found","ref","id","scan","base","schema","scanSchema","baseuri","$ref","resolvedUri","resolve","$id","ourBase","indexOf","deepCompareStrict","Error","length","substring","scanArray","Array","isArray","items","extends","additionalItems","scanObject","properties","additionalProperties","definitions","patternProperties","dependencies","disallow","allOf","anyOf","oneOf","not","schemas","i","p"],"sources":["C:/Users/raiab/Documents/Logics Yard/NFT code daniyal/NFT code/node_modules/jsonschema/lib/scan.js"],"sourcesContent":["\"use strict\";\n\nvar urilib = require('url');\nvar helpers = require('./helpers');\n\nmodule.exports.SchemaScanResult = SchemaScanResult;\nfunction SchemaScanResult(found, ref){\n  this.id = found;\n  this.ref = ref;\n}\n\n/**\n * Adds a schema with a certain urn to the Validator instance.\n * @param string uri\n * @param object schema\n * @return {Object}\n */\nmodule.exports.scan = function scan(base, schema){\n  function scanSchema(baseuri, schema){\n    if(!schema || typeof schema!='object') return;\n    // Mark all referenced schemas so we can tell later which schemas are referred to, but never defined\n    if(schema.$ref){\n      var resolvedUri = urilib.resolve(baseuri, schema.$ref);\n      ref[resolvedUri] = ref[resolvedUri] ? ref[resolvedUri]+1 : 0;\n      return;\n    }\n    var id = schema.$id || schema.id;\n    var ourBase = id ? urilib.resolve(baseuri, id) : baseuri;\n    if (ourBase) {\n      // If there's no fragment, append an empty one\n      if(ourBase.indexOf('#')<0) ourBase += '#';\n      if(found[ourBase]){\n        if(!helpers.deepCompareStrict(found[ourBase], schema)){\n          throw new Error('Schema <'+ourBase+'> already exists with different definition');\n        }\n        return found[ourBase];\n      }\n      found[ourBase] = schema;\n      // strip trailing fragment\n      if(ourBase[ourBase.length-1]=='#'){\n        found[ourBase.substring(0, ourBase.length-1)] = schema;\n      }\n    }\n    scanArray(ourBase+'/items', (Array.isArray(schema.items)?schema.items:[schema.items]));\n    scanArray(ourBase+'/extends', (Array.isArray(schema.extends)?schema.extends:[schema.extends]));\n    scanSchema(ourBase+'/additionalItems', schema.additionalItems);\n    scanObject(ourBase+'/properties', schema.properties);\n    scanSchema(ourBase+'/additionalProperties', schema.additionalProperties);\n    scanObject(ourBase+'/definitions', schema.definitions);\n    scanObject(ourBase+'/patternProperties', schema.patternProperties);\n    scanObject(ourBase+'/dependencies', schema.dependencies);\n    scanArray(ourBase+'/disallow', schema.disallow);\n    scanArray(ourBase+'/allOf', schema.allOf);\n    scanArray(ourBase+'/anyOf', schema.anyOf);\n    scanArray(ourBase+'/oneOf', schema.oneOf);\n    scanSchema(ourBase+'/not', schema.not);\n  }\n  function scanArray(baseuri, schemas){\n    if(!Array.isArray(schemas)) return;\n    for(var i=0; i<schemas.length; i++){\n      scanSchema(baseuri+'/'+i, schemas[i]);\n    }\n  }\n  function scanObject(baseuri, schemas){\n    if(!schemas || typeof schemas!='object') return;\n    for(var p in schemas){\n      scanSchema(baseuri+'/'+p, schemas[p]);\n    }\n  }\n\n  var found = {};\n  var ref = {};\n  scanSchema(base, schema);\n  return new SchemaScanResult(found, ref);\n};\n"],"mappings":"AAAA;;AAEA,IAAIA,MAAM,GAAGC,OAAO,CAAC,KAAD,CAApB;;AACA,IAAIC,OAAO,GAAGD,OAAO,CAAC,WAAD,CAArB;;AAEAE,MAAM,CAACC,OAAP,CAAeC,gBAAf,GAAkCA,gBAAlC;;AACA,SAASA,gBAAT,CAA0BC,KAA1B,EAAiCC,GAAjC,EAAqC;EACnC,KAAKC,EAAL,GAAUF,KAAV;EACA,KAAKC,GAAL,GAAWA,GAAX;AACD;AAED;AACA;AACA;AACA;AACA;AACA;;;AACAJ,MAAM,CAACC,OAAP,CAAeK,IAAf,GAAsB,SAASA,IAAT,CAAcC,IAAd,EAAoBC,MAApB,EAA2B;EAC/C,SAASC,UAAT,CAAoBC,OAApB,EAA6BF,MAA7B,EAAoC;IAClC,IAAG,CAACA,MAAD,IAAW,OAAOA,MAAP,IAAe,QAA7B,EAAuC,OADL,CAElC;;IACA,IAAGA,MAAM,CAACG,IAAV,EAAe;MACb,IAAIC,WAAW,GAAGf,MAAM,CAACgB,OAAP,CAAeH,OAAf,EAAwBF,MAAM,CAACG,IAA/B,CAAlB;MACAP,GAAG,CAACQ,WAAD,CAAH,GAAmBR,GAAG,CAACQ,WAAD,CAAH,GAAmBR,GAAG,CAACQ,WAAD,CAAH,GAAiB,CAApC,GAAwC,CAA3D;MACA;IACD;;IACD,IAAIP,EAAE,GAAGG,MAAM,CAACM,GAAP,IAAcN,MAAM,CAACH,EAA9B;IACA,IAAIU,OAAO,GAAGV,EAAE,GAAGR,MAAM,CAACgB,OAAP,CAAeH,OAAf,EAAwBL,EAAxB,CAAH,GAAiCK,OAAjD;;IACA,IAAIK,OAAJ,EAAa;MACX;MACA,IAAGA,OAAO,CAACC,OAAR,CAAgB,GAAhB,IAAqB,CAAxB,EAA2BD,OAAO,IAAI,GAAX;;MAC3B,IAAGZ,KAAK,CAACY,OAAD,CAAR,EAAkB;QAChB,IAAG,CAAChB,OAAO,CAACkB,iBAAR,CAA0Bd,KAAK,CAACY,OAAD,CAA/B,EAA0CP,MAA1C,CAAJ,EAAsD;UACpD,MAAM,IAAIU,KAAJ,CAAU,aAAWH,OAAX,GAAmB,4CAA7B,CAAN;QACD;;QACD,OAAOZ,KAAK,CAACY,OAAD,CAAZ;MACD;;MACDZ,KAAK,CAACY,OAAD,CAAL,GAAiBP,MAAjB,CATW,CAUX;;MACA,IAAGO,OAAO,CAACA,OAAO,CAACI,MAAR,GAAe,CAAhB,CAAP,IAA2B,GAA9B,EAAkC;QAChChB,KAAK,CAACY,OAAO,CAACK,SAAR,CAAkB,CAAlB,EAAqBL,OAAO,CAACI,MAAR,GAAe,CAApC,CAAD,CAAL,GAAgDX,MAAhD;MACD;IACF;;IACDa,SAAS,CAACN,OAAO,GAAC,QAAT,EAAoBO,KAAK,CAACC,OAAN,CAAcf,MAAM,CAACgB,KAArB,IAA4BhB,MAAM,CAACgB,KAAnC,GAAyC,CAAChB,MAAM,CAACgB,KAAR,CAA7D,CAAT;IACAH,SAAS,CAACN,OAAO,GAAC,UAAT,EAAsBO,KAAK,CAACC,OAAN,CAAcf,MAAM,CAACiB,OAArB,IAA8BjB,MAAM,CAACiB,OAArC,GAA6C,CAACjB,MAAM,CAACiB,OAAR,CAAnE,CAAT;IACAhB,UAAU,CAACM,OAAO,GAAC,kBAAT,EAA6BP,MAAM,CAACkB,eAApC,CAAV;IACAC,UAAU,CAACZ,OAAO,GAAC,aAAT,EAAwBP,MAAM,CAACoB,UAA/B,CAAV;IACAnB,UAAU,CAACM,OAAO,GAAC,uBAAT,EAAkCP,MAAM,CAACqB,oBAAzC,CAAV;IACAF,UAAU,CAACZ,OAAO,GAAC,cAAT,EAAyBP,MAAM,CAACsB,WAAhC,CAAV;IACAH,UAAU,CAACZ,OAAO,GAAC,oBAAT,EAA+BP,MAAM,CAACuB,iBAAtC,CAAV;IACAJ,UAAU,CAACZ,OAAO,GAAC,eAAT,EAA0BP,MAAM,CAACwB,YAAjC,CAAV;IACAX,SAAS,CAACN,OAAO,GAAC,WAAT,EAAsBP,MAAM,CAACyB,QAA7B,CAAT;IACAZ,SAAS,CAACN,OAAO,GAAC,QAAT,EAAmBP,MAAM,CAAC0B,KAA1B,CAAT;IACAb,SAAS,CAACN,OAAO,GAAC,QAAT,EAAmBP,MAAM,CAAC2B,KAA1B,CAAT;IACAd,SAAS,CAACN,OAAO,GAAC,QAAT,EAAmBP,MAAM,CAAC4B,KAA1B,CAAT;IACA3B,UAAU,CAACM,OAAO,GAAC,MAAT,EAAiBP,MAAM,CAAC6B,GAAxB,CAAV;EACD;;EACD,SAAShB,SAAT,CAAmBX,OAAnB,EAA4B4B,OAA5B,EAAoC;IAClC,IAAG,CAAChB,KAAK,CAACC,OAAN,CAAce,OAAd,CAAJ,EAA4B;;IAC5B,KAAI,IAAIC,CAAC,GAAC,CAAV,EAAaA,CAAC,GAACD,OAAO,CAACnB,MAAvB,EAA+BoB,CAAC,EAAhC,EAAmC;MACjC9B,UAAU,CAACC,OAAO,GAAC,GAAR,GAAY6B,CAAb,EAAgBD,OAAO,CAACC,CAAD,CAAvB,CAAV;IACD;EACF;;EACD,SAASZ,UAAT,CAAoBjB,OAApB,EAA6B4B,OAA7B,EAAqC;IACnC,IAAG,CAACA,OAAD,IAAY,OAAOA,OAAP,IAAgB,QAA/B,EAAyC;;IACzC,KAAI,IAAIE,CAAR,IAAaF,OAAb,EAAqB;MACnB7B,UAAU,CAACC,OAAO,GAAC,GAAR,GAAY8B,CAAb,EAAgBF,OAAO,CAACE,CAAD,CAAvB,CAAV;IACD;EACF;;EAED,IAAIrC,KAAK,GAAG,EAAZ;EACA,IAAIC,GAAG,GAAG,EAAV;EACAK,UAAU,CAACF,IAAD,EAAOC,MAAP,CAAV;EACA,OAAO,IAAIN,gBAAJ,CAAqBC,KAArB,EAA4BC,GAA5B,CAAP;AACD,CAzDD"},"metadata":{},"sourceType":"script"}