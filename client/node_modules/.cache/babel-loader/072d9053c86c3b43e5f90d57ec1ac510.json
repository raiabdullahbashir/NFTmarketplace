{"ast":null,"code":"/*\n    This file is part of web3.js.\n\n    web3.js is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    web3.js is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\n/** @file syncing.js\n * @authors:\n *   Fabian Vogelsteller <fabian@ethdev.com>\n * @date 2015\n */\nvar formatters = require('./formatters');\n\nvar utils = require('../utils/utils');\n\nvar count = 1;\n/**\nAdds the callback and sets up the methods, to iterate over the results.\n\n@method pollSyncing\n@param {Object} self\n*/\n\nvar pollSyncing = function (self) {\n  var onMessage = function (error, sync) {\n    if (error) {\n      return self.callbacks.forEach(function (callback) {\n        callback(error);\n      });\n    }\n\n    if (utils.isObject(sync) && sync.startingBlock) sync = formatters.outputSyncingFormatter(sync);\n    self.callbacks.forEach(function (callback) {\n      if (self.lastSyncState !== sync) {\n        // call the callback with true first so the app can stop anything, before receiving the sync data\n        if (!self.lastSyncState && utils.isObject(sync)) callback(null, true); // call on the next CPU cycle, so the actions of the sync stop can be processes first\n\n        setTimeout(function () {\n          callback(null, sync);\n        }, 0);\n        self.lastSyncState = sync;\n      }\n    });\n  };\n\n  self.requestManager.startPolling({\n    method: 'eth_syncing',\n    params: []\n  }, self.pollId, onMessage, self.stopWatching.bind(self));\n};\n\nvar IsSyncing = function (requestManager, callback) {\n  this.requestManager = requestManager;\n  this.pollId = 'syncPoll_' + count++;\n  this.callbacks = [];\n  this.addCallback(callback);\n  this.lastSyncState = false;\n  pollSyncing(this);\n  return this;\n};\n\nIsSyncing.prototype.addCallback = function (callback) {\n  if (callback) this.callbacks.push(callback);\n  return this;\n};\n\nIsSyncing.prototype.stopWatching = function () {\n  this.requestManager.stopPolling(this.pollId);\n  this.callbacks = [];\n};\n\nmodule.exports = IsSyncing;","map":{"version":3,"names":["formatters","require","utils","count","pollSyncing","self","onMessage","error","sync","callbacks","forEach","callback","isObject","startingBlock","outputSyncingFormatter","lastSyncState","setTimeout","requestManager","startPolling","method","params","pollId","stopWatching","bind","IsSyncing","addCallback","prototype","push","stopPolling","module","exports"],"sources":["C:/Users/raiab/Documents/Logics Yard/NFT code daniyal/NFT code/node_modules/@0xproject/assert/node_modules/web3/lib/web3/syncing.js"],"sourcesContent":["/*\n    This file is part of web3.js.\n\n    web3.js is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    web3.js is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n/** @file syncing.js\n * @authors:\n *   Fabian Vogelsteller <fabian@ethdev.com>\n * @date 2015\n */\n\nvar formatters = require('./formatters');\nvar utils = require('../utils/utils');\n\nvar count = 1;\n\n/**\nAdds the callback and sets up the methods, to iterate over the results.\n\n@method pollSyncing\n@param {Object} self\n*/\nvar pollSyncing = function(self) {\n\n    var onMessage = function (error, sync) {\n        if (error) {\n            return self.callbacks.forEach(function (callback) {\n                callback(error);\n            });\n        }\n\n        if(utils.isObject(sync) && sync.startingBlock)\n            sync = formatters.outputSyncingFormatter(sync);\n\n        self.callbacks.forEach(function (callback) {\n            if (self.lastSyncState !== sync) {\n                \n                // call the callback with true first so the app can stop anything, before receiving the sync data\n                if(!self.lastSyncState && utils.isObject(sync))\n                    callback(null, true);\n                \n                // call on the next CPU cycle, so the actions of the sync stop can be processes first\n                setTimeout(function() {\n                    callback(null, sync);\n                }, 0);\n                \n                self.lastSyncState = sync;\n            }\n        });\n    };\n\n    self.requestManager.startPolling({\n        method: 'eth_syncing',\n        params: [],\n    }, self.pollId, onMessage, self.stopWatching.bind(self));\n\n};\n\nvar IsSyncing = function (requestManager, callback) {\n    this.requestManager = requestManager;\n    this.pollId = 'syncPoll_'+ count++;\n    this.callbacks = [];\n    this.addCallback(callback);\n    this.lastSyncState = false;\n    pollSyncing(this);\n\n    return this;\n};\n\nIsSyncing.prototype.addCallback = function (callback) {\n    if(callback)\n        this.callbacks.push(callback);\n    return this;\n};\n\nIsSyncing.prototype.stopWatching = function () {\n    this.requestManager.stopPolling(this.pollId);\n    this.callbacks = [];\n};\n\nmodule.exports = IsSyncing;\n\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AAEA,IAAIA,UAAU,GAAGC,OAAO,CAAC,cAAD,CAAxB;;AACA,IAAIC,KAAK,GAAGD,OAAO,CAAC,gBAAD,CAAnB;;AAEA,IAAIE,KAAK,GAAG,CAAZ;AAEA;AACA;AACA;AACA;AACA;AACA;;AACA,IAAIC,WAAW,GAAG,UAASC,IAAT,EAAe;EAE7B,IAAIC,SAAS,GAAG,UAAUC,KAAV,EAAiBC,IAAjB,EAAuB;IACnC,IAAID,KAAJ,EAAW;MACP,OAAOF,IAAI,CAACI,SAAL,CAAeC,OAAf,CAAuB,UAAUC,QAAV,EAAoB;QAC9CA,QAAQ,CAACJ,KAAD,CAAR;MACH,CAFM,CAAP;IAGH;;IAED,IAAGL,KAAK,CAACU,QAAN,CAAeJ,IAAf,KAAwBA,IAAI,CAACK,aAAhC,EACIL,IAAI,GAAGR,UAAU,CAACc,sBAAX,CAAkCN,IAAlC,CAAP;IAEJH,IAAI,CAACI,SAAL,CAAeC,OAAf,CAAuB,UAAUC,QAAV,EAAoB;MACvC,IAAIN,IAAI,CAACU,aAAL,KAAuBP,IAA3B,EAAiC;QAE7B;QACA,IAAG,CAACH,IAAI,CAACU,aAAN,IAAuBb,KAAK,CAACU,QAAN,CAAeJ,IAAf,CAA1B,EACIG,QAAQ,CAAC,IAAD,EAAO,IAAP,CAAR,CAJyB,CAM7B;;QACAK,UAAU,CAAC,YAAW;UAClBL,QAAQ,CAAC,IAAD,EAAOH,IAAP,CAAR;QACH,CAFS,EAEP,CAFO,CAAV;QAIAH,IAAI,CAACU,aAAL,GAAqBP,IAArB;MACH;IACJ,CAdD;EAeH,CAzBD;;EA2BAH,IAAI,CAACY,cAAL,CAAoBC,YAApB,CAAiC;IAC7BC,MAAM,EAAE,aADqB;IAE7BC,MAAM,EAAE;EAFqB,CAAjC,EAGGf,IAAI,CAACgB,MAHR,EAGgBf,SAHhB,EAG2BD,IAAI,CAACiB,YAAL,CAAkBC,IAAlB,CAAuBlB,IAAvB,CAH3B;AAKH,CAlCD;;AAoCA,IAAImB,SAAS,GAAG,UAAUP,cAAV,EAA0BN,QAA1B,EAAoC;EAChD,KAAKM,cAAL,GAAsBA,cAAtB;EACA,KAAKI,MAAL,GAAc,cAAalB,KAAK,EAAhC;EACA,KAAKM,SAAL,GAAiB,EAAjB;EACA,KAAKgB,WAAL,CAAiBd,QAAjB;EACA,KAAKI,aAAL,GAAqB,KAArB;EACAX,WAAW,CAAC,IAAD,CAAX;EAEA,OAAO,IAAP;AACH,CATD;;AAWAoB,SAAS,CAACE,SAAV,CAAoBD,WAApB,GAAkC,UAAUd,QAAV,EAAoB;EAClD,IAAGA,QAAH,EACI,KAAKF,SAAL,CAAekB,IAAf,CAAoBhB,QAApB;EACJ,OAAO,IAAP;AACH,CAJD;;AAMAa,SAAS,CAACE,SAAV,CAAoBJ,YAApB,GAAmC,YAAY;EAC3C,KAAKL,cAAL,CAAoBW,WAApB,CAAgC,KAAKP,MAArC;EACA,KAAKZ,SAAL,GAAiB,EAAjB;AACH,CAHD;;AAKAoB,MAAM,CAACC,OAAP,GAAiBN,SAAjB"},"metadata":{},"sourceType":"script"}