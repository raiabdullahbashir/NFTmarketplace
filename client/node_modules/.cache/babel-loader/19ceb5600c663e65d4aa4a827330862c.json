{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : new P(function (resolve) {\n        resolve(result.value);\n      }).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst Web3 = require(\"web3\");\n\nconst types_1 = require(\"../../types\");\n\nexports.ERC1155Schema = {\n  version: 1,\n  deploymentBlock: 0,\n  name: 'ERC1155',\n  description: 'Items conforming to the ERC1155 spec, using transferFrom.',\n  thumbnail: 'https://opensea.io/static/images/opensea-icon.png',\n  website: 'https://github.com/ethereum/eips/issues/1155',\n  fields: [{\n    name: 'ID',\n    type: 'uint256',\n    description: 'Asset Token ID'\n  }, {\n    name: 'Address',\n    type: 'address',\n    description: 'Asset Contract Address'\n  }, {\n    name: 'Quantity',\n    type: 'uint256',\n    description: 'Quantity to transfer'\n  }],\n  assetFromFields: fields => ({\n    id: fields.ID,\n    address: fields.Address,\n    quantity: fields.Quantity\n  }),\n  assetToFields: asset => ({\n    ID: asset.id,\n    Address: asset.address,\n    Quantity: asset.quantity\n  }),\n  formatter: asset => __awaiter(this, void 0, void 0, function* () {\n    return {\n      title: 'ERC1155 Asset: Token ID ' + asset.id + ' at ' + asset.address,\n      description: 'Trading ' + asset.quantity.toString(),\n      url: '',\n      thumbnail: '',\n      properties: []\n    };\n  }),\n  functions: {\n    transfer: asset => ({\n      type: Web3.AbiType.Function,\n      name: 'safeTransferFrom',\n      payable: false,\n      constant: false,\n      stateMutability: types_1.StateMutability.Nonpayable,\n      target: asset.address,\n      inputs: [{\n        kind: types_1.FunctionInputKind.Owner,\n        name: '_from',\n        type: 'address'\n      }, {\n        kind: types_1.FunctionInputKind.Replaceable,\n        name: '_to',\n        type: 'address'\n      }, {\n        kind: types_1.FunctionInputKind.Asset,\n        name: '_id',\n        type: 'uint256',\n        value: asset.id\n      }, {\n        kind: types_1.FunctionInputKind.Count,\n        name: '_value',\n        type: 'uint256',\n        value: asset.quantity\n      }, {\n        kind: types_1.FunctionInputKind.Data,\n        name: '_data',\n        type: 'bytes',\n        value: ''\n      }],\n      outputs: []\n    }),\n    countOf: asset => ({\n      type: Web3.AbiType.Function,\n      name: 'balanceOf',\n      payable: false,\n      constant: true,\n      stateMutability: types_1.StateMutability.View,\n      target: asset.address,\n      inputs: [{\n        kind: types_1.FunctionInputKind.Owner,\n        name: '_owner',\n        type: 'address'\n      }, {\n        kind: types_1.FunctionInputKind.Asset,\n        name: '_id',\n        type: 'uint256',\n        value: asset.id\n      }],\n      outputs: [{\n        kind: types_1.FunctionOutputKind.Count,\n        name: 'balance',\n        type: 'uint'\n      }],\n      assetFromOutputs: outputs => outputs.balance\n    }),\n    assetsOfOwnerByIndex: []\n  },\n  events: {\n    transfer: []\n  },\n  hash: asset => asset.address + '-' + asset.id\n};","map":{"version":3,"sources":["../../../src/schemas/ERC1155/index.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\r\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst Web3 = require(\"web3\");\r\nconst types_1 = require(\"../../types\");\r\nexports.ERC1155Schema = {\r\n    version: 1,\r\n    deploymentBlock: 0,\r\n    name: 'ERC1155',\r\n    description: 'Items conforming to the ERC1155 spec, using transferFrom.',\r\n    thumbnail: 'https://opensea.io/static/images/opensea-icon.png',\r\n    website: 'https://github.com/ethereum/eips/issues/1155',\r\n    fields: [\r\n        { name: 'ID', type: 'uint256', description: 'Asset Token ID' },\r\n        { name: 'Address', type: 'address', description: 'Asset Contract Address' },\r\n        { name: 'Quantity', type: 'uint256', description: 'Quantity to transfer' },\r\n    ],\r\n    assetFromFields: (fields) => ({\r\n        id: fields.ID,\r\n        address: fields.Address,\r\n        quantity: fields.Quantity,\r\n    }),\r\n    assetToFields: asset => ({\r\n        ID: asset.id,\r\n        Address: asset.address,\r\n        Quantity: asset.quantity,\r\n    }),\r\n    formatter: (asset) => __awaiter(this, void 0, void 0, function* () {\r\n        return {\r\n            title: 'ERC1155 Asset: Token ID ' + asset.id + ' at ' + asset.address,\r\n            description: 'Trading ' + asset.quantity.toString(),\r\n            url: '',\r\n            thumbnail: '',\r\n            properties: [],\r\n        };\r\n    }),\r\n    functions: {\r\n        transfer: asset => ({\r\n            type: Web3.AbiType.Function,\r\n            name: 'safeTransferFrom',\r\n            payable: false,\r\n            constant: false,\r\n            stateMutability: types_1.StateMutability.Nonpayable,\r\n            target: asset.address,\r\n            inputs: [\r\n                { kind: types_1.FunctionInputKind.Owner, name: '_from', type: 'address' },\r\n                { kind: types_1.FunctionInputKind.Replaceable, name: '_to', type: 'address' },\r\n                { kind: types_1.FunctionInputKind.Asset, name: '_id', type: 'uint256', value: asset.id },\r\n                { kind: types_1.FunctionInputKind.Count, name: '_value', type: 'uint256', value: asset.quantity },\r\n                { kind: types_1.FunctionInputKind.Data, name: '_data', type: 'bytes', value: '' },\r\n            ],\r\n            outputs: [],\r\n        }),\r\n        countOf: asset => ({\r\n            type: Web3.AbiType.Function,\r\n            name: 'balanceOf',\r\n            payable: false,\r\n            constant: true,\r\n            stateMutability: types_1.StateMutability.View,\r\n            target: asset.address,\r\n            inputs: [\r\n                { kind: types_1.FunctionInputKind.Owner, name: '_owner', type: 'address' },\r\n                { kind: types_1.FunctionInputKind.Asset, name: '_id', type: 'uint256', value: asset.id },\r\n            ],\r\n            outputs: [\r\n                { kind: types_1.FunctionOutputKind.Count, name: 'balance', type: 'uint' },\r\n            ],\r\n            assetFromOutputs: (outputs) => outputs.balance,\r\n        }),\r\n        assetsOfOwnerByIndex: [],\r\n    },\r\n    events: {\r\n        transfer: [],\r\n    },\r\n    hash: asset => asset.address + '-' + asset.id,\r\n};\r\n//# sourceMappingURL=index.js.map"]},"metadata":{},"sourceType":"script"}