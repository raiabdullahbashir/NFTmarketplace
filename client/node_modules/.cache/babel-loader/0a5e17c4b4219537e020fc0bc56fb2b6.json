{"ast":null,"code":"import { applyDistance, applyPath, getProximitySpeedFactor, spin } from \"./Utils\";\nimport { getDistance, getRangeMax, getRangeValue } from \"../../Utils/NumberUtils\";\nexport class BaseMover {\n  init(particle) {\n    var _a;\n\n    const container = particle.container,\n          options = particle.options,\n          spinOptions = options.move.spin;\n\n    if (spinOptions.enable) {\n      const spinPos = (_a = spinOptions.position) !== null && _a !== void 0 ? _a : {\n        x: 50,\n        y: 50\n      };\n      const spinCenter = {\n        x: spinPos.x / 100 * container.canvas.size.width,\n        y: spinPos.y / 100 * container.canvas.size.height\n      };\n      const pos = particle.getPosition();\n      const distance = getDistance(pos, spinCenter);\n      const spinAcceleration = getRangeValue(spinOptions.acceleration);\n      particle.retina.spinAcceleration = spinAcceleration * container.retina.pixelRatio;\n      particle.spin = {\n        center: spinCenter,\n        direction: particle.velocity.x >= 0 ? \"clockwise\" : \"counter-clockwise\",\n        angle: particle.velocity.angle,\n        radius: distance,\n        acceleration: particle.retina.spinAcceleration\n      };\n    }\n  }\n\n  isEnabled(particle) {\n    return !particle.destroyed && particle.options.move.enable;\n  }\n\n  move(particle, delta) {\n    var _a, _b, _c;\n\n    var _d, _e;\n\n    const particleOptions = particle.options,\n          moveOptions = particleOptions.move;\n\n    if (!moveOptions.enable) {\n      return;\n    }\n\n    const container = particle.container,\n          slowFactor = getProximitySpeedFactor(particle),\n          baseSpeed = ((_a = (_d = particle.retina).moveSpeed) !== null && _a !== void 0 ? _a : _d.moveSpeed = getRangeValue(moveOptions.speed) * container.retina.pixelRatio) * container.retina.reduceFactor,\n          moveDrift = (_b = (_e = particle.retina).moveDrift) !== null && _b !== void 0 ? _b : _e.moveDrift = getRangeValue(particle.options.move.drift) * container.retina.pixelRatio,\n          maxSize = getRangeMax(particleOptions.size.value) * container.retina.pixelRatio,\n          sizeFactor = moveOptions.size ? particle.getRadius() / maxSize : 1,\n          speedFactor = sizeFactor * slowFactor * (delta.factor || 1),\n          diffFactor = 2,\n          moveSpeed = baseSpeed * speedFactor / diffFactor;\n    applyPath(particle, delta);\n    const gravityOptions = particle.gravity,\n          gravityFactor = gravityOptions.enable && gravityOptions.inverse ? -1 : 1;\n\n    if (gravityOptions.enable && moveSpeed) {\n      particle.velocity.y += gravityFactor * (gravityOptions.acceleration * delta.factor) / (60 * moveSpeed);\n    }\n\n    if (moveDrift && moveSpeed) {\n      particle.velocity.x += moveDrift * delta.factor / (60 * moveSpeed);\n    }\n\n    const decay = particle.moveDecay;\n\n    if (decay != 1) {\n      particle.velocity.multTo(decay);\n    }\n\n    const velocity = particle.velocity.mult(moveSpeed),\n          maxSpeed = (_c = particle.retina.maxSpeed) !== null && _c !== void 0 ? _c : container.retina.maxSpeed;\n\n    if (gravityOptions.enable && maxSpeed > 0 && (!gravityOptions.inverse && velocity.y >= 0 && velocity.y >= maxSpeed || gravityOptions.inverse && velocity.y <= 0 && velocity.y <= -maxSpeed)) {\n      velocity.y = gravityFactor * maxSpeed;\n\n      if (moveSpeed) {\n        particle.velocity.y = velocity.y / moveSpeed;\n      }\n    }\n\n    const zIndexOptions = particle.options.zIndex,\n          zVelocityFactor = (1 - particle.zIndexFactor) ** zIndexOptions.velocityRate;\n\n    if (moveOptions.spin.enable) {\n      spin(particle, moveSpeed);\n    } else {\n      if (zVelocityFactor != 1) {\n        velocity.multTo(zVelocityFactor);\n      }\n\n      particle.position.addTo(velocity);\n\n      if (moveOptions.vibrate) {\n        particle.position.x += Math.sin(particle.position.x * Math.cos(particle.position.y));\n        particle.position.y += Math.cos(particle.position.y * Math.sin(particle.position.x));\n      }\n    }\n\n    applyDistance(particle);\n  }\n\n}","map":{"version":3,"names":["applyDistance","applyPath","getProximitySpeedFactor","spin","getDistance","getRangeMax","getRangeValue","BaseMover","init","particle","_a","container","options","spinOptions","move","enable","spinPos","position","x","y","spinCenter","canvas","size","width","height","pos","getPosition","distance","spinAcceleration","acceleration","retina","pixelRatio","center","direction","velocity","angle","radius","isEnabled","destroyed","delta","_b","_c","_d","_e","particleOptions","moveOptions","slowFactor","baseSpeed","moveSpeed","speed","reduceFactor","moveDrift","drift","maxSize","value","sizeFactor","getRadius","speedFactor","factor","diffFactor","gravityOptions","gravity","gravityFactor","inverse","decay","moveDecay","multTo","mult","maxSpeed","zIndexOptions","zIndex","zVelocityFactor","zIndexFactor","velocityRate","addTo","vibrate","Math","sin","cos"],"sources":["C:/Users/raiab/Documents/Logics Yard/NFT code daniyal/NFT code/client/node_modules/tsparticles/esm/Movers/Base/BaseMover.js"],"sourcesContent":["import { applyDistance, applyPath, getProximitySpeedFactor, spin } from \"./Utils\";\nimport { getDistance, getRangeMax, getRangeValue } from \"../../Utils/NumberUtils\";\nexport class BaseMover {\n    init(particle) {\n        var _a;\n        const container = particle.container, options = particle.options, spinOptions = options.move.spin;\n        if (spinOptions.enable) {\n            const spinPos = (_a = spinOptions.position) !== null && _a !== void 0 ? _a : { x: 50, y: 50 };\n            const spinCenter = {\n                x: (spinPos.x / 100) * container.canvas.size.width,\n                y: (spinPos.y / 100) * container.canvas.size.height,\n            };\n            const pos = particle.getPosition();\n            const distance = getDistance(pos, spinCenter);\n            const spinAcceleration = getRangeValue(spinOptions.acceleration);\n            particle.retina.spinAcceleration = spinAcceleration * container.retina.pixelRatio;\n            particle.spin = {\n                center: spinCenter,\n                direction: particle.velocity.x >= 0 ? \"clockwise\" : \"counter-clockwise\",\n                angle: particle.velocity.angle,\n                radius: distance,\n                acceleration: particle.retina.spinAcceleration,\n            };\n        }\n    }\n    isEnabled(particle) {\n        return !particle.destroyed && particle.options.move.enable;\n    }\n    move(particle, delta) {\n        var _a, _b, _c;\n        var _d, _e;\n        const particleOptions = particle.options, moveOptions = particleOptions.move;\n        if (!moveOptions.enable) {\n            return;\n        }\n        const container = particle.container, slowFactor = getProximitySpeedFactor(particle), baseSpeed = ((_a = (_d = particle.retina).moveSpeed) !== null && _a !== void 0 ? _a : (_d.moveSpeed = getRangeValue(moveOptions.speed) * container.retina.pixelRatio)) *\n            container.retina.reduceFactor, moveDrift = ((_b = (_e = particle.retina).moveDrift) !== null && _b !== void 0 ? _b : (_e.moveDrift = getRangeValue(particle.options.move.drift) * container.retina.pixelRatio)), maxSize = getRangeMax(particleOptions.size.value) * container.retina.pixelRatio, sizeFactor = moveOptions.size ? particle.getRadius() / maxSize : 1, speedFactor = sizeFactor * slowFactor * (delta.factor || 1), diffFactor = 2, moveSpeed = (baseSpeed * speedFactor) / diffFactor;\n        applyPath(particle, delta);\n        const gravityOptions = particle.gravity, gravityFactor = gravityOptions.enable && gravityOptions.inverse ? -1 : 1;\n        if (gravityOptions.enable && moveSpeed) {\n            particle.velocity.y += (gravityFactor * (gravityOptions.acceleration * delta.factor)) / (60 * moveSpeed);\n        }\n        if (moveDrift && moveSpeed) {\n            particle.velocity.x += (moveDrift * delta.factor) / (60 * moveSpeed);\n        }\n        const decay = particle.moveDecay;\n        if (decay != 1) {\n            particle.velocity.multTo(decay);\n        }\n        const velocity = particle.velocity.mult(moveSpeed), maxSpeed = (_c = particle.retina.maxSpeed) !== null && _c !== void 0 ? _c : container.retina.maxSpeed;\n        if (gravityOptions.enable &&\n            maxSpeed > 0 &&\n            ((!gravityOptions.inverse && velocity.y >= 0 && velocity.y >= maxSpeed) ||\n                (gravityOptions.inverse && velocity.y <= 0 && velocity.y <= -maxSpeed))) {\n            velocity.y = gravityFactor * maxSpeed;\n            if (moveSpeed) {\n                particle.velocity.y = velocity.y / moveSpeed;\n            }\n        }\n        const zIndexOptions = particle.options.zIndex, zVelocityFactor = (1 - particle.zIndexFactor) ** zIndexOptions.velocityRate;\n        if (moveOptions.spin.enable) {\n            spin(particle, moveSpeed);\n        }\n        else {\n            if (zVelocityFactor != 1) {\n                velocity.multTo(zVelocityFactor);\n            }\n            particle.position.addTo(velocity);\n            if (moveOptions.vibrate) {\n                particle.position.x += Math.sin(particle.position.x * Math.cos(particle.position.y));\n                particle.position.y += Math.cos(particle.position.y * Math.sin(particle.position.x));\n            }\n        }\n        applyDistance(particle);\n    }\n}\n"],"mappings":"AAAA,SAASA,aAAT,EAAwBC,SAAxB,EAAmCC,uBAAnC,EAA4DC,IAA5D,QAAwE,SAAxE;AACA,SAASC,WAAT,EAAsBC,WAAtB,EAAmCC,aAAnC,QAAwD,yBAAxD;AACA,OAAO,MAAMC,SAAN,CAAgB;EACnBC,IAAI,CAACC,QAAD,EAAW;IACX,IAAIC,EAAJ;;IACA,MAAMC,SAAS,GAAGF,QAAQ,CAACE,SAA3B;IAAA,MAAsCC,OAAO,GAAGH,QAAQ,CAACG,OAAzD;IAAA,MAAkEC,WAAW,GAAGD,OAAO,CAACE,IAAR,CAAaX,IAA7F;;IACA,IAAIU,WAAW,CAACE,MAAhB,EAAwB;MACpB,MAAMC,OAAO,GAAG,CAACN,EAAE,GAAGG,WAAW,CAACI,QAAlB,MAAgC,IAAhC,IAAwCP,EAAE,KAAK,KAAK,CAApD,GAAwDA,EAAxD,GAA6D;QAAEQ,CAAC,EAAE,EAAL;QAASC,CAAC,EAAE;MAAZ,CAA7E;MACA,MAAMC,UAAU,GAAG;QACfF,CAAC,EAAGF,OAAO,CAACE,CAAR,GAAY,GAAb,GAAoBP,SAAS,CAACU,MAAV,CAAiBC,IAAjB,CAAsBC,KAD9B;QAEfJ,CAAC,EAAGH,OAAO,CAACG,CAAR,GAAY,GAAb,GAAoBR,SAAS,CAACU,MAAV,CAAiBC,IAAjB,CAAsBE;MAF9B,CAAnB;MAIA,MAAMC,GAAG,GAAGhB,QAAQ,CAACiB,WAAT,EAAZ;MACA,MAAMC,QAAQ,GAAGvB,WAAW,CAACqB,GAAD,EAAML,UAAN,CAA5B;MACA,MAAMQ,gBAAgB,GAAGtB,aAAa,CAACO,WAAW,CAACgB,YAAb,CAAtC;MACApB,QAAQ,CAACqB,MAAT,CAAgBF,gBAAhB,GAAmCA,gBAAgB,GAAGjB,SAAS,CAACmB,MAAV,CAAiBC,UAAvE;MACAtB,QAAQ,CAACN,IAAT,GAAgB;QACZ6B,MAAM,EAAEZ,UADI;QAEZa,SAAS,EAAExB,QAAQ,CAACyB,QAAT,CAAkBhB,CAAlB,IAAuB,CAAvB,GAA2B,WAA3B,GAAyC,mBAFxC;QAGZiB,KAAK,EAAE1B,QAAQ,CAACyB,QAAT,CAAkBC,KAHb;QAIZC,MAAM,EAAET,QAJI;QAKZE,YAAY,EAAEpB,QAAQ,CAACqB,MAAT,CAAgBF;MALlB,CAAhB;IAOH;EACJ;;EACDS,SAAS,CAAC5B,QAAD,EAAW;IAChB,OAAO,CAACA,QAAQ,CAAC6B,SAAV,IAAuB7B,QAAQ,CAACG,OAAT,CAAiBE,IAAjB,CAAsBC,MAApD;EACH;;EACDD,IAAI,CAACL,QAAD,EAAW8B,KAAX,EAAkB;IAClB,IAAI7B,EAAJ,EAAQ8B,EAAR,EAAYC,EAAZ;;IACA,IAAIC,EAAJ,EAAQC,EAAR;;IACA,MAAMC,eAAe,GAAGnC,QAAQ,CAACG,OAAjC;IAAA,MAA0CiC,WAAW,GAAGD,eAAe,CAAC9B,IAAxE;;IACA,IAAI,CAAC+B,WAAW,CAAC9B,MAAjB,EAAyB;MACrB;IACH;;IACD,MAAMJ,SAAS,GAAGF,QAAQ,CAACE,SAA3B;IAAA,MAAsCmC,UAAU,GAAG5C,uBAAuB,CAACO,QAAD,CAA1E;IAAA,MAAsFsC,SAAS,GAAG,CAAC,CAACrC,EAAE,GAAG,CAACgC,EAAE,GAAGjC,QAAQ,CAACqB,MAAf,EAAuBkB,SAA7B,MAA4C,IAA5C,IAAoDtC,EAAE,KAAK,KAAK,CAAhE,GAAoEA,EAApE,GAA0EgC,EAAE,CAACM,SAAH,GAAe1C,aAAa,CAACuC,WAAW,CAACI,KAAb,CAAb,GAAmCtC,SAAS,CAACmB,MAAV,CAAiBC,UAA9I,IAC9FpB,SAAS,CAACmB,MAAV,CAAiBoB,YADrB;IAAA,MACmCC,SAAS,GAAI,CAACX,EAAE,GAAG,CAACG,EAAE,GAAGlC,QAAQ,CAACqB,MAAf,EAAuBqB,SAA7B,MAA4C,IAA5C,IAAoDX,EAAE,KAAK,KAAK,CAAhE,GAAoEA,EAApE,GAA0EG,EAAE,CAACQ,SAAH,GAAe7C,aAAa,CAACG,QAAQ,CAACG,OAAT,CAAiBE,IAAjB,CAAsBsC,KAAvB,CAAb,GAA6CzC,SAAS,CAACmB,MAAV,CAAiBC,UADvM;IAAA,MACqNsB,OAAO,GAAGhD,WAAW,CAACuC,eAAe,CAACtB,IAAhB,CAAqBgC,KAAtB,CAAX,GAA0C3C,SAAS,CAACmB,MAAV,CAAiBC,UAD1R;IAAA,MACsSwB,UAAU,GAAGV,WAAW,CAACvB,IAAZ,GAAmBb,QAAQ,CAAC+C,SAAT,KAAuBH,OAA1C,GAAoD,CADvW;IAAA,MAC0WI,WAAW,GAAGF,UAAU,GAAGT,UAAb,IAA2BP,KAAK,CAACmB,MAAN,IAAgB,CAA3C,CADxX;IAAA,MACuaC,UAAU,GAAG,CADpb;IAAA,MACubX,SAAS,GAAID,SAAS,GAAGU,WAAb,GAA4BE,UAD/d;IAEA1D,SAAS,CAACQ,QAAD,EAAW8B,KAAX,CAAT;IACA,MAAMqB,cAAc,GAAGnD,QAAQ,CAACoD,OAAhC;IAAA,MAAyCC,aAAa,GAAGF,cAAc,CAAC7C,MAAf,IAAyB6C,cAAc,CAACG,OAAxC,GAAkD,CAAC,CAAnD,GAAuD,CAAhH;;IACA,IAAIH,cAAc,CAAC7C,MAAf,IAAyBiC,SAA7B,EAAwC;MACpCvC,QAAQ,CAACyB,QAAT,CAAkBf,CAAlB,IAAwB2C,aAAa,IAAIF,cAAc,CAAC/B,YAAf,GAA8BU,KAAK,CAACmB,MAAxC,CAAd,IAAkE,KAAKV,SAAvE,CAAvB;IACH;;IACD,IAAIG,SAAS,IAAIH,SAAjB,EAA4B;MACxBvC,QAAQ,CAACyB,QAAT,CAAkBhB,CAAlB,IAAwBiC,SAAS,GAAGZ,KAAK,CAACmB,MAAnB,IAA8B,KAAKV,SAAnC,CAAvB;IACH;;IACD,MAAMgB,KAAK,GAAGvD,QAAQ,CAACwD,SAAvB;;IACA,IAAID,KAAK,IAAI,CAAb,EAAgB;MACZvD,QAAQ,CAACyB,QAAT,CAAkBgC,MAAlB,CAAyBF,KAAzB;IACH;;IACD,MAAM9B,QAAQ,GAAGzB,QAAQ,CAACyB,QAAT,CAAkBiC,IAAlB,CAAuBnB,SAAvB,CAAjB;IAAA,MAAoDoB,QAAQ,GAAG,CAAC3B,EAAE,GAAGhC,QAAQ,CAACqB,MAAT,CAAgBsC,QAAtB,MAAoC,IAApC,IAA4C3B,EAAE,KAAK,KAAK,CAAxD,GAA4DA,EAA5D,GAAiE9B,SAAS,CAACmB,MAAV,CAAiBsC,QAAjJ;;IACA,IAAIR,cAAc,CAAC7C,MAAf,IACAqD,QAAQ,GAAG,CADX,KAEE,CAACR,cAAc,CAACG,OAAhB,IAA2B7B,QAAQ,CAACf,CAAT,IAAc,CAAzC,IAA8Ce,QAAQ,CAACf,CAAT,IAAciD,QAA7D,IACIR,cAAc,CAACG,OAAf,IAA0B7B,QAAQ,CAACf,CAAT,IAAc,CAAxC,IAA6Ce,QAAQ,CAACf,CAAT,IAAc,CAACiD,QAHjE,CAAJ,EAGiF;MAC7ElC,QAAQ,CAACf,CAAT,GAAa2C,aAAa,GAAGM,QAA7B;;MACA,IAAIpB,SAAJ,EAAe;QACXvC,QAAQ,CAACyB,QAAT,CAAkBf,CAAlB,GAAsBe,QAAQ,CAACf,CAAT,GAAa6B,SAAnC;MACH;IACJ;;IACD,MAAMqB,aAAa,GAAG5D,QAAQ,CAACG,OAAT,CAAiB0D,MAAvC;IAAA,MAA+CC,eAAe,GAAG,CAAC,IAAI9D,QAAQ,CAAC+D,YAAd,KAA+BH,aAAa,CAACI,YAA9G;;IACA,IAAI5B,WAAW,CAAC1C,IAAZ,CAAiBY,MAArB,EAA6B;MACzBZ,IAAI,CAACM,QAAD,EAAWuC,SAAX,CAAJ;IACH,CAFD,MAGK;MACD,IAAIuB,eAAe,IAAI,CAAvB,EAA0B;QACtBrC,QAAQ,CAACgC,MAAT,CAAgBK,eAAhB;MACH;;MACD9D,QAAQ,CAACQ,QAAT,CAAkByD,KAAlB,CAAwBxC,QAAxB;;MACA,IAAIW,WAAW,CAAC8B,OAAhB,EAAyB;QACrBlE,QAAQ,CAACQ,QAAT,CAAkBC,CAAlB,IAAuB0D,IAAI,CAACC,GAAL,CAASpE,QAAQ,CAACQ,QAAT,CAAkBC,CAAlB,GAAsB0D,IAAI,CAACE,GAAL,CAASrE,QAAQ,CAACQ,QAAT,CAAkBE,CAA3B,CAA/B,CAAvB;QACAV,QAAQ,CAACQ,QAAT,CAAkBE,CAAlB,IAAuByD,IAAI,CAACE,GAAL,CAASrE,QAAQ,CAACQ,QAAT,CAAkBE,CAAlB,GAAsByD,IAAI,CAACC,GAAL,CAASpE,QAAQ,CAACQ,QAAT,CAAkBC,CAA3B,CAA/B,CAAvB;MACH;IACJ;;IACDlB,aAAa,CAACS,QAAD,CAAb;EACH;;AAxEkB"},"metadata":{},"sourceType":"module"}