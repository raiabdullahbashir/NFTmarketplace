{"ast":null,"code":"/*\n    This file is part of web3.js.\n\n    web3.js is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    web3.js is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\n/** \n * @file iban.js\n * @author Marek Kotewicz <marek@ethdev.com>\n * @date 2015\n */\nvar BigNumber = require('bignumber.js');\n\nvar padLeft = function (string, bytes) {\n  var result = string;\n\n  while (result.length < bytes * 2) {\n    result = '0' + result;\n  }\n\n  return result;\n};\n/**\n * Prepare an IBAN for mod 97 computation by moving the first 4 chars to the end and transforming the letters to\n * numbers (A = 10, B = 11, ..., Z = 35), as specified in ISO13616.\n *\n * @method iso13616Prepare\n * @param {String} iban the IBAN\n * @returns {String} the prepared IBAN\n */\n\n\nvar iso13616Prepare = function (iban) {\n  var A = 'A'.charCodeAt(0);\n  var Z = 'Z'.charCodeAt(0);\n  iban = iban.toUpperCase();\n  iban = iban.substr(4) + iban.substr(0, 4);\n  return iban.split('').map(function (n) {\n    var code = n.charCodeAt(0);\n\n    if (code >= A && code <= Z) {\n      // A = 10, B = 11, ... Z = 35\n      return code - A + 10;\n    } else {\n      return n;\n    }\n  }).join('');\n};\n/**\n * Calculates the MOD 97 10 of the passed IBAN as specified in ISO7064.\n *\n * @method mod9710\n * @param {String} iban\n * @returns {Number}\n */\n\n\nvar mod9710 = function (iban) {\n  var remainder = iban,\n      block;\n\n  while (remainder.length > 2) {\n    block = remainder.slice(0, 9);\n    remainder = parseInt(block, 10) % 97 + remainder.slice(block.length);\n  }\n\n  return parseInt(remainder, 10) % 97;\n};\n/**\n * This prototype should be used to create iban object from iban correct string\n *\n * @param {String} iban\n */\n\n\nvar Iban = function (iban) {\n  this._iban = iban;\n};\n/**\n * This method should be used to create iban object from ethereum address\n *\n * @method fromAddress\n * @param {String} address\n * @return {Iban} the IBAN object\n */\n\n\nIban.fromAddress = function (address) {\n  var asBn = new BigNumber(address, 16);\n  var base36 = asBn.toString(36);\n  var padded = padLeft(base36, 15);\n  return Iban.fromBban(padded.toUpperCase());\n};\n/**\n * Convert the passed BBAN to an IBAN for this country specification.\n * Please note that <i>\"generation of the IBAN shall be the exclusive responsibility of the bank/branch servicing the account\"</i>.\n * This method implements the preferred algorithm described in http://en.wikipedia.org/wiki/International_Bank_Account_Number#Generating_IBAN_check_digits\n *\n * @method fromBban\n * @param {String} bban the BBAN to convert to IBAN\n * @returns {Iban} the IBAN object\n */\n\n\nIban.fromBban = function (bban) {\n  var countryCode = 'XE';\n  var remainder = mod9710(iso13616Prepare(countryCode + '00' + bban));\n  var checkDigit = ('0' + (98 - remainder)).slice(-2);\n  return new Iban(countryCode + checkDigit + bban);\n};\n/**\n * Should be used to create IBAN object for given institution and identifier\n *\n * @method createIndirect\n * @param {Object} options, required options are \"institution\" and \"identifier\"\n * @return {Iban} the IBAN object\n */\n\n\nIban.createIndirect = function (options) {\n  return Iban.fromBban('ETH' + options.institution + options.identifier);\n};\n/**\n * Thos method should be used to check if given string is valid iban object\n *\n * @method isValid\n * @param {String} iban string\n * @return {Boolean} true if it is valid IBAN\n */\n\n\nIban.isValid = function (iban) {\n  var i = new Iban(iban);\n  return i.isValid();\n};\n/**\n * Should be called to check if iban is correct\n *\n * @method isValid\n * @returns {Boolean} true if it is, otherwise false\n */\n\n\nIban.prototype.isValid = function () {\n  return /^XE[0-9]{2}(ETH[0-9A-Z]{13}|[0-9A-Z]{30,31})$/.test(this._iban) && mod9710(iso13616Prepare(this._iban)) === 1;\n};\n/**\n * Should be called to check if iban number is direct\n *\n * @method isDirect\n * @returns {Boolean} true if it is, otherwise false\n */\n\n\nIban.prototype.isDirect = function () {\n  return this._iban.length === 34 || this._iban.length === 35;\n};\n/**\n * Should be called to check if iban number if indirect\n *\n * @method isIndirect\n * @returns {Boolean} true if it is, otherwise false\n */\n\n\nIban.prototype.isIndirect = function () {\n  return this._iban.length === 20;\n};\n/**\n * Should be called to get iban checksum\n * Uses the mod-97-10 checksumming protocol (ISO/IEC 7064:2003)\n *\n * @method checksum\n * @returns {String} checksum\n */\n\n\nIban.prototype.checksum = function () {\n  return this._iban.substr(2, 2);\n};\n/**\n * Should be called to get institution identifier\n * eg. XREG\n *\n * @method institution\n * @returns {String} institution identifier\n */\n\n\nIban.prototype.institution = function () {\n  return this.isIndirect() ? this._iban.substr(7, 4) : '';\n};\n/**\n * Should be called to get client identifier within institution\n * eg. GAVOFYORK\n *\n * @method client\n * @returns {String} client identifier\n */\n\n\nIban.prototype.client = function () {\n  return this.isIndirect() ? this._iban.substr(11) : '';\n};\n/**\n * Should be called to get client direct address\n *\n * @method address\n * @returns {String} client direct address\n */\n\n\nIban.prototype.address = function () {\n  if (this.isDirect()) {\n    var base36 = this._iban.substr(4);\n\n    var asBn = new BigNumber(base36, 36);\n    return padLeft(asBn.toString(16), 20);\n  }\n\n  return '';\n};\n\nIban.prototype.toString = function () {\n  return this._iban;\n};\n\nmodule.exports = Iban;","map":{"version":3,"names":["BigNumber","require","padLeft","string","bytes","result","length","iso13616Prepare","iban","A","charCodeAt","Z","toUpperCase","substr","split","map","n","code","join","mod9710","remainder","block","slice","parseInt","Iban","_iban","fromAddress","address","asBn","base36","toString","padded","fromBban","bban","countryCode","checkDigit","createIndirect","options","institution","identifier","isValid","i","prototype","test","isDirect","isIndirect","checksum","client","module","exports"],"sources":["C:/Users/raiab/Documents/Logics Yard/NFT code daniyal/NFT code/client/node_modules/@0xproject/web3-wrapper/node_modules/web3/lib/web3/iban.js"],"sourcesContent":["/*\n    This file is part of web3.js.\n\n    web3.js is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    web3.js is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n/** \n * @file iban.js\n * @author Marek Kotewicz <marek@ethdev.com>\n * @date 2015\n */\n\nvar BigNumber = require('bignumber.js');\n\nvar padLeft = function (string, bytes) {\n    var result = string;\n    while (result.length < bytes * 2) {\n        result = '0' + result;\n    }\n    return result;\n};\n\n/**\n * Prepare an IBAN for mod 97 computation by moving the first 4 chars to the end and transforming the letters to\n * numbers (A = 10, B = 11, ..., Z = 35), as specified in ISO13616.\n *\n * @method iso13616Prepare\n * @param {String} iban the IBAN\n * @returns {String} the prepared IBAN\n */\nvar iso13616Prepare = function (iban) {\n    var A = 'A'.charCodeAt(0);\n    var Z = 'Z'.charCodeAt(0);\n\n    iban = iban.toUpperCase();\n    iban = iban.substr(4) + iban.substr(0,4);\n\n    return iban.split('').map(function(n){\n        var code = n.charCodeAt(0);\n        if (code >= A && code <= Z){\n            // A = 10, B = 11, ... Z = 35\n            return code - A + 10;\n        } else {\n            return n;\n        }\n    }).join('');\n};\n\n/**\n * Calculates the MOD 97 10 of the passed IBAN as specified in ISO7064.\n *\n * @method mod9710\n * @param {String} iban\n * @returns {Number}\n */\nvar mod9710 = function (iban) {\n    var remainder = iban,\n        block;\n\n    while (remainder.length > 2){\n        block = remainder.slice(0, 9);\n        remainder = parseInt(block, 10) % 97 + remainder.slice(block.length);\n    }\n\n    return parseInt(remainder, 10) % 97;\n};\n\n/**\n * This prototype should be used to create iban object from iban correct string\n *\n * @param {String} iban\n */\nvar Iban = function (iban) {\n    this._iban = iban;\n};\n\n/**\n * This method should be used to create iban object from ethereum address\n *\n * @method fromAddress\n * @param {String} address\n * @return {Iban} the IBAN object\n */\nIban.fromAddress = function (address) {\n    var asBn = new BigNumber(address, 16);\n    var base36 = asBn.toString(36);\n    var padded = padLeft(base36, 15);\n    return Iban.fromBban(padded.toUpperCase());\n};\n\n/**\n * Convert the passed BBAN to an IBAN for this country specification.\n * Please note that <i>\"generation of the IBAN shall be the exclusive responsibility of the bank/branch servicing the account\"</i>.\n * This method implements the preferred algorithm described in http://en.wikipedia.org/wiki/International_Bank_Account_Number#Generating_IBAN_check_digits\n *\n * @method fromBban\n * @param {String} bban the BBAN to convert to IBAN\n * @returns {Iban} the IBAN object\n */\nIban.fromBban = function (bban) {\n    var countryCode = 'XE';\n\n    var remainder = mod9710(iso13616Prepare(countryCode + '00' + bban));\n    var checkDigit = ('0' + (98 - remainder)).slice(-2);\n\n    return new Iban(countryCode + checkDigit + bban);\n};\n\n/**\n * Should be used to create IBAN object for given institution and identifier\n *\n * @method createIndirect\n * @param {Object} options, required options are \"institution\" and \"identifier\"\n * @return {Iban} the IBAN object\n */\nIban.createIndirect = function (options) {\n    return Iban.fromBban('ETH' + options.institution + options.identifier);\n};\n\n/**\n * Thos method should be used to check if given string is valid iban object\n *\n * @method isValid\n * @param {String} iban string\n * @return {Boolean} true if it is valid IBAN\n */\nIban.isValid = function (iban) {\n    var i = new Iban(iban);\n    return i.isValid();\n};\n\n/**\n * Should be called to check if iban is correct\n *\n * @method isValid\n * @returns {Boolean} true if it is, otherwise false\n */\nIban.prototype.isValid = function () {\n    return /^XE[0-9]{2}(ETH[0-9A-Z]{13}|[0-9A-Z]{30,31})$/.test(this._iban) &&\n        mod9710(iso13616Prepare(this._iban)) === 1;\n};\n\n/**\n * Should be called to check if iban number is direct\n *\n * @method isDirect\n * @returns {Boolean} true if it is, otherwise false\n */\nIban.prototype.isDirect = function () {\n    return this._iban.length === 34 || this._iban.length === 35;\n};\n\n/**\n * Should be called to check if iban number if indirect\n *\n * @method isIndirect\n * @returns {Boolean} true if it is, otherwise false\n */\nIban.prototype.isIndirect = function () {\n    return this._iban.length === 20;\n};\n\n/**\n * Should be called to get iban checksum\n * Uses the mod-97-10 checksumming protocol (ISO/IEC 7064:2003)\n *\n * @method checksum\n * @returns {String} checksum\n */\nIban.prototype.checksum = function () {\n    return this._iban.substr(2, 2);\n};\n\n/**\n * Should be called to get institution identifier\n * eg. XREG\n *\n * @method institution\n * @returns {String} institution identifier\n */\nIban.prototype.institution = function () {\n    return this.isIndirect() ? this._iban.substr(7, 4) : '';\n};\n\n/**\n * Should be called to get client identifier within institution\n * eg. GAVOFYORK\n *\n * @method client\n * @returns {String} client identifier\n */\nIban.prototype.client = function () {\n    return this.isIndirect() ? this._iban.substr(11) : '';\n};\n\n/**\n * Should be called to get client direct address\n *\n * @method address\n * @returns {String} client direct address\n */\nIban.prototype.address = function () {\n    if (this.isDirect()) {\n        var base36 = this._iban.substr(4);\n        var asBn = new BigNumber(base36, 36);\n        return padLeft(asBn.toString(16), 20);\n    } \n\n    return '';\n};\n\nIban.prototype.toString = function () {\n    return this._iban;\n};\n\nmodule.exports = Iban;\n\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AAEA,IAAIA,SAAS,GAAGC,OAAO,CAAC,cAAD,CAAvB;;AAEA,IAAIC,OAAO,GAAG,UAAUC,MAAV,EAAkBC,KAAlB,EAAyB;EACnC,IAAIC,MAAM,GAAGF,MAAb;;EACA,OAAOE,MAAM,CAACC,MAAP,GAAgBF,KAAK,GAAG,CAA/B,EAAkC;IAC9BC,MAAM,GAAG,MAAMA,MAAf;EACH;;EACD,OAAOA,MAAP;AACH,CAND;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,IAAIE,eAAe,GAAG,UAAUC,IAAV,EAAgB;EAClC,IAAIC,CAAC,GAAG,IAAIC,UAAJ,CAAe,CAAf,CAAR;EACA,IAAIC,CAAC,GAAG,IAAID,UAAJ,CAAe,CAAf,CAAR;EAEAF,IAAI,GAAGA,IAAI,CAACI,WAAL,EAAP;EACAJ,IAAI,GAAGA,IAAI,CAACK,MAAL,CAAY,CAAZ,IAAiBL,IAAI,CAACK,MAAL,CAAY,CAAZ,EAAc,CAAd,CAAxB;EAEA,OAAOL,IAAI,CAACM,KAAL,CAAW,EAAX,EAAeC,GAAf,CAAmB,UAASC,CAAT,EAAW;IACjC,IAAIC,IAAI,GAAGD,CAAC,CAACN,UAAF,CAAa,CAAb,CAAX;;IACA,IAAIO,IAAI,IAAIR,CAAR,IAAaQ,IAAI,IAAIN,CAAzB,EAA2B;MACvB;MACA,OAAOM,IAAI,GAAGR,CAAP,GAAW,EAAlB;IACH,CAHD,MAGO;MACH,OAAOO,CAAP;IACH;EACJ,CARM,EAQJE,IARI,CAQC,EARD,CAAP;AASH,CAhBD;AAkBA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,IAAIC,OAAO,GAAG,UAAUX,IAAV,EAAgB;EAC1B,IAAIY,SAAS,GAAGZ,IAAhB;EAAA,IACIa,KADJ;;EAGA,OAAOD,SAAS,CAACd,MAAV,GAAmB,CAA1B,EAA4B;IACxBe,KAAK,GAAGD,SAAS,CAACE,KAAV,CAAgB,CAAhB,EAAmB,CAAnB,CAAR;IACAF,SAAS,GAAGG,QAAQ,CAACF,KAAD,EAAQ,EAAR,CAAR,GAAsB,EAAtB,GAA2BD,SAAS,CAACE,KAAV,CAAgBD,KAAK,CAACf,MAAtB,CAAvC;EACH;;EAED,OAAOiB,QAAQ,CAACH,SAAD,EAAY,EAAZ,CAAR,GAA0B,EAAjC;AACH,CAVD;AAYA;AACA;AACA;AACA;AACA;;;AACA,IAAII,IAAI,GAAG,UAAUhB,IAAV,EAAgB;EACvB,KAAKiB,KAAL,GAAajB,IAAb;AACH,CAFD;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAgB,IAAI,CAACE,WAAL,GAAmB,UAAUC,OAAV,EAAmB;EAClC,IAAIC,IAAI,GAAG,IAAI5B,SAAJ,CAAc2B,OAAd,EAAuB,EAAvB,CAAX;EACA,IAAIE,MAAM,GAAGD,IAAI,CAACE,QAAL,CAAc,EAAd,CAAb;EACA,IAAIC,MAAM,GAAG7B,OAAO,CAAC2B,MAAD,EAAS,EAAT,CAApB;EACA,OAAOL,IAAI,CAACQ,QAAL,CAAcD,MAAM,CAACnB,WAAP,EAAd,CAAP;AACH,CALD;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAY,IAAI,CAACQ,QAAL,GAAgB,UAAUC,IAAV,EAAgB;EAC5B,IAAIC,WAAW,GAAG,IAAlB;EAEA,IAAId,SAAS,GAAGD,OAAO,CAACZ,eAAe,CAAC2B,WAAW,GAAG,IAAd,GAAqBD,IAAtB,CAAhB,CAAvB;EACA,IAAIE,UAAU,GAAG,CAAC,OAAO,KAAKf,SAAZ,CAAD,EAAyBE,KAAzB,CAA+B,CAAC,CAAhC,CAAjB;EAEA,OAAO,IAAIE,IAAJ,CAASU,WAAW,GAAGC,UAAd,GAA2BF,IAApC,CAAP;AACH,CAPD;AASA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAT,IAAI,CAACY,cAAL,GAAsB,UAAUC,OAAV,EAAmB;EACrC,OAAOb,IAAI,CAACQ,QAAL,CAAc,QAAQK,OAAO,CAACC,WAAhB,GAA8BD,OAAO,CAACE,UAApD,CAAP;AACH,CAFD;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAf,IAAI,CAACgB,OAAL,GAAe,UAAUhC,IAAV,EAAgB;EAC3B,IAAIiC,CAAC,GAAG,IAAIjB,IAAJ,CAAShB,IAAT,CAAR;EACA,OAAOiC,CAAC,CAACD,OAAF,EAAP;AACH,CAHD;AAKA;AACA;AACA;AACA;AACA;AACA;;;AACAhB,IAAI,CAACkB,SAAL,CAAeF,OAAf,GAAyB,YAAY;EACjC,OAAO,gDAAgDG,IAAhD,CAAqD,KAAKlB,KAA1D,KACHN,OAAO,CAACZ,eAAe,CAAC,KAAKkB,KAAN,CAAhB,CAAP,KAAyC,CAD7C;AAEH,CAHD;AAKA;AACA;AACA;AACA;AACA;AACA;;;AACAD,IAAI,CAACkB,SAAL,CAAeE,QAAf,GAA0B,YAAY;EAClC,OAAO,KAAKnB,KAAL,CAAWnB,MAAX,KAAsB,EAAtB,IAA4B,KAAKmB,KAAL,CAAWnB,MAAX,KAAsB,EAAzD;AACH,CAFD;AAIA;AACA;AACA;AACA;AACA;AACA;;;AACAkB,IAAI,CAACkB,SAAL,CAAeG,UAAf,GAA4B,YAAY;EACpC,OAAO,KAAKpB,KAAL,CAAWnB,MAAX,KAAsB,EAA7B;AACH,CAFD;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAkB,IAAI,CAACkB,SAAL,CAAeI,QAAf,GAA0B,YAAY;EAClC,OAAO,KAAKrB,KAAL,CAAWZ,MAAX,CAAkB,CAAlB,EAAqB,CAArB,CAAP;AACH,CAFD;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAW,IAAI,CAACkB,SAAL,CAAeJ,WAAf,GAA6B,YAAY;EACrC,OAAO,KAAKO,UAAL,KAAoB,KAAKpB,KAAL,CAAWZ,MAAX,CAAkB,CAAlB,EAAqB,CAArB,CAApB,GAA8C,EAArD;AACH,CAFD;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAW,IAAI,CAACkB,SAAL,CAAeK,MAAf,GAAwB,YAAY;EAChC,OAAO,KAAKF,UAAL,KAAoB,KAAKpB,KAAL,CAAWZ,MAAX,CAAkB,EAAlB,CAApB,GAA4C,EAAnD;AACH,CAFD;AAIA;AACA;AACA;AACA;AACA;AACA;;;AACAW,IAAI,CAACkB,SAAL,CAAef,OAAf,GAAyB,YAAY;EACjC,IAAI,KAAKiB,QAAL,EAAJ,EAAqB;IACjB,IAAIf,MAAM,GAAG,KAAKJ,KAAL,CAAWZ,MAAX,CAAkB,CAAlB,CAAb;;IACA,IAAIe,IAAI,GAAG,IAAI5B,SAAJ,CAAc6B,MAAd,EAAsB,EAAtB,CAAX;IACA,OAAO3B,OAAO,CAAC0B,IAAI,CAACE,QAAL,CAAc,EAAd,CAAD,EAAoB,EAApB,CAAd;EACH;;EAED,OAAO,EAAP;AACH,CARD;;AAUAN,IAAI,CAACkB,SAAL,CAAeZ,QAAf,GAA0B,YAAY;EAClC,OAAO,KAAKL,KAAZ;AACH,CAFD;;AAIAuB,MAAM,CAACC,OAAP,GAAiBzB,IAAjB"},"metadata":{},"sourceType":"script"}