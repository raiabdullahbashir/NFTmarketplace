{"ast":null,"code":"import { Axios, Canceler } from '../../../core/axios';\nimport * as actions from '../../actions';\nimport api from '../../../core/api';\nexport const getBlogPosts = postId => async dispatch => {\n  dispatch(actions.getBlogPosts.request(Canceler.cancel));\n\n  try {\n    const {\n      data\n    } = await Axios.get(`${api.baseUrl}${api.blogs}${postId ? '/single.json' : '/all.json'}`, {\n      cancelToken: Canceler.token,\n      params: {}\n    });\n    dispatch(actions.getBlogPosts.success(data));\n  } catch (err) {\n    dispatch(actions.getBlogPosts.failure(err));\n  }\n};\nexport const getBlogComments = postId => async dispatch => {\n  dispatch(actions.getComments.request(Canceler.cancel));\n\n  try {\n    const {\n      data\n    } = await Axios.get(`${api.baseUrl}${api.comments}`, {\n      cancelToken: Canceler.token,\n      params: {}\n    });\n    dispatch(actions.getComments.success(data));\n  } catch (err) {\n    dispatch(actions.getComments.failure(err));\n  }\n};\nexport const getBlogTags = postId => async dispatch => {\n  dispatch(actions.getTags.request(Canceler.cancel));\n\n  try {\n    const {\n      data\n    } = await Axios.get(`${api.baseUrl}${api.tags}`, {\n      cancelToken: Canceler.token,\n      params: {}\n    });\n    dispatch(actions.getTags.success(data));\n  } catch (err) {\n    dispatch(actions.getTags.failure(err));\n  }\n};\nexport const getRecentPosts = () => async dispatch => {\n  dispatch(actions.getRecentPosts.request(Canceler.cancel));\n\n  try {\n    const {\n      data\n    } = await Axios.get(`${api.baseUrl}${api.recent}`, {\n      cancelToken: Canceler.token\n    });\n    dispatch(actions.getRecentPosts.success(data));\n  } catch (err) {\n    dispatch(actions.getRecentPosts.failure(err));\n  }\n};","map":{"version":3,"names":["Axios","Canceler","actions","api","getBlogPosts","postId","dispatch","request","cancel","data","get","baseUrl","blogs","cancelToken","token","params","success","err","failure","getBlogComments","getComments","comments","getBlogTags","getTags","tags","getRecentPosts","recent"],"sources":["C:/Users/raiab/Documents/Logics Yard/NFT code daniyal/NFT code/client/src/store/actions/thunks/blogs.js"],"sourcesContent":["import { Axios, Canceler } from '../../../core/axios';\nimport * as actions from '../../actions';\nimport api from '../../../core/api';\n\nexport const getBlogPosts = (postId) => async (dispatch) => {\n\n  dispatch(actions.getBlogPosts.request(Canceler.cancel));\n\n  try {\n    const { data } = await Axios.get(`${api.baseUrl}${api.blogs}${postId ? '/single.json' : '/all.json'}`, {\n      cancelToken: Canceler.token,\n      params: {}\n    });\n\n    dispatch(actions.getBlogPosts.success(data));\n  } catch (err) {\n    dispatch(actions.getBlogPosts.failure(err));\n  }\n};\n\nexport const getBlogComments = (postId) => async (dispatch) => {\n\n  dispatch(actions.getComments.request(Canceler.cancel));\n\n  try {\n    const { data } = await Axios.get(`${api.baseUrl}${api.comments}`, {\n      cancelToken: Canceler.token,\n      params: {}\n    });\n\n    dispatch(actions.getComments.success(data));\n  } catch (err) {\n    dispatch(actions.getComments.failure(err));\n  }\n};\n\nexport const getBlogTags = (postId) => async (dispatch) => {\n\n  dispatch(actions.getTags.request(Canceler.cancel));\n\n  try {\n    const { data } = await Axios.get(`${api.baseUrl}${api.tags}`, {\n      cancelToken: Canceler.token,\n      params: {}\n    });\n\n    dispatch(actions.getTags.success(data));\n  } catch (err) {\n    dispatch(actions.getTags.failure(err));\n  }\n};\n\nexport const getRecentPosts = () => async (dispatch) => {\n\n  dispatch(actions.getRecentPosts.request(Canceler.cancel));\n\n  try {\n    const { data } = await Axios.get(`${api.baseUrl}${api.recent}`, {\n      cancelToken: Canceler.token\n    });\n\n    dispatch(actions.getRecentPosts.success(data));\n  } catch (err) {\n    dispatch(actions.getRecentPosts.failure(err));\n  }\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}