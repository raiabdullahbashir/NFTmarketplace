{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst utils_1 = require(\"@0xproject/utils\");\n\nconst ethABI = require(\"ethereumjs-abi\");\n\nconst wyvern_js_1 = require(\"wyvern-js\");\n\nconst types_1 = require(\"./types\");\n\nconst failWith = msg => {\n  throw new Error(msg);\n};\n\nexports.encodeReplacementPattern = wyvern_js_1.WyvernProtocol.encodeReplacementPattern;\n\nexports.encodeCall = (abi, parameters) => {\n  const inputTypes = abi.inputs.map(i => i.type);\n  return '0x' + Buffer.concat([ethABI.methodID(abi.name, inputTypes), ethABI.rawEncode(inputTypes, parameters)]).toString('hex');\n};\n\nexports.encodeSell = (schema, asset, address) => {\n  const transfer = schema.functions.transfer(asset);\n  return {\n    target: transfer.target,\n    calldata: exports.encodeDefaultCall(transfer, address),\n    replacementPattern: exports.encodeReplacementPattern(transfer)\n  };\n};\n\nexports.encodeAtomicizedSell = (schema, assets, address, atomicizer) => {\n  const transactions = assets.map(asset => {\n    const {\n      target,\n      calldata\n    } = exports.encodeSell(schema, asset, address);\n    return {\n      calldata,\n      abi: schema.functions.transfer(asset),\n      address: target,\n      value: new utils_1.BigNumber(0)\n    };\n  });\n  const atomicizedCalldata = atomicizer.atomicize.getABIEncodedTransactionData(transactions.map(t => t.address), transactions.map(t => t.value), transactions.map(t => new utils_1.BigNumber((t.calldata.length - 2) / 2)), // subtract 2 for '0x', divide by 2 for hex\n  transactions.map(t => t.calldata).reduce((x, y) => x + y.slice(2)));\n  const atomicizedReplacementPattern = wyvern_js_1.WyvernProtocol.encodeAtomicizedReplacementPattern(transactions.map(t => t.abi));\n  return {\n    calldata: atomicizedCalldata,\n    replacementPattern: atomicizedReplacementPattern\n  };\n};\n\nexports.encodeAtomicizedBuy = (schema, assets, address, atomicizer) => {\n  const transactions = assets.map(asset => {\n    const {\n      target,\n      calldata\n    } = exports.encodeBuy(schema, asset, address);\n    return {\n      calldata,\n      abi: schema.functions.transfer(asset),\n      address: target,\n      value: new utils_1.BigNumber(0)\n    };\n  });\n  const atomicizedCalldata = atomicizer.atomicize.getABIEncodedTransactionData(transactions.map(t => t.address), transactions.map(t => t.value), transactions.map(t => new utils_1.BigNumber((t.calldata.length - 2) / 2)), // subtract 2 for '0x', divide by 2 for hex\n  transactions.map(t => t.calldata).reduce((x, y) => x + y.slice(2)));\n  const atomicizedReplacementPattern = wyvern_js_1.WyvernProtocol.encodeAtomicizedReplacementPattern(transactions.map(t => t.abi), types_1.FunctionInputKind.Owner);\n  return {\n    calldata: atomicizedCalldata,\n    replacementPattern: atomicizedReplacementPattern\n  };\n};\n\nexports.encodeBuy = (schema, asset, address) => {\n  const transfer = schema.functions.transfer(asset);\n  const replaceables = transfer.inputs.filter(i => i.kind === types_1.FunctionInputKind.Replaceable);\n  const ownerInputs = transfer.inputs.filter(i => i.kind === types_1.FunctionInputKind.Owner); // Validate\n\n  if (replaceables.length !== 1) {\n    failWith('Only 1 input can match transfer destination, but instead ' + replaceables.length + ' did');\n  } // Compute calldata\n\n\n  const parameters = transfer.inputs.map(input => {\n    switch (input.kind) {\n      case types_1.FunctionInputKind.Replaceable:\n        return address;\n\n      case types_1.FunctionInputKind.Owner:\n        return wyvern_js_1.WyvernProtocol.generateDefaultValue(input.type);\n\n      default:\n        return input.value.toString();\n    }\n  });\n  const calldata = exports.encodeCall(transfer, parameters); // Compute replacement pattern\n\n  let replacementPattern = '0x';\n\n  if (ownerInputs.length > 0) {\n    replacementPattern = exports.encodeReplacementPattern(transfer, types_1.FunctionInputKind.Owner);\n  }\n\n  return {\n    target: transfer.target,\n    calldata,\n    replacementPattern\n  };\n};\n\nexports.encodeDefaultCall = (abi, address) => {\n  const parameters = abi.inputs.map(input => {\n    switch (input.kind) {\n      case types_1.FunctionInputKind.Replaceable:\n        return wyvern_js_1.WyvernProtocol.generateDefaultValue(input.type);\n\n      case types_1.FunctionInputKind.Owner:\n        return address;\n\n      case types_1.FunctionInputKind.Asset:\n      default:\n        return input.value;\n    }\n  });\n  return exports.encodeCall(abi, parameters);\n};","map":{"version":3,"sources":["../src/schemaFunctions.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst utils_1 = require(\"@0xproject/utils\");\r\nconst ethABI = require(\"ethereumjs-abi\");\r\nconst wyvern_js_1 = require(\"wyvern-js\");\r\nconst types_1 = require(\"./types\");\r\nconst failWith = (msg) => {\r\n    throw new Error(msg);\r\n};\r\nexports.encodeReplacementPattern = wyvern_js_1.WyvernProtocol.encodeReplacementPattern;\r\nexports.encodeCall = (abi, parameters) => {\r\n    const inputTypes = abi.inputs.map(i => i.type);\r\n    return '0x' + Buffer.concat([\r\n        ethABI.methodID(abi.name, inputTypes),\r\n        ethABI.rawEncode(inputTypes, parameters),\r\n    ]).toString('hex');\r\n};\r\nexports.encodeSell = (schema, asset, address) => {\r\n    const transfer = schema.functions.transfer(asset);\r\n    return {\r\n        target: transfer.target,\r\n        calldata: exports.encodeDefaultCall(transfer, address),\r\n        replacementPattern: exports.encodeReplacementPattern(transfer),\r\n    };\r\n};\r\nexports.encodeAtomicizedSell = (schema, assets, address, atomicizer) => {\r\n    const transactions = assets.map(asset => {\r\n        const { target, calldata } = exports.encodeSell(schema, asset, address);\r\n        return {\r\n            calldata,\r\n            abi: schema.functions.transfer(asset),\r\n            address: target,\r\n            value: new utils_1.BigNumber(0),\r\n        };\r\n    });\r\n    const atomicizedCalldata = atomicizer.atomicize.getABIEncodedTransactionData(transactions.map(t => t.address), transactions.map(t => t.value), transactions.map(t => new utils_1.BigNumber((t.calldata.length - 2) / 2)), // subtract 2 for '0x', divide by 2 for hex\r\n    transactions.map(t => t.calldata).reduce((x, y) => x + y.slice(2)));\r\n    const atomicizedReplacementPattern = wyvern_js_1.WyvernProtocol.encodeAtomicizedReplacementPattern(transactions.map(t => t.abi));\r\n    return {\r\n        calldata: atomicizedCalldata,\r\n        replacementPattern: atomicizedReplacementPattern,\r\n    };\r\n};\r\nexports.encodeAtomicizedBuy = (schema, assets, address, atomicizer) => {\r\n    const transactions = assets.map(asset => {\r\n        const { target, calldata } = exports.encodeBuy(schema, asset, address);\r\n        return {\r\n            calldata,\r\n            abi: schema.functions.transfer(asset),\r\n            address: target,\r\n            value: new utils_1.BigNumber(0),\r\n        };\r\n    });\r\n    const atomicizedCalldata = atomicizer.atomicize.getABIEncodedTransactionData(transactions.map(t => t.address), transactions.map(t => t.value), transactions.map(t => new utils_1.BigNumber((t.calldata.length - 2) / 2)), // subtract 2 for '0x', divide by 2 for hex\r\n    transactions.map(t => t.calldata).reduce((x, y) => x + y.slice(2)));\r\n    const atomicizedReplacementPattern = wyvern_js_1.WyvernProtocol.encodeAtomicizedReplacementPattern(transactions.map(t => t.abi), types_1.FunctionInputKind.Owner);\r\n    return {\r\n        calldata: atomicizedCalldata,\r\n        replacementPattern: atomicizedReplacementPattern,\r\n    };\r\n};\r\nexports.encodeBuy = (schema, asset, address) => {\r\n    const transfer = schema.functions.transfer(asset);\r\n    const replaceables = transfer.inputs.filter((i) => i.kind === types_1.FunctionInputKind.Replaceable);\r\n    const ownerInputs = transfer.inputs.filter((i) => i.kind === types_1.FunctionInputKind.Owner);\r\n    // Validate\r\n    if (replaceables.length !== 1) {\r\n        failWith('Only 1 input can match transfer destination, but instead ' + replaceables.length + ' did');\r\n    }\r\n    // Compute calldata\r\n    const parameters = transfer.inputs.map((input) => {\r\n        switch (input.kind) {\r\n            case types_1.FunctionInputKind.Replaceable:\r\n                return address;\r\n            case types_1.FunctionInputKind.Owner:\r\n                return wyvern_js_1.WyvernProtocol.generateDefaultValue(input.type);\r\n            default:\r\n                return input.value.toString();\r\n        }\r\n    });\r\n    const calldata = exports.encodeCall(transfer, parameters);\r\n    // Compute replacement pattern\r\n    let replacementPattern = '0x';\r\n    if (ownerInputs.length > 0) {\r\n        replacementPattern = exports.encodeReplacementPattern(transfer, types_1.FunctionInputKind.Owner);\r\n    }\r\n    return {\r\n        target: transfer.target,\r\n        calldata,\r\n        replacementPattern,\r\n    };\r\n};\r\nexports.encodeDefaultCall = (abi, address) => {\r\n    const parameters = abi.inputs.map(input => {\r\n        switch (input.kind) {\r\n            case types_1.FunctionInputKind.Replaceable:\r\n                return wyvern_js_1.WyvernProtocol.generateDefaultValue(input.type);\r\n            case types_1.FunctionInputKind.Owner:\r\n                return address;\r\n            case types_1.FunctionInputKind.Asset:\r\n            default:\r\n                return input.value;\r\n        }\r\n    });\r\n    return exports.encodeCall(abi, parameters);\r\n};\r\n//# sourceMappingURL=schemaFunctions.js.map"]},"metadata":{},"sourceType":"script"}