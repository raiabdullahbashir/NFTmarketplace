{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\raiab\\\\Documents\\\\Logics Yard\\\\NFT code daniyal\\\\NFT code\\\\client\\\\src\\\\core\\\\nft\\\\interact.js\";\nimport { pinJSONToIPFS } from \"./pinata.js\";\nimport { ethers } from 'ethers';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nrequire(\"dotenv\").config();\n\nexport const connectWallet = async () => {\n  if (window.ethereum) {\n    try {\n      const addressArray = await window.ethereum.request({\n        method: \"eth_requestAccounts\"\n      });\n      const obj = {\n        status: \"Metamask successfuly connected.\",\n        address: addressArray[0]\n      };\n      return obj;\n    } catch (err) {\n      return {\n        address: \"\",\n        status: \"Something went wrong: \" + err.message\n      };\n    }\n  } else {\n    return {\n      address: \"\",\n      status: /*#__PURE__*/_jsxDEV(\"span\", {\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\" \", \"\\uD83E\\uDD8A\", \" \", /*#__PURE__*/_jsxDEV(\"a\", {\n            target: \"_blank\",\n            rel: \"noreferrer\",\n            href: `https://metamask.io/download.html`,\n            children: \"You must install Metamask, a virtual Ethereum wallet, in your browser.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 30,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 27,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 9\n      }, this)\n    };\n  }\n};\nexport const getCurrentWalletConnected = async () => {\n  if (window.ethereum) {\n    try {\n      const addressArray = await window.ethereum.request({\n        method: \"eth_accounts\"\n      });\n\n      if (addressArray.length > 0) {\n        return {\n          address: addressArray[0],\n          status: \"\"\n        };\n      } else {\n        return {\n          address: \"\",\n          status: \"🦊 Connect to Metamask using the top right button.\"\n        };\n      }\n    } catch (err) {\n      return {\n        address: \"\",\n        status: \"Something went wrong: \" + err.message\n      };\n    }\n  } else {\n    return {\n      address: \"\",\n      status: /*#__PURE__*/_jsxDEV(\"span\", {\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\" \", \"\\uD83E\\uDD8A\", \" \", /*#__PURE__*/_jsxDEV(\"a\", {\n            target: \"_blank\",\n            rel: \"noreferrer\",\n            href: `https://metamask.io/download.html`,\n            children: \"You must install Metamask, a virtual Ethereum wallet, in your browser.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 72,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }, this)\n    };\n  }\n};\nexport const mintNFT = async (url, name, description, price, minBid, duration, nft, marketplace, auction, select) => {\n  if (url === \"\" || name.trim() === \"\" || description.trim() === \"\") {\n    return {\n      success: false,\n      status: \"Please make sure all fields are completed before minting.\"\n    };\n  }\n\n  const metadata = {};\n  metadata.name = name;\n  metadata.image = url;\n  metadata.description = description;\n  const pinataResponse = await pinJSONToIPFS(metadata);\n\n  if (!pinataResponse.success) {\n    return {\n      success: false,\n      status: \"Something went wrong while uploading your tokenURI.\"\n    };\n  }\n\n  const tokenURI = pinataResponse.pinataUrl;\n  console.log(tokenURI);\n  const link = await nft.mint(tokenURI);\n\n  if (select === 1) {\n    nft.setApprovalForAll(marketplace.address, true);\n    const id = await nft.tokenCount(); // add nft to marketplace\n\n    const listingPrice = ethers.utils.parseEther(price.toString());\n    marketplace.makeItem(nft.address, id, listingPrice);\n  } else {\n    nft.setApprovalForAll(auction.address, true);\n    const id = await nft.tokenCount(); // add nft to marketplace\n\n    const listingPrice = ethers.utils.parseEther(minBid.toString());\n    duration = new Date(duration).getTime() / 1000;\n    auction.createTokenAuction(nft.address, id, listingPrice, duration);\n  }\n\n  return {\n    success: true,\n    status: \"Check out your transaction on Etherscan: https://testnet.bscscan.com/tx/\" + link.hash\n  };\n};","map":{"version":3,"names":["pinJSONToIPFS","ethers","require","config","connectWallet","window","ethereum","addressArray","request","method","obj","status","address","err","message","getCurrentWalletConnected","length","mintNFT","url","name","description","price","minBid","duration","nft","marketplace","auction","select","trim","success","metadata","image","pinataResponse","tokenURI","pinataUrl","console","log","link","mint","setApprovalForAll","id","tokenCount","listingPrice","utils","parseEther","toString","makeItem","Date","getTime","createTokenAuction","hash"],"sources":["C:/Users/raiab/Documents/Logics Yard/NFT code daniyal/NFT code/client/src/core/nft/interact.js"],"sourcesContent":["import { pinJSONToIPFS } from \"./pinata.js\";\nimport { ethers } from 'ethers'\nrequire(\"dotenv\").config();\n\nexport const connectWallet = async () => {\n  if (window.ethereum) {\n    try {\n      const addressArray = await window.ethereum.request({\n        method: \"eth_requestAccounts\",\n      });\n      const obj = {\n        status: \"Metamask successfuly connected.\",\n        address: addressArray[0],\n      };\n      return obj;\n    } catch (err) {\n      return {\n        address: \"\",\n        status: \"Something went wrong: \" + err.message,\n      };\n    }\n  } else {\n    return {\n      address: \"\",\n      status: (\n        <span>\n          <p>\n            {\" \"}\n            🦊{\" \"}\n            <a target=\"_blank\" rel=\"noreferrer\" href={`https://metamask.io/download.html`}>\n              You must install Metamask, a virtual Ethereum wallet, in your\n              browser.\n            </a>\n          </p>\n        </span>\n      ),\n    };\n  }\n};\n\nexport const getCurrentWalletConnected = async () => {\n  if (window.ethereum) {\n    try {\n      const addressArray = await window.ethereum.request({\n        method: \"eth_accounts\",\n      });\n      if (addressArray.length > 0) {\n        return {\n          address: addressArray[0],\n          status: \"\",\n        };\n      } else {\n        return {\n          address: \"\",\n          status: \"🦊 Connect to Metamask using the top right button.\",\n        };\n      }\n    } catch (err) {\n      return {\n        address: \"\",\n        status: \"Something went wrong: \" + err.message,\n      };\n    }\n  } else {\n    return {\n      address: \"\",\n      status: (\n        <span>\n          <p>\n            {\" \"}\n            🦊{\" \"}\n            <a target=\"_blank\" rel=\"noreferrer\" href={`https://metamask.io/download.html`}>\n              You must install Metamask, a virtual Ethereum wallet, in your\n              browser.\n            </a>\n          </p>\n        </span>\n      ),\n    };\n  }\n};\n\nexport const mintNFT = async (url, name, description, price, minBid, duration, nft, marketplace, auction, select) => {\n  if (url === \"\" || name.trim() === \"\" || description.trim() === \"\") {\n    return {\n      success: false,\n      status: \"Please make sure all fields are completed before minting.\",\n    };\n  }\n\n  const metadata = {};\n  metadata.name = name;\n  metadata.image = url;\n  metadata.description = description;\n\n  const pinataResponse = await pinJSONToIPFS(metadata);\n  if (!pinataResponse.success) {\n    return {\n      success: false,\n      status: \"Something went wrong while uploading your tokenURI.\",\n    };\n  }\n  const tokenURI = pinataResponse.pinataUrl;\n  console.log(tokenURI)\n\n  const link = await nft.mint(tokenURI)\n\n  if (select === 1) {\n    nft.setApprovalForAll(marketplace.address, true)\n    const id = await nft.tokenCount()\n    // add nft to marketplace\n    const listingPrice = ethers.utils.parseEther(price.toString())\n    marketplace.makeItem(nft.address, id, listingPrice)\n\n  } else {\n    nft.setApprovalForAll(auction.address, true)\n    const id = await nft.tokenCount()\n    // add nft to marketplace\n    const listingPrice = ethers.utils.parseEther(minBid.toString())\n    duration = (new Date(duration).getTime()) / 1000;\n    auction.createTokenAuction(nft.address, id, listingPrice, duration)\n\n  }\n\n\n  return {\n    success: true,\n    status:\n      \"Check out your transaction on Etherscan: https://testnet.bscscan.com/tx/\" +\n      link.hash,\n  };\n\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}