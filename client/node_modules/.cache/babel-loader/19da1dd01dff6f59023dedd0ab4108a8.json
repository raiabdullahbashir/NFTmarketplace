{"ast":null,"code":"import { getType } from 'typesafe-actions';\nimport * as actions from '../actions';\nimport { handleSelection } from '../utils';\nexport const defaultState = {\n  selectedCategories: new Set(),\n  selectedStatus: new Set(),\n  selectedItemsType: new Set(),\n  selectedCollections: new Set(),\n  filterNftTitle: ''\n};\n\nconst states = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : defaultState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n  const payload = action.payload;\n\n  switch (action.type) {\n    case getType(actions.filterCategories):\n      let selectedCategories = payload.value ? handleSelection(state.selectedCategories, payload.value, payload.singleSelect) : new Set();\n      return { ...state,\n        selectedCategories\n      };\n\n    case getType(actions.filterStatus):\n      let selectedStatus = payload.value ? handleSelection(state.selectedStatus, payload.value, payload.singleSelect) : new Set();\n      return { ...state,\n        selectedStatus\n      };\n\n    case getType(actions.filterItemsType):\n      let selectedItemsType = payload.value ? handleSelection(state.selectedItemsType, payload.value, payload.singleSelect) : new Set();\n      return { ...state,\n        selectedItemsType\n      };\n\n    case getType(actions.filterCollections):\n      let selectedCollections = payload.value ? handleSelection(state.selectedCollections, payload.value, payload.singleSelect) : new Set();\n      return { ...state,\n        selectedCollections\n      };\n\n    case getType(actions.filterNftTitle):\n      return { ...state,\n        filterNftTitle: action.payload\n      };\n\n    case getType(actions.clearFilter):\n      return {\n        selectedCategories: new Set(),\n        selectedStatus: new Set(),\n        selectedItemsType: new Set(),\n        selectedCollections: new Set(),\n        filterNftTitle: ''\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default states;","map":{"version":3,"names":["getType","actions","handleSelection","defaultState","selectedCategories","Set","selectedStatus","selectedItemsType","selectedCollections","filterNftTitle","states","state","action","payload","type","filterCategories","value","singleSelect","filterStatus","filterItemsType","filterCollections","clearFilter"],"sources":["C:/Users/raiab/Documents/Logics Yard/NFT code daniyal/NFT code/src/store/reducers/filters.js"],"sourcesContent":["import { getType } from 'typesafe-actions';\nimport * as actions from '../actions';\nimport { handleSelection } from '../utils';\n\nexport const defaultState = {\n  selectedCategories: new Set(),\n  selectedStatus: new Set(),\n  selectedItemsType: new Set(),\n  selectedCollections: new Set(),\n  filterNftTitle: ''\n};\n\nconst states = (state = defaultState, action) => {\n    const payload = action.payload;\n  switch (action.type) {    \n    case getType(actions.filterCategories):\n        let selectedCategories = payload.value ? handleSelection(state.selectedCategories, payload.value, payload.singleSelect) : new Set();\n      return { ...state, selectedCategories};\n\n    case getType(actions.filterStatus):\n        let selectedStatus = payload.value ? handleSelection(state.selectedStatus, payload.value, payload.singleSelect) : new Set();\n      return { ...state, selectedStatus};\n\n    case getType(actions.filterItemsType):\n        let selectedItemsType = payload.value ? handleSelection(state.selectedItemsType, payload.value, payload.singleSelect) : new Set();\n      return { ...state, selectedItemsType};\n\n    case getType(actions.filterCollections):\n        let selectedCollections = payload.value ? handleSelection(state.selectedCollections, payload.value, payload.singleSelect) : new Set();\n      return { ...state, selectedCollections};\n    \n    case getType(actions.filterNftTitle):\n      return { ...state, filterNftTitle: action.payload};\n\n    case getType(actions.clearFilter):\n      return { \n        selectedCategories: new Set(),\n        selectedStatus: new Set(),\n        selectedItemsType: new Set(),\n        selectedCollections: new Set(),\n        filterNftTitle: ''\n      };\n    \n    default:\n      return state;\n  }\n};\n\nexport default states;\n"],"mappings":"AAAA,SAASA,OAAT,QAAwB,kBAAxB;AACA,OAAO,KAAKC,OAAZ,MAAyB,YAAzB;AACA,SAASC,eAAT,QAAgC,UAAhC;AAEA,OAAO,MAAMC,YAAY,GAAG;EAC1BC,kBAAkB,EAAE,IAAIC,GAAJ,EADM;EAE1BC,cAAc,EAAE,IAAID,GAAJ,EAFU;EAG1BE,iBAAiB,EAAE,IAAIF,GAAJ,EAHO;EAI1BG,mBAAmB,EAAE,IAAIH,GAAJ,EAJK;EAK1BI,cAAc,EAAE;AALU,CAArB;;AAQP,MAAMC,MAAM,GAAG,YAAkC;EAAA,IAAjCC,KAAiC,uEAAzBR,YAAyB;EAAA,IAAXS,MAAW;EAC7C,MAAMC,OAAO,GAAGD,MAAM,CAACC,OAAvB;;EACF,QAAQD,MAAM,CAACE,IAAf;IACE,KAAKd,OAAO,CAACC,OAAO,CAACc,gBAAT,CAAZ;MACI,IAAIX,kBAAkB,GAAGS,OAAO,CAACG,KAAR,GAAgBd,eAAe,CAACS,KAAK,CAACP,kBAAP,EAA2BS,OAAO,CAACG,KAAnC,EAA0CH,OAAO,CAACI,YAAlD,CAA/B,GAAiG,IAAIZ,GAAJ,EAA1H;MACF,OAAO,EAAE,GAAGM,KAAL;QAAYP;MAAZ,CAAP;;IAEF,KAAKJ,OAAO,CAACC,OAAO,CAACiB,YAAT,CAAZ;MACI,IAAIZ,cAAc,GAAGO,OAAO,CAACG,KAAR,GAAgBd,eAAe,CAACS,KAAK,CAACL,cAAP,EAAuBO,OAAO,CAACG,KAA/B,EAAsCH,OAAO,CAACI,YAA9C,CAA/B,GAA6F,IAAIZ,GAAJ,EAAlH;MACF,OAAO,EAAE,GAAGM,KAAL;QAAYL;MAAZ,CAAP;;IAEF,KAAKN,OAAO,CAACC,OAAO,CAACkB,eAAT,CAAZ;MACI,IAAIZ,iBAAiB,GAAGM,OAAO,CAACG,KAAR,GAAgBd,eAAe,CAACS,KAAK,CAACJ,iBAAP,EAA0BM,OAAO,CAACG,KAAlC,EAAyCH,OAAO,CAACI,YAAjD,CAA/B,GAAgG,IAAIZ,GAAJ,EAAxH;MACF,OAAO,EAAE,GAAGM,KAAL;QAAYJ;MAAZ,CAAP;;IAEF,KAAKP,OAAO,CAACC,OAAO,CAACmB,iBAAT,CAAZ;MACI,IAAIZ,mBAAmB,GAAGK,OAAO,CAACG,KAAR,GAAgBd,eAAe,CAACS,KAAK,CAACH,mBAAP,EAA4BK,OAAO,CAACG,KAApC,EAA2CH,OAAO,CAACI,YAAnD,CAA/B,GAAkG,IAAIZ,GAAJ,EAA5H;MACF,OAAO,EAAE,GAAGM,KAAL;QAAYH;MAAZ,CAAP;;IAEF,KAAKR,OAAO,CAACC,OAAO,CAACQ,cAAT,CAAZ;MACE,OAAO,EAAE,GAAGE,KAAL;QAAYF,cAAc,EAAEG,MAAM,CAACC;MAAnC,CAAP;;IAEF,KAAKb,OAAO,CAACC,OAAO,CAACoB,WAAT,CAAZ;MACE,OAAO;QACLjB,kBAAkB,EAAE,IAAIC,GAAJ,EADf;QAELC,cAAc,EAAE,IAAID,GAAJ,EAFX;QAGLE,iBAAiB,EAAE,IAAIF,GAAJ,EAHd;QAILG,mBAAmB,EAAE,IAAIH,GAAJ,EAJhB;QAKLI,cAAc,EAAE;MALX,CAAP;;IAQF;MACE,OAAOE,KAAP;EA9BJ;AAgCD,CAlCD;;AAoCA,eAAeD,MAAf"},"metadata":{},"sourceType":"module"}