{"ast":null,"code":"import * as React from 'react';\nimport { useEffect } from 'react';\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n\n  _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nvar observerMap = new Map();\nvar RootIds = new WeakMap();\nvar rootId = 0;\nvar unsupportedValue = undefined;\n/**\r\n * What should be the default behavior if the IntersectionObserver is unsupported?\r\n * Ideally the polyfill has been loaded, you can have the following happen:\r\n * - `undefined`: Throw an error\r\n * - `true` or `false`: Set the `inView` value to this regardless of intersection state\r\n * **/\n\nfunction defaultFallbackInView(inView) {\n  unsupportedValue = inView;\n}\n/**\r\n * Generate a unique ID for the root element\r\n * @param root\r\n */\n\n\nfunction getRootId(root) {\n  if (!root) return '0';\n  if (RootIds.has(root)) return RootIds.get(root);\n  rootId += 1;\n  RootIds.set(root, rootId.toString());\n  return RootIds.get(root);\n}\n/**\r\n * Convert the options to a string Id, based on the values.\r\n * Ensures we can reuse the same observer when observing elements with the same options.\r\n * @param options\r\n */\n\n\nfunction optionsToId(options) {\n  return Object.keys(options).sort().filter(function (key) {\n    return options[key] !== undefined;\n  }).map(function (key) {\n    return key + \"_\" + (key === 'root' ? getRootId(options.root) : options[key]);\n  }).toString();\n}\n\nfunction createObserver(options) {\n  // Create a unique ID for this observer instance, based on the root, root margin and threshold.\n  var id = optionsToId(options);\n  var instance = observerMap.get(id);\n\n  if (!instance) {\n    // Create a map of elements this observer is going to observe. Each element has a list of callbacks that should be triggered, once it comes into view.\n    var elements = new Map();\n    var thresholds;\n    var observer = new IntersectionObserver(function (entries) {\n      entries.forEach(function (entry) {\n        var _elements$get; // While it would be nice if you could just look at isIntersecting to determine if the component is inside the viewport, browsers can't agree on how to use it.\n        // -Firefox ignores `threshold` when considering `isIntersecting`, so it will never be false again if `threshold` is > 0\n\n\n        var inView = entry.isIntersecting && thresholds.some(function (threshold) {\n          return entry.intersectionRatio >= threshold;\n        }); // @ts-ignore support IntersectionObserver v2\n\n        if (options.trackVisibility && typeof entry.isVisible === 'undefined') {\n          // The browser doesn't support Intersection Observer v2, falling back to v1 behavior.\n          // @ts-ignore\n          entry.isVisible = inView;\n        }\n\n        (_elements$get = elements.get(entry.target)) == null ? void 0 : _elements$get.forEach(function (callback) {\n          callback(inView, entry);\n        });\n      });\n    }, options); // Ensure we have a valid thresholds array. If not, use the threshold from the options\n\n    thresholds = observer.thresholds || (Array.isArray(options.threshold) ? options.threshold : [options.threshold || 0]);\n    instance = {\n      id: id,\n      observer: observer,\n      elements: elements\n    };\n    observerMap.set(id, instance);\n  }\n\n  return instance;\n}\n/**\r\n * @param element - DOM Element to observe\r\n * @param callback - Callback function to trigger when intersection status changes\r\n * @param options - Intersection Observer options\r\n * @param fallbackInView - Fallback inView value.\r\n * @return Function - Cleanup function that should be triggered to unregister the observer\r\n */\n\n\nfunction observe(element, callback, options, fallbackInView) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  if (fallbackInView === void 0) {\n    fallbackInView = unsupportedValue;\n  }\n\n  if (typeof window.IntersectionObserver === 'undefined' && fallbackInView !== undefined) {\n    var bounds = element.getBoundingClientRect();\n    callback(fallbackInView, {\n      isIntersecting: fallbackInView,\n      target: element,\n      intersectionRatio: typeof options.threshold === 'number' ? options.threshold : 0,\n      time: 0,\n      boundingClientRect: bounds,\n      intersectionRect: bounds,\n      rootBounds: bounds\n    });\n    return function () {// Nothing to cleanup\n    };\n  } // An observer with the same options can be reused, so lets use this fact\n\n\n  var _createObserver = createObserver(options),\n      id = _createObserver.id,\n      observer = _createObserver.observer,\n      elements = _createObserver.elements; // Register the callback listener for this element\n\n\n  var callbacks = elements.get(element) || [];\n\n  if (!elements.has(element)) {\n    elements.set(element, callbacks);\n  }\n\n  callbacks.push(callback);\n  observer.observe(element);\n  return function unobserve() {\n    // Remove the callback from the callback list\n    callbacks.splice(callbacks.indexOf(callback), 1);\n\n    if (callbacks.length === 0) {\n      // No more callback exists for element, so destroy it\n      elements[\"delete\"](element);\n      observer.unobserve(element);\n    }\n\n    if (elements.size === 0) {\n      // No more elements are being observer by this instance, so destroy it\n      observer.disconnect();\n      observerMap[\"delete\"](id);\n    }\n  };\n}\n\nvar _excluded = [\"children\", \"as\", \"triggerOnce\", \"threshold\", \"root\", \"rootMargin\", \"onChange\", \"skip\", \"trackVisibility\", \"delay\", \"initialInView\", \"fallbackInView\"];\n\nfunction isPlainChildren(props) {\n  return typeof props.children !== 'function';\n}\n/**\r\n ## Render props\r\n\n To use the `<InView>` component, you pass it a function. It will be called\r\n whenever the state changes, with the new value of `inView`. In addition to the\r\n `inView` prop, children also receive a `ref` that should be set on the\r\n containing DOM element. This is the element that the IntersectionObserver will\r\n monitor.\r\n\n If you need it, you can also access the\r\n [`IntersectionObserverEntry`](https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserverEntry)\r\n on `entry`, giving you access to all the details about the current intersection\r\n state.\r\n\n ```jsx\r\n import { InView } from 'react-intersection-observer';\r\n\n const Component = () => (\r\n <InView>\r\n {({ inView, ref, entry }) => (\r\n      <div ref={ref}>\r\n        <h2>{`Header inside viewport ${inView}.`}</h2>\r\n      </div>\r\n    )}\r\n </InView>\r\n );\r\n\n export default Component;\r\n ```\r\n\n ## Plain children\r\n\n You can pass any element to the `<InView />`, and it will handle creating the\r\n wrapping DOM element. Add a handler to the `onChange` method, and control the\r\n state in your own component. Any extra props you add to `<InView>` will be\r\n passed to the HTML element, allowing you set the `className`, `style`, etc.\r\n\n ```jsx\r\n import { InView } from 'react-intersection-observer';\r\n\n const Component = () => (\r\n <InView as=\"div\" onChange={(inView, entry) => console.log('Inview:', inView)}>\r\n <h2>Plain children are always rendered. Use onChange to monitor state.</h2>\r\n </InView>\r\n );\r\n\n export default Component;\r\n ```\r\n */\n\n\nvar InView = /*#__PURE__*/function (_React$Component) {\n  _inheritsLoose(InView, _React$Component);\n\n  function InView(props) {\n    var _this;\n\n    _this = _React$Component.call(this, props) || this;\n    _this.node = null;\n    _this._unobserveCb = null;\n\n    _this.handleNode = function (node) {\n      if (_this.node) {\n        // Clear the old observer, before we start observing a new element\n        _this.unobserve();\n\n        if (!node && !_this.props.triggerOnce && !_this.props.skip) {\n          // Reset the state if we get a new node, and we aren't ignoring updates\n          _this.setState({\n            inView: !!_this.props.initialInView,\n            entry: undefined\n          });\n        }\n      }\n\n      _this.node = node ? node : null;\n\n      _this.observeNode();\n    };\n\n    _this.handleChange = function (inView, entry) {\n      if (inView && _this.props.triggerOnce) {\n        // If `triggerOnce` is true, we should stop observing the element.\n        _this.unobserve();\n      }\n\n      if (!isPlainChildren(_this.props)) {\n        // Store the current State, so we can pass it to the children in the next render update\n        // There's no reason to update the state for plain children, since it's not used in the rendering.\n        _this.setState({\n          inView: inView,\n          entry: entry\n        });\n      }\n\n      if (_this.props.onChange) {\n        // If the user is actively listening for onChange, always trigger it\n        _this.props.onChange(inView, entry);\n      }\n    };\n\n    _this.state = {\n      inView: !!props.initialInView,\n      entry: undefined\n    };\n    return _this;\n  }\n\n  var _proto = InView.prototype;\n\n  _proto.componentDidUpdate = function componentDidUpdate(prevProps) {\n    // If a IntersectionObserver option changed, reinit the observer\n    if (prevProps.rootMargin !== this.props.rootMargin || prevProps.root !== this.props.root || prevProps.threshold !== this.props.threshold || prevProps.skip !== this.props.skip || prevProps.trackVisibility !== this.props.trackVisibility || prevProps.delay !== this.props.delay) {\n      this.unobserve();\n      this.observeNode();\n    }\n  };\n\n  _proto.componentWillUnmount = function componentWillUnmount() {\n    this.unobserve();\n    this.node = null;\n  };\n\n  _proto.observeNode = function observeNode() {\n    if (!this.node || this.props.skip) return;\n    var _this$props = this.props,\n        threshold = _this$props.threshold,\n        root = _this$props.root,\n        rootMargin = _this$props.rootMargin,\n        trackVisibility = _this$props.trackVisibility,\n        delay = _this$props.delay,\n        fallbackInView = _this$props.fallbackInView;\n    this._unobserveCb = observe(this.node, this.handleChange, {\n      threshold: threshold,\n      root: root,\n      rootMargin: rootMargin,\n      // @ts-ignore\n      trackVisibility: trackVisibility,\n      // @ts-ignore\n      delay: delay\n    }, fallbackInView);\n  };\n\n  _proto.unobserve = function unobserve() {\n    if (this._unobserveCb) {\n      this._unobserveCb();\n\n      this._unobserveCb = null;\n    }\n  };\n\n  _proto.render = function render() {\n    if (!isPlainChildren(this.props)) {\n      var _this$state = this.state,\n          inView = _this$state.inView,\n          entry = _this$state.entry;\n      return this.props.children({\n        inView: inView,\n        entry: entry,\n        ref: this.handleNode\n      });\n    }\n\n    var _this$props2 = this.props,\n        children = _this$props2.children,\n        as = _this$props2.as,\n        props = _objectWithoutPropertiesLoose(_this$props2, _excluded);\n\n    return /*#__PURE__*/React.createElement(as || 'div', _extends({\n      ref: this.handleNode\n    }, props), children);\n  };\n\n  return InView;\n}(React.Component);\n\nInView.displayName = 'InView';\nInView.defaultProps = {\n  threshold: 0,\n  triggerOnce: false,\n  initialInView: false\n};\n/**\r\n * React Hooks make it easy to monitor the `inView` state of your components. Call\r\n * the `useInView` hook with the (optional) [options](#options) you need. It will\r\n * return an array containing a `ref`, the `inView` status and the current\r\n * [`entry`](https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserverEntry).\r\n * Assign the `ref` to the DOM element you want to monitor, and the hook will\r\n * report the status.\r\n *\r\n * @example\r\n * ```jsx\r\n * import React from 'react';\r\n * import { useInView } from 'react-intersection-observer';\r\n *\r\n * const Component = () => {\r\n *   const { ref, inView, entry } = useInView({\r\n *       threshold: 0,\r\n *   });\r\n *\r\n *   return (\r\n *     <div ref={ref}>\r\n *       <h2>{`Header inside viewport ${inView}.`}</h2>\r\n *     </div>\r\n *   );\r\n * };\r\n * ```\r\n */\n\nfunction useInView(_temp) {\n  var _ref = _temp === void 0 ? {} : _temp,\n      threshold = _ref.threshold,\n      delay = _ref.delay,\n      trackVisibility = _ref.trackVisibility,\n      rootMargin = _ref.rootMargin,\n      root = _ref.root,\n      triggerOnce = _ref.triggerOnce,\n      skip = _ref.skip,\n      initialInView = _ref.initialInView,\n      fallbackInView = _ref.fallbackInView;\n\n  var unobserve = React.useRef();\n\n  var _React$useState = React.useState({\n    inView: !!initialInView\n  }),\n      state = _React$useState[0],\n      setState = _React$useState[1];\n\n  var setRef = React.useCallback(function (node) {\n    if (unobserve.current !== undefined) {\n      unobserve.current();\n      unobserve.current = undefined;\n    } // Skip creating the observer\n\n\n    if (skip) return;\n\n    if (node) {\n      unobserve.current = observe(node, function (inView, entry) {\n        setState({\n          inView: inView,\n          entry: entry\n        });\n\n        if (entry.isIntersecting && triggerOnce && unobserve.current) {\n          // If it should only trigger once, unobserve the element after it's inView\n          unobserve.current();\n          unobserve.current = undefined;\n        }\n      }, {\n        root: root,\n        rootMargin: rootMargin,\n        threshold: threshold,\n        // @ts-ignore\n        trackVisibility: trackVisibility,\n        // @ts-ignore\n        delay: delay\n      }, fallbackInView);\n    }\n  }, // We break the rule here, because we aren't including the actual `threshold` variable\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  [// If the threshold is an array, convert it to a string so it won't change between renders.\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  Array.isArray(threshold) ? threshold.toString() : threshold, root, rootMargin, triggerOnce, skip, trackVisibility, fallbackInView, delay]);\n  /* eslint-disable-next-line */\n\n  useEffect(function () {\n    if (!unobserve.current && state.entry && !triggerOnce && !skip) {\n      // If we don't have a ref, then reset the state (unless the hook is set to only `triggerOnce` or `skip`)\n      // This ensures we correctly reflect the current state - If you aren't observing anything, then nothing is inView\n      setState({\n        inView: !!initialInView\n      });\n    }\n  });\n  var result = [setRef, state.inView, state.entry]; // Support object destructuring, by adding the specific values.\n\n  result.ref = result[0];\n  result.inView = result[1];\n  result.entry = result[2];\n  return result;\n}\n\nexport { InView, InView as default, defaultFallbackInView, observe, useInView };","map":{"version":3,"sources":["../src/observe.ts","../src/InView.tsx","../src/useInView.tsx"],"names":["observerMap","RootIds","rootId","unsupportedValue","Object","options","key","getRootId","id","optionsToId","instance","elements","observer","entries","inView","entry","callback","thresholds","Array","fallbackInView","window","bounds","element","isIntersecting","target","intersectionRatio","time","boundingClientRect","intersectionRect","rootBounds","createObserver","callbacks","props","InView","React","displayName","defaultProps","threshold","triggerOnce","initialInView","undefined","componentDidUpdate","prevProps","componentWillUnmount","node","_unobserveCb","observeNode","root","rootMargin","trackVisibility","delay","observe","unobserve","isPlainChildren","render","ref","handleNode","children","as","skip","state","setState","setRef","useEffect","result"],"mappings":"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","sourcesContent":["import { ObserverInstanceCallback } from './index';\n\nconst observerMap = new Map<\n  string,\n  {\n    id: string;\n    observer: IntersectionObserver;\n    elements: Map<Element, Array<ObserverInstanceCallback>>;\n  }\n>();\n\nconst RootIds: WeakMap<Element | Document, string> = new WeakMap();\nlet rootId = 0;\n\nlet unsupportedValue: boolean | undefined = undefined;\n\n/**\n * What should be the default behavior if the IntersectionObserver is unsupported?\n * Ideally the polyfill has been loaded, you can have the following happen:\n * - `undefined`: Throw an error\n * - `true` or `false`: Set the `inView` value to this regardless of intersection state\n * **/\nexport function defaultFallbackInView(inView: boolean | undefined) {\n  unsupportedValue = inView;\n}\n\n/**\n * Generate a unique ID for the root element\n * @param root\n */\nfunction getRootId(root: IntersectionObserverInit['root']) {\n  if (!root) return '0';\n  if (RootIds.has(root)) return RootIds.get(root);\n  rootId += 1;\n  RootIds.set(root, rootId.toString());\n  return RootIds.get(root);\n}\n\n/**\n * Convert the options to a string Id, based on the values.\n * Ensures we can reuse the same observer when observing elements with the same options.\n * @param options\n */\nexport function optionsToId(options: IntersectionObserverInit) {\n  return Object.keys(options)\n    .sort()\n    .filter((key) => options[key] !== undefined)\n    .map((key) => {\n      return `${key}_${\n        key === 'root' ? getRootId(options.root) : options[key]\n      }`;\n    })\n    .toString();\n}\n\nfunction createObserver(options: IntersectionObserverInit) {\n  // Create a unique ID for this observer instance, based on the root, root margin and threshold.\n  let id = optionsToId(options);\n  let instance = observerMap.get(id);\n\n  if (!instance) {\n    // Create a map of elements this observer is going to observe. Each element has a list of callbacks that should be triggered, once it comes into view.\n    const elements = new Map<Element, Array<ObserverInstanceCallback>>();\n    let thresholds: number[] | readonly number[];\n\n    const observer = new IntersectionObserver((entries) => {\n      entries.forEach((entry) => {\n        // While it would be nice if you could just look at isIntersecting to determine if the component is inside the viewport, browsers can't agree on how to use it.\n        // -Firefox ignores `threshold` when considering `isIntersecting`, so it will never be false again if `threshold` is > 0\n        const inView =\n          entry.isIntersecting &&\n          thresholds.some((threshold) => entry.intersectionRatio >= threshold);\n\n        // @ts-ignore support IntersectionObserver v2\n        if (options.trackVisibility && typeof entry.isVisible === 'undefined') {\n          // The browser doesn't support Intersection Observer v2, falling back to v1 behavior.\n          // @ts-ignore\n          entry.isVisible = inView;\n        }\n\n        elements.get(entry.target)?.forEach((callback) => {\n          callback(inView, entry);\n        });\n      });\n    }, options);\n\n    // Ensure we have a valid thresholds array. If not, use the threshold from the options\n    thresholds =\n      observer.thresholds ||\n      (Array.isArray(options.threshold)\n        ? options.threshold\n        : [options.threshold || 0]);\n\n    instance = {\n      id,\n      observer,\n      elements,\n    };\n\n    observerMap.set(id, instance);\n  }\n\n  return instance;\n}\n\n/**\n * @param element - DOM Element to observe\n * @param callback - Callback function to trigger when intersection status changes\n * @param options - Intersection Observer options\n * @param fallbackInView - Fallback inView value.\n * @return Function - Cleanup function that should be triggered to unregister the observer\n */\nexport function observe(\n  element: Element,\n  callback: ObserverInstanceCallback,\n  options: IntersectionObserverInit = {},\n  fallbackInView = unsupportedValue,\n) {\n  if (\n    typeof window.IntersectionObserver === 'undefined' &&\n    fallbackInView !== undefined\n  ) {\n    const bounds = element.getBoundingClientRect();\n    callback(fallbackInView, {\n      isIntersecting: fallbackInView,\n      target: element,\n      intersectionRatio:\n        typeof options.threshold === 'number' ? options.threshold : 0,\n      time: 0,\n      boundingClientRect: bounds,\n      intersectionRect: bounds,\n      rootBounds: bounds,\n    });\n    return () => {\n      // Nothing to cleanup\n    };\n  }\n  // An observer with the same options can be reused, so lets use this fact\n  const { id, observer, elements } = createObserver(options);\n\n  // Register the callback listener for this element\n  let callbacks = elements.get(element) || [];\n  if (!elements.has(element)) {\n    elements.set(element, callbacks);\n  }\n\n  callbacks.push(callback);\n  observer.observe(element);\n\n  return function unobserve() {\n    // Remove the callback from the callback list\n    callbacks.splice(callbacks.indexOf(callback), 1);\n\n    if (callbacks.length === 0) {\n      // No more callback exists for element, so destroy it\n      elements.delete(element);\n      observer.unobserve(element);\n    }\n\n    if (elements.size === 0) {\n      // No more elements are being observer by this instance, so destroy it\n      observer.disconnect();\n      observerMap.delete(id);\n    }\n  };\n}\n","import * as React from 'react';\nimport { IntersectionObserverProps, PlainChildrenProps } from './index';\nimport { observe } from './observe';\n\ntype State = {\n  inView: boolean;\n  entry?: IntersectionObserverEntry;\n};\n\nfunction isPlainChildren(\n  props: IntersectionObserverProps | PlainChildrenProps,\n): props is PlainChildrenProps {\n  return typeof props.children !== 'function';\n}\n\n/**\n ## Render props\n\n To use the `<InView>` component, you pass it a function. It will be called\n whenever the state changes, with the new value of `inView`. In addition to the\n `inView` prop, children also receive a `ref` that should be set on the\n containing DOM element. This is the element that the IntersectionObserver will\n monitor.\n\n If you need it, you can also access the\n [`IntersectionObserverEntry`](https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserverEntry)\n on `entry`, giving you access to all the details about the current intersection\n state.\n\n ```jsx\n import { InView } from 'react-intersection-observer';\n\n const Component = () => (\n <InView>\n {({ inView, ref, entry }) => (\n      <div ref={ref}>\n        <h2>{`Header inside viewport ${inView}.`}</h2>\n      </div>\n    )}\n </InView>\n );\n\n export default Component;\n ```\n\n ## Plain children\n\n You can pass any element to the `<InView />`, and it will handle creating the\n wrapping DOM element. Add a handler to the `onChange` method, and control the\n state in your own component. Any extra props you add to `<InView>` will be\n passed to the HTML element, allowing you set the `className`, `style`, etc.\n\n ```jsx\n import { InView } from 'react-intersection-observer';\n\n const Component = () => (\n <InView as=\"div\" onChange={(inView, entry) => console.log('Inview:', inView)}>\n <h2>Plain children are always rendered. Use onChange to monitor state.</h2>\n </InView>\n );\n\n export default Component;\n ```\n */\nexport class InView extends React.Component<\n  IntersectionObserverProps | PlainChildrenProps,\n  State\n> {\n  static displayName = 'InView';\n  static defaultProps = {\n    threshold: 0,\n    triggerOnce: false,\n    initialInView: false,\n  };\n\n  constructor(props: IntersectionObserverProps | PlainChildrenProps) {\n    super(props);\n    this.state = {\n      inView: !!props.initialInView,\n      entry: undefined,\n    };\n  }\n\n  componentDidUpdate(prevProps: IntersectionObserverProps) {\n    // If a IntersectionObserver option changed, reinit the observer\n    if (\n      prevProps.rootMargin !== this.props.rootMargin ||\n      prevProps.root !== this.props.root ||\n      prevProps.threshold !== this.props.threshold ||\n      prevProps.skip !== this.props.skip ||\n      prevProps.trackVisibility !== this.props.trackVisibility ||\n      prevProps.delay !== this.props.delay\n    ) {\n      this.unobserve();\n      this.observeNode();\n    }\n  }\n\n  componentWillUnmount() {\n    this.unobserve();\n    this.node = null;\n  }\n\n  node: Element | null = null;\n  _unobserveCb: (() => void) | null = null;\n\n  observeNode() {\n    if (!this.node || this.props.skip) return;\n    const {\n      threshold,\n      root,\n      rootMargin,\n      trackVisibility,\n      delay,\n      fallbackInView,\n    } = this.props;\n\n    this._unobserveCb = observe(\n      this.node,\n      this.handleChange,\n      {\n        threshold,\n        root,\n        rootMargin,\n        // @ts-ignore\n        trackVisibility,\n        // @ts-ignore\n        delay,\n      },\n      fallbackInView,\n    );\n  }\n\n  unobserve() {\n    if (this._unobserveCb) {\n      this._unobserveCb();\n      this._unobserveCb = null;\n    }\n  }\n\n  handleNode = (node?: Element | null) => {\n    if (this.node) {\n      // Clear the old observer, before we start observing a new element\n      this.unobserve();\n\n      if (!node && !this.props.triggerOnce && !this.props.skip) {\n        // Reset the state if we get a new node, and we aren't ignoring updates\n        this.setState({ inView: !!this.props.initialInView, entry: undefined });\n      }\n    }\n\n    this.node = node ? node : null;\n    this.observeNode();\n  };\n\n  handleChange = (inView: boolean, entry: IntersectionObserverEntry) => {\n    if (inView && this.props.triggerOnce) {\n      // If `triggerOnce` is true, we should stop observing the element.\n      this.unobserve();\n    }\n    if (!isPlainChildren(this.props)) {\n      // Store the current State, so we can pass it to the children in the next render update\n      // There's no reason to update the state for plain children, since it's not used in the rendering.\n      this.setState({ inView, entry });\n    }\n    if (this.props.onChange) {\n      // If the user is actively listening for onChange, always trigger it\n      this.props.onChange(inView, entry);\n    }\n  };\n\n  render() {\n    if (!isPlainChildren(this.props)) {\n      const { inView, entry } = this.state;\n      return this.props.children({ inView, entry, ref: this.handleNode });\n    }\n\n    const {\n      children,\n      as,\n      triggerOnce,\n      threshold,\n      root,\n      rootMargin,\n      onChange,\n      skip,\n      trackVisibility,\n      delay,\n      initialInView,\n      fallbackInView,\n      ...props\n    } = this.props;\n\n    return React.createElement(\n      as || 'div',\n      { ref: this.handleNode, ...props },\n      children,\n    );\n  }\n}\n","import * as React from 'react';\nimport { InViewHookResponse, IntersectionOptions } from './index';\nimport { useEffect } from 'react';\nimport { observe } from './observe';\n\ntype State = {\n  inView: boolean;\n  entry?: IntersectionObserverEntry;\n};\n\n/**\n * React Hooks make it easy to monitor the `inView` state of your components. Call\n * the `useInView` hook with the (optional) [options](#options) you need. It will\n * return an array containing a `ref`, the `inView` status and the current\n * [`entry`](https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserverEntry).\n * Assign the `ref` to the DOM element you want to monitor, and the hook will\n * report the status.\n *\n * @example\n * ```jsx\n * import React from 'react';\n * import { useInView } from 'react-intersection-observer';\n *\n * const Component = () => {\n *   const { ref, inView, entry } = useInView({\n *       threshold: 0,\n *   });\n *\n *   return (\n *     <div ref={ref}>\n *       <h2>{`Header inside viewport ${inView}.`}</h2>\n *     </div>\n *   );\n * };\n * ```\n */\nexport function useInView({\n  threshold,\n  delay,\n  trackVisibility,\n  rootMargin,\n  root,\n  triggerOnce,\n  skip,\n  initialInView,\n  fallbackInView,\n}: IntersectionOptions = {}): InViewHookResponse {\n  const unobserve = React.useRef<Function>();\n  const [state, setState] = React.useState<State>({\n    inView: !!initialInView,\n  });\n  const setRef = React.useCallback(\n    (node: Element | null) => {\n      if (unobserve.current !== undefined) {\n        unobserve.current();\n        unobserve.current = undefined;\n      }\n\n      // Skip creating the observer\n      if (skip) return;\n\n      if (node) {\n        unobserve.current = observe(\n          node,\n          (inView, entry) => {\n            setState({ inView, entry });\n\n            if (entry.isIntersecting && triggerOnce && unobserve.current) {\n              // If it should only trigger once, unobserve the element after it's inView\n              unobserve.current();\n              unobserve.current = undefined;\n            }\n          },\n          {\n            root,\n            rootMargin,\n            threshold,\n            // @ts-ignore\n            trackVisibility,\n            // @ts-ignore\n            delay,\n          },\n          fallbackInView,\n        );\n      }\n    },\n    // We break the rule here, because we aren't including the actual `threshold` variable\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [\n      // If the threshold is an array, convert it to a string so it won't change between renders.\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n      Array.isArray(threshold) ? threshold.toString() : threshold,\n      root,\n      rootMargin,\n      triggerOnce,\n      skip,\n      trackVisibility,\n      fallbackInView,\n      delay,\n    ],\n  );\n\n  /* eslint-disable-next-line */\n  useEffect(() => {\n    if (!unobserve.current && state.entry && !triggerOnce && !skip) {\n      // If we don't have a ref, then reset the state (unless the hook is set to only `triggerOnce` or `skip`)\n      // This ensures we correctly reflect the current state - If you aren't observing anything, then nothing is inView\n      setState({\n        inView: !!initialInView,\n      });\n    }\n  });\n\n  const result = [setRef, state.inView, state.entry] as InViewHookResponse;\n\n  // Support object destructuring, by adding the specific values.\n  result.ref = result[0];\n  result.inView = result[1];\n  result.entry = result[2];\n\n  return result;\n}\n"]},"metadata":{},"sourceType":"module"}