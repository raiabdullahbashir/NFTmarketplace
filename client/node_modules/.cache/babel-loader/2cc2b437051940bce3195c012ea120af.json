{"ast":null,"code":"import { colorToHsl, getStyleFromHsl } from \"../../Utils/ColorUtils\";\nimport { getRangeValue } from \"../../Utils/NumberUtils\";\nexport class TwinkleUpdater {\n  getColorStyles(particle, context, radius, opacity) {\n    const pOptions = particle.options,\n          twinkle = pOptions.twinkle.particles,\n          twinkling = twinkle.enable && Math.random() < twinkle.frequency,\n          zIndexOptions = particle.options.zIndex,\n          zOpacityFactor = (1 - particle.zIndexFactor) ** zIndexOptions.opacityRate,\n          twinklingOpacity = twinkling ? getRangeValue(twinkle.opacity) * zOpacityFactor : opacity,\n          twinkleRgb = colorToHsl(twinkle.color),\n          twinkleStyle = twinkleRgb ? getStyleFromHsl(twinkleRgb, twinklingOpacity) : undefined,\n          res = {},\n          needsTwinkle = twinkling && twinkleStyle;\n    res.fill = needsTwinkle ? twinkleStyle : undefined;\n    res.stroke = needsTwinkle ? twinkleStyle : undefined;\n    return res;\n  }\n\n  init() {}\n\n  isEnabled(particle) {\n    return particle.options.twinkle.particles.enable;\n  }\n\n  update() {}\n\n}","map":{"version":3,"names":["colorToHsl","getStyleFromHsl","getRangeValue","TwinkleUpdater","getColorStyles","particle","context","radius","opacity","pOptions","options","twinkle","particles","twinkling","enable","Math","random","frequency","zIndexOptions","zIndex","zOpacityFactor","zIndexFactor","opacityRate","twinklingOpacity","twinkleRgb","color","twinkleStyle","undefined","res","needsTwinkle","fill","stroke","init","isEnabled","update"],"sources":["C:/Users/raiab/Documents/Logics Yard/NFT code daniyal/NFT code/node_modules/tsparticles/esm/Updaters/Twinkle/TwinkleUpdater.js"],"sourcesContent":["import { colorToHsl, getStyleFromHsl } from \"../../Utils/ColorUtils\";\nimport { getRangeValue } from \"../../Utils/NumberUtils\";\nexport class TwinkleUpdater {\n    getColorStyles(particle, context, radius, opacity) {\n        const pOptions = particle.options, twinkle = pOptions.twinkle.particles, twinkling = twinkle.enable && Math.random() < twinkle.frequency, zIndexOptions = particle.options.zIndex, zOpacityFactor = (1 - particle.zIndexFactor) ** zIndexOptions.opacityRate, twinklingOpacity = twinkling ? getRangeValue(twinkle.opacity) * zOpacityFactor : opacity, twinkleRgb = colorToHsl(twinkle.color), twinkleStyle = twinkleRgb ? getStyleFromHsl(twinkleRgb, twinklingOpacity) : undefined, res = {}, needsTwinkle = twinkling && twinkleStyle;\n        res.fill = needsTwinkle ? twinkleStyle : undefined;\n        res.stroke = needsTwinkle ? twinkleStyle : undefined;\n        return res;\n    }\n    init() {\n    }\n    isEnabled(particle) {\n        return particle.options.twinkle.particles.enable;\n    }\n    update() {\n    }\n}\n"],"mappings":"AAAA,SAASA,UAAT,EAAqBC,eAArB,QAA4C,wBAA5C;AACA,SAASC,aAAT,QAA8B,yBAA9B;AACA,OAAO,MAAMC,cAAN,CAAqB;EACxBC,cAAc,CAACC,QAAD,EAAWC,OAAX,EAAoBC,MAApB,EAA4BC,OAA5B,EAAqC;IAC/C,MAAMC,QAAQ,GAAGJ,QAAQ,CAACK,OAA1B;IAAA,MAAmCC,OAAO,GAAGF,QAAQ,CAACE,OAAT,CAAiBC,SAA9D;IAAA,MAAyEC,SAAS,GAAGF,OAAO,CAACG,MAAR,IAAkBC,IAAI,CAACC,MAAL,KAAgBL,OAAO,CAACM,SAA/H;IAAA,MAA0IC,aAAa,GAAGb,QAAQ,CAACK,OAAT,CAAiBS,MAA3K;IAAA,MAAmLC,cAAc,GAAG,CAAC,IAAIf,QAAQ,CAACgB,YAAd,KAA+BH,aAAa,CAACI,WAAjP;IAAA,MAA8PC,gBAAgB,GAAGV,SAAS,GAAGX,aAAa,CAACS,OAAO,CAACH,OAAT,CAAb,GAAiCY,cAApC,GAAqDZ,OAA/U;IAAA,MAAwVgB,UAAU,GAAGxB,UAAU,CAACW,OAAO,CAACc,KAAT,CAA/W;IAAA,MAAgYC,YAAY,GAAGF,UAAU,GAAGvB,eAAe,CAACuB,UAAD,EAAaD,gBAAb,CAAlB,GAAmDI,SAA5c;IAAA,MAAudC,GAAG,GAAG,EAA7d;IAAA,MAAieC,YAAY,GAAGhB,SAAS,IAAIa,YAA7f;IACAE,GAAG,CAACE,IAAJ,GAAWD,YAAY,GAAGH,YAAH,GAAkBC,SAAzC;IACAC,GAAG,CAACG,MAAJ,GAAaF,YAAY,GAAGH,YAAH,GAAkBC,SAA3C;IACA,OAAOC,GAAP;EACH;;EACDI,IAAI,GAAG,CACN;;EACDC,SAAS,CAAC5B,QAAD,EAAW;IAChB,OAAOA,QAAQ,CAACK,OAAT,CAAiBC,OAAjB,CAAyBC,SAAzB,CAAmCE,MAA1C;EACH;;EACDoB,MAAM,GAAG,CACR;;AAbuB"},"metadata":{},"sourceType":"module"}