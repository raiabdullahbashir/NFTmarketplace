{"ast":null,"code":"/*\n    This file is part of web3.js.\n\n    web3.js is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    web3.js is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\n/**\n * @file contract.js\n * @author Marek Kotewicz <marek@ethdev.com>\n * @date 2014\n */\nvar utils = require('../utils/utils');\n\nvar coder = require('../solidity/coder');\n\nvar SolidityEvent = require('./event');\n\nvar SolidityFunction = require('./function');\n\nvar AllEvents = require('./allevents');\n/**\n * Should be called to encode constructor params\n *\n * @method encodeConstructorParams\n * @param {Array} abi\n * @param {Array} constructor params\n */\n\n\nvar encodeConstructorParams = function (abi, params) {\n  return abi.filter(function (json) {\n    return json.type === 'constructor' && json.inputs.length === params.length;\n  }).map(function (json) {\n    return json.inputs.map(function (input) {\n      return input.type;\n    });\n  }).map(function (types) {\n    return coder.encodeParams(types, params);\n  })[0] || '';\n};\n/**\n * Should be called to add functions to contract object\n *\n * @method addFunctionsToContract\n * @param {Contract} contract\n * @param {Array} abi\n */\n\n\nvar addFunctionsToContract = function (contract) {\n  contract.abi.filter(function (json) {\n    return json.type === 'function';\n  }).map(function (json) {\n    return new SolidityFunction(contract._eth, json, contract.address);\n  }).forEach(function (f) {\n    f.attachToContract(contract);\n  });\n};\n/**\n * Should be called to add events to contract object\n *\n * @method addEventsToContract\n * @param {Contract} contract\n * @param {Array} abi\n */\n\n\nvar addEventsToContract = function (contract) {\n  var events = contract.abi.filter(function (json) {\n    return json.type === 'event';\n  });\n  var All = new AllEvents(contract._eth._requestManager, events, contract.address);\n  All.attachToContract(contract);\n  events.map(function (json) {\n    return new SolidityEvent(contract._eth._requestManager, json, contract.address);\n  }).forEach(function (e) {\n    e.attachToContract(contract);\n  });\n};\n/**\n * Should be called to check if the contract gets properly deployed on the blockchain.\n *\n * @method checkForContractAddress\n * @param {Object} contract\n * @param {Function} callback\n * @returns {Undefined}\n */\n\n\nvar checkForContractAddress = function (contract, callback) {\n  var count = 0,\n      callbackFired = false; // wait for receipt\n\n  var filter = contract._eth.filter('latest', function (e) {\n    if (!e && !callbackFired) {\n      count++; // stop watching after 50 blocks (timeout)\n\n      if (count > 50) {\n        filter.stopWatching(function () {});\n        callbackFired = true;\n        if (callback) callback(new Error('Contract transaction couldn\\'t be found after 50 blocks'));else throw new Error('Contract transaction couldn\\'t be found after 50 blocks');\n      } else {\n        contract._eth.getTransactionReceipt(contract.transactionHash, function (e, receipt) {\n          if (receipt && receipt.blockHash && !callbackFired) {\n            contract._eth.getCode(receipt.contractAddress, function (e, code) {\n              /*jshint maxcomplexity: 6 */\n              if (callbackFired || !code) return;\n              filter.stopWatching(function () {});\n              callbackFired = true;\n\n              if (code.length > 3) {\n                // console.log('Contract code deployed!');\n                contract.address = receipt.contractAddress; // attach events and methods again after we have\n\n                addFunctionsToContract(contract);\n                addEventsToContract(contract); // call callback for the second time\n\n                if (callback) callback(null, contract);\n              } else {\n                if (callback) callback(new Error('The contract code couldn\\'t be stored, please check your gas amount.'));else throw new Error('The contract code couldn\\'t be stored, please check your gas amount.');\n              }\n            });\n          }\n        });\n      }\n    }\n  });\n};\n/**\n * Should be called to create new ContractFactory instance\n *\n * @method ContractFactory\n * @param {Array} abi\n */\n\n\nvar ContractFactory = function (eth, abi) {\n  this.eth = eth;\n  this.abi = abi;\n  /**\n   * Should be called to create new contract on a blockchain\n   *\n   * @method new\n   * @param {Any} contract constructor param1 (optional)\n   * @param {Any} contract constructor param2 (optional)\n   * @param {Object} contract transaction object (required)\n   * @param {Function} callback\n   * @returns {Contract} returns contract instance\n   */\n\n  this.new = function () {\n    /*jshint maxcomplexity: 7 */\n    var contract = new Contract(this.eth, this.abi); // parse arguments\n\n    var options = {}; // required!\n\n    var callback;\n    var args = Array.prototype.slice.call(arguments);\n\n    if (utils.isFunction(args[args.length - 1])) {\n      callback = args.pop();\n    }\n\n    var last = args[args.length - 1];\n\n    if (utils.isObject(last) && !utils.isArray(last)) {\n      options = args.pop();\n    }\n\n    if (options.value > 0) {\n      var constructorAbi = abi.filter(function (json) {\n        return json.type === 'constructor' && json.inputs.length === args.length;\n      })[0] || {};\n\n      if (!constructorAbi.payable) {\n        throw new Error('Cannot send value to non-payable constructor');\n      }\n    }\n\n    var bytes = encodeConstructorParams(this.abi, args);\n    options.data += bytes;\n\n    if (callback) {\n      // wait for the contract address and check if the code was deployed\n      this.eth.sendTransaction(options, function (err, hash) {\n        if (err) {\n          callback(err);\n        } else {\n          // add the transaction hash\n          contract.transactionHash = hash; // call callback for the first time\n\n          callback(null, contract);\n          checkForContractAddress(contract, callback);\n        }\n      });\n    } else {\n      var hash = this.eth.sendTransaction(options); // add the transaction hash\n\n      contract.transactionHash = hash;\n      checkForContractAddress(contract);\n    }\n\n    return contract;\n  };\n\n  this.new.getData = this.getData.bind(this);\n};\n/**\n * Should be called to create new ContractFactory\n *\n * @method contract\n * @param {Array} abi\n * @returns {ContractFactory} new contract factory\n */\n//var contract = function (abi) {\n//return new ContractFactory(abi);\n//};\n\n/**\n * Should be called to get access to existing contract on a blockchain\n *\n * @method at\n * @param {Address} contract address (required)\n * @param {Function} callback {optional)\n * @returns {Contract} returns contract if no callback was passed,\n * otherwise calls callback function (err, contract)\n */\n\n\nContractFactory.prototype.at = function (address, callback) {\n  var contract = new Contract(this.eth, this.abi, address); // this functions are not part of prototype,\n  // because we dont want to spoil the interface\n\n  addFunctionsToContract(contract);\n  addEventsToContract(contract);\n\n  if (callback) {\n    callback(null, contract);\n  }\n\n  return contract;\n};\n/**\n * Gets the data, which is data to deploy plus constructor params\n *\n * @method getData\n */\n\n\nContractFactory.prototype.getData = function () {\n  var options = {}; // required!\n\n  var args = Array.prototype.slice.call(arguments);\n  var last = args[args.length - 1];\n\n  if (utils.isObject(last) && !utils.isArray(last)) {\n    options = args.pop();\n  }\n\n  var bytes = encodeConstructorParams(this.abi, args);\n  options.data += bytes;\n  return options.data;\n};\n/**\n * Should be called to create new contract instance\n *\n * @method Contract\n * @param {Array} abi\n * @param {Address} contract address\n */\n\n\nvar Contract = function (eth, abi, address) {\n  this._eth = eth;\n  this.transactionHash = null;\n  this.address = address;\n  this.abi = abi;\n};\n\nmodule.exports = ContractFactory;","map":{"version":3,"names":["utils","require","coder","SolidityEvent","SolidityFunction","AllEvents","encodeConstructorParams","abi","params","filter","json","type","inputs","length","map","input","types","encodeParams","addFunctionsToContract","contract","_eth","address","forEach","f","attachToContract","addEventsToContract","events","All","_requestManager","e","checkForContractAddress","callback","count","callbackFired","stopWatching","Error","getTransactionReceipt","transactionHash","receipt","blockHash","getCode","contractAddress","code","ContractFactory","eth","new","Contract","options","args","Array","prototype","slice","call","arguments","isFunction","pop","last","isObject","isArray","value","constructorAbi","payable","bytes","data","sendTransaction","err","hash","getData","bind","at","module","exports"],"sources":["C:/Users/raiab/Documents/Logics Yard/NFT code daniyal/NFT code/client/node_modules/@0xproject/assert/node_modules/web3/lib/web3/contract.js"],"sourcesContent":["/*\n    This file is part of web3.js.\n\n    web3.js is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    web3.js is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n/**\n * @file contract.js\n * @author Marek Kotewicz <marek@ethdev.com>\n * @date 2014\n */\n\nvar utils = require('../utils/utils');\nvar coder = require('../solidity/coder');\nvar SolidityEvent = require('./event');\nvar SolidityFunction = require('./function');\nvar AllEvents = require('./allevents');\n\n/**\n * Should be called to encode constructor params\n *\n * @method encodeConstructorParams\n * @param {Array} abi\n * @param {Array} constructor params\n */\nvar encodeConstructorParams = function (abi, params) {\n    return abi.filter(function (json) {\n        return json.type === 'constructor' && json.inputs.length === params.length;\n    }).map(function (json) {\n        return json.inputs.map(function (input) {\n            return input.type;\n        });\n    }).map(function (types) {\n        return coder.encodeParams(types, params);\n    })[0] || '';\n};\n\n/**\n * Should be called to add functions to contract object\n *\n * @method addFunctionsToContract\n * @param {Contract} contract\n * @param {Array} abi\n */\nvar addFunctionsToContract = function (contract) {\n    contract.abi.filter(function (json) {\n        return json.type === 'function';\n    }).map(function (json) {\n        return new SolidityFunction(contract._eth, json, contract.address);\n    }).forEach(function (f) {\n        f.attachToContract(contract);\n    });\n};\n\n/**\n * Should be called to add events to contract object\n *\n * @method addEventsToContract\n * @param {Contract} contract\n * @param {Array} abi\n */\nvar addEventsToContract = function (contract) {\n    var events = contract.abi.filter(function (json) {\n        return json.type === 'event';\n    });\n\n    var All = new AllEvents(contract._eth._requestManager, events, contract.address);\n    All.attachToContract(contract);\n\n    events.map(function (json) {\n        return new SolidityEvent(contract._eth._requestManager, json, contract.address);\n    }).forEach(function (e) {\n        e.attachToContract(contract);\n    });\n};\n\n\n/**\n * Should be called to check if the contract gets properly deployed on the blockchain.\n *\n * @method checkForContractAddress\n * @param {Object} contract\n * @param {Function} callback\n * @returns {Undefined}\n */\nvar checkForContractAddress = function(contract, callback){\n    var count = 0,\n        callbackFired = false;\n\n    // wait for receipt\n    var filter = contract._eth.filter('latest', function(e){\n        if (!e && !callbackFired) {\n            count++;\n\n            // stop watching after 50 blocks (timeout)\n            if (count > 50) {\n\n                filter.stopWatching(function() {});\n                callbackFired = true;\n\n                if (callback)\n                    callback(new Error('Contract transaction couldn\\'t be found after 50 blocks'));\n                else\n                    throw new Error('Contract transaction couldn\\'t be found after 50 blocks');\n\n\n            } else {\n\n                contract._eth.getTransactionReceipt(contract.transactionHash, function(e, receipt){\n                    if(receipt && receipt.blockHash && !callbackFired) {\n\n                        contract._eth.getCode(receipt.contractAddress, function(e, code){\n                            /*jshint maxcomplexity: 6 */\n\n                            if(callbackFired || !code)\n                                return;\n\n                            filter.stopWatching(function() {});\n                            callbackFired = true;\n\n                            if(code.length > 3) {\n\n                                // console.log('Contract code deployed!');\n\n                                contract.address = receipt.contractAddress;\n\n                                // attach events and methods again after we have\n                                addFunctionsToContract(contract);\n                                addEventsToContract(contract);\n\n                                // call callback for the second time\n                                if(callback)\n                                    callback(null, contract);\n\n                            } else {\n                                if(callback)\n                                    callback(new Error('The contract code couldn\\'t be stored, please check your gas amount.'));\n                                else\n                                    throw new Error('The contract code couldn\\'t be stored, please check your gas amount.');\n                            }\n                        });\n                    }\n                });\n            }\n        }\n    });\n};\n\n/**\n * Should be called to create new ContractFactory instance\n *\n * @method ContractFactory\n * @param {Array} abi\n */\nvar ContractFactory = function (eth, abi) {\n    this.eth = eth;\n    this.abi = abi;\n\n    /**\n     * Should be called to create new contract on a blockchain\n     *\n     * @method new\n     * @param {Any} contract constructor param1 (optional)\n     * @param {Any} contract constructor param2 (optional)\n     * @param {Object} contract transaction object (required)\n     * @param {Function} callback\n     * @returns {Contract} returns contract instance\n     */\n    this.new = function () {\n        /*jshint maxcomplexity: 7 */\n\n        var contract = new Contract(this.eth, this.abi);\n\n        // parse arguments\n        var options = {}; // required!\n        var callback;\n\n        var args = Array.prototype.slice.call(arguments);\n        if (utils.isFunction(args[args.length - 1])) {\n            callback = args.pop();\n        }\n\n        var last = args[args.length - 1];\n        if (utils.isObject(last) && !utils.isArray(last)) {\n            options = args.pop();\n        }\n\n        if (options.value > 0) {\n            var constructorAbi = abi.filter(function (json) {\n                return json.type === 'constructor' && json.inputs.length === args.length;\n            })[0] || {};\n\n            if (!constructorAbi.payable) {\n                throw new Error('Cannot send value to non-payable constructor');\n            }\n        }\n\n        var bytes = encodeConstructorParams(this.abi, args);\n        options.data += bytes;\n\n        if (callback) {\n\n            // wait for the contract address and check if the code was deployed\n            this.eth.sendTransaction(options, function (err, hash) {\n                if (err) {\n                    callback(err);\n                } else {\n                    // add the transaction hash\n                    contract.transactionHash = hash;\n\n                    // call callback for the first time\n                    callback(null, contract);\n\n                    checkForContractAddress(contract, callback);\n                }\n            });\n        } else {\n            var hash = this.eth.sendTransaction(options);\n            // add the transaction hash\n            contract.transactionHash = hash;\n            checkForContractAddress(contract);\n        }\n\n        return contract;\n    };\n\n    this.new.getData = this.getData.bind(this);\n};\n\n/**\n * Should be called to create new ContractFactory\n *\n * @method contract\n * @param {Array} abi\n * @returns {ContractFactory} new contract factory\n */\n//var contract = function (abi) {\n    //return new ContractFactory(abi);\n//};\n\n\n\n/**\n * Should be called to get access to existing contract on a blockchain\n *\n * @method at\n * @param {Address} contract address (required)\n * @param {Function} callback {optional)\n * @returns {Contract} returns contract if no callback was passed,\n * otherwise calls callback function (err, contract)\n */\nContractFactory.prototype.at = function (address, callback) {\n    var contract = new Contract(this.eth, this.abi, address);\n\n    // this functions are not part of prototype,\n    // because we dont want to spoil the interface\n    addFunctionsToContract(contract);\n    addEventsToContract(contract);\n\n    if (callback) {\n        callback(null, contract);\n    }\n    return contract;\n};\n\n/**\n * Gets the data, which is data to deploy plus constructor params\n *\n * @method getData\n */\nContractFactory.prototype.getData = function () {\n    var options = {}; // required!\n    var args = Array.prototype.slice.call(arguments);\n\n    var last = args[args.length - 1];\n    if (utils.isObject(last) && !utils.isArray(last)) {\n        options = args.pop();\n    }\n\n    var bytes = encodeConstructorParams(this.abi, args);\n    options.data += bytes;\n\n    return options.data;\n};\n\n/**\n * Should be called to create new contract instance\n *\n * @method Contract\n * @param {Array} abi\n * @param {Address} contract address\n */\nvar Contract = function (eth, abi, address) {\n    this._eth = eth;\n    this.transactionHash = null;\n    this.address = address;\n    this.abi = abi;\n};\n\nmodule.exports = ContractFactory;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}