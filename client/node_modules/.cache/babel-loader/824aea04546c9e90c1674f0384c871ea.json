{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar json_schemas_1 = require(\"@0xproject/json-schemas\");\n\nvar utils_1 = require(\"@0xproject/utils\");\n\nvar _ = require(\"lodash\");\n\nvar validUrl = require(\"valid-url\");\n\nvar HEX_REGEX = /^0x[0-9A-F]*$/i;\nexports.assert = {\n  isBigNumber: function (variableName, value) {\n    var isBigNumber = _.isObject(value) && value.isBigNumber;\n    this.assert(isBigNumber, this.typeAssertionMessage(variableName, 'BigNumber', value));\n  },\n  isValidBaseUnitAmount: function (variableName, value) {\n    exports.assert.isBigNumber(variableName, value);\n    var hasDecimals = value.decimalPlaces() !== 0;\n    this.assert(!hasDecimals, variableName + \" should be in baseUnits (no decimals), found value: \" + value.toNumber());\n  },\n  isString: function (variableName, value) {\n    this.assert(_.isString(value), this.typeAssertionMessage(variableName, 'string', value));\n  },\n  isFunction: function (variableName, value) {\n    this.assert(_.isFunction(value), this.typeAssertionMessage(variableName, 'function', value));\n  },\n  isHexString: function (variableName, value) {\n    this.assert(_.isString(value) && HEX_REGEX.test(value), this.typeAssertionMessage(variableName, 'HexString', value));\n  },\n  isETHAddressHex: function (variableName, value) {\n    this.assert(utils_1.addressUtils.isAddress(value), this.typeAssertionMessage(variableName, 'ETHAddressHex', value));\n    this.assert(utils_1.addressUtils.isAddress(value) && value.toLowerCase() === value, \"Checksummed addresses are not supported. Convert \" + variableName + \" to lower case before passing\");\n  },\n  doesBelongToStringEnum: function (variableName, value, stringEnum\n  /* There is no base type for every string enum */\n  ) {\n    var doesBelongToStringEnum = !_.isUndefined(stringEnum[value]);\n\n    var enumValues = _.keys(stringEnum);\n\n    var enumValuesAsStrings = _.map(enumValues, function (enumValue) {\n      return \"'\" + enumValue + \"'\";\n    });\n\n    var enumValuesAsString = enumValuesAsStrings.join(', ');\n    exports.assert.assert(doesBelongToStringEnum, \"Expected \" + variableName + \" to be one of: \" + enumValuesAsString + \", encountered: \" + value);\n  },\n  hasAtMostOneUniqueValue: function (value, errMsg) {\n    this.assert(_.uniq(value).length <= 1, errMsg);\n  },\n  isNumber: function (variableName, value) {\n    this.assert(_.isFinite(value), this.typeAssertionMessage(variableName, 'number', value));\n  },\n  isBoolean: function (variableName, value) {\n    this.assert(_.isBoolean(value), this.typeAssertionMessage(variableName, 'boolean', value));\n  },\n  isWeb3Provider: function (variableName, value) {\n    var isWeb3Provider = _.isFunction(value.send) || _.isFunction(value.sendAsync);\n\n    this.assert(isWeb3Provider, this.typeAssertionMessage(variableName, 'Web3.Provider', value));\n  },\n  doesConformToSchema: function (variableName, value, schema) {\n    var schemaValidator = new json_schemas_1.SchemaValidator();\n    var validationResult = schemaValidator.validate(value, schema);\n    var hasValidationErrors = validationResult.errors.length > 0;\n    var msg = \"Expected \" + variableName + \" to conform to schema \" + schema.id + \"\\nEncountered: \" + JSON.stringify(value, null, '\\t') + \"\\nValidation errors: \" + validationResult.errors.join(', ');\n    this.assert(!hasValidationErrors, msg);\n  },\n  isHttpUrl: function (variableName, value) {\n    var isValidUrl = !_.isUndefined(validUrl.isWebUri(value));\n    this.assert(isValidUrl, this.typeAssertionMessage(variableName, 'http url', value));\n  },\n  isUri: function (variableName, value) {\n    var isValidUri = !_.isUndefined(validUrl.isUri(value));\n    this.assert(isValidUri, this.typeAssertionMessage(variableName, 'uri', value));\n  },\n  assert: function (condition, message) {\n    if (!condition) {\n      throw new Error(message);\n    }\n  },\n  typeAssertionMessage: function (variableName, type, value) {\n    return \"Expected \" + variableName + \" to be of type \" + type + \", encountered: \" + value;\n  }\n};","map":{"version":3,"sources":["../../src/index.ts"],"names":[],"mappings":";;;;;;AAAA,IAAA,cAAA,GAAA,OAAA,CAAA,yBAAA,CAAA;;AACA,IAAA,OAAA,GAAA,OAAA,CAAA,kBAAA,CAAA;;AACA,IAAA,CAAA,GAAA,OAAA,CAAA,QAAA,CAAA;;AACA,IAAA,QAAA,GAAA,OAAA,CAAA,WAAA,CAAA;;AAEA,IAAM,SAAS,GAAG,gBAAlB;AAEa,OAAA,CAAA,MAAA,GAAS;EAClB,WAAW,EAAX,UAAY,YAAZ,EAAkC,KAAlC,EAAkD;IAC9C,IAAM,WAAW,GAAG,CAAC,CAAC,QAAF,CAAW,KAAX,KAAsB,KAAa,CAAC,WAAxD;IACA,KAAK,MAAL,CAAY,WAAZ,EAAyB,KAAK,oBAAL,CAA0B,YAA1B,EAAwC,WAAxC,EAAqD,KAArD,CAAzB;EACH,CAJiB;EAKlB,qBAAqB,EAAA,UAAC,YAAD,EAAuB,KAAvB,EAAuC;IACxD,OAAA,CAAA,MAAA,CAAO,WAAP,CAAmB,YAAnB,EAAiC,KAAjC;IACA,IAAM,WAAW,GAAG,KAAK,CAAC,aAAN,OAA0B,CAA9C;IACA,KAAK,MAAL,CACI,CAAC,WADL,EAEO,YAAY,GAAA,sDAAZ,GAAmE,KAAK,CAAC,QAAN,EAF1E;EAIH,CAZiB;EAalB,QAAQ,EAAR,UAAS,YAAT,EAA+B,KAA/B,EAA4C;IACxC,KAAK,MAAL,CAAY,CAAC,CAAC,QAAF,CAAW,KAAX,CAAZ,EAA+B,KAAK,oBAAL,CAA0B,YAA1B,EAAwC,QAAxC,EAAkD,KAAlD,CAA/B;EACH,CAfiB;EAgBlB,UAAU,EAAV,UAAW,YAAX,EAAiC,KAAjC,EAA2C;IACvC,KAAK,MAAL,CAAY,CAAC,CAAC,UAAF,CAAa,KAAb,CAAZ,EAAiC,KAAK,oBAAL,CAA0B,YAA1B,EAAwC,UAAxC,EAAoD,KAApD,CAAjC;EACH,CAlBiB;EAmBlB,WAAW,EAAX,UAAY,YAAZ,EAAkC,KAAlC,EAA+C;IAC3C,KAAK,MAAL,CACI,CAAC,CAAC,QAAF,CAAW,KAAX,KAAqB,SAAS,CAAC,IAAV,CAAe,KAAf,CADzB,EAEI,KAAK,oBAAL,CAA0B,YAA1B,EAAwC,WAAxC,EAAqD,KAArD,CAFJ;EAIH,CAxBiB;EAyBlB,eAAe,EAAf,UAAgB,YAAhB,EAAsC,KAAtC,EAAmD;IAC/C,KAAK,MAAL,CAAY,OAAA,CAAA,YAAA,CAAa,SAAb,CAAuB,KAAvB,CAAZ,EAA2C,KAAK,oBAAL,CAA0B,YAA1B,EAAwC,eAAxC,EAAyD,KAAzD,CAA3C;IACA,KAAK,MAAL,CACI,OAAA,CAAA,YAAA,CAAa,SAAb,CAAuB,KAAvB,KAAiC,KAAK,CAAC,WAAN,OAAwB,KAD7D,EAEI,sDAAoD,YAApD,GAAgE,+BAFpE;EAIH,CA/BiB;EAgClB,sBAAsB,EAAtB,UACI,YADJ,EAEI,KAFJ,EAGI;EAAgB;EAHpB,EAGqE;IAEjE,IAAM,sBAAsB,GAAG,CAAC,CAAC,CAAC,WAAF,CAAc,UAAU,CAAC,KAAD,CAAxB,CAAhC;;IACA,IAAM,UAAU,GAAG,CAAC,CAAC,IAAF,CAAO,UAAP,CAAnB;;IACA,IAAM,mBAAmB,GAAG,CAAC,CAAC,GAAF,CAAM,UAAN,EAAkB,UAAA,SAAA,EAAS;MAAI,OAAA,MAAI,SAAJ,GAAA,GAAA;IAAgB,CAA/C,CAA5B;;IACA,IAAM,kBAAkB,GAAG,mBAAmB,CAAC,IAApB,CAAyB,IAAzB,CAA3B;IACA,OAAA,CAAA,MAAA,CAAO,MAAP,CACI,sBADJ,EAEI,cAAY,YAAZ,GAAwB,iBAAxB,GAA0C,kBAA1C,GAA4D,iBAA5D,GAA8E,KAFlF;EAIH,CA7CiB;EA8ClB,uBAAuB,EAAvB,UAAwB,KAAxB,EAAsC,MAAtC,EAAoD;IAChD,KAAK,MAAL,CAAY,CAAC,CAAC,IAAF,CAAO,KAAP,EAAc,MAAd,IAAwB,CAApC,EAAuC,MAAvC;EACH,CAhDiB;EAiDlB,QAAQ,EAAR,UAAS,YAAT,EAA+B,KAA/B,EAA4C;IACxC,KAAK,MAAL,CAAY,CAAC,CAAC,QAAF,CAAW,KAAX,CAAZ,EAA+B,KAAK,oBAAL,CAA0B,YAA1B,EAAwC,QAAxC,EAAkD,KAAlD,CAA/B;EACH,CAnDiB;EAoDlB,SAAS,EAAT,UAAU,YAAV,EAAgC,KAAhC,EAA8C;IAC1C,KAAK,MAAL,CAAY,CAAC,CAAC,SAAF,CAAY,KAAZ,CAAZ,EAAgC,KAAK,oBAAL,CAA0B,YAA1B,EAAwC,SAAxC,EAAmD,KAAnD,CAAhC;EACH,CAtDiB;EAuDlB,cAAc,EAAd,UAAe,YAAf,EAAqC,KAArC,EAA+C;IAC3C,IAAM,cAAc,GAAG,CAAC,CAAC,UAAF,CAAa,KAAK,CAAC,IAAnB,KAA4B,CAAC,CAAC,UAAF,CAAa,KAAK,CAAC,SAAnB,CAAnD;;IACA,KAAK,MAAL,CAAY,cAAZ,EAA4B,KAAK,oBAAL,CAA0B,YAA1B,EAAwC,eAAxC,EAAyD,KAAzD,CAA5B;EACH,CA1DiB;EA2DlB,mBAAmB,EAAnB,UAAoB,YAApB,EAA0C,KAA1C,EAAsD,MAAtD,EAAoE;IAChE,IAAM,eAAe,GAAG,IAAI,cAAA,CAAA,eAAJ,EAAxB;IACA,IAAM,gBAAgB,GAAG,eAAe,CAAC,QAAhB,CAAyB,KAAzB,EAAgC,MAAhC,CAAzB;IACA,IAAM,mBAAmB,GAAG,gBAAgB,CAAC,MAAjB,CAAwB,MAAxB,GAAiC,CAA7D;IACA,IAAM,GAAG,GAAG,cAAY,YAAZ,GAAwB,wBAAxB,GAAiD,MAAM,CAAC,EAAxD,GAA0D,iBAA1D,GACL,IAAI,CAAC,SAAL,CAAe,KAAf,EAAsB,IAAtB,EAA4B,IAA5B,CADK,GAC4B,uBAD5B,GAEC,gBAAgB,CAAC,MAAjB,CAAwB,IAAxB,CAA6B,IAA7B,CAFb;IAGA,KAAK,MAAL,CAAY,CAAC,mBAAb,EAAkC,GAAlC;EACH,CAnEiB;EAoElB,SAAS,EAAT,UAAU,YAAV,EAAgC,KAAhC,EAA0C;IACtC,IAAM,UAAU,GAAG,CAAC,CAAC,CAAC,WAAF,CAAc,QAAQ,CAAC,QAAT,CAAkB,KAAlB,CAAd,CAApB;IACA,KAAK,MAAL,CAAY,UAAZ,EAAwB,KAAK,oBAAL,CAA0B,YAA1B,EAAwC,UAAxC,EAAoD,KAApD,CAAxB;EACH,CAvEiB;EAwElB,KAAK,EAAL,UAAM,YAAN,EAA4B,KAA5B,EAAsC;IAClC,IAAM,UAAU,GAAG,CAAC,CAAC,CAAC,WAAF,CAAc,QAAQ,CAAC,KAAT,CAAe,KAAf,CAAd,CAApB;IACA,KAAK,MAAL,CAAY,UAAZ,EAAwB,KAAK,oBAAL,CAA0B,YAA1B,EAAwC,KAAxC,EAA+C,KAA/C,CAAxB;EACH,CA3EiB;EA4ElB,MAAM,EAAN,UAAO,SAAP,EAA2B,OAA3B,EAA0C;IACtC,IAAI,CAAC,SAAL,EAAgB;MACZ,MAAM,IAAI,KAAJ,CAAU,OAAV,CAAN;IACH;EACJ,CAhFiB;EAiFlB,oBAAoB,EAApB,UAAqB,YAArB,EAA2C,IAA3C,EAAyD,KAAzD,EAAmE;IAC/D,OAAO,cAAY,YAAZ,GAAwB,iBAAxB,GAA0C,IAA1C,GAA8C,iBAA9C,GAAgE,KAAvE;EACH;AAnFiB,CAAT","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar json_schemas_1 = require(\"@0xproject/json-schemas\");\nvar utils_1 = require(\"@0xproject/utils\");\nvar _ = require(\"lodash\");\nvar validUrl = require(\"valid-url\");\nvar HEX_REGEX = /^0x[0-9A-F]*$/i;\nexports.assert = {\n    isBigNumber: function (variableName, value) {\n        var isBigNumber = _.isObject(value) && value.isBigNumber;\n        this.assert(isBigNumber, this.typeAssertionMessage(variableName, 'BigNumber', value));\n    },\n    isValidBaseUnitAmount: function (variableName, value) {\n        exports.assert.isBigNumber(variableName, value);\n        var hasDecimals = value.decimalPlaces() !== 0;\n        this.assert(!hasDecimals, variableName + \" should be in baseUnits (no decimals), found value: \" + value.toNumber());\n    },\n    isString: function (variableName, value) {\n        this.assert(_.isString(value), this.typeAssertionMessage(variableName, 'string', value));\n    },\n    isFunction: function (variableName, value) {\n        this.assert(_.isFunction(value), this.typeAssertionMessage(variableName, 'function', value));\n    },\n    isHexString: function (variableName, value) {\n        this.assert(_.isString(value) && HEX_REGEX.test(value), this.typeAssertionMessage(variableName, 'HexString', value));\n    },\n    isETHAddressHex: function (variableName, value) {\n        this.assert(utils_1.addressUtils.isAddress(value), this.typeAssertionMessage(variableName, 'ETHAddressHex', value));\n        this.assert(utils_1.addressUtils.isAddress(value) && value.toLowerCase() === value, \"Checksummed addresses are not supported. Convert \" + variableName + \" to lower case before passing\");\n    },\n    doesBelongToStringEnum: function (variableName, value, stringEnum /* There is no base type for every string enum */) {\n        var doesBelongToStringEnum = !_.isUndefined(stringEnum[value]);\n        var enumValues = _.keys(stringEnum);\n        var enumValuesAsStrings = _.map(enumValues, function (enumValue) { return \"'\" + enumValue + \"'\"; });\n        var enumValuesAsString = enumValuesAsStrings.join(', ');\n        exports.assert.assert(doesBelongToStringEnum, \"Expected \" + variableName + \" to be one of: \" + enumValuesAsString + \", encountered: \" + value);\n    },\n    hasAtMostOneUniqueValue: function (value, errMsg) {\n        this.assert(_.uniq(value).length <= 1, errMsg);\n    },\n    isNumber: function (variableName, value) {\n        this.assert(_.isFinite(value), this.typeAssertionMessage(variableName, 'number', value));\n    },\n    isBoolean: function (variableName, value) {\n        this.assert(_.isBoolean(value), this.typeAssertionMessage(variableName, 'boolean', value));\n    },\n    isWeb3Provider: function (variableName, value) {\n        var isWeb3Provider = _.isFunction(value.send) || _.isFunction(value.sendAsync);\n        this.assert(isWeb3Provider, this.typeAssertionMessage(variableName, 'Web3.Provider', value));\n    },\n    doesConformToSchema: function (variableName, value, schema) {\n        var schemaValidator = new json_schemas_1.SchemaValidator();\n        var validationResult = schemaValidator.validate(value, schema);\n        var hasValidationErrors = validationResult.errors.length > 0;\n        var msg = \"Expected \" + variableName + \" to conform to schema \" + schema.id + \"\\nEncountered: \" + JSON.stringify(value, null, '\\t') + \"\\nValidation errors: \" + validationResult.errors.join(', ');\n        this.assert(!hasValidationErrors, msg);\n    },\n    isHttpUrl: function (variableName, value) {\n        var isValidUrl = !_.isUndefined(validUrl.isWebUri(value));\n        this.assert(isValidUrl, this.typeAssertionMessage(variableName, 'http url', value));\n    },\n    isUri: function (variableName, value) {\n        var isValidUri = !_.isUndefined(validUrl.isUri(value));\n        this.assert(isValidUri, this.typeAssertionMessage(variableName, 'uri', value));\n    },\n    assert: function (condition, message) {\n        if (!condition) {\n            throw new Error(message);\n        }\n    },\n    typeAssertionMessage: function (variableName, type, value) {\n        return \"Expected \" + variableName + \" to be of type \" + type + \", encountered: \" + value;\n    },\n};\n//# sourceMappingURL=index.js.map"]},"metadata":{},"sourceType":"script"}