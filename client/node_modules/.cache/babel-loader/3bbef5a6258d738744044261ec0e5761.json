{"ast":null,"code":"/*\n    This file is part of web3.js.\n\n    web3.js is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    web3.js is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\n/** \n * @file transfer.js\n * @author Marek Kotewicz <marek@ethdev.com>\n * @date 2015\n */\nvar Iban = require('./iban');\n\nvar exchangeAbi = require('../contracts/SmartExchange.json');\n/**\n * Should be used to make Iban transfer\n *\n * @method transfer\n * @param {String} from\n * @param {String} to iban\n * @param {Value} value to be tranfered\n * @param {Function} callback, callback\n */\n\n\nvar transfer = function (eth, from, to, value, callback) {\n  var iban = new Iban(to);\n\n  if (!iban.isValid()) {\n    throw new Error('invalid iban address');\n  }\n\n  if (iban.isDirect()) {\n    return transferToAddress(eth, from, iban.address(), value, callback);\n  }\n\n  if (!callback) {\n    var address = eth.icapNamereg().addr(iban.institution());\n    return deposit(eth, from, address, value, iban.client());\n  }\n\n  eth.icapNamereg().addr(iban.institution(), function (err, address) {\n    return deposit(eth, from, address, value, iban.client(), callback);\n  });\n};\n/**\n * Should be used to transfer funds to certain address\n *\n * @method transferToAddress\n * @param {String} from\n * @param {String} to\n * @param {Value} value to be tranfered\n * @param {Function} callback, callback\n */\n\n\nvar transferToAddress = function (eth, from, to, value, callback) {\n  return eth.sendTransaction({\n    address: to,\n    from: from,\n    value: value\n  }, callback);\n};\n/**\n * Should be used to deposit funds to generic Exchange contract (must implement deposit(bytes32) method!)\n *\n * @method deposit\n * @param {String} from\n * @param {String} to\n * @param {Value} value to be transfered\n * @param {String} client unique identifier\n * @param {Function} callback, callback\n */\n\n\nvar deposit = function (eth, from, to, value, client, callback) {\n  var abi = exchangeAbi;\n  return eth.contract(abi).at(to).deposit(client, {\n    from: from,\n    value: value\n  }, callback);\n};\n\nmodule.exports = transfer;","map":{"version":3,"names":["Iban","require","exchangeAbi","transfer","eth","from","to","value","callback","iban","isValid","Error","isDirect","transferToAddress","address","icapNamereg","addr","institution","deposit","client","err","sendTransaction","abi","contract","at","module","exports"],"sources":["C:/Users/raiab/Documents/Logics Yard/NFT code daniyal/NFT code/node_modules/opensea-js/node_modules/web3/lib/web3/transfer.js"],"sourcesContent":["/*\n    This file is part of web3.js.\n\n    web3.js is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    web3.js is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n/** \n * @file transfer.js\n * @author Marek Kotewicz <marek@ethdev.com>\n * @date 2015\n */\n\nvar Iban = require('./iban');\nvar exchangeAbi = require('../contracts/SmartExchange.json');\n\n/**\n * Should be used to make Iban transfer\n *\n * @method transfer\n * @param {String} from\n * @param {String} to iban\n * @param {Value} value to be tranfered\n * @param {Function} callback, callback\n */\nvar transfer = function (eth, from, to, value, callback) {\n    var iban = new Iban(to); \n    if (!iban.isValid()) {\n        throw new Error('invalid iban address');\n    }\n\n    if (iban.isDirect()) {\n        return transferToAddress(eth, from, iban.address(), value, callback);\n    }\n    \n    if (!callback) {\n        var address = eth.icapNamereg().addr(iban.institution());\n        return deposit(eth, from, address, value, iban.client());\n    }\n\n    eth.icapNamereg().addr(iban.institution(), function (err, address) {\n        return deposit(eth, from, address, value, iban.client(), callback);\n    });\n    \n};\n\n/**\n * Should be used to transfer funds to certain address\n *\n * @method transferToAddress\n * @param {String} from\n * @param {String} to\n * @param {Value} value to be tranfered\n * @param {Function} callback, callback\n */\nvar transferToAddress = function (eth, from, to, value, callback) {\n    return eth.sendTransaction({\n        address: to,\n        from: from,\n        value: value\n    }, callback);\n};\n\n/**\n * Should be used to deposit funds to generic Exchange contract (must implement deposit(bytes32) method!)\n *\n * @method deposit\n * @param {String} from\n * @param {String} to\n * @param {Value} value to be transfered\n * @param {String} client unique identifier\n * @param {Function} callback, callback\n */\nvar deposit = function (eth, from, to, value, client, callback) {\n    var abi = exchangeAbi;\n    return eth.contract(abi).at(to).deposit(client, {\n        from: from,\n        value: value\n    }, callback);\n};\n\nmodule.exports = transfer;\n\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AAEA,IAAIA,IAAI,GAAGC,OAAO,CAAC,QAAD,CAAlB;;AACA,IAAIC,WAAW,GAAGD,OAAO,CAAC,iCAAD,CAAzB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,IAAIE,QAAQ,GAAG,UAAUC,GAAV,EAAeC,IAAf,EAAqBC,EAArB,EAAyBC,KAAzB,EAAgCC,QAAhC,EAA0C;EACrD,IAAIC,IAAI,GAAG,IAAIT,IAAJ,CAASM,EAAT,CAAX;;EACA,IAAI,CAACG,IAAI,CAACC,OAAL,EAAL,EAAqB;IACjB,MAAM,IAAIC,KAAJ,CAAU,sBAAV,CAAN;EACH;;EAED,IAAIF,IAAI,CAACG,QAAL,EAAJ,EAAqB;IACjB,OAAOC,iBAAiB,CAACT,GAAD,EAAMC,IAAN,EAAYI,IAAI,CAACK,OAAL,EAAZ,EAA4BP,KAA5B,EAAmCC,QAAnC,CAAxB;EACH;;EAED,IAAI,CAACA,QAAL,EAAe;IACX,IAAIM,OAAO,GAAGV,GAAG,CAACW,WAAJ,GAAkBC,IAAlB,CAAuBP,IAAI,CAACQ,WAAL,EAAvB,CAAd;IACA,OAAOC,OAAO,CAACd,GAAD,EAAMC,IAAN,EAAYS,OAAZ,EAAqBP,KAArB,EAA4BE,IAAI,CAACU,MAAL,EAA5B,CAAd;EACH;;EAEDf,GAAG,CAACW,WAAJ,GAAkBC,IAAlB,CAAuBP,IAAI,CAACQ,WAAL,EAAvB,EAA2C,UAAUG,GAAV,EAAeN,OAAf,EAAwB;IAC/D,OAAOI,OAAO,CAACd,GAAD,EAAMC,IAAN,EAAYS,OAAZ,EAAqBP,KAArB,EAA4BE,IAAI,CAACU,MAAL,EAA5B,EAA2CX,QAA3C,CAAd;EACH,CAFD;AAIH,CAnBD;AAqBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,IAAIK,iBAAiB,GAAG,UAAUT,GAAV,EAAeC,IAAf,EAAqBC,EAArB,EAAyBC,KAAzB,EAAgCC,QAAhC,EAA0C;EAC9D,OAAOJ,GAAG,CAACiB,eAAJ,CAAoB;IACvBP,OAAO,EAAER,EADc;IAEvBD,IAAI,EAAEA,IAFiB;IAGvBE,KAAK,EAAEA;EAHgB,CAApB,EAIJC,QAJI,CAAP;AAKH,CAND;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,IAAIU,OAAO,GAAG,UAAUd,GAAV,EAAeC,IAAf,EAAqBC,EAArB,EAAyBC,KAAzB,EAAgCY,MAAhC,EAAwCX,QAAxC,EAAkD;EAC5D,IAAIc,GAAG,GAAGpB,WAAV;EACA,OAAOE,GAAG,CAACmB,QAAJ,CAAaD,GAAb,EAAkBE,EAAlB,CAAqBlB,EAArB,EAAyBY,OAAzB,CAAiCC,MAAjC,EAAyC;IAC5Cd,IAAI,EAAEA,IADsC;IAE5CE,KAAK,EAAEA;EAFqC,CAAzC,EAGJC,QAHI,CAAP;AAIH,CAND;;AAQAiB,MAAM,CAACC,OAAP,GAAiBvB,QAAjB"},"metadata":{},"sourceType":"script"}