{"ast":null,"code":"/*\n    This file is part of web3.js.\n\n    web3.js is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    web3.js is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\n/** \n * @file requestmanager.js\n * @author Jeffrey Wilcke <jeff@ethdev.com>\n * @author Marek Kotewicz <marek@ethdev.com>\n * @author Marian Oancea <marian@ethdev.com>\n * @author Fabian Vogelsteller <fabian@ethdev.com>\n * @author Gav Wood <g@ethdev.com>\n * @date 2014\n */\nvar Jsonrpc = require('./jsonrpc');\n\nvar utils = require('../utils/utils');\n\nvar c = require('../utils/config');\n\nvar errors = require('./errors');\n/**\n * It's responsible for passing messages to providers\n * It's also responsible for polling the ethereum node for incoming messages\n * Default poll timeout is 1 second\n * Singleton\n */\n\n\nvar RequestManager = function (provider) {\n  this.provider = provider;\n  this.polls = {};\n  this.timeout = null;\n};\n/**\n * Should be used to synchronously send request\n *\n * @method send\n * @param {Object} data\n * @return {Object}\n */\n\n\nRequestManager.prototype.send = function (data) {\n  if (!this.provider) {\n    console.error(errors.InvalidProvider());\n    return null;\n  }\n\n  var payload = Jsonrpc.toPayload(data.method, data.params);\n  var result = this.provider.send(payload);\n\n  if (!Jsonrpc.isValidResponse(result)) {\n    throw errors.InvalidResponse(result);\n  }\n\n  return result.result;\n};\n/**\n * Should be used to asynchronously send request\n *\n * @method sendAsync\n * @param {Object} data\n * @param {Function} callback\n */\n\n\nRequestManager.prototype.sendAsync = function (data, callback) {\n  if (!this.provider) {\n    return callback(errors.InvalidProvider());\n  }\n\n  var payload = Jsonrpc.toPayload(data.method, data.params);\n  this.provider.sendAsync(payload, function (err, result) {\n    if (err) {\n      return callback(err);\n    }\n\n    if (!Jsonrpc.isValidResponse(result)) {\n      return callback(errors.InvalidResponse(result));\n    }\n\n    callback(null, result.result);\n  });\n};\n/**\n * Should be called to asynchronously send batch request\n *\n * @method sendBatch\n * @param {Array} batch data\n * @param {Function} callback\n */\n\n\nRequestManager.prototype.sendBatch = function (data, callback) {\n  if (!this.provider) {\n    return callback(errors.InvalidProvider());\n  }\n\n  var payload = Jsonrpc.toBatchPayload(data);\n  this.provider.sendAsync(payload, function (err, results) {\n    if (err) {\n      return callback(err);\n    }\n\n    if (!utils.isArray(results)) {\n      return callback(errors.InvalidResponse(results));\n    }\n\n    callback(err, results);\n  });\n};\n/**\n * Should be used to set provider of request manager\n *\n * @method setProvider\n * @param {Object}\n */\n\n\nRequestManager.prototype.setProvider = function (p) {\n  this.provider = p;\n};\n/**\n * Should be used to start polling\n *\n * @method startPolling\n * @param {Object} data\n * @param {Number} pollId\n * @param {Function} callback\n * @param {Function} uninstall\n *\n * @todo cleanup number of params\n */\n\n\nRequestManager.prototype.startPolling = function (data, pollId, callback, uninstall) {\n  this.polls[pollId] = {\n    data: data,\n    id: pollId,\n    callback: callback,\n    uninstall: uninstall\n  }; // start polling\n\n  if (!this.timeout) {\n    this.poll();\n  }\n};\n/**\n * Should be used to stop polling for filter with given id\n *\n * @method stopPolling\n * @param {Number} pollId\n */\n\n\nRequestManager.prototype.stopPolling = function (pollId) {\n  delete this.polls[pollId]; // stop polling\n\n  if (Object.keys(this.polls).length === 0 && this.timeout) {\n    clearTimeout(this.timeout);\n    this.timeout = null;\n  }\n};\n/**\n * Should be called to reset the polling mechanism of the request manager\n *\n * @method reset\n */\n\n\nRequestManager.prototype.reset = function (keepIsSyncing) {\n  /*jshint maxcomplexity:5 */\n  for (var key in this.polls) {\n    // remove all polls, except sync polls,\n    // they need to be removed manually by calling syncing.stopWatching()\n    if (!keepIsSyncing || key.indexOf('syncPoll_') === -1) {\n      this.polls[key].uninstall();\n      delete this.polls[key];\n    }\n  } // stop polling\n\n\n  if (Object.keys(this.polls).length === 0 && this.timeout) {\n    clearTimeout(this.timeout);\n    this.timeout = null;\n  }\n};\n/**\n * Should be called to poll for changes on filter with given id\n *\n * @method poll\n */\n\n\nRequestManager.prototype.poll = function () {\n  /*jshint maxcomplexity: 6 */\n  this.timeout = setTimeout(this.poll.bind(this), c.ETH_POLLING_TIMEOUT);\n\n  if (Object.keys(this.polls).length === 0) {\n    return;\n  }\n\n  if (!this.provider) {\n    console.error(errors.InvalidProvider());\n    return;\n  }\n\n  var pollsData = [];\n  var pollsIds = [];\n\n  for (var key in this.polls) {\n    pollsData.push(this.polls[key].data);\n    pollsIds.push(key);\n  }\n\n  if (pollsData.length === 0) {\n    return;\n  }\n\n  var payload = Jsonrpc.toBatchPayload(pollsData); // map the request id to they poll id\n\n  var pollsIdMap = {};\n  payload.forEach(function (load, index) {\n    pollsIdMap[load.id] = pollsIds[index];\n  });\n  var self = this;\n  this.provider.sendAsync(payload, function (error, results) {\n    // TODO: console log?\n    if (error) {\n      return;\n    }\n\n    if (!utils.isArray(results)) {\n      throw errors.InvalidResponse(results);\n    }\n\n    results.map(function (result) {\n      var id = pollsIdMap[result.id]; // make sure the filter is still installed after arrival of the request\n\n      if (self.polls[id]) {\n        result.callback = self.polls[id].callback;\n        return result;\n      } else return false;\n    }).filter(function (result) {\n      return !!result;\n    }).filter(function (result) {\n      var valid = Jsonrpc.isValidResponse(result);\n\n      if (!valid) {\n        result.callback(errors.InvalidResponse(result));\n      }\n\n      return valid;\n    }).forEach(function (result) {\n      result.callback(null, result.result);\n    });\n  });\n};\n\nmodule.exports = RequestManager;","map":{"version":3,"names":["Jsonrpc","require","utils","c","errors","RequestManager","provider","polls","timeout","prototype","send","data","console","error","InvalidProvider","payload","toPayload","method","params","result","isValidResponse","InvalidResponse","sendAsync","callback","err","sendBatch","toBatchPayload","results","isArray","setProvider","p","startPolling","pollId","uninstall","id","poll","stopPolling","Object","keys","length","clearTimeout","reset","keepIsSyncing","key","indexOf","setTimeout","bind","ETH_POLLING_TIMEOUT","pollsData","pollsIds","push","pollsIdMap","forEach","load","index","self","map","filter","valid","module","exports"],"sources":["C:/Users/raiab/Documents/Logics Yard/NFT code daniyal/NFT code/client/node_modules/opensea-js/node_modules/web3/lib/web3/requestmanager.js"],"sourcesContent":["/*\n    This file is part of web3.js.\n\n    web3.js is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    web3.js is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n/** \n * @file requestmanager.js\n * @author Jeffrey Wilcke <jeff@ethdev.com>\n * @author Marek Kotewicz <marek@ethdev.com>\n * @author Marian Oancea <marian@ethdev.com>\n * @author Fabian Vogelsteller <fabian@ethdev.com>\n * @author Gav Wood <g@ethdev.com>\n * @date 2014\n */\n\nvar Jsonrpc = require('./jsonrpc');\nvar utils = require('../utils/utils');\nvar c = require('../utils/config');\nvar errors = require('./errors');\n\n/**\n * It's responsible for passing messages to providers\n * It's also responsible for polling the ethereum node for incoming messages\n * Default poll timeout is 1 second\n * Singleton\n */\nvar RequestManager = function (provider) {\n    this.provider = provider;\n    this.polls = {};\n    this.timeout = null;\n};\n\n/**\n * Should be used to synchronously send request\n *\n * @method send\n * @param {Object} data\n * @return {Object}\n */\nRequestManager.prototype.send = function (data) {\n    if (!this.provider) {\n        console.error(errors.InvalidProvider());\n        return null;\n    }\n\n    var payload = Jsonrpc.toPayload(data.method, data.params);\n    var result = this.provider.send(payload);\n\n    if (!Jsonrpc.isValidResponse(result)) {\n        throw errors.InvalidResponse(result);\n    }\n\n    return result.result;\n};\n\n/**\n * Should be used to asynchronously send request\n *\n * @method sendAsync\n * @param {Object} data\n * @param {Function} callback\n */\nRequestManager.prototype.sendAsync = function (data, callback) {\n    if (!this.provider) {\n        return callback(errors.InvalidProvider());\n    }\n\n    var payload = Jsonrpc.toPayload(data.method, data.params);\n    this.provider.sendAsync(payload, function (err, result) {\n        if (err) {\n            return callback(err);\n        }\n        \n        if (!Jsonrpc.isValidResponse(result)) {\n            return callback(errors.InvalidResponse(result));\n        }\n\n        callback(null, result.result);\n    });\n};\n\n/**\n * Should be called to asynchronously send batch request\n *\n * @method sendBatch\n * @param {Array} batch data\n * @param {Function} callback\n */\nRequestManager.prototype.sendBatch = function (data, callback) {\n    if (!this.provider) {\n        return callback(errors.InvalidProvider());\n    }\n\n    var payload = Jsonrpc.toBatchPayload(data);\n\n    this.provider.sendAsync(payload, function (err, results) {\n        if (err) {\n            return callback(err);\n        }\n\n        if (!utils.isArray(results)) {\n            return callback(errors.InvalidResponse(results));\n        }\n\n        callback(err, results);\n    }); \n};\n\n/**\n * Should be used to set provider of request manager\n *\n * @method setProvider\n * @param {Object}\n */\nRequestManager.prototype.setProvider = function (p) {\n    this.provider = p;\n};\n\n/**\n * Should be used to start polling\n *\n * @method startPolling\n * @param {Object} data\n * @param {Number} pollId\n * @param {Function} callback\n * @param {Function} uninstall\n *\n * @todo cleanup number of params\n */\nRequestManager.prototype.startPolling = function (data, pollId, callback, uninstall) {\n    this.polls[pollId] = {data: data, id: pollId, callback: callback, uninstall: uninstall};\n\n\n    // start polling\n    if (!this.timeout) {\n        this.poll();\n    }\n};\n\n/**\n * Should be used to stop polling for filter with given id\n *\n * @method stopPolling\n * @param {Number} pollId\n */\nRequestManager.prototype.stopPolling = function (pollId) {\n    delete this.polls[pollId];\n\n    // stop polling\n    if(Object.keys(this.polls).length === 0 && this.timeout) {\n        clearTimeout(this.timeout);\n        this.timeout = null;\n    }\n};\n\n/**\n * Should be called to reset the polling mechanism of the request manager\n *\n * @method reset\n */\nRequestManager.prototype.reset = function (keepIsSyncing) {\n    /*jshint maxcomplexity:5 */\n\n    for (var key in this.polls) {\n        // remove all polls, except sync polls,\n        // they need to be removed manually by calling syncing.stopWatching()\n        if(!keepIsSyncing || key.indexOf('syncPoll_') === -1) {\n            this.polls[key].uninstall();\n            delete this.polls[key];\n        }\n    }\n\n    // stop polling\n    if(Object.keys(this.polls).length === 0 && this.timeout) {\n        clearTimeout(this.timeout);\n        this.timeout = null;\n    }\n};\n\n/**\n * Should be called to poll for changes on filter with given id\n *\n * @method poll\n */\nRequestManager.prototype.poll = function () {\n    /*jshint maxcomplexity: 6 */\n    this.timeout = setTimeout(this.poll.bind(this), c.ETH_POLLING_TIMEOUT);\n\n    if (Object.keys(this.polls).length === 0) {\n        return;\n    }\n\n    if (!this.provider) {\n        console.error(errors.InvalidProvider());\n        return;\n    }\n\n    var pollsData = [];\n    var pollsIds = [];\n    for (var key in this.polls) {\n        pollsData.push(this.polls[key].data);\n        pollsIds.push(key);\n    }\n\n    if (pollsData.length === 0) {\n        return;\n    }\n\n    var payload = Jsonrpc.toBatchPayload(pollsData);\n    \n    // map the request id to they poll id\n    var pollsIdMap = {};\n    payload.forEach(function(load, index){\n        pollsIdMap[load.id] = pollsIds[index];\n    });\n\n\n    var self = this;\n    this.provider.sendAsync(payload, function (error, results) {\n\n\n        // TODO: console log?\n        if (error) {\n            return;\n        }\n\n        if (!utils.isArray(results)) {\n            throw errors.InvalidResponse(results);\n        }\n        results.map(function (result) {\n            var id = pollsIdMap[result.id];\n\n            // make sure the filter is still installed after arrival of the request\n            if (self.polls[id]) {\n                result.callback = self.polls[id].callback;\n                return result;\n            } else\n                return false;\n        }).filter(function (result) {\n            return !!result; \n        }).filter(function (result) {\n            var valid = Jsonrpc.isValidResponse(result);\n            if (!valid) {\n                result.callback(errors.InvalidResponse(result));\n            }\n            return valid;\n        }).forEach(function (result) {\n            result.callback(null, result.result);\n        });\n    });\n};\n\nmodule.exports = RequestManager;\n\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}