{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst ethereumjs_util_1 = require(\"ethereumjs-util\");\n\nexports.namehash = name => {\n  let node = '0000000000000000000000000000000000000000000000000000000000000000';\n\n  if (name !== '') {\n    const labels = name.split('.');\n\n    for (let i = labels.length - 1; i >= 0; i--) {\n      const labelHash = ethereumjs_util_1.sha3(labels[i]).toString('hex');\n      node = ethereumjs_util_1.sha3(new Buffer(node + labelHash, 'hex')).toString('hex');\n    }\n  }\n\n  return '0x' + node.toString();\n};\n\nexports.nodehash = name => {\n  const label = name.split('.')[0];\n\n  if (label) {\n    return '0x' + ethereumjs_util_1.sha3(label).toString('hex');\n  } else {\n    return '';\n  }\n};\n\nexports.ENSNameBaseSchema = {\n  fields: [{\n    name: 'Name',\n    type: 'string',\n    description: 'ENS Name'\n  }, {\n    name: 'NodeHash',\n    type: 'bytes32',\n    description: 'ENS Node Hash',\n    readOnly: true\n  }, {\n    name: 'NameHash',\n    type: 'bytes32',\n    description: 'ENS Name Hash',\n    readOnly: true\n  }],\n  assetFromFields: fields => ({\n    id: fields.ID,\n    address: fields.Address,\n    name: fields.Name,\n    nodeHash: exports.nodehash(fields.Name),\n    nameHash: exports.namehash(fields.Name)\n  }),\n  checkAsset: asset => {\n    return asset.name ? exports.namehash(asset.name) === asset.nameHash && exports.nodehash(asset.name) === asset.nodeHash : true;\n  },\n  hash: _ref => {\n    let {\n      nodeHash\n    } = _ref;\n    return nodeHash;\n  }\n};","map":{"version":3,"sources":["../../src/common/ens.ts"],"names":[],"mappings":";;;;;;AAAA,MAAA,iBAAA,GAAA,OAAA,CAAA,iBAAA,CAAA;;AAUa,OAAA,CAAA,QAAA,GAAY,IAAD,IAAiB;EACvC,IAAI,IAAI,GAAG,kEAAX;;EACA,IAAI,IAAI,KAAK,EAAb,EAAiB;IACf,MAAM,MAAM,GAAG,IAAI,CAAC,KAAL,CAAW,GAAX,CAAf;;IACA,KAAK,IAAI,CAAC,GAAG,MAAM,CAAC,MAAP,GAAgB,CAA7B,EAAgC,CAAC,IAAI,CAArC,EAAwC,CAAC,EAAzC,EAA6C;MAC3C,MAAM,SAAS,GAAG,iBAAA,CAAA,IAAA,CAAK,MAAM,CAAC,CAAD,CAAX,EAAgB,QAAhB,CAAyB,KAAzB,CAAlB;MACA,IAAI,GAAG,iBAAA,CAAA,IAAA,CAAK,IAAI,MAAJ,CAAW,IAAI,GAAG,SAAlB,EAA6B,KAA7B,CAAL,EAA0C,QAA1C,CAAmD,KAAnD,CAAP;IACD;EACF;;EACD,OAAO,OAAO,IAAI,CAAC,QAAL,EAAd;AACD,CAVY;;AAYA,OAAA,CAAA,QAAA,GAAY,IAAD,IAAiB;EACvC,MAAM,KAAK,GAAG,IAAI,CAAC,KAAL,CAAW,GAAX,EAAgB,CAAhB,CAAd;;EACA,IAAI,KAAJ,EAAW;IACT,OAAO,OAAO,iBAAA,CAAA,IAAA,CAAK,KAAL,EAAY,QAAZ,CAAqB,KAArB,CAAd;EACD,CAFD,MAEO;IACL,OAAO,EAAP;EACD;AACF,CAPY;;AASA,OAAA,CAAA,iBAAA,GAKT;EACF,MAAM,EAAE,CACN;IAAE,IAAI,EAAE,MAAR;IAAgB,IAAI,EAAE,QAAtB;IAAgC,WAAW,EAAE;EAA7C,CADM,EAEN;IACE,IAAI,EAAE,UADR;IAEE,IAAI,EAAE,SAFR;IAGE,WAAW,EAAE,eAHf;IAIE,QAAQ,EAAE;EAJZ,CAFM,EAQN;IACE,IAAI,EAAE,UADR;IAEE,IAAI,EAAE,SAFR;IAGE,WAAW,EAAE,eAHf;IAIE,QAAQ,EAAE;EAJZ,CARM,CADN;EAgBF,eAAe,EAAG,MAAD,KAAkB;IACjC,EAAE,EAAE,MAAM,CAAC,EADsB;IAEjC,OAAO,EAAE,MAAM,CAAC,OAFiB;IAGjC,IAAI,EAAE,MAAM,CAAC,IAHoB;IAIjC,QAAQ,EAAE,OAAA,CAAA,QAAA,CAAS,MAAM,CAAC,IAAhB,CAJuB;IAKjC,QAAQ,EAAE,OAAA,CAAA,QAAA,CAAS,MAAM,CAAC,IAAhB;EALuB,CAAlB,CAhBf;EAuBF,UAAU,EAAG,KAAD,IAAmB;IAC7B,OAAO,KAAK,CAAC,IAAN,GACH,OAAA,CAAA,QAAA,CAAS,KAAK,CAAC,IAAf,MAAyB,KAAK,CAAC,QAA/B,IACE,OAAA,CAAA,QAAA,CAAS,KAAK,CAAC,IAAf,MAAyB,KAAK,CAAC,QAF9B,GAGH,IAHJ;EAID,CA5BC;EA6BF,IAAI,EAAE;IAAA,IAAC;MAAE;IAAF,CAAD;IAAA,OAAkB,QAAlB;EAAA;AA7BJ,CALS","sourceRoot":"","sourcesContent":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst ethereumjs_util_1 = require(\"ethereumjs-util\");\r\nexports.namehash = (name) => {\r\n    let node = '0000000000000000000000000000000000000000000000000000000000000000';\r\n    if (name !== '') {\r\n        const labels = name.split('.');\r\n        for (let i = labels.length - 1; i >= 0; i--) {\r\n            const labelHash = ethereumjs_util_1.sha3(labels[i]).toString('hex');\r\n            node = ethereumjs_util_1.sha3(new Buffer(node + labelHash, 'hex')).toString('hex');\r\n        }\r\n    }\r\n    return '0x' + node.toString();\r\n};\r\nexports.nodehash = (name) => {\r\n    const label = name.split('.')[0];\r\n    if (label) {\r\n        return '0x' + ethereumjs_util_1.sha3(label).toString('hex');\r\n    }\r\n    else {\r\n        return '';\r\n    }\r\n};\r\nexports.ENSNameBaseSchema = {\r\n    fields: [\r\n        { name: 'Name', type: 'string', description: 'ENS Name' },\r\n        {\r\n            name: 'NodeHash',\r\n            type: 'bytes32',\r\n            description: 'ENS Node Hash',\r\n            readOnly: true,\r\n        },\r\n        {\r\n            name: 'NameHash',\r\n            type: 'bytes32',\r\n            description: 'ENS Name Hash',\r\n            readOnly: true,\r\n        },\r\n    ],\r\n    assetFromFields: (fields) => ({\r\n        id: fields.ID,\r\n        address: fields.Address,\r\n        name: fields.Name,\r\n        nodeHash: exports.nodehash(fields.Name),\r\n        nameHash: exports.namehash(fields.Name),\r\n    }),\r\n    checkAsset: (asset) => {\r\n        return asset.name\r\n            ? exports.namehash(asset.name) === asset.nameHash &&\r\n                exports.nodehash(asset.name) === asset.nodeHash\r\n            : true;\r\n    },\r\n    hash: ({ nodeHash }) => nodeHash,\r\n};\r\n//# sourceMappingURL=ens.js.map"]},"metadata":{},"sourceType":"script"}