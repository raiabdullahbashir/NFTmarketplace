{"ast":null,"code":"import { getType } from 'typesafe-actions';\nimport * as actions from '../actions';\nimport { initEntityState, entityLoadingStarted, entityLoadingSucceeded, entityLoadingFailed } from '../utils';\nexport const defaultState = {\n  nftBreakdown: initEntityState(null),\n  nftDetail: initEntityState(null),\n  nftShowcase: initEntityState(null)\n};\n\nconst states = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : defaultState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case getType(actions.getNftBreakdown.request):\n      return { ...state,\n        nftBreakdown: entityLoadingStarted(state.nftBreakdown, action.payload)\n      };\n\n    case getType(actions.getNftBreakdown.success):\n      //append existing data with new data\n      let payload = state.nftBreakdown.data ? [...state.nftBreakdown.data, ...action.payload] : action.payload;\n      return { ...state,\n        nftBreakdown: entityLoadingSucceeded(state.nftBreakdown, payload)\n      };\n\n    case getType(actions.getNftBreakdown.failure):\n      return { ...state,\n        nftBreakdown: entityLoadingFailed(state.nftBreakdown)\n      };\n\n    case getType(actions.getNftDetail.request):\n      return { ...state,\n        nftDetail: entityLoadingStarted(state.nftDetail, action.payload)\n      };\n\n    case getType(actions.getNftDetail.success):\n      return { ...state,\n        nftDetail: entityLoadingSucceeded(state.nftDetail, action.payload)\n      };\n\n    case getType(actions.getNftDetail.failure):\n      return { ...state,\n        nftDetail: entityLoadingFailed(state.nftDetail)\n      };\n\n    case getType(actions.getNftShowcase.request):\n      return { ...state,\n        nftShowcase: entityLoadingStarted(state.nftShowcase, action.payload)\n      };\n\n    case getType(actions.getNftShowcase.success):\n      return { ...state,\n        nftShowcase: entityLoadingSucceeded(state.nftShowcase, action.payload)\n      };\n\n    case getType(actions.getNftShowcase.failure):\n      return { ...state,\n        nftShowcase: entityLoadingFailed(state.nftShowcase)\n      };\n\n    case getType(actions.clearNfts):\n      return { ...state,\n        nftBreakdown: initEntityState(null)\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default states;","map":{"version":3,"names":["getType","actions","initEntityState","entityLoadingStarted","entityLoadingSucceeded","entityLoadingFailed","defaultState","nftBreakdown","nftDetail","nftShowcase","states","state","action","type","getNftBreakdown","request","payload","success","data","failure","getNftDetail","getNftShowcase","clearNfts"],"sources":["C:/Users/raiab/Documents/Logics Yard/NFT code daniyal/NFT code/client/src/store/reducers/nfts.js"],"sourcesContent":["import { getType } from 'typesafe-actions';\nimport * as actions from '../actions';\nimport { initEntityState, entityLoadingStarted, entityLoadingSucceeded, entityLoadingFailed } from '../utils';\n\nexport const defaultState = {\n  nftBreakdown: initEntityState(null),\n  nftDetail: initEntityState(null),\n  nftShowcase: initEntityState(null)\n};\n\nconst states = (state = defaultState, action) => {\n  switch (action.type) {\n    \n    case getType(actions.getNftBreakdown.request):\n      return { ...state, nftBreakdown: entityLoadingStarted(state.nftBreakdown, action.payload) };\n    case getType(actions.getNftBreakdown.success):\n      //append existing data with new data\n      let payload = state.nftBreakdown.data ? [...state.nftBreakdown.data, ...action.payload] : action.payload;\n      return { ...state, nftBreakdown: entityLoadingSucceeded(state.nftBreakdown, payload) };\n    case getType(actions.getNftBreakdown.failure):\n      return { ...state, nftBreakdown: entityLoadingFailed(state.nftBreakdown) };\n    \n    case getType(actions.getNftDetail.request):\n      return { ...state, nftDetail: entityLoadingStarted(state.nftDetail, action.payload) };\n    case getType(actions.getNftDetail.success):\n      return { ...state, nftDetail: entityLoadingSucceeded(state.nftDetail, action.payload) };\n    case getType(actions.getNftDetail.failure):\n      return { ...state, nftDetail: entityLoadingFailed(state.nftDetail) };\n    \n    case getType(actions.getNftShowcase.request):\n      return { ...state, nftShowcase: entityLoadingStarted(state.nftShowcase, action.payload) };\n    case getType(actions.getNftShowcase.success):\n      return { ...state, nftShowcase: entityLoadingSucceeded(state.nftShowcase, action.payload) };\n    case getType(actions.getNftShowcase.failure):\n      return { ...state, nftShowcase: entityLoadingFailed(state.nftShowcase) };\n\n    case getType(actions.clearNfts):\n      return { ...state, nftBreakdown: initEntityState(null)};\n    \n    default:\n      return state;\n  }\n};\n\nexport default states;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}