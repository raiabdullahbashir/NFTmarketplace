{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar jsonschema_1 = require(\"jsonschema\");\n\nvar values = require(\"lodash.values\");\n\nvar schemas_1 = require(\"./schemas\");\n/**\n * A validator for [JSON-schemas](http://json-schema.org/)\n */\n\n\nvar SchemaValidator =\n/** @class */\nfunction () {\n  /**\n   * Instantiates a SchemaValidator instance\n   */\n  function SchemaValidator() {\n    this._validator = new jsonschema_1.Validator();\n\n    for (var _i = 0, _a = values(schemas_1.schemas); _i < _a.length; _i++) {\n      var schema = _a[_i];\n\n      this._validator.addSchema(schema, schema.id);\n    }\n  }\n  /**\n   * Add a schema to the validator. All schemas and sub-schemas must be added to\n   * the validator before the `validate` and `isValid` methods can be called with\n   * instances of that schema.\n   * @param schema The schema to add\n   */\n\n\n  SchemaValidator.prototype.addSchema = function (schema) {\n    this._validator.addSchema(schema, schema.id);\n  }; // In order to validate a complex JS object using jsonschema, we must replace any complex\n  // sub-types (e.g BigNumber) with a simpler string representation. Since BigNumber and other\n  // complex types implement the `toString` method, we can stringify the object and\n  // then parse it. The resultant object can then be checked using jsonschema.\n\n  /**\n   * Validate the JS object conforms to a specific JSON schema\n   * @param instance JS object in question\n   * @param schema Schema to check against\n   * @returns The results of the validation\n   */\n\n\n  SchemaValidator.prototype.validate = function (instance, schema) {\n    var jsonSchemaCompatibleObject = JSON.parse(JSON.stringify(instance));\n    return this._validator.validate(jsonSchemaCompatibleObject, schema);\n  };\n  /**\n   * Check whether an instance properly adheres to a JSON schema\n   * @param instance JS object in question\n   * @param schema Schema to check against\n   * @returns Whether or not the instance adheres to the schema\n   */\n\n\n  SchemaValidator.prototype.isValid = function (instance, schema) {\n    var isValid = this.validate(instance, schema).errors.length === 0;\n    return isValid;\n  };\n\n  return SchemaValidator;\n}();\n\nexports.SchemaValidator = SchemaValidator;","map":{"version":3,"sources":["../../src/schema_validator.ts"],"names":[],"mappings":";;;;;;AAAA,IAAA,YAAA,GAAA,OAAA,CAAA,YAAA,CAAA;;AACA,IAAA,MAAA,GAAA,OAAA,CAAA,eAAA,CAAA;;AAEA,IAAA,SAAA,GAAA,OAAA,CAAA,WAAA,CAAA;AAEA;;AAEG;;;AACH,IAAA,eAAA;AAAA;AAAA,YAAA;EAEI;;AAEG;EACH,SAAA,eAAA,GAAA;IACI,KAAK,UAAL,GAAkB,IAAI,YAAA,CAAA,SAAJ,EAAlB;;IACA,KAAqB,IAAA,EAAA,GAAA,CAAA,EAAA,EAAA,GAAA,MAAM,CAAC,SAAA,CAAA,OAAD,CAA3B,EAAqB,EAAA,GAAA,EAAA,CAAA,MAArB,EAAqB,EAAA,EAArB,EAAoC;MAA/B,IAAM,MAAM,GAAA,EAAA,CAAA,EAAA,CAAZ;;MACD,KAAK,UAAL,CAAgB,SAAhB,CAA0B,MAA1B,EAAkC,MAAM,CAAC,EAAzC;IACH;EACJ;EACD;;;;;AAKG;;;EACI,eAAA,CAAA,SAAA,CAAA,SAAA,GAAP,UAAiB,MAAjB,EAA+B;IAC3B,KAAK,UAAL,CAAgB,SAAhB,CAA0B,MAA1B,EAAkC,MAAM,CAAC,EAAzC;EACH,CAFM,CAjBX,CAoBI;EACA;EACA;EACA;;EACA;;;;;AAKG;;;EACI,eAAA,CAAA,SAAA,CAAA,QAAA,GAAP,UAAgB,QAAhB,EAA+B,MAA/B,EAA6C;IACzC,IAAM,0BAA0B,GAAG,IAAI,CAAC,KAAL,CAAW,IAAI,CAAC,SAAL,CAAe,QAAf,CAAX,CAAnC;IACA,OAAO,KAAK,UAAL,CAAgB,QAAhB,CAAyB,0BAAzB,EAAqD,MAArD,CAAP;EACH,CAHM;EAIP;;;;;AAKG;;;EACI,eAAA,CAAA,SAAA,CAAA,OAAA,GAAP,UAAe,QAAf,EAA8B,MAA9B,EAA4C;IACxC,IAAM,OAAO,GAAG,KAAK,QAAL,CAAc,QAAd,EAAwB,MAAxB,EAAgC,MAAhC,CAAuC,MAAvC,KAAkD,CAAlE;IACA,OAAO,OAAP;EACH,CAHM;;EAIX,OAAA,eAAA;AAAC,CA5CD,EAAA;;AAAa,OAAA,CAAA,eAAA,GAAA,eAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar jsonschema_1 = require(\"jsonschema\");\nvar values = require(\"lodash.values\");\nvar schemas_1 = require(\"./schemas\");\n/**\n * A validator for [JSON-schemas](http://json-schema.org/)\n */\nvar SchemaValidator = /** @class */ (function () {\n    /**\n     * Instantiates a SchemaValidator instance\n     */\n    function SchemaValidator() {\n        this._validator = new jsonschema_1.Validator();\n        for (var _i = 0, _a = values(schemas_1.schemas); _i < _a.length; _i++) {\n            var schema = _a[_i];\n            this._validator.addSchema(schema, schema.id);\n        }\n    }\n    /**\n     * Add a schema to the validator. All schemas and sub-schemas must be added to\n     * the validator before the `validate` and `isValid` methods can be called with\n     * instances of that schema.\n     * @param schema The schema to add\n     */\n    SchemaValidator.prototype.addSchema = function (schema) {\n        this._validator.addSchema(schema, schema.id);\n    };\n    // In order to validate a complex JS object using jsonschema, we must replace any complex\n    // sub-types (e.g BigNumber) with a simpler string representation. Since BigNumber and other\n    // complex types implement the `toString` method, we can stringify the object and\n    // then parse it. The resultant object can then be checked using jsonschema.\n    /**\n     * Validate the JS object conforms to a specific JSON schema\n     * @param instance JS object in question\n     * @param schema Schema to check against\n     * @returns The results of the validation\n     */\n    SchemaValidator.prototype.validate = function (instance, schema) {\n        var jsonSchemaCompatibleObject = JSON.parse(JSON.stringify(instance));\n        return this._validator.validate(jsonSchemaCompatibleObject, schema);\n    };\n    /**\n     * Check whether an instance properly adheres to a JSON schema\n     * @param instance JS object in question\n     * @param schema Schema to check against\n     * @returns Whether or not the instance adheres to the schema\n     */\n    SchemaValidator.prototype.isValid = function (instance, schema) {\n        var isValid = this.validate(instance, schema).errors.length === 0;\n        return isValid;\n    };\n    return SchemaValidator;\n}());\nexports.SchemaValidator = SchemaValidator;\n//# sourceMappingURL=schema_validator.js.map"]},"metadata":{},"sourceType":"script"}