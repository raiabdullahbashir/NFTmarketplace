import { ForwardRefExoticComponent, CSSProperties } from 'react';
import { ElementType, Merge, ComponentPropsWithRef, SpringValue } from '@react-spring/shared';
export * from '@react-spring/core';

declare type JSXElements = keyof JSX.IntrinsicElements;

declare type DOMComponents = {
    [Tag in JSXElements]: AnimatedComponent<Tag>;
};
declare type CreateAnimated = <T extends ElementType>(wrappedComponent: T) => AnimatedComponent<T>;
declare const animated: CreateAnimated & DOMComponents;
/** The type of an `animated()` component */
declare type AnimatedComponent<T extends ElementType> = ForwardRefExoticComponent<AnimatedProps<Merge<ComponentPropsWithRef<T>, {
    style?: StyleProps;
}>> & {
    scrollTop?: SpringValue<number> | number;
    scrollLeft?: SpringValue<number> | number;
}>;
/** The props of an `animated()` component */
declare type AnimatedProps<Props extends object> = {
    [P in keyof Props]: (P extends 'ref' | 'key' ? Props[P] : AnimatedProp<Props[P]>);
};
declare type StyleProps = Merge<CSSProperties, TransformProps>;
declare type StylePropKeys = keyof StyleProps;
declare type ValidStyleProps<T extends object> = {
    [P in keyof T & StylePropKeys]: T[P] extends StyleProps[P] ? P : never;
}[keyof T & StylePropKeys];
declare type AnimatedProp<T> = [T, T] extends [infer T, infer DT] ? [DT] extends [never] ? never : DT extends void ? undefined : DT extends object ? [ValidStyleProps<DT>] extends [never] ? DT extends ReadonlyArray<any> ? AnimatedStyles<DT> : DT : AnimatedStyle<T> : DT | AnimatedLeaf<T> : never;
declare type AnimatedStyles<T extends ReadonlyArray<any>> = {
    [P in keyof T]: [T[P]] extends [infer DT] ? DT extends object ? [ValidStyleProps<DT>] extends [never] ? DT extends ReadonlyArray<any> ? AnimatedStyles<DT> : DT : {
        [P in keyof DT]: AnimatedProp<DT[P]>;
    } : DT : never;
};
declare type AnimatedStyle<T> = [T, T] extends [infer T, infer DT] ? DT extends void ? undefined : [DT] extends [never] ? never : DT extends object ? AnimatedObject<DT> : DT | AnimatedLeaf<T> : never;
declare type AnimatedObject<T extends object> = {
    [P in keyof T]: AnimatedStyle<T[P]>;
} | (T extends ReadonlyArray<number | string> ? SpringValue<T> : never);
declare type AnimatedLeaf<T> = [T] extends [object] ? never : SpringValue<Exclude<T, object | void>>;
declare type Angle = number | string;
declare type Length = number | string;
declare type TransformProps = {
    transform?: string;
    x?: Length;
    y?: Length;
    z?: Length;
    translate?: Length | [Length, Length];
    translateX?: Length;
    translateY?: Length;
    translateZ?: Length;
    translate3d?: [Length, Length, Length];
    rotate?: Angle;
    rotateX?: Angle;
    rotateY?: Angle;
    rotateZ?: Angle;
    rotate3d?: [number, number, number, Angle];
    scale?: number | [number, number];
    scaleX?: number;
    scaleY?: number;
    scaleZ?: number;
    scale3d?: [number, number, number];
    skew?: Angle | [Angle, Angle];
    skewX?: Angle;
    skewY?: Angle;
    matrix?: [number, number, number, number, number, number];
    matrix3d?: [number, // a1
    number, number, number, number, // a2
    number, number, number, number, // a3
    number, number, number, number, // a4
    number, number, number];
};

export { AnimatedComponent, AnimatedProps, animated as a, animated };
