{"version":3,"file":"common.js","sourceRoot":"","sources":["../../src/types/common.ts"],"names":[],"mappings":"","sourcesContent":["export type Indexable<T = any> = { [key: string]: T }\n\nexport type OneOrMore<T> = T | readonly T[]\n\n/** Ensure each type of `T` is an array */\nexport type Arrify<T> = T extends ReadonlyArray<any> ? T : Readonly<[T]>\n\nexport type Falsy = false | null | undefined\n\nexport type OnEnd = () => void\n\n/** For solving generic types */\nexport type Solve<T> = T\n\n/** For resolving object intersections */\nexport type Remap<T> = Solve<{ [P in keyof T]: T[P] }>\n\n/** Override the property types of `A` with `B` and merge any new properties */\nexport type Merge<A, B> = Remap<Omit<A, keyof B> & B>\n\n/** Return the keys of `T` with values that are assignable to `U` */\nexport type AssignableKeys<T, U> = T extends object\n  ? U extends object\n    ? {\n        [P in Extract<keyof T, keyof U>]: T[P] extends U[P] ? P : never\n      }[Extract<keyof T, keyof U>]\n    : never\n  : never\n"]}