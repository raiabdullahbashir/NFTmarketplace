{"version":3,"file":"animated.js","sourceRoot":"","sources":["../../src/types/animated.ts"],"names":[],"mappings":"","sourcesContent":["import {\n  Interpolator,\n  ExtrapolateType,\n  InterpolatorConfig,\n} from './interpolation'\nimport { Arrify, OneOrMore } from './common'\n\n/** These types can be animated */\nexport type Animatable<T = any> = T extends number\n  ? number\n  : T extends string\n  ? string\n  : T extends ReadonlyArray<any>\n  ? ReadonlyArray<any> extends T // When true, T is not a tuple\n    ? ReadonlyArray<number | string>\n    : { [P in keyof T]: Animatable<T[P]> }\n  : never\n\n/** An animated value which can be passed into an `animated` component */\nexport interface SpringValue<T = any> {\n  /**\n   * Get the animated value. Automatically invoked when an `AnimatedValue`\n   * is assigned to a property of an `animated` element.\n   */\n  getValue(): T\n  /**\n   * Interpolate the value with a custom interpolation function,\n   * a configuration object, or keyframe-like ranges.\n   *\n   * @example\n   *\n   * value.to(alpha => `rgba(255, 165, 0, ${alpha})`)\n   * value.to({ range: [0, 1], output: ['yellow', 'red'], extrapolate: 'clamp' })\n   * value.to([0, 0.25, 1], ['yellow', 'orange', 'red'])\n   */\n  to: Interpolator<Arrify<T>>\n  /**\n   * @deprecated Use the `to` method instead. This will be removed in v10.\n   */\n  interpolate: Interpolator<Arrify<T>>\n}\n\n// Extract the raw value types that are being animated\nexport type RawValues<T extends ReadonlyArray<any>> = {\n  [P in keyof T]: T[P] extends { getValue(): infer U } ? U : never\n}\n\nexport interface FrameRequestCallback {\n  (time: number): void\n}\n\n/**\n * This interpolates one or more `SpringValue` objects.\n * The exported `interpolate` function uses this type.\n */\nexport interface SpringInterpolator {\n  // Single AnimatedValue parent\n  <In extends Animatable, Out extends Animatable>(\n    parent: SpringValue<In>,\n    interpolator: (...args: Arrify<In>) => Out\n  ): SpringValue<Out>\n\n  // Tuple of AnimatedValue parents\n  <In extends ReadonlyArray<SpringValue>, Out extends Animatable>(\n    parents: In,\n    interpolator: (...args: RawValues<In>) => Out\n  ): SpringValue<Out>\n\n  // Interpolation config\n  <Out extends Animatable>(\n    parents: OneOrMore<SpringValue>,\n    config: InterpolatorConfig<Out>\n  ): SpringValue<Animatable<Out>>\n\n  // Range shortcuts\n  <Out extends Animatable>(\n    parents: OneOrMore<SpringValue>,\n    range: ReadonlyArray<number>,\n    output: ReadonlyArray<Out>,\n    extrapolate?: ExtrapolateType\n  ): SpringValue<Animatable<Out>>\n}\n"]}