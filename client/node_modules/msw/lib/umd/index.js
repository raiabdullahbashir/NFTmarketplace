(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
  typeof define === 'function' && define.amd ? define(['exports'], factory) :
  (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.MockServiceWorker = {}));
}(this, (function (exports) { 'use strict';

  var statuses = {
  	"100": "Continue",
  	"101": "Switching Protocols",
  	"102": "Processing",
  	"103": "Early Hints",
  	"200": "OK",
  	"201": "Created",
  	"202": "Accepted",
  	"203": "Non-Authoritative Information",
  	"204": "No Content",
  	"205": "Reset Content",
  	"206": "Partial Content",
  	"207": "Multi-Status",
  	"208": "Already Reported",
  	"226": "IM Used",
  	"300": "Multiple Choices",
  	"301": "Moved Permanently",
  	"302": "Found",
  	"303": "See Other",
  	"304": "Not Modified",
  	"305": "Use Proxy",
  	"307": "Temporary Redirect",
  	"308": "Permanent Redirect",
  	"400": "Bad Request",
  	"401": "Unauthorized",
  	"402": "Payment Required",
  	"403": "Forbidden",
  	"404": "Not Found",
  	"405": "Method Not Allowed",
  	"406": "Not Acceptable",
  	"407": "Proxy Authentication Required",
  	"408": "Request Timeout",
  	"409": "Conflict",
  	"410": "Gone",
  	"411": "Length Required",
  	"412": "Precondition Failed",
  	"413": "Payload Too Large",
  	"414": "URI Too Long",
  	"415": "Unsupported Media Type",
  	"416": "Range Not Satisfiable",
  	"417": "Expectation Failed",
  	"418": "I'm a Teapot",
  	"421": "Misdirected Request",
  	"422": "Unprocessable Entity",
  	"423": "Locked",
  	"424": "Failed Dependency",
  	"425": "Too Early",
  	"426": "Upgrade Required",
  	"428": "Precondition Required",
  	"429": "Too Many Requests",
  	"431": "Request Header Fields Too Large",
  	"451": "Unavailable For Legal Reasons",
  	"500": "Internal Server Error",
  	"501": "Not Implemented",
  	"502": "Bad Gateway",
  	"503": "Service Unavailable",
  	"504": "Gateway Timeout",
  	"505": "HTTP Version Not Supported",
  	"506": "Variant Also Negotiates",
  	"507": "Insufficient Storage",
  	"508": "Loop Detected",
  	"509": "Bandwidth Limit Exceeded",
  	"510": "Not Extended",
  	"511": "Network Authentication Required"
  };

  /**
   * Sets a response status code and text.
   * @example
   * res(ctx.status(301))
   * res(ctx.status(400, 'Custom status text'))
   * @see {@link https://mswjs.io/docs/api/context/status `ctx.status()`}
   */
  const status = (statusCode, statusText) => {
      return (res) => {
          res.status = statusCode;
          res.statusText =
              statusText || statuses[String(statusCode)];
          return res;
      };
  };

  var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

  var lib$6 = {};

  var Headers = {};

  var normalizeHeaderName$1 = {};

  Object.defineProperty(normalizeHeaderName$1, "__esModule", { value: true });
  normalizeHeaderName$1.normalizeHeaderName = void 0;
  var HEADERS_INVALID_CHARACTERS = /[^a-z0-9\-#$%&'*+.^_`|~]/i;
  function normalizeHeaderName(name) {
      if (typeof name !== 'string') {
          name = String(name);
      }
      if (HEADERS_INVALID_CHARACTERS.test(name) || name.trim() === '') {
          throw new TypeError('Invalid character in header field name');
      }
      return name.toLowerCase();
  }
  normalizeHeaderName$1.normalizeHeaderName = normalizeHeaderName;

  var normalizeHeaderValue$1 = {};

  Object.defineProperty(normalizeHeaderValue$1, "__esModule", { value: true });
  normalizeHeaderValue$1.normalizeHeaderValue = void 0;
  function normalizeHeaderValue(value) {
      if (typeof value !== 'string') {
          value = String(value);
      }
      return value;
  }
  normalizeHeaderValue$1.normalizeHeaderValue = normalizeHeaderValue;

  var __generator$3 = (commonjsGlobal && commonjsGlobal.__generator) || function (thisArg, body) {
      var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
      return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
      function verb(n) { return function (v) { return step([n, v]); }; }
      function step(op) {
          if (f) throw new TypeError("Generator is already executing.");
          while (_) try {
              if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
              if (y = 0, t) op = [op[0] & 2, t.value];
              switch (op[0]) {
                  case 0: case 1: t = op; break;
                  case 4: _.label++; return { value: op[1], done: false };
                  case 5: _.label++; y = op[1]; op = [0]; continue;
                  case 7: op = _.ops.pop(); _.trys.pop(); continue;
                  default:
                      if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                      if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                      if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                      if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                      if (t[2]) _.ops.pop();
                      _.trys.pop(); continue;
              }
              op = body.call(thisArg, _);
          } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
          if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
      }
  };
  var __read$5 = (commonjsGlobal && commonjsGlobal.__read) || function (o, n) {
      var m = typeof Symbol === "function" && o[Symbol.iterator];
      if (!m) return o;
      var i = m.call(o), r, ar = [], e;
      try {
          while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
      }
      catch (error) { e = { error: error }; }
      finally {
          try {
              if (r && !r.done && (m = i["return"])) m.call(i);
          }
          finally { if (e) throw e.error; }
      }
      return ar;
  };
  var __values$1 = (commonjsGlobal && commonjsGlobal.__values) || function(o) {
      var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
      if (m) return m.call(o);
      if (o && typeof o.length === "number") return {
          next: function () {
              if (o && i >= o.length) o = void 0;
              return { value: o && o[i++], done: !o };
          }
      };
      throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
  };
  Object.defineProperty(Headers, "__esModule", { value: true });
  var normalizeHeaderName_1 = normalizeHeaderName$1;
  var normalizeHeaderValue_1 = normalizeHeaderValue$1;
  var HeadersPolyfill = /** @class */ (function () {
      function HeadersPolyfill(init) {
          var _this = this;
          // Normalized header {"name":"a, b"} storage.
          this._headers = {};
          // Keeps the mapping between the raw header name
          // and the normalized header name to ease the lookup.
          this._names = new Map();
          /**
           * @note Cannot check if the `init` is an instance of the `Headers`
           * because that class is only defined in the browser.
           */
          if (['Headers', 'HeadersPolyfill'].includes(init === null || init === void 0 ? void 0 : init.constructor.name) ||
              init instanceof HeadersPolyfill) {
              var initialHeaders = init;
              initialHeaders.forEach(function (value, name) {
                  _this.append(name, value);
              }, this);
          }
          else if (Array.isArray(init)) {
              init.forEach(function (_a) {
                  var _b = __read$5(_a, 2), name = _b[0], value = _b[1];
                  _this.append(name, Array.isArray(value) ? value.join(', ') : value);
              });
          }
          else if (init) {
              Object.getOwnPropertyNames(init).forEach(function (name) {
                  var value = init[name];
                  _this.append(name, Array.isArray(value) ? value.join(', ') : value);
              });
          }
      }
      HeadersPolyfill.prototype[Symbol.iterator] = function () {
          return this.entries();
      };
      HeadersPolyfill.prototype.keys = function () {
          var _a, _b, name_1, e_1_1;
          var e_1, _c;
          return __generator$3(this, function (_d) {
              switch (_d.label) {
                  case 0:
                      _d.trys.push([0, 5, 6, 7]);
                      _a = __values$1(Object.keys(this._headers)), _b = _a.next();
                      _d.label = 1;
                  case 1:
                      if (!!_b.done) return [3 /*break*/, 4];
                      name_1 = _b.value;
                      return [4 /*yield*/, name_1];
                  case 2:
                      _d.sent();
                      _d.label = 3;
                  case 3:
                      _b = _a.next();
                      return [3 /*break*/, 1];
                  case 4: return [3 /*break*/, 7];
                  case 5:
                      e_1_1 = _d.sent();
                      e_1 = { error: e_1_1 };
                      return [3 /*break*/, 7];
                  case 6:
                      try {
                          if (_b && !_b.done && (_c = _a.return)) _c.call(_a);
                      }
                      finally { if (e_1) throw e_1.error; }
                      return [7 /*endfinally*/];
                  case 7: return [2 /*return*/];
              }
          });
      };
      HeadersPolyfill.prototype.values = function () {
          var _a, _b, value, e_2_1;
          var e_2, _c;
          return __generator$3(this, function (_d) {
              switch (_d.label) {
                  case 0:
                      _d.trys.push([0, 5, 6, 7]);
                      _a = __values$1(Object.values(this._headers)), _b = _a.next();
                      _d.label = 1;
                  case 1:
                      if (!!_b.done) return [3 /*break*/, 4];
                      value = _b.value;
                      return [4 /*yield*/, value];
                  case 2:
                      _d.sent();
                      _d.label = 3;
                  case 3:
                      _b = _a.next();
                      return [3 /*break*/, 1];
                  case 4: return [3 /*break*/, 7];
                  case 5:
                      e_2_1 = _d.sent();
                      e_2 = { error: e_2_1 };
                      return [3 /*break*/, 7];
                  case 6:
                      try {
                          if (_b && !_b.done && (_c = _a.return)) _c.call(_a);
                      }
                      finally { if (e_2) throw e_2.error; }
                      return [7 /*endfinally*/];
                  case 7: return [2 /*return*/];
              }
          });
      };
      HeadersPolyfill.prototype.entries = function () {
          var _a, _b, name_2, e_3_1;
          var e_3, _c;
          return __generator$3(this, function (_d) {
              switch (_d.label) {
                  case 0:
                      _d.trys.push([0, 5, 6, 7]);
                      _a = __values$1(Object.keys(this._headers)), _b = _a.next();
                      _d.label = 1;
                  case 1:
                      if (!!_b.done) return [3 /*break*/, 4];
                      name_2 = _b.value;
                      return [4 /*yield*/, [name_2, this.get(name_2)]];
                  case 2:
                      _d.sent();
                      _d.label = 3;
                  case 3:
                      _b = _a.next();
                      return [3 /*break*/, 1];
                  case 4: return [3 /*break*/, 7];
                  case 5:
                      e_3_1 = _d.sent();
                      e_3 = { error: e_3_1 };
                      return [3 /*break*/, 7];
                  case 6:
                      try {
                          if (_b && !_b.done && (_c = _a.return)) _c.call(_a);
                      }
                      finally { if (e_3) throw e_3.error; }
                      return [7 /*endfinally*/];
                  case 7: return [2 /*return*/];
              }
          });
      };
      /**
       * Returns a `ByteString` sequence of all the values of a header with a given name.
       */
      HeadersPolyfill.prototype.get = function (name) {
          return this._headers[normalizeHeaderName_1.normalizeHeaderName(name)] || null;
      };
      /**
       * Sets a new value for an existing header inside a `Headers` object, or adds the header if it does not already exist.
       */
      HeadersPolyfill.prototype.set = function (name, value) {
          var normalizedName = normalizeHeaderName_1.normalizeHeaderName(name);
          this._headers[normalizedName] = normalizeHeaderValue_1.normalizeHeaderValue(value);
          this._names.set(normalizedName, name);
      };
      /**
       * Appends a new value onto an existing header inside a `Headers` object, or adds the header if it does not already exist.
       */
      HeadersPolyfill.prototype.append = function (name, value) {
          var resolvedValue = this.has(name) ? this.get(name) + ", " + value : value;
          this.set(name, resolvedValue);
      };
      /**
       * Deletes a header from the `Headers` object.
       */
      HeadersPolyfill.prototype.delete = function (name) {
          if (!this.has(name)) {
              return this;
          }
          var normalizedName = normalizeHeaderName_1.normalizeHeaderName(name);
          delete this._headers[normalizedName];
          this._names.delete(normalizedName);
          return this;
      };
      /**
       * Returns the object of all the normalized headers.
       */
      HeadersPolyfill.prototype.all = function () {
          return this._headers;
      };
      /**
       * Returns the object of all the raw headers.
       */
      HeadersPolyfill.prototype.raw = function () {
          var _this = this;
          return Object.entries(this._headers).reduce(function (headers, _a) {
              var _b = __read$5(_a, 2), name = _b[0], value = _b[1];
              headers[_this._names.get(name)] = value;
              return headers;
          }, {});
      };
      /**
       * Returns a boolean stating whether a `Headers` object contains a certain header.
       */
      HeadersPolyfill.prototype.has = function (name) {
          return this._headers.hasOwnProperty(normalizeHeaderName_1.normalizeHeaderName(name));
      };
      /**
       * Traverses the `Headers` object,
       * calling the given callback for each header.
       */
      HeadersPolyfill.prototype.forEach = function (callback, thisArg) {
          for (var name_3 in this._headers) {
              if (this._headers.hasOwnProperty(name_3)) {
                  callback.call(thisArg, this._headers[name_3], name_3, this);
              }
          }
      };
      return HeadersPolyfill;
  }());
  Headers.default = HeadersPolyfill;

  var headersToString$1 = {};

  var headersToList$1 = {};

  Object.defineProperty(headersToList$1, "__esModule", { value: true });
  headersToList$1.headersToList = void 0;
  function headersToList(headers) {
      var headersList = [];
      headers.forEach(function (value, name) {
          var resolvedValue = value.includes(',')
              ? value.split(',').map(function (value) { return value.trim(); })
              : value;
          headersList.push([name, resolvedValue]);
      });
      return headersList;
  }
  headersToList$1.headersToList = headersToList;

  var __read$4 = (commonjsGlobal && commonjsGlobal.__read) || function (o, n) {
      var m = typeof Symbol === "function" && o[Symbol.iterator];
      if (!m) return o;
      var i = m.call(o), r, ar = [], e;
      try {
          while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
      }
      catch (error) { e = { error: error }; }
      finally {
          try {
              if (r && !r.done && (m = i["return"])) m.call(i);
          }
          finally { if (e) throw e.error; }
      }
      return ar;
  };
  Object.defineProperty(headersToString$1, "__esModule", { value: true });
  headersToString$1.headersToString = void 0;
  var headersToList_1 = headersToList$1;
  /**
   * Converts a given `Headers` instance to its string representation.
   */
  function headersToString(headers) {
      var list = headersToList_1.headersToList(headers);
      var lines = list.map(function (_a) {
          var _b = __read$4(_a, 2), name = _b[0], value = _b[1];
          var values = [].concat(value);
          return name + ": " + values.join(', ');
      });
      return lines.join('\r\n');
  }
  headersToString$1.headersToString = headersToString;

  var headersToObject$1 = {};

  Object.defineProperty(headersToObject$1, "__esModule", { value: true });
  headersToObject$1.headersToObject = void 0;
  // List of headers that cannot have multiple values,
  // while potentially having a comma in their single value.
  var singleValueHeaders = ['user-agent'];
  /**
   * Converts a given `Headers` instance into a plain object.
   * Respects headers with multiple values.
   */
  function headersToObject(headers) {
      var headersObject = {};
      headers.forEach(function (value, name) {
          var isMultiValue = !singleValueHeaders.includes(name.toLowerCase()) && value.includes(',');
          headersObject[name] = isMultiValue
              ? value.split(',').map(function (s) { return s.trim(); })
              : value;
      });
      return headersObject;
  }
  headersToObject$1.headersToObject = headersToObject;

  var stringToHeaders$1 = {};

  Object.defineProperty(stringToHeaders$1, "__esModule", { value: true });
  stringToHeaders$1.stringToHeaders = void 0;
  var Headers_1$2 = Headers;
  /**
   * Converts a string representation of headers (i.e. from XMLHttpRequest)
   * to a new `Headers` instance.
   */
  function stringToHeaders(str) {
      var lines = str.trim().split(/[\r\n]+/);
      return lines.reduce(function (headers, line) {
          var parts = line.split(': ');
          var name = parts.shift();
          var value = parts.join(': ');
          headers.append(name, value);
          return headers;
      }, new Headers_1$2.default());
  }
  stringToHeaders$1.stringToHeaders = stringToHeaders;

  var listToHeaders$1 = {};

  var __read$3 = (commonjsGlobal && commonjsGlobal.__read) || function (o, n) {
      var m = typeof Symbol === "function" && o[Symbol.iterator];
      if (!m) return o;
      var i = m.call(o), r, ar = [], e;
      try {
          while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
      }
      catch (error) { e = { error: error }; }
      finally {
          try {
              if (r && !r.done && (m = i["return"])) m.call(i);
          }
          finally { if (e) throw e.error; }
      }
      return ar;
  };
  Object.defineProperty(listToHeaders$1, "__esModule", { value: true });
  listToHeaders$1.listToHeaders = void 0;
  var Headers_1$1 = Headers;
  function listToHeaders(list) {
      var headers = new Headers_1$1.default();
      list.forEach(function (_a) {
          var _b = __read$3(_a, 2), name = _b[0], value = _b[1];
          var values = [].concat(value);
          values.forEach(function (value) {
              headers.append(name, value);
          });
      });
      return headers;
  }
  listToHeaders$1.listToHeaders = listToHeaders;

  var objectToHeaders$1 = {};

  var reduceHeadersObject$1 = {};

  Object.defineProperty(reduceHeadersObject$1, "__esModule", { value: true });
  reduceHeadersObject$1.reduceHeadersObject = void 0;
  /**
   * Reduces given headers object instnace.
   */
  function reduceHeadersObject(headers, reducer, initialState) {
      return Object.keys(headers).reduce(function (nextHeaders, name) {
          return reducer(nextHeaders, name, headers[name]);
      }, initialState);
  }
  reduceHeadersObject$1.reduceHeadersObject = reduceHeadersObject;

  Object.defineProperty(objectToHeaders$1, "__esModule", { value: true });
  objectToHeaders$1.objectToHeaders = void 0;
  var Headers_1 = Headers;
  var reduceHeadersObject_1$1 = reduceHeadersObject$1;
  /**
   * Converts a given headers object to a new `Headers` instance.
   */
  function objectToHeaders(headersObject) {
      return reduceHeadersObject_1$1.reduceHeadersObject(headersObject, function (headers, name, value) {
          var values = [].concat(value).filter(Boolean);
          values.forEach(function (value) {
              headers.append(name, value);
          });
          return headers;
      }, new Headers_1.default());
  }
  objectToHeaders$1.objectToHeaders = objectToHeaders;

  var flattenHeadersList$1 = {};

  var __read$2 = (commonjsGlobal && commonjsGlobal.__read) || function (o, n) {
      var m = typeof Symbol === "function" && o[Symbol.iterator];
      if (!m) return o;
      var i = m.call(o), r, ar = [], e;
      try {
          while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
      }
      catch (error) { e = { error: error }; }
      finally {
          try {
              if (r && !r.done && (m = i["return"])) m.call(i);
          }
          finally { if (e) throw e.error; }
      }
      return ar;
  };
  Object.defineProperty(flattenHeadersList$1, "__esModule", { value: true });
  flattenHeadersList$1.flattenHeadersList = void 0;
  function flattenHeadersList(list) {
      return list.map(function (_a) {
          var _b = __read$2(_a, 2), name = _b[0], values = _b[1];
          return [name, [].concat(values).join('; ')];
      });
  }
  flattenHeadersList$1.flattenHeadersList = flattenHeadersList;

  var flattenHeadersObject$1 = {};

  Object.defineProperty(flattenHeadersObject$1, "__esModule", { value: true });
  flattenHeadersObject$1.flattenHeadersObject = void 0;
  var reduceHeadersObject_1 = reduceHeadersObject$1;
  function flattenHeadersObject(headersObject) {
      return reduceHeadersObject_1.reduceHeadersObject(headersObject, function (headers, name, value) {
          headers[name] = [].concat(value).join('; ');
          return headers;
      }, {});
  }
  flattenHeadersObject$1.flattenHeadersObject = flattenHeadersObject;

  (function (exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.flattenHeadersObject = exports.flattenHeadersList = exports.reduceHeadersObject = exports.objectToHeaders = exports.listToHeaders = exports.stringToHeaders = exports.headersToObject = exports.headersToList = exports.headersToString = exports.Headers = void 0;
  var Headers_1 = Headers;
  Object.defineProperty(exports, "Headers", { enumerable: true, get: function () { return Headers_1.default; } });
  var headersToString_1 = headersToString$1;
  Object.defineProperty(exports, "headersToString", { enumerable: true, get: function () { return headersToString_1.headersToString; } });
  var headersToList_1 = headersToList$1;
  Object.defineProperty(exports, "headersToList", { enumerable: true, get: function () { return headersToList_1.headersToList; } });
  var headersToObject_1 = headersToObject$1;
  Object.defineProperty(exports, "headersToObject", { enumerable: true, get: function () { return headersToObject_1.headersToObject; } });
  var stringToHeaders_1 = stringToHeaders$1;
  Object.defineProperty(exports, "stringToHeaders", { enumerable: true, get: function () { return stringToHeaders_1.stringToHeaders; } });
  var listToHeaders_1 = listToHeaders$1;
  Object.defineProperty(exports, "listToHeaders", { enumerable: true, get: function () { return listToHeaders_1.listToHeaders; } });
  var objectToHeaders_1 = objectToHeaders$1;
  Object.defineProperty(exports, "objectToHeaders", { enumerable: true, get: function () { return objectToHeaders_1.objectToHeaders; } });
  var reduceHeadersObject_1 = reduceHeadersObject$1;
  Object.defineProperty(exports, "reduceHeadersObject", { enumerable: true, get: function () { return reduceHeadersObject_1.reduceHeadersObject; } });
  var flattenHeadersList_1 = flattenHeadersList$1;
  Object.defineProperty(exports, "flattenHeadersList", { enumerable: true, get: function () { return flattenHeadersList_1.flattenHeadersList; } });
  var flattenHeadersObject_1 = flattenHeadersObject$1;
  Object.defineProperty(exports, "flattenHeadersObject", { enumerable: true, get: function () { return flattenHeadersObject_1.flattenHeadersObject; } });
  }(lib$6));

  /**
   * Sets one or multiple response headers.
   * @example
   * ctx.set('Content-Type', 'text/plain')
   * ctx.set({
   *   'Accept': 'application/javascript',
   *   'Content-Type': "text/plain"
   * })
   * @see {@link https://mswjs.io/docs/api/context/set `ctx.set()`}
   */
  function set(...args) {
      return (res) => {
          const [name, value] = args;
          if (typeof name === 'string') {
              res.headers.append(name, value);
          }
          else {
              const headers = lib$6.objectToHeaders(name);
              headers.forEach((value, name) => {
                  res.headers.append(name, value);
              });
          }
          return res;
      };
  }

  /*!
   * cookie
   * Copyright(c) 2012-2014 Roman Shtylman
   * Copyright(c) 2015 Douglas Christopher Wilson
   * MIT Licensed
   */

  /**
   * Module exports.
   * @public
   */

  var parse_1 = parse$4;
  var serialize_1 = serialize;

  /**
   * Module variables.
   * @private
   */

  var decode = decodeURIComponent;
  var encode = encodeURIComponent;
  var pairSplitRegExp = /; */;

  /**
   * RegExp to match field-content in RFC 7230 sec 3.2
   *
   * field-content = field-vchar [ 1*( SP / HTAB ) field-vchar ]
   * field-vchar   = VCHAR / obs-text
   * obs-text      = %x80-FF
   */

  var fieldContentRegExp = /^[\u0009\u0020-\u007e\u0080-\u00ff]+$/;

  /**
   * Parse a cookie header.
   *
   * Parse the given cookie header string into an object
   * The object has the various cookies as keys(names) => values
   *
   * @param {string} str
   * @param {object} [options]
   * @return {object}
   * @public
   */

  function parse$4(str, options) {
    if (typeof str !== 'string') {
      throw new TypeError('argument str must be a string');
    }

    var obj = {};
    var opt = options || {};
    var pairs = str.split(pairSplitRegExp);
    var dec = opt.decode || decode;

    for (var i = 0; i < pairs.length; i++) {
      var pair = pairs[i];
      var eq_idx = pair.indexOf('=');

      // skip things that don't look like key=value
      if (eq_idx < 0) {
        continue;
      }

      var key = pair.substr(0, eq_idx).trim();
      var val = pair.substr(++eq_idx, pair.length).trim();

      // quoted values
      if ('"' == val[0]) {
        val = val.slice(1, -1);
      }

      // only assign once
      if (undefined == obj[key]) {
        obj[key] = tryDecode(val, dec);
      }
    }

    return obj;
  }

  /**
   * Serialize data into a cookie header.
   *
   * Serialize the a name value pair into a cookie string suitable for
   * http headers. An optional options object specified cookie parameters.
   *
   * serialize('foo', 'bar', { httpOnly: true })
   *   => "foo=bar; httpOnly"
   *
   * @param {string} name
   * @param {string} val
   * @param {object} [options]
   * @return {string}
   * @public
   */

  function serialize(name, val, options) {
    var opt = options || {};
    var enc = opt.encode || encode;

    if (typeof enc !== 'function') {
      throw new TypeError('option encode is invalid');
    }

    if (!fieldContentRegExp.test(name)) {
      throw new TypeError('argument name is invalid');
    }

    var value = enc(val);

    if (value && !fieldContentRegExp.test(value)) {
      throw new TypeError('argument val is invalid');
    }

    var str = name + '=' + value;

    if (null != opt.maxAge) {
      var maxAge = opt.maxAge - 0;

      if (isNaN(maxAge) || !isFinite(maxAge)) {
        throw new TypeError('option maxAge is invalid')
      }

      str += '; Max-Age=' + Math.floor(maxAge);
    }

    if (opt.domain) {
      if (!fieldContentRegExp.test(opt.domain)) {
        throw new TypeError('option domain is invalid');
      }

      str += '; Domain=' + opt.domain;
    }

    if (opt.path) {
      if (!fieldContentRegExp.test(opt.path)) {
        throw new TypeError('option path is invalid');
      }

      str += '; Path=' + opt.path;
    }

    if (opt.expires) {
      if (typeof opt.expires.toUTCString !== 'function') {
        throw new TypeError('option expires is invalid');
      }

      str += '; Expires=' + opt.expires.toUTCString();
    }

    if (opt.httpOnly) {
      str += '; HttpOnly';
    }

    if (opt.secure) {
      str += '; Secure';
    }

    if (opt.sameSite) {
      var sameSite = typeof opt.sameSite === 'string'
        ? opt.sameSite.toLowerCase() : opt.sameSite;

      switch (sameSite) {
        case true:
          str += '; SameSite=Strict';
          break;
        case 'lax':
          str += '; SameSite=Lax';
          break;
        case 'strict':
          str += '; SameSite=Strict';
          break;
        case 'none':
          str += '; SameSite=None';
          break;
        default:
          throw new TypeError('option sameSite is invalid');
      }
    }

    return str;
  }

  /**
   * Try decoding a string using a decoding function.
   *
   * @param {string} str
   * @param {function} decode
   * @private
   */

  function tryDecode(str, decode) {
    try {
      return decode(str);
    } catch (e) {
      return str;
    }
  }

  /**
   * Sets a given cookie on the mocked response.
   * @example res(ctx.cookie('name', 'value'))
   */
  const cookie = (name, value, options) => {
      return (res) => {
          const serializedCookie = serialize_1(name, value, options);
          res.headers.set('Set-Cookie', serializedCookie);
          if (typeof document !== 'undefined') {
              document.cookie = serializedCookie;
          }
          return res;
      };
  };

  /**
   * Sets a raw response body. Does not append any `Content-Type` headers.
   * @example
   * res(ctx.body('Successful response'))
   * res(ctx.body(JSON.stringify({ key: 'value' })))
   * @see {@link https://mswjs.io/docs/api/context/body `ctx.body()`}
   */
  const body = (value) => {
      return (res) => {
          res.body = value;
          return res;
      };
  };

  /**
   * Parses a given string into a JSON.
   * Does not throw an exception on an invalid JSON string.
   */
  function jsonParse(str) {
      try {
          return JSON.parse(str);
      }
      catch (error) {
          return undefined;
      }
  }

  /**
   * Determines if the given value is an object.
   */
  function isObject(value) {
      return value != null && typeof value === 'object' && !Array.isArray(value);
  }

  /**
   * Deeply merges two given objects with the right one
   * having a priority during property assignment.
   */
  function mergeRight(left, right) {
      return Object.entries(right).reduce((result, [key, rightValue]) => {
          const leftValue = result[key];
          if (Array.isArray(leftValue) && Array.isArray(rightValue)) {
              result[key] = leftValue.concat(rightValue);
              return result;
          }
          if (isObject(leftValue) && isObject(rightValue)) {
              result[key] = mergeRight(leftValue, rightValue);
              return result;
          }
          result[key] = rightValue;
          return result;
      }, Object.assign({}, left));
  }

  /**
   * Sets the given value as the JSON body of the response.
   * Appends a `Content-Type: application/json` header on the
   * mocked response.
   * @example
   * res(ctx.json('Some string'))
   * res(ctx.json({ key: 'value' }))
   * res(ctx.json([1, '2', false, { ok: true }]))
   * @see {@link https://mswjs.io/docs/api/context/json `ctx.json()`}
   */
  const json = (body) => {
      return (res) => {
          res.headers.set('Content-Type', 'application/json');
          res.body = JSON.stringify(body);
          return res;
      };
  };

  /**
   * Sets a given payload as a GraphQL response body.
   * @example
   * res(ctx.data({ user: { firstName: 'John' }}))
   * @see {@link https://mswjs.io/docs/api/context/data `ctx.data()`}
   */
  const data = (payload) => {
      return (res) => {
          const prevBody = jsonParse(res.body) || {};
          const nextBody = mergeRight(prevBody, { data: payload });
          return json(nextBody)(res);
      };
  };

  var lib$5 = {exports: {}};

  (function (module, exports) {
  (function (global, factory) {
    factory(exports) ;
  }(commonjsGlobal, (function (exports) {
    /**
     * Determines if the current process is a Node.js process.
     */
    function isNodeProcess() {
        if (typeof navigator !== 'undefined' && navigator.product === 'ReactNative') {
            return true;
        }
        return !!(typeof process !== 'undefined' &&
            process.versions &&
            process.versions.node);
    }

    exports.isNodeProcess = isNodeProcess;

    Object.defineProperty(exports, '__esModule', { value: true });

  })));
  }(lib$5, lib$5.exports));

  const SET_TIMEOUT_MAX_ALLOWED_INT = 2147483647;
  const MIN_SERVER_RESPONSE_TIME = 100;
  const MAX_SERVER_RESPONSE_TIME = 400;
  const NODE_SERVER_RESPONSE_TIME = 5;
  const getRandomServerResponseTime = () => {
      if (lib$5.exports.isNodeProcess()) {
          return NODE_SERVER_RESPONSE_TIME;
      }
      return Math.floor(Math.random() * (MAX_SERVER_RESPONSE_TIME - MIN_SERVER_RESPONSE_TIME) +
          MIN_SERVER_RESPONSE_TIME);
  };
  /**
   * Delays the response by the given duration (ms).
   * @example
   * res(ctx.delay(1200)) // delay response by 1200ms
   * res(ctx.delay()) // emulate realistic server response time
   * res(ctx.delay('infinite')) // delay response infinitely
   * @see {@link https://mswjs.io/docs/api/context/delay `ctx.delay()`}
   */
  const delay = (durationOrMode) => {
      return (res) => {
          let delayTime;
          if (typeof durationOrMode === 'string') {
              switch (durationOrMode) {
                  case 'infinite': {
                      // Using `Infinity` as a delay value executes the response timeout immediately.
                      // Instead, use the maximum allowed integer for `setTimeout`.
                      delayTime = SET_TIMEOUT_MAX_ALLOWED_INT;
                      break;
                  }
                  case 'real': {
                      delayTime = getRandomServerResponseTime();
                      break;
                  }
                  default: {
                      throw new Error(`Failed to delay a response: unknown delay mode "${durationOrMode}". Please make sure you provide one of the supported modes ("real", "infinite") or a number to "ctx.delay".`);
                  }
              }
          }
          else if (typeof durationOrMode === 'undefined') {
              // Use random realistic server response time when no explicit delay duration was provided.
              delayTime = getRandomServerResponseTime();
          }
          else {
              // Guard against passing values like `Infinity` or `Number.MAX_VALUE`
              // as the response delay duration. They don't produce the result you may expect.
              if (durationOrMode > SET_TIMEOUT_MAX_ALLOWED_INT) {
                  throw new Error(`Failed to delay a response: provided delay duration (${durationOrMode}) exceeds the maximum allowed duration for "setTimeout" (${SET_TIMEOUT_MAX_ALLOWED_INT}). This will cause the response to be returned immediately. Please use a number within the allowed range to delay the response by exact duration, or consider the "infinite" delay mode to delay the response indefinitely.`);
              }
              delayTime = durationOrMode;
          }
          res.delay = delayTime;
          return res;
      };
  };

  /**
   * Sets a given list of GraphQL errors on the mocked response.
   * @example res(ctx.errors([{ message: 'Unauthorized' }]))
   * @see {@link https://mswjs.io/docs/api/context/errors}
   */
  const errors = (errorsList) => {
      return (res) => {
          if (errorsList == null) {
              return res;
          }
          const prevBody = jsonParse(res.body) || {};
          const nextBody = mergeRight(prevBody, { errors: errorsList });
          return json(nextBody)(res);
      };
  };

  const useFetch = lib$5.exports.isNodeProcess() ? require('node-fetch') : window.fetch;
  const augmentRequestInit = (requestInit) => {
      const headers = new lib$6.Headers(requestInit.headers);
      headers.set('x-msw-bypass', 'true');
      return Object.assign(Object.assign({}, requestInit), { headers: headers.all() });
  };
  const createFetchRequestParameters = (input) => {
      const { body, method } = input;
      const requestParameters = Object.assign(Object.assign({}, input), { body: undefined });
      if (['GET', 'HEAD'].includes(method)) {
          return requestParameters;
      }
      requestParameters.body =
          typeof body === 'object' ? JSON.stringify(body) : body;
      return requestParameters;
  };
  /**
   * Performs a bypassed request inside a request handler.
   * @example
   * const originalResponse = await ctx.fetch(req)
   * @see {@link https://mswjs.io/docs/api/context/fetch `ctx.fetch()`}
   */
  const fetch$1 = (input, requestInit = {}) => {
      if (typeof input === 'string') {
          return useFetch(input, augmentRequestInit(requestInit));
      }
      const requestParameters = createFetchRequestParameters(input);
      const derivedRequestInit = augmentRequestInit(requestParameters);
      return useFetch(input.url.href, derivedRequestInit);
  };

  /**
   * Sets a textual response body. Appends a `Content-Type: text/plain`
   * header on the mocked response.
   * @example res(ctx.text('Successful response'))
   * @see {@link https://mswjs.io/docs/api/context/text `ctx.text()`}
   */
  const text = (body) => {
      return (res) => {
          res.headers.set('Content-Type', 'text/plain');
          res.body = body;
          return res;
      };
  };

  /**
   * Sets an XML response body. Appends a `Content-Type: text/xml` header
   * on the mocked response.
   * @example
   * res(ctx.xml('<node key="value">Content</node>'))
   * @see {@link https://mswjs.io/docs/api/context/xml `ctx.xml()`}
   */
  const xml = (body) => {
      return (res) => {
          res.headers.set('Content-Type', 'text/xml');
          res.body = body;
          return res;
      };
  };

  var index = /*#__PURE__*/Object.freeze({
    __proto__: null,
    status: status,
    set: set,
    cookie: cookie,
    body: body,
    data: data,
    delay: delay,
    errors: errors,
    fetch: fetch$1,
    json: json,
    text: text,
    xml: xml
  });

  var lib$4 = {};

  var StrictEventEmitter$1 = {};

  var events = {exports: {}};

  var R = typeof Reflect === 'object' ? Reflect : null;
  var ReflectApply = R && typeof R.apply === 'function'
    ? R.apply
    : function ReflectApply(target, receiver, args) {
      return Function.prototype.apply.call(target, receiver, args);
    };

  var ReflectOwnKeys;
  if (R && typeof R.ownKeys === 'function') {
    ReflectOwnKeys = R.ownKeys;
  } else if (Object.getOwnPropertySymbols) {
    ReflectOwnKeys = function ReflectOwnKeys(target) {
      return Object.getOwnPropertyNames(target)
        .concat(Object.getOwnPropertySymbols(target));
    };
  } else {
    ReflectOwnKeys = function ReflectOwnKeys(target) {
      return Object.getOwnPropertyNames(target);
    };
  }

  function ProcessEmitWarning(warning) {
    if (console && console.warn) console.warn(warning);
  }

  var NumberIsNaN = Number.isNaN || function NumberIsNaN(value) {
    return value !== value;
  };

  function EventEmitter() {
    EventEmitter.init.call(this);
  }
  events.exports = EventEmitter;
  events.exports.once = once;

  // Backwards-compat with node 0.10.x
  EventEmitter.EventEmitter = EventEmitter;

  EventEmitter.prototype._events = undefined;
  EventEmitter.prototype._eventsCount = 0;
  EventEmitter.prototype._maxListeners = undefined;

  // By default EventEmitters will print a warning if more than 10 listeners are
  // added to it. This is a useful default which helps finding memory leaks.
  var defaultMaxListeners = 10;

  function checkListener(listener) {
    if (typeof listener !== 'function') {
      throw new TypeError('The "listener" argument must be of type Function. Received type ' + typeof listener);
    }
  }

  Object.defineProperty(EventEmitter, 'defaultMaxListeners', {
    enumerable: true,
    get: function() {
      return defaultMaxListeners;
    },
    set: function(arg) {
      if (typeof arg !== 'number' || arg < 0 || NumberIsNaN(arg)) {
        throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received ' + arg + '.');
      }
      defaultMaxListeners = arg;
    }
  });

  EventEmitter.init = function() {

    if (this._events === undefined ||
        this._events === Object.getPrototypeOf(this)._events) {
      this._events = Object.create(null);
      this._eventsCount = 0;
    }

    this._maxListeners = this._maxListeners || undefined;
  };

  // Obviously not all Emitters should be limited to 10. This function allows
  // that to be increased. Set to zero for unlimited.
  EventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {
    if (typeof n !== 'number' || n < 0 || NumberIsNaN(n)) {
      throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received ' + n + '.');
    }
    this._maxListeners = n;
    return this;
  };

  function _getMaxListeners(that) {
    if (that._maxListeners === undefined)
      return EventEmitter.defaultMaxListeners;
    return that._maxListeners;
  }

  EventEmitter.prototype.getMaxListeners = function getMaxListeners() {
    return _getMaxListeners(this);
  };

  EventEmitter.prototype.emit = function emit(type) {
    var args = [];
    for (var i = 1; i < arguments.length; i++) args.push(arguments[i]);
    var doError = (type === 'error');

    var events = this._events;
    if (events !== undefined)
      doError = (doError && events.error === undefined);
    else if (!doError)
      return false;

    // If there is no 'error' event listener then throw.
    if (doError) {
      var er;
      if (args.length > 0)
        er = args[0];
      if (er instanceof Error) {
        // Note: The comments on the `throw` lines are intentional, they show
        // up in Node's output if this results in an unhandled exception.
        throw er; // Unhandled 'error' event
      }
      // At least give some kind of context to the user
      var err = new Error('Unhandled error.' + (er ? ' (' + er.message + ')' : ''));
      err.context = er;
      throw err; // Unhandled 'error' event
    }

    var handler = events[type];

    if (handler === undefined)
      return false;

    if (typeof handler === 'function') {
      ReflectApply(handler, this, args);
    } else {
      var len = handler.length;
      var listeners = arrayClone(handler, len);
      for (var i = 0; i < len; ++i)
        ReflectApply(listeners[i], this, args);
    }

    return true;
  };

  function _addListener(target, type, listener, prepend) {
    var m;
    var events;
    var existing;

    checkListener(listener);

    events = target._events;
    if (events === undefined) {
      events = target._events = Object.create(null);
      target._eventsCount = 0;
    } else {
      // To avoid recursion in the case that type === "newListener"! Before
      // adding it to the listeners, first emit "newListener".
      if (events.newListener !== undefined) {
        target.emit('newListener', type,
                    listener.listener ? listener.listener : listener);

        // Re-assign `events` because a newListener handler could have caused the
        // this._events to be assigned to a new object
        events = target._events;
      }
      existing = events[type];
    }

    if (existing === undefined) {
      // Optimize the case of one listener. Don't need the extra array object.
      existing = events[type] = listener;
      ++target._eventsCount;
    } else {
      if (typeof existing === 'function') {
        // Adding the second element, need to change to array.
        existing = events[type] =
          prepend ? [listener, existing] : [existing, listener];
        // If we've already got an array, just append.
      } else if (prepend) {
        existing.unshift(listener);
      } else {
        existing.push(listener);
      }

      // Check for listener leak
      m = _getMaxListeners(target);
      if (m > 0 && existing.length > m && !existing.warned) {
        existing.warned = true;
        // No error code for this since it is a Warning
        // eslint-disable-next-line no-restricted-syntax
        var w = new Error('Possible EventEmitter memory leak detected. ' +
                            existing.length + ' ' + String(type) + ' listeners ' +
                            'added. Use emitter.setMaxListeners() to ' +
                            'increase limit');
        w.name = 'MaxListenersExceededWarning';
        w.emitter = target;
        w.type = type;
        w.count = existing.length;
        ProcessEmitWarning(w);
      }
    }

    return target;
  }

  EventEmitter.prototype.addListener = function addListener(type, listener) {
    return _addListener(this, type, listener, false);
  };

  EventEmitter.prototype.on = EventEmitter.prototype.addListener;

  EventEmitter.prototype.prependListener =
      function prependListener(type, listener) {
        return _addListener(this, type, listener, true);
      };

  function onceWrapper() {
    if (!this.fired) {
      this.target.removeListener(this.type, this.wrapFn);
      this.fired = true;
      if (arguments.length === 0)
        return this.listener.call(this.target);
      return this.listener.apply(this.target, arguments);
    }
  }

  function _onceWrap(target, type, listener) {
    var state = { fired: false, wrapFn: undefined, target: target, type: type, listener: listener };
    var wrapped = onceWrapper.bind(state);
    wrapped.listener = listener;
    state.wrapFn = wrapped;
    return wrapped;
  }

  EventEmitter.prototype.once = function once(type, listener) {
    checkListener(listener);
    this.on(type, _onceWrap(this, type, listener));
    return this;
  };

  EventEmitter.prototype.prependOnceListener =
      function prependOnceListener(type, listener) {
        checkListener(listener);
        this.prependListener(type, _onceWrap(this, type, listener));
        return this;
      };

  // Emits a 'removeListener' event if and only if the listener was removed.
  EventEmitter.prototype.removeListener =
      function removeListener(type, listener) {
        var list, events, position, i, originalListener;

        checkListener(listener);

        events = this._events;
        if (events === undefined)
          return this;

        list = events[type];
        if (list === undefined)
          return this;

        if (list === listener || list.listener === listener) {
          if (--this._eventsCount === 0)
            this._events = Object.create(null);
          else {
            delete events[type];
            if (events.removeListener)
              this.emit('removeListener', type, list.listener || listener);
          }
        } else if (typeof list !== 'function') {
          position = -1;

          for (i = list.length - 1; i >= 0; i--) {
            if (list[i] === listener || list[i].listener === listener) {
              originalListener = list[i].listener;
              position = i;
              break;
            }
          }

          if (position < 0)
            return this;

          if (position === 0)
            list.shift();
          else {
            spliceOne(list, position);
          }

          if (list.length === 1)
            events[type] = list[0];

          if (events.removeListener !== undefined)
            this.emit('removeListener', type, originalListener || listener);
        }

        return this;
      };

  EventEmitter.prototype.off = EventEmitter.prototype.removeListener;

  EventEmitter.prototype.removeAllListeners =
      function removeAllListeners(type) {
        var listeners, events, i;

        events = this._events;
        if (events === undefined)
          return this;

        // not listening for removeListener, no need to emit
        if (events.removeListener === undefined) {
          if (arguments.length === 0) {
            this._events = Object.create(null);
            this._eventsCount = 0;
          } else if (events[type] !== undefined) {
            if (--this._eventsCount === 0)
              this._events = Object.create(null);
            else
              delete events[type];
          }
          return this;
        }

        // emit removeListener for all listeners on all events
        if (arguments.length === 0) {
          var keys = Object.keys(events);
          var key;
          for (i = 0; i < keys.length; ++i) {
            key = keys[i];
            if (key === 'removeListener') continue;
            this.removeAllListeners(key);
          }
          this.removeAllListeners('removeListener');
          this._events = Object.create(null);
          this._eventsCount = 0;
          return this;
        }

        listeners = events[type];

        if (typeof listeners === 'function') {
          this.removeListener(type, listeners);
        } else if (listeners !== undefined) {
          // LIFO order
          for (i = listeners.length - 1; i >= 0; i--) {
            this.removeListener(type, listeners[i]);
          }
        }

        return this;
      };

  function _listeners(target, type, unwrap) {
    var events = target._events;

    if (events === undefined)
      return [];

    var evlistener = events[type];
    if (evlistener === undefined)
      return [];

    if (typeof evlistener === 'function')
      return unwrap ? [evlistener.listener || evlistener] : [evlistener];

    return unwrap ?
      unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);
  }

  EventEmitter.prototype.listeners = function listeners(type) {
    return _listeners(this, type, true);
  };

  EventEmitter.prototype.rawListeners = function rawListeners(type) {
    return _listeners(this, type, false);
  };

  EventEmitter.listenerCount = function(emitter, type) {
    if (typeof emitter.listenerCount === 'function') {
      return emitter.listenerCount(type);
    } else {
      return listenerCount.call(emitter, type);
    }
  };

  EventEmitter.prototype.listenerCount = listenerCount;
  function listenerCount(type) {
    var events = this._events;

    if (events !== undefined) {
      var evlistener = events[type];

      if (typeof evlistener === 'function') {
        return 1;
      } else if (evlistener !== undefined) {
        return evlistener.length;
      }
    }

    return 0;
  }

  EventEmitter.prototype.eventNames = function eventNames() {
    return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];
  };

  function arrayClone(arr, n) {
    var copy = new Array(n);
    for (var i = 0; i < n; ++i)
      copy[i] = arr[i];
    return copy;
  }

  function spliceOne(list, index) {
    for (; index + 1 < list.length; index++)
      list[index] = list[index + 1];
    list.pop();
  }

  function unwrapListeners(arr) {
    var ret = new Array(arr.length);
    for (var i = 0; i < ret.length; ++i) {
      ret[i] = arr[i].listener || arr[i];
    }
    return ret;
  }

  function once(emitter, name) {
    return new Promise(function (resolve, reject) {
      function errorListener(err) {
        emitter.removeListener(name, resolver);
        reject(err);
      }

      function resolver() {
        if (typeof emitter.removeListener === 'function') {
          emitter.removeListener('error', errorListener);
        }
        resolve([].slice.call(arguments));
      }
      eventTargetAgnosticAddListener(emitter, name, resolver, { once: true });
      if (name !== 'error') {
        addErrorHandlerIfEventEmitter(emitter, errorListener, { once: true });
      }
    });
  }

  function addErrorHandlerIfEventEmitter(emitter, handler, flags) {
    if (typeof emitter.on === 'function') {
      eventTargetAgnosticAddListener(emitter, 'error', handler, flags);
    }
  }

  function eventTargetAgnosticAddListener(emitter, name, listener, flags) {
    if (typeof emitter.on === 'function') {
      if (flags.once) {
        emitter.once(name, listener);
      } else {
        emitter.on(name, listener);
      }
    } else if (typeof emitter.addEventListener === 'function') {
      // EventTarget does not have `error` event semantics like Node
      // EventEmitters, we do not listen for `error` events here.
      emitter.addEventListener(name, function wrapListener(arg) {
        // IE does not have builtin `{ once: true }` support so we
        // have to do it manually.
        if (flags.once) {
          emitter.removeEventListener(name, wrapListener);
        }
        listener(arg);
      });
    } else {
      throw new TypeError('The "emitter" argument must be of type EventEmitter. Received type ' + typeof emitter);
    }
  }

  var __extends$2 = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
      var extendStatics = function (d, b) {
          extendStatics = Object.setPrototypeOf ||
              ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
              function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
          return extendStatics(d, b);
      };
      return function (d, b) {
          extendStatics(d, b);
          function __() { this.constructor = d; }
          d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
  })();
  var __spreadArrays = (commonjsGlobal && commonjsGlobal.__spreadArrays) || function () {
      for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
      for (var r = Array(s), k = 0, i = 0; i < il; i++)
          for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
              r[k] = a[j];
      return r;
  };
  StrictEventEmitter$1.__esModule = true;
  StrictEventEmitter$1.StrictEventEmitter = void 0;
  var events_1 = events.exports;
  var StrictEventEmitter = /** @class */ (function (_super) {
      __extends$2(StrictEventEmitter, _super);
      function StrictEventEmitter() {
          return _super.call(this) || this;
      }
      StrictEventEmitter.prototype.on = function (event, listener) {
          return _super.prototype.on.call(this, event.toString(), listener);
      };
      StrictEventEmitter.prototype.once = function (event, listener) {
          return _super.prototype.on.call(this, event.toString(), listener);
      };
      StrictEventEmitter.prototype.off = function (event, listener) {
          return _super.prototype.off.call(this, event.toString(), listener);
      };
      StrictEventEmitter.prototype.emit = function (event) {
          var data = [];
          for (var _i = 1; _i < arguments.length; _i++) {
              data[_i - 1] = arguments[_i];
          }
          return _super.prototype.emit.apply(this, __spreadArrays([event.toString()], data));
      };
      StrictEventEmitter.prototype.addListener = function (event, listener) {
          return _super.prototype.addListener.call(this, event.toString(), listener);
      };
      StrictEventEmitter.prototype.removeListener = function (event, listener) {
          return _super.prototype.removeListener.call(this, event.toString(), listener);
      };
      return StrictEventEmitter;
  }(events_1.EventEmitter));
  StrictEventEmitter$1.StrictEventEmitter = StrictEventEmitter;

  (function (exports) {
  var __createBinding = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
      if (k2 === undefined) k2 = k;
      Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
  }) : (function(o, m, k, k2) {
      if (k2 === undefined) k2 = k;
      o[k2] = m[k];
  }));
  exports.__esModule = true;
  exports.StrictEventEmitter = void 0;
  var StrictEventEmitter_1 = StrictEventEmitter$1;
  __createBinding(exports, StrictEventEmitter_1, "StrictEventEmitter");
  }(lib$4));

  /*! *****************************************************************************
  Copyright (c) Microsoft Corporation.

  Permission to use, copy, modify, and/or distribute this software for any
  purpose with or without fee is hereby granted.

  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
  REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
  AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
  INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
  LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
  OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
  PERFORMANCE OF THIS SOFTWARE.
  ***************************************************************************** */

  function __rest(s, e) {
      var t = {};
      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
          t[p] = s[p];
      if (s != null && typeof Object.getOwnPropertySymbols === "function")
          for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
              if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                  t[p[i]] = s[p[i]];
          }
      return t;
  }

  function __awaiter$3(thisArg, _arguments, P, generator) {
      function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
      return new (P || (P = Promise))(function (resolve, reject) {
          function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
          function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
          function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
          step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
  }

  var lib$3 = {};

  var until$1 = {};

  Object.defineProperty(until$1, "__esModule", { value: true });
  /**
   * Gracefully handles a given Promise factory.
   * @example
   * cosnt [error, data] = await until(() => asyncAction())
   */
  until$1.until = async (promise) => {
      try {
          const data = await promise().catch((error) => {
              throw error;
          });
          return [null, data];
      }
      catch (error) {
          return [error, null];
      }
  };

  Object.defineProperty(lib$3, "__esModule", { value: true });
  var until_1$1 = until$1;
  var until = lib$3.until = until_1$1.until;

  /**
   * Attempts to resolve a Service Worker instance from a given registration,
   * regardless of its state (active, installing, waiting).
   */
  const getWorkerByRegistration = (registration, absoluteWorkerUrl, findWorker) => {
      const allStates = [
          registration.active,
          registration.installing,
          registration.waiting,
      ];
      const existingStates = allStates.filter(Boolean);
      const mockWorker = existingStates.find((worker) => {
          return findWorker(worker.scriptURL, absoluteWorkerUrl);
      });
      return mockWorker || null;
  };

  /**
   * Returns an absolute Service Worker URL based on the given
   * relative URL (known during the registration).
   */
  function getAbsoluteWorkerUrl(relativeUrl) {
      return new URL(relativeUrl, location.origin).href;
  }

  var lib$2 = {};

  var invariant$3 = {};

  var format$1 = {};

  Object.defineProperty(format$1, "__esModule", { value: true });
  format$1.format = void 0;
  var POSITIONALS_EXP = /(%?)(%([sdjo]))/g;
  function serializePositional(positional, flag) {
      switch (flag) {
          // Strings.
          case 's':
              return positional;
          // Digits.
          case 'd':
          case 'i':
              return Number(positional);
          // JSON.
          case 'j':
              return JSON.stringify(positional);
          // Objects.
          case 'o': {
              // Preserve stings to prevent extra quotes around them.
              if (typeof positional === 'string') {
                  return positional;
              }
              var json = JSON.stringify(positional);
              // If the positional isn't serializable, return it as-is.
              if (json === '{}' || json === '[]' || /^\[object .+?\]$/.test(json)) {
                  return positional;
              }
              return json;
          }
      }
  }
  function format(message) {
      var positionals = [];
      for (var _i = 1; _i < arguments.length; _i++) {
          positionals[_i - 1] = arguments[_i];
      }
      if (positionals.length === 0) {
          return message;
      }
      var positionalIndex = 0;
      var formattedMessage = message.replace(POSITIONALS_EXP, function (match, isEscaped, _, flag) {
          var positional = positionals[positionalIndex];
          var value = serializePositional(positional, flag);
          if (!isEscaped) {
              positionalIndex++;
              return value;
          }
          return match;
      });
      // Append unresolved positionals to string as-is.
      if (positionalIndex < positionals.length) {
          formattedMessage += " " + positionals.slice(positionalIndex).join(' ');
      }
      formattedMessage = formattedMessage.replace(/%{2,2}/g, '%');
      return formattedMessage;
  }
  format$1.format = format;

  var __extends$1 = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
      var extendStatics = function (d, b) {
          extendStatics = Object.setPrototypeOf ||
              ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
              function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
          return extendStatics(d, b);
      };
      return function (d, b) {
          if (typeof b !== "function" && b !== null)
              throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
          extendStatics(d, b);
          function __() { this.constructor = d; }
          d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
  })();
  var __spreadArray = (commonjsGlobal && commonjsGlobal.__spreadArray) || function (to, from) {
      for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)
          to[j] = from[i];
      return to;
  };
  Object.defineProperty(invariant$3, "__esModule", { value: true });
  invariant$3.invariant = invariant$3.InvariantError = void 0;
  var format_1 = format$1;
  var STACK_FRAMES_TO_IGNORE = 2;
  var InvariantError = /** @class */ (function (_super) {
      __extends$1(InvariantError, _super);
      function InvariantError(message) {
          var positionals = [];
          for (var _i = 1; _i < arguments.length; _i++) {
              positionals[_i - 1] = arguments[_i];
          }
          var _this = _super.call(this, message) || this;
          _this.name = 'Invariant Violation';
          _this.message = format_1.format.apply(void 0, __spreadArray([message], positionals));
          if (_this.stack) {
              var prevStack = _this.stack;
              _this.stack = prevStack
                  .split('\n')
                  .slice(STACK_FRAMES_TO_IGNORE)
                  .join('\n');
          }
          return _this;
      }
      return InvariantError;
  }(Error));
  invariant$3.InvariantError = InvariantError;
  function invariant$2(predicate, message) {
      var positionals = [];
      for (var _i = 2; _i < arguments.length; _i++) {
          positionals[_i - 2] = arguments[_i];
      }
      if (!predicate) {
          throw new (InvariantError.bind.apply(InvariantError, __spreadArray([void 0, message], positionals)))();
      }
  }
  invariant$3.invariant = invariant$2;

  (function (exports) {
  var __createBinding = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
      if (k2 === undefined) k2 = k;
      Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
  }) : (function(o, m, k, k2) {
      if (k2 === undefined) k2 = k;
      o[k2] = m[k];
  }));
  var __exportStar = (commonjsGlobal && commonjsGlobal.__exportStar) || function(m, exports) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
  };
  Object.defineProperty(exports, "__esModule", { value: true });
  __exportStar(invariant$3, exports);
  __exportStar(format$1, exports);
  }(lib$2));

  const LIBRARY_PREFIX = '[MSW]';
  /**
   * Formats a given message by appending the library's prefix string.
   */
  function formatMessage(message, ...positionals) {
      const interpolatedMessage = lib$2.format(message, ...positionals);
      return `${LIBRARY_PREFIX} ${interpolatedMessage}`;
  }
  /**
   * Prints a library-specific warning.
   */
  function warn(message, ...positionals) {
      console.warn(formatMessage(message, ...positionals));
  }
  /**
   * Prints a library-specific error.
   */
  function error$1(message, ...positionals) {
      console.error(formatMessage(message, ...positionals));
  }
  const devUtils = {
      formatMessage,
      warn,
      error: error$1,
  };

  /**
   * Returns an active Service Worker instance.
   * When not found, registers a new Service Worker.
   */
  const getWorkerInstance = (url, options = {}, findWorker) => __awaiter$3(void 0, void 0, void 0, function* () {
      // Resolve the absolute Service Worker URL.
      const absoluteWorkerUrl = getAbsoluteWorkerUrl(url);
      const mockRegistrations = yield navigator.serviceWorker
          .getRegistrations()
          .then((registrations) => registrations.filter((registration) => getWorkerByRegistration(registration, absoluteWorkerUrl, findWorker)));
      if (!navigator.serviceWorker.controller && mockRegistrations.length > 0) {
          // Reload the page when it has associated workers, but no active controller.
          // The absence of a controller can mean either:
          // - page has no Service Worker associated with it
          // - page has been hard-reloaded and its workers won't be used until the next reload.
          // Since we've checked that there are registrations associated with this page,
          // at this point we are sure it's hard reload that falls into this clause.
          location.reload();
      }
      const [existingRegistration] = mockRegistrations;
      if (existingRegistration) {
          // When the Service Worker is registered, update it and return the reference.
          return existingRegistration.update().then(() => {
              return [
                  getWorkerByRegistration(existingRegistration, absoluteWorkerUrl, findWorker),
                  existingRegistration,
              ];
          });
      }
      // When the Service Worker wasn't found, register it anew and return the reference.
      const [error, instance] = yield until(() => __awaiter$3(void 0, void 0, void 0, function* () {
          const registration = yield navigator.serviceWorker.register(url, options);
          return [
              // Compare existing worker registration by its worker URL,
              // to prevent irrelevant workers to resolve here (such as Codesandbox worker).
              getWorkerByRegistration(registration, absoluteWorkerUrl, findWorker),
              registration,
          ];
      }));
      // Handle Service Worker registration errors.
      if (error) {
          const isWorkerMissing = error.message.includes('(404)');
          // Produce a custom error message when given a non-existing Service Worker url.
          // Suggest developers to check their setup.
          if (isWorkerMissing) {
              const scopeUrl = new URL((options === null || options === void 0 ? void 0 : options.scope) || '/', location.href);
              throw new Error(devUtils.formatMessage(`\
Failed to register a Service Worker for scope ('${scopeUrl.href}') with script ('${absoluteWorkerUrl}'): Service Worker script does not exist at the given path.

Did you forget to run "npx msw init <PUBLIC_DIR>"?

Learn more about creating the Service Worker script: https://mswjs.io/docs/cli/init`));
          }
          // Fallback error message for any other registration errors.
          throw new Error(devUtils.formatMessage('Failed to register the Service Worker:\n\n%s', error.message));
      }
      return instance;
  });

  /**
   * Prints a worker activation message in the browser's console.
   */
  function printStartMessage(args = {}) {
      if (args.quiet) {
          return;
      }
      const message = args.message || 'Mocking enabled.';
      console.groupCollapsed(`%c${devUtils.formatMessage(message)}`, 'color:orangered;font-weight:bold;');
      console.log('%cDocumentation: %chttps://mswjs.io/docs', 'font-weight:bold', 'font-weight:normal');
      console.log('Found an issue? https://github.com/mswjs/msw/issues');
      console.groupEnd();
  }

  /**
   * Signals the worker to enable the interception of requests.
   */
  function enableMocking(context, options) {
      return __awaiter$3(this, void 0, void 0, function* () {
          context.workerChannel.send('MOCK_ACTIVATE');
          return context.events.once('MOCKING_ENABLED').then(() => {
              printStartMessage({ quiet: options.quiet });
          });
      });
  }

  /**
   * Creates a communication channel between the client
   * and the Service Worker associated with the given event.
   */
  const createBroadcastChannel = (event) => {
      const port = event.ports[0];
      return {
          /**
           * Sends a text message to the connected Service Worker.
           */
          send(message) {
              if (port) {
                  port.postMessage(message);
              }
          },
      };
  };

  class NetworkError extends Error {
      constructor(message) {
          super(message);
          this.name = 'NetworkError';
      }
  }

  var lib$1 = {};

  var CookieStore = {};

  var setCookie = {exports: {}};

  var defaultParseOptions = {
    decodeValues: true,
    map: false,
    silent: false,
  };

  function isNonEmptyString(str) {
    return typeof str === "string" && !!str.trim();
  }

  function parseString(setCookieValue, options) {
    var parts = setCookieValue.split(";").filter(isNonEmptyString);
    var nameValue = parts.shift().split("=");
    var name = nameValue.shift();
    var value = nameValue.join("="); // everything after the first =, joined by a "=" if there was more than one part

    options = options
      ? Object.assign({}, defaultParseOptions, options)
      : defaultParseOptions;

    try {
      value = options.decodeValues ? decodeURIComponent(value) : value; // decode cookie value
    } catch (e) {
      console.error(
        "set-cookie-parser encountered an error while decoding a cookie with value '" +
          value +
          "'. Set options.decodeValues to false to disable this feature.",
        e
      );
    }

    var cookie = {
      name: name, // grab everything before the first =
      value: value,
    };

    parts.forEach(function (part) {
      var sides = part.split("=");
      var key = sides.shift().trimLeft().toLowerCase();
      var value = sides.join("=");
      if (key === "expires") {
        cookie.expires = new Date(value);
      } else if (key === "max-age") {
        cookie.maxAge = parseInt(value, 10);
      } else if (key === "secure") {
        cookie.secure = true;
      } else if (key === "httponly") {
        cookie.httpOnly = true;
      } else if (key === "samesite") {
        cookie.sameSite = value;
      } else {
        cookie[key] = value;
      }
    });

    return cookie;
  }

  function parse$3(input, options) {
    options = options
      ? Object.assign({}, defaultParseOptions, options)
      : defaultParseOptions;

    if (!input) {
      if (!options.map) {
        return [];
      } else {
        return {};
      }
    }

    if (input.headers && input.headers["set-cookie"]) {
      // fast-path for node.js (which automatically normalizes header names to lower-case
      input = input.headers["set-cookie"];
    } else if (input.headers) {
      // slow-path for other environments - see #25
      var sch =
        input.headers[
          Object.keys(input.headers).find(function (key) {
            return key.toLowerCase() === "set-cookie";
          })
        ];
      // warn if called on a request-like object with a cookie header rather than a set-cookie header - see #34, 36
      if (!sch && input.headers.cookie && !options.silent) {
        console.warn(
          "Warning: set-cookie-parser appears to have been called on a request object. It is designed to parse Set-Cookie headers from responses, not Cookie headers from requests. Set the option {silent: true} to suppress this warning."
        );
      }
      input = sch;
    }
    if (!Array.isArray(input)) {
      input = [input];
    }

    options = options
      ? Object.assign({}, defaultParseOptions, options)
      : defaultParseOptions;

    if (!options.map) {
      return input.filter(isNonEmptyString).map(function (str) {
        return parseString(str, options);
      });
    } else {
      var cookies = {};
      return input.filter(isNonEmptyString).reduce(function (cookies, str) {
        var cookie = parseString(str, options);
        cookies[cookie.name] = cookie;
        return cookies;
      }, cookies);
    }
  }

  /*
    Set-Cookie header field-values are sometimes comma joined in one string. This splits them without choking on commas
    that are within a single set-cookie field-value, such as in the Expires portion.

    This is uncommon, but explicitly allowed - see https://tools.ietf.org/html/rfc2616#section-4.2
    Node.js does this for every header *except* set-cookie - see https://github.com/nodejs/node/blob/d5e363b77ebaf1caf67cd7528224b651c86815c1/lib/_http_incoming.js#L128
    React Native's fetch does this for *every* header, including set-cookie.

    Based on: https://github.com/google/j2objc/commit/16820fdbc8f76ca0c33472810ce0cb03d20efe25
    Credits to: https://github.com/tomball for original and https://github.com/chrusart for JavaScript implementation
  */
  function splitCookiesString(cookiesString) {
    if (Array.isArray(cookiesString)) {
      return cookiesString;
    }
    if (typeof cookiesString !== "string") {
      return [];
    }

    var cookiesStrings = [];
    var pos = 0;
    var start;
    var ch;
    var lastComma;
    var nextStart;
    var cookiesSeparatorFound;

    function skipWhitespace() {
      while (pos < cookiesString.length && /\s/.test(cookiesString.charAt(pos))) {
        pos += 1;
      }
      return pos < cookiesString.length;
    }

    function notSpecialChar() {
      ch = cookiesString.charAt(pos);

      return ch !== "=" && ch !== ";" && ch !== ",";
    }

    while (pos < cookiesString.length) {
      start = pos;
      cookiesSeparatorFound = false;

      while (skipWhitespace()) {
        ch = cookiesString.charAt(pos);
        if (ch === ",") {
          // ',' is a cookie separator if we have later first '=', not ';' or ','
          lastComma = pos;
          pos += 1;

          skipWhitespace();
          nextStart = pos;

          while (pos < cookiesString.length && notSpecialChar()) {
            pos += 1;
          }

          // currently special character
          if (pos < cookiesString.length && cookiesString.charAt(pos) === "=") {
            // we found cookies separator
            cookiesSeparatorFound = true;
            // pos is inside the next cookie, so back up and return it.
            pos = nextStart;
            cookiesStrings.push(cookiesString.substring(start, lastComma));
            start = pos;
          } else {
            // in param ',' or param separator ';',
            // we continue from that comma
            pos = lastComma + 1;
          }
        } else {
          pos += 1;
        }
      }

      if (!cookiesSeparatorFound || pos >= cookiesString.length) {
        cookiesStrings.push(cookiesString.substring(start, cookiesString.length));
      }
    }

    return cookiesStrings;
  }

  setCookie.exports = parse$3;
  setCookie.exports.parse = parse$3;
  setCookie.exports.parseString = parseString;
  setCookie.exports.splitCookiesString = splitCookiesString;

  (function (exports) {
  var __rest = (commonjsGlobal && commonjsGlobal.__rest) || function (s, e) {
      var t = {};
      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
          t[p] = s[p];
      if (s != null && typeof Object.getOwnPropertySymbols === "function")
          for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
              if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                  t[p[i]] = s[p[i]];
          }
      return t;
  };
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.PERSISTENCY_KEY = void 0;
  const set_cookie_parser_1 = setCookie.exports;
  exports.PERSISTENCY_KEY = 'MSW_COOKIE_STORE';
  const SUPPORTS_LOCAL_STORAGE = typeof localStorage !== 'undefined';
  class CookieStore {
      constructor() {
          this.store = new Map();
      }
      /**
       * Sets the given request cookies into the store.
       * Respects the `request.credentials` policy.
       */
      add(request, response) {
          if (request.credentials === 'omit') {
              return;
          }
          const requestUrl = new URL(request.url);
          const responseCookies = response.headers.get('set-cookie');
          if (!responseCookies) {
              return;
          }
          const now = Date.now();
          const parsedResponseCookies = set_cookie_parser_1.parse(responseCookies).map((_a) => {
              var { maxAge } = _a, cookie = __rest(_a, ["maxAge"]);
              return (Object.assign(Object.assign({}, cookie), { expires: maxAge === undefined ? cookie.expires : new Date(now + maxAge * 1000), maxAge }));
          });
          const prevCookies = this.store.get(requestUrl.origin) || new Map();
          parsedResponseCookies.forEach((cookie) => {
              this.store.set(requestUrl.origin, prevCookies.set(cookie.name, cookie));
          });
      }
      /**
       * Returns cookies relevant to the given request
       * and its `request.credentials` policy.
       */
      get(request) {
          this.deleteExpiredCookies();
          const requestUrl = new URL(request.url);
          const originCookies = this.store.get(requestUrl.origin) || new Map();
          switch (request.credentials) {
              case 'include': {
                  const documentCookies = set_cookie_parser_1.parse(document.cookie);
                  documentCookies.forEach((cookie) => {
                      originCookies.set(cookie.name, cookie);
                  });
                  return originCookies;
              }
              case 'same-origin': {
                  return originCookies;
              }
              default:
                  return new Map();
          }
      }
      /**
       * Returns a collection of all stored cookies.
       */
      getAll() {
          this.deleteExpiredCookies();
          return this.store;
      }
      /**
       * Deletes all cookies associated with the given request.
       */
      deleteAll(request) {
          const requestUrl = new URL(request.url);
          this.store.delete(requestUrl.origin);
      }
      /**
       * Clears the entire cookie store.
       */
      clear() {
          this.store.clear();
      }
      /**
       * Hydrates the virtual cookie store from the `localStorage` if defined.
       */
      hydrate() {
          if (!SUPPORTS_LOCAL_STORAGE) {
              return;
          }
          const persistedCookies = localStorage.getItem(exports.PERSISTENCY_KEY);
          if (persistedCookies) {
              try {
                  const parsedCookies = JSON.parse(persistedCookies);
                  parsedCookies.forEach(([origin, cookies]) => {
                      this.store.set(origin, new Map(cookies.map((_a) => {
                          var [token, _b] = _a, { expires } = _b, cookie = __rest(_b, ["expires"]);
                          return [
                              token,
                              expires === undefined
                                  ? cookie
                                  : Object.assign(Object.assign({}, cookie), { expires: new Date(expires) }),
                          ];
                      })));
                  });
              }
              catch (error) {
                  console.warn(`
[virtual-cookie] Failed to parse a stored cookie from the localStorage (key "${exports.PERSISTENCY_KEY}").

Stored value:
${localStorage.getItem(exports.PERSISTENCY_KEY)}

Thrown exception:
${error}

Invalid value has been removed from localStorage to prevent subsequent failed parsing attempts.`);
                  localStorage.removeItem(exports.PERSISTENCY_KEY);
              }
          }
      }
      /**
       * Persists the current virtual cookies into the `localStorage` if defined,
       * so they are available on the next page load.
       */
      persist() {
          if (!SUPPORTS_LOCAL_STORAGE) {
              return;
          }
          const serializedCookies = Array.from(this.store.entries()).map(([origin, cookies]) => {
              return [origin, Array.from(cookies.entries())];
          });
          localStorage.setItem(exports.PERSISTENCY_KEY, JSON.stringify(serializedCookies));
      }
      deleteExpiredCookies() {
          const now = Date.now();
          this.store.forEach((originCookies, origin) => {
              originCookies.forEach(({ expires, name }) => {
                  if (expires !== undefined && expires.getTime() <= now) {
                      originCookies.delete(name);
                  }
              });
              if (originCookies.size === 0) {
                  this.store.delete(origin);
              }
          });
      }
  }
  exports.default = new CookieStore();
  }(CookieStore));

  (function (exports) {
  var __importDefault = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {
      return (mod && mod.__esModule) ? mod : { "default": mod };
  };
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.PERSISTENCY_KEY = exports.store = void 0;
  var CookieStore_1 = CookieStore;
  Object.defineProperty(exports, "store", { enumerable: true, get: function () { return __importDefault(CookieStore_1).default; } });
  Object.defineProperty(exports, "PERSISTENCY_KEY", { enumerable: true, get: function () { return CookieStore_1.PERSISTENCY_KEY; } });
  }(lib$1));

  function getAllCookies() {
      return parse_1(document.cookie);
  }
  /**
   * Returns relevant document cookies based on the request `credentials` option.
   */
  function getRequestCookies(request) {
      /**
       * @note No cookies persist on the document in Node.js: no document.
       */
      if (typeof location === 'undefined') {
          return {};
      }
      switch (request.credentials) {
          case 'same-origin': {
              // Return document cookies only when requested a resource
              // from the same origin as the current document.
              return location.origin === request.url.origin ? getAllCookies() : {};
          }
          case 'include': {
              // Return all document cookies.
              return getAllCookies();
          }
          default: {
              return {};
          }
      }
  }

  function setRequestCookies(request) {
      var _a;
      lib$1.store.hydrate();
      request.cookies = Object.assign(Object.assign({}, getRequestCookies(request)), Array.from((_a = lib$1.store.get(Object.assign(Object.assign({}, request), { url: request.url.toString() }))) === null || _a === void 0 ? void 0 : _a.entries()).reduce((cookies, [name, { value }]) => Object.assign(cookies, { [name]: value }), {}));
      request.headers.set('cookie', Object.entries(request.cookies)
          .map(([name, value]) => `${name}=${value}`)
          .join('; '));
  }

  function parseContentHeaders(headersString) {
      var _a, _b;
      const headers = lib$6.stringToHeaders(headersString);
      const contentType = headers.get('content-type') || 'text/plain';
      const disposition = headers.get('content-disposition');
      if (!disposition) {
          throw new Error('"Content-Disposition" header is required.');
      }
      const directives = disposition.split(';').reduce((acc, chunk) => {
          const [name, ...rest] = chunk.trim().split('=');
          acc[name] = rest.join('=');
          return acc;
      }, {});
      const name = (_a = directives.name) === null || _a === void 0 ? void 0 : _a.slice(1, -1);
      const filename = (_b = directives.filename) === null || _b === void 0 ? void 0 : _b.slice(1, -1);
      return {
          name,
          filename,
          contentType,
      };
  }
  /**
   * Parses a given string as a multipart/form-data.
   * Does not throw an exception on an invalid multipart string.
   */
  function parseMultipartData(data, headers) {
      const contentType = headers === null || headers === void 0 ? void 0 : headers.get('content-type');
      if (!contentType) {
          return undefined;
      }
      const [, ...directives] = contentType.split(/; */);
      const boundary = directives
          .filter((d) => d.startsWith('boundary='))
          .map((s) => s.replace(/^boundary=/, ''))[0];
      if (!boundary) {
          return undefined;
      }
      const boundaryRegExp = new RegExp(`--+${boundary}`);
      const fields = data
          .split(boundaryRegExp)
          .filter((chunk) => chunk.startsWith('\r\n') && chunk.endsWith('\r\n'))
          .map((chunk) => chunk.trimStart().replace(/\r\n$/, ''));
      if (!fields.length) {
          return undefined;
      }
      const parsedBody = {};
      try {
          for (const field of fields) {
              const [contentHeaders, ...rest] = field.split('\r\n\r\n');
              const contentBody = rest.join('\r\n\r\n');
              const { contentType, filename, name } = parseContentHeaders(contentHeaders);
              const value = filename === undefined
                  ? contentBody
                  : new File([contentBody], filename, { type: contentType });
              const parsedValue = parsedBody[name];
              if (parsedValue === undefined) {
                  parsedBody[name] = value;
              }
              else if (Array.isArray(parsedValue)) {
                  parsedBody[name] = [...parsedValue, value];
              }
              else {
                  parsedBody[name] = [parsedValue, value];
              }
          }
          return parsedBody;
      }
      catch (error) {
          return undefined;
      }
  }

  /**
   * Parses a given request/response body based on the `Content-Type` header.
   */
  function parseBody(body, headers) {
      // Return whatever falsey body value is given.
      if (!body) {
          return body;
      }
      const contentType = headers === null || headers === void 0 ? void 0 : headers.get('content-type');
      // If the body has a Multipart Content-Type
      // parse it into an object.
      const hasMultipartContent = contentType === null || contentType === void 0 ? void 0 : contentType.startsWith('multipart/form-data');
      if (hasMultipartContent && typeof body !== 'object') {
          return parseMultipartData(body, headers) || body;
      }
      // If the intercepted request's body has a JSON Content-Type
      // parse it into an object.
      const hasJsonContent = contentType === null || contentType === void 0 ? void 0 : contentType.includes('json');
      if (hasJsonContent && typeof body !== 'object') {
          return jsonParse(body) || body;
      }
      // Otherwise leave as-is.
      return body;
  }

  /**
   * Performs a case-insensitive comparison of two given strings.
   */
  function isStringEqual(actual, expected) {
      return actual.toLowerCase() === expected.toLowerCase();
  }

  /**
   * Ensures that an empty GET request body is always represented as `undefined`.
   */
  function pruneGetRequestBody(request) {
      if (request.method &&
          isStringEqual(request.method, 'GET') &&
          request.body === '') {
          return undefined;
      }
      return request.body;
  }

  /**
   * Converts a given request received from the Service Worker
   * into a `MockedRequest` instance.
   */
  function parseWorkerRequest(rawRequest) {
      const request = {
          id: rawRequest.id,
          cache: rawRequest.cache,
          credentials: rawRequest.credentials,
          method: rawRequest.method,
          url: new URL(rawRequest.url),
          referrer: rawRequest.referrer,
          referrerPolicy: rawRequest.referrerPolicy,
          redirect: rawRequest.redirect,
          mode: rawRequest.mode,
          params: {},
          cookies: {},
          integrity: rawRequest.integrity,
          keepalive: rawRequest.keepalive,
          destination: rawRequest.destination,
          body: pruneGetRequestBody(rawRequest),
          bodyUsed: rawRequest.bodyUsed,
          headers: new lib$6.Headers(rawRequest.headers),
      };
      // Set document cookies on the request.
      setRequestCookies(request);
      // Parse the request's body based on the "Content-Type" header.
      request.body = parseBody(request.body, request.headers);
      return request;
  }

  /**
   * Returns a mocked response for a given request using following request handlers.
   */
  const getResponse = (request, handlers, resolutionContext) => __awaiter$3(void 0, void 0, void 0, function* () {
      const relevantHandlers = handlers.filter((handler) => {
          return handler.test(request, resolutionContext);
      });
      if (relevantHandlers.length === 0) {
          return {
              handler: undefined,
              response: undefined,
          };
      }
      const result = yield relevantHandlers.reduce((executionResult, handler) => __awaiter$3(void 0, void 0, void 0, function* () {
          const previousResults = yield executionResult;
          if (!!(previousResults === null || previousResults === void 0 ? void 0 : previousResults.response)) {
              return executionResult;
          }
          const result = yield handler.run(request, resolutionContext);
          if (result === null || result.handler.shouldSkip) {
              return null;
          }
          if (!result.response) {
              return {
                  request: result.request,
                  handler: result.handler,
                  response: undefined,
                  parsedResult: result.parsedResult,
              };
          }
          if (result.response.once) {
              handler.markAsSkipped(true);
          }
          return result;
      }), Promise.resolve(null));
      // Although reducing a list of relevant request handlers, it's possible
      // that in the end there will be no handler associted with the request
      // (i.e. if relevant handlers are fall-through).
      if (!result) {
          return {
              handler: undefined,
              response: undefined,
          };
      }
      return {
          handler: result.handler,
          publicRequest: result.request,
          parsedRequest: result.parsedResult,
          response: result.response,
      };
  });

  var jsLevenshtein = (function()
  {
    function _min(d0, d1, d2, bx, ay)
    {
      return d0 < d1 || d2 < d1
          ? d0 > d2
              ? d2 + 1
              : d0 + 1
          : bx === ay
              ? d1
              : d1 + 1;
    }

    return function(a, b)
    {
      if (a === b) {
        return 0;
      }

      if (a.length > b.length) {
        var tmp = a;
        a = b;
        b = tmp;
      }

      var la = a.length;
      var lb = b.length;

      while (la > 0 && (a.charCodeAt(la - 1) === b.charCodeAt(lb - 1))) {
        la--;
        lb--;
      }

      var offset = 0;

      while (offset < la && (a.charCodeAt(offset) === b.charCodeAt(offset))) {
        offset++;
      }

      la -= offset;
      lb -= offset;

      if (la === 0 || lb < 3) {
        return lb;
      }

      var x = 0;
      var y;
      var d0;
      var d1;
      var d2;
      var d3;
      var dd;
      var dy;
      var ay;
      var bx0;
      var bx1;
      var bx2;
      var bx3;

      var vector = [];

      for (y = 0; y < la; y++) {
        vector.push(y + 1);
        vector.push(a.charCodeAt(offset + y));
      }

      var len = vector.length - 1;

      for (; x < lb - 3;) {
        bx0 = b.charCodeAt(offset + (d0 = x));
        bx1 = b.charCodeAt(offset + (d1 = x + 1));
        bx2 = b.charCodeAt(offset + (d2 = x + 2));
        bx3 = b.charCodeAt(offset + (d3 = x + 3));
        dd = (x += 4);
        for (y = 0; y < len; y += 2) {
          dy = vector[y];
          ay = vector[y + 1];
          d0 = _min(dy, d0, d1, bx0, ay);
          d1 = _min(d0, d1, d2, bx1, ay);
          d2 = _min(d1, d2, d3, bx2, ay);
          dd = _min(d2, d3, dd, bx3, ay);
          vector[y] = dd;
          d3 = d2;
          d2 = d1;
          d1 = d0;
          d0 = dy;
        }
      }

      for (; x < lb;) {
        bx0 = b.charCodeAt(offset + (d0 = x));
        dd = ++x;
        for (y = 0; y < len; y += 2) {
          dy = vector[y];
          vector[y] = dd = _min(dy, d0, dd, bx0, vector[y + 1]);
          d0 = dy;
        }
      }

      return dd;
    };
  })();

  var graphql$3 = {};

  var version$1 = {};

  Object.defineProperty(version$1, "__esModule", {
    value: true
  });
  version$1.versionInfo = version$1.version = void 0;

  /**
   * Note: This file is autogenerated using "resources/gen-version.js" script and
   * automatically updated by "npm version" command.
   */

  /**
   * A string containing the version of the GraphQL.js library
   */
  var version = '15.5.1';
  /**
   * An object containing the components of the GraphQL.js version string
   */

  version$1.version = version;
  var versionInfo = Object.freeze({
    major: 15,
    minor: 5,
    patch: 1,
    preReleaseTag: null
  });
  version$1.versionInfo = versionInfo;

  var graphql$2 = {};

  var isPromise$1 = {};

  Object.defineProperty(isPromise$1, "__esModule", {
    value: true
  });
  isPromise$1.default = isPromise;

  /**
   * Returns true if the value acts like a Promise, i.e. has a "then" function,
   * otherwise returns false.
   */
  // eslint-disable-next-line no-redeclare
  function isPromise(value) {
    return typeof (value === null || value === void 0 ? void 0 : value.then) === 'function';
  }

  var parser = {};

  var syntaxError$1 = {};

  var GraphQLError$1 = {};

  var isObjectLike$1 = {};

  Object.defineProperty(isObjectLike$1, "__esModule", {
    value: true
  });
  isObjectLike$1.default = isObjectLike;

  function _typeof$4(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof$4 = function _typeof(obj) { return typeof obj; }; } else { _typeof$4 = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof$4(obj); }

  /**
   * Return true if `value` is object-like. A value is object-like if it's not
   * `null` and has a `typeof` result of "object".
   */
  function isObjectLike(value) {
    return _typeof$4(value) == 'object' && value !== null;
  }

  var symbols = {};

  Object.defineProperty(symbols, "__esModule", {
    value: true
  });
  symbols.SYMBOL_TO_STRING_TAG = symbols.SYMBOL_ASYNC_ITERATOR = symbols.SYMBOL_ITERATOR = void 0;
  // In ES2015 (or a polyfilled) environment, this will be Symbol.iterator
  // istanbul ignore next (See: 'https://github.com/graphql/graphql-js/issues/2317')
  var SYMBOL_ITERATOR = typeof Symbol === 'function' && Symbol.iterator != null ? Symbol.iterator : '@@iterator'; // In ES2017 (or a polyfilled) environment, this will be Symbol.asyncIterator
  // istanbul ignore next (See: 'https://github.com/graphql/graphql-js/issues/2317')

  symbols.SYMBOL_ITERATOR = SYMBOL_ITERATOR;
  var SYMBOL_ASYNC_ITERATOR = typeof Symbol === 'function' && Symbol.asyncIterator != null ? Symbol.asyncIterator : '@@asyncIterator'; // istanbul ignore next (See: 'https://github.com/graphql/graphql-js/issues/2317')

  symbols.SYMBOL_ASYNC_ITERATOR = SYMBOL_ASYNC_ITERATOR;
  var SYMBOL_TO_STRING_TAG = typeof Symbol === 'function' && Symbol.toStringTag != null ? Symbol.toStringTag : '@@toStringTag';
  symbols.SYMBOL_TO_STRING_TAG = SYMBOL_TO_STRING_TAG;

  var location$1 = {};

  Object.defineProperty(location$1, "__esModule", {
    value: true
  });
  location$1.getLocation = getLocation;

  /**
   * Represents a location in a Source.
   */

  /**
   * Takes a Source and a UTF-8 character offset, and returns the corresponding
   * line and column as a SourceLocation.
   */
  function getLocation(source, position) {
    var lineRegexp = /\r\n|[\n\r]/g;
    var line = 1;
    var column = position + 1;
    var match;

    while ((match = lineRegexp.exec(source.body)) && match.index < position) {
      line += 1;
      column = position + 1 - (match.index + match[0].length);
    }

    return {
      line: line,
      column: column
    };
  }

  var printLocation$1 = {};

  Object.defineProperty(printLocation$1, "__esModule", {
    value: true
  });
  printLocation$1.printLocation = printLocation;
  printLocation$1.printSourceLocation = printSourceLocation;

  var _location$1 = location$1;

  /**
   * Render a helpful description of the location in the GraphQL Source document.
   */
  function printLocation(location) {
    return printSourceLocation(location.source, (0, _location$1.getLocation)(location.source, location.start));
  }
  /**
   * Render a helpful description of the location in the GraphQL Source document.
   */


  function printSourceLocation(source, sourceLocation) {
    var firstLineColumnOffset = source.locationOffset.column - 1;
    var body = whitespace(firstLineColumnOffset) + source.body;
    var lineIndex = sourceLocation.line - 1;
    var lineOffset = source.locationOffset.line - 1;
    var lineNum = sourceLocation.line + lineOffset;
    var columnOffset = sourceLocation.line === 1 ? firstLineColumnOffset : 0;
    var columnNum = sourceLocation.column + columnOffset;
    var locationStr = "".concat(source.name, ":").concat(lineNum, ":").concat(columnNum, "\n");
    var lines = body.split(/\r\n|[\n\r]/g);
    var locationLine = lines[lineIndex]; // Special case for minified documents

    if (locationLine.length > 120) {
      var subLineIndex = Math.floor(columnNum / 80);
      var subLineColumnNum = columnNum % 80;
      var subLines = [];

      for (var i = 0; i < locationLine.length; i += 80) {
        subLines.push(locationLine.slice(i, i + 80));
      }

      return locationStr + printPrefixedLines([["".concat(lineNum), subLines[0]]].concat(subLines.slice(1, subLineIndex + 1).map(function (subLine) {
        return ['', subLine];
      }), [[' ', whitespace(subLineColumnNum - 1) + '^'], ['', subLines[subLineIndex + 1]]]));
    }

    return locationStr + printPrefixedLines([// Lines specified like this: ["prefix", "string"],
    ["".concat(lineNum - 1), lines[lineIndex - 1]], ["".concat(lineNum), locationLine], ['', whitespace(columnNum - 1) + '^'], ["".concat(lineNum + 1), lines[lineIndex + 1]]]);
  }

  function printPrefixedLines(lines) {
    var existingLines = lines.filter(function (_ref) {
      _ref[0];
          var line = _ref[1];
      return line !== undefined;
    });
    var padLen = Math.max.apply(Math, existingLines.map(function (_ref2) {
      var prefix = _ref2[0];
      return prefix.length;
    }));
    return existingLines.map(function (_ref3) {
      var prefix = _ref3[0],
          line = _ref3[1];
      return leftPad(padLen, prefix) + (line ? ' | ' + line : ' |');
    }).join('\n');
  }

  function whitespace(len) {
    return Array(len + 1).join(' ');
  }

  function leftPad(len, str) {
    return whitespace(len - str.length) + str;
  }

  function _typeof$3(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof$3 = function _typeof(obj) { return typeof obj; }; } else { _typeof$3 = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof$3(obj); }

  Object.defineProperty(GraphQLError$1, "__esModule", {
    value: true
  });
  GraphQLError$1.printError = printError;
  GraphQLError$1.GraphQLError = void 0;

  var _isObjectLike$8 = _interopRequireDefault$N(isObjectLike$1);

  var _symbols$8 = symbols;

  var _location = location$1;

  var _printLocation = printLocation$1;

  function _interopRequireDefault$N(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _defineProperties$4(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

  function _createClass$4(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties$4(Constructor.prototype, protoProps); if (staticProps) _defineProperties$4(Constructor, staticProps); return Constructor; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

  function _possibleConstructorReturn(self, call) { if (call && (_typeof$3(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

  function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

  function _wrapNativeSuper(Class) { var _cache = typeof Map === "function" ? new Map() : undefined; _wrapNativeSuper = function _wrapNativeSuper(Class) { if (Class === null || !_isNativeFunction(Class)) return Class; if (typeof Class !== "function") { throw new TypeError("Super expression must either be null or a function"); } if (typeof _cache !== "undefined") { if (_cache.has(Class)) return _cache.get(Class); _cache.set(Class, Wrapper); } function Wrapper() { return _construct(Class, arguments, _getPrototypeOf(this).constructor); } Wrapper.prototype = Object.create(Class.prototype, { constructor: { value: Wrapper, enumerable: false, writable: true, configurable: true } }); return _setPrototypeOf(Wrapper, Class); }; return _wrapNativeSuper(Class); }

  function _construct(Parent, args, Class) { if (_isNativeReflectConstruct()) { _construct = Reflect.construct; } else { _construct = function _construct(Parent, args, Class) { var a = [null]; a.push.apply(a, args); var Constructor = Function.bind.apply(Parent, a); var instance = new Constructor(); if (Class) _setPrototypeOf(instance, Class.prototype); return instance; }; } return _construct.apply(null, arguments); }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

  function _isNativeFunction(fn) { return Function.toString.call(fn).indexOf("[native code]") !== -1; }

  function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

  function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

  /**
   * A GraphQLError describes an Error found during the parse, validate, or
   * execute phases of performing a GraphQL operation. In addition to a message
   * and stack trace, it also includes information about the locations in a
   * GraphQL document and/or execution result that correspond to the Error.
   */
  var GraphQLError = /*#__PURE__*/function (_Error) {
    _inherits(GraphQLError, _Error);

    var _super = _createSuper(GraphQLError);

    /**
     * A message describing the Error for debugging purposes.
     *
     * Enumerable, and appears in the result of JSON.stringify().
     *
     * Note: should be treated as readonly, despite invariant usage.
     */

    /**
     * An array of { line, column } locations within the source GraphQL document
     * which correspond to this error.
     *
     * Errors during validation often contain multiple locations, for example to
     * point out two things with the same name. Errors during execution include a
     * single location, the field which produced the error.
     *
     * Enumerable, and appears in the result of JSON.stringify().
     */

    /**
     * An array describing the JSON-path into the execution response which
     * corresponds to this error. Only included for errors during execution.
     *
     * Enumerable, and appears in the result of JSON.stringify().
     */

    /**
     * An array of GraphQL AST Nodes corresponding to this error.
     */

    /**
     * The source GraphQL document for the first location of this error.
     *
     * Note that if this Error represents more than one node, the source may not
     * represent nodes after the first node.
     */

    /**
     * An array of character offsets within the source GraphQL document
     * which correspond to this error.
     */

    /**
     * The original error thrown from a field resolver during execution.
     */

    /**
     * Extension fields to add to the formatted error.
     */
    function GraphQLError(message, nodes, source, positions, path, originalError, extensions) {
      var _locations2, _source2, _positions2, _extensions2;

      var _this;

      _classCallCheck(this, GraphQLError);

      _this = _super.call(this, message); // Compute list of blame nodes.

      var _nodes = Array.isArray(nodes) ? nodes.length !== 0 ? nodes : undefined : nodes ? [nodes] : undefined; // Compute locations in the source for the given nodes/positions.


      var _source = source;

      if (!_source && _nodes) {
        var _nodes$0$loc;

        _source = (_nodes$0$loc = _nodes[0].loc) === null || _nodes$0$loc === void 0 ? void 0 : _nodes$0$loc.source;
      }

      var _positions = positions;

      if (!_positions && _nodes) {
        _positions = _nodes.reduce(function (list, node) {
          if (node.loc) {
            list.push(node.loc.start);
          }

          return list;
        }, []);
      }

      if (_positions && _positions.length === 0) {
        _positions = undefined;
      }

      var _locations;

      if (positions && source) {
        _locations = positions.map(function (pos) {
          return (0, _location.getLocation)(source, pos);
        });
      } else if (_nodes) {
        _locations = _nodes.reduce(function (list, node) {
          if (node.loc) {
            list.push((0, _location.getLocation)(node.loc.source, node.loc.start));
          }

          return list;
        }, []);
      }

      var _extensions = extensions;

      if (_extensions == null && originalError != null) {
        var originalExtensions = originalError.extensions;

        if ((0, _isObjectLike$8.default)(originalExtensions)) {
          _extensions = originalExtensions;
        }
      }

      Object.defineProperties(_assertThisInitialized(_this), {
        name: {
          value: 'GraphQLError'
        },
        message: {
          value: message,
          // By being enumerable, JSON.stringify will include `message` in the
          // resulting output. This ensures that the simplest possible GraphQL
          // service adheres to the spec.
          enumerable: true,
          writable: true
        },
        locations: {
          // Coercing falsy values to undefined ensures they will not be included
          // in JSON.stringify() when not provided.
          value: (_locations2 = _locations) !== null && _locations2 !== void 0 ? _locations2 : undefined,
          // By being enumerable, JSON.stringify will include `locations` in the
          // resulting output. This ensures that the simplest possible GraphQL
          // service adheres to the spec.
          enumerable: _locations != null
        },
        path: {
          // Coercing falsy values to undefined ensures they will not be included
          // in JSON.stringify() when not provided.
          value: path !== null && path !== void 0 ? path : undefined,
          // By being enumerable, JSON.stringify will include `path` in the
          // resulting output. This ensures that the simplest possible GraphQL
          // service adheres to the spec.
          enumerable: path != null
        },
        nodes: {
          value: _nodes !== null && _nodes !== void 0 ? _nodes : undefined
        },
        source: {
          value: (_source2 = _source) !== null && _source2 !== void 0 ? _source2 : undefined
        },
        positions: {
          value: (_positions2 = _positions) !== null && _positions2 !== void 0 ? _positions2 : undefined
        },
        originalError: {
          value: originalError
        },
        extensions: {
          // Coercing falsy values to undefined ensures they will not be included
          // in JSON.stringify() when not provided.
          value: (_extensions2 = _extensions) !== null && _extensions2 !== void 0 ? _extensions2 : undefined,
          // By being enumerable, JSON.stringify will include `path` in the
          // resulting output. This ensures that the simplest possible GraphQL
          // service adheres to the spec.
          enumerable: _extensions != null
        }
      }); // Include (non-enumerable) stack trace.

      if (originalError !== null && originalError !== void 0 && originalError.stack) {
        Object.defineProperty(_assertThisInitialized(_this), 'stack', {
          value: originalError.stack,
          writable: true,
          configurable: true
        });
        return _possibleConstructorReturn(_this);
      } // istanbul ignore next (See: 'https://github.com/graphql/graphql-js/issues/2317')


      if (Error.captureStackTrace) {
        Error.captureStackTrace(_assertThisInitialized(_this), GraphQLError);
      } else {
        Object.defineProperty(_assertThisInitialized(_this), 'stack', {
          value: Error().stack,
          writable: true,
          configurable: true
        });
      }

      return _this;
    }

    _createClass$4(GraphQLError, [{
      key: "toString",
      value: function toString() {
        return printError(this);
      } // FIXME: workaround to not break chai comparisons, should be remove in v16
      // $FlowFixMe[unsupported-syntax] Flow doesn't support computed properties yet

    }, {
      key: _symbols$8.SYMBOL_TO_STRING_TAG,
      get: function get() {
        return 'Object';
      }
    }]);

    return GraphQLError;
  }( /*#__PURE__*/_wrapNativeSuper(Error));
  /**
   * Prints a GraphQLError to a string, representing useful location information
   * about the error's position in the source.
   */


  GraphQLError$1.GraphQLError = GraphQLError;

  function printError(error) {
    var output = error.message;

    if (error.nodes) {
      for (var _i2 = 0, _error$nodes2 = error.nodes; _i2 < _error$nodes2.length; _i2++) {
        var node = _error$nodes2[_i2];

        if (node.loc) {
          output += '\n\n' + (0, _printLocation.printLocation)(node.loc);
        }
      }
    } else if (error.source && error.locations) {
      for (var _i4 = 0, _error$locations2 = error.locations; _i4 < _error$locations2.length; _i4++) {
        var location = _error$locations2[_i4];
        output += '\n\n' + (0, _printLocation.printSourceLocation)(error.source, location);
      }
    }

    return output;
  }

  Object.defineProperty(syntaxError$1, "__esModule", {
    value: true
  });
  syntaxError$1.syntaxError = syntaxError;

  var _GraphQLError$K = GraphQLError$1;

  /**
   * Produces a GraphQLError representing a syntax error, containing useful
   * descriptive information about the syntax error's position in the source.
   */
  function syntaxError(source, position, description) {
    return new _GraphQLError$K.GraphQLError("Syntax Error: ".concat(description), undefined, source, [position]);
  }

  var kinds = {};

  Object.defineProperty(kinds, "__esModule", {
    value: true
  });
  kinds.Kind = void 0;

  /**
   * The set of allowed kind values for AST nodes.
   */
  var Kind = Object.freeze({
    // Name
    NAME: 'Name',
    // Document
    DOCUMENT: 'Document',
    OPERATION_DEFINITION: 'OperationDefinition',
    VARIABLE_DEFINITION: 'VariableDefinition',
    SELECTION_SET: 'SelectionSet',
    FIELD: 'Field',
    ARGUMENT: 'Argument',
    // Fragments
    FRAGMENT_SPREAD: 'FragmentSpread',
    INLINE_FRAGMENT: 'InlineFragment',
    FRAGMENT_DEFINITION: 'FragmentDefinition',
    // Values
    VARIABLE: 'Variable',
    INT: 'IntValue',
    FLOAT: 'FloatValue',
    STRING: 'StringValue',
    BOOLEAN: 'BooleanValue',
    NULL: 'NullValue',
    ENUM: 'EnumValue',
    LIST: 'ListValue',
    OBJECT: 'ObjectValue',
    OBJECT_FIELD: 'ObjectField',
    // Directives
    DIRECTIVE: 'Directive',
    // Types
    NAMED_TYPE: 'NamedType',
    LIST_TYPE: 'ListType',
    NON_NULL_TYPE: 'NonNullType',
    // Type System Definitions
    SCHEMA_DEFINITION: 'SchemaDefinition',
    OPERATION_TYPE_DEFINITION: 'OperationTypeDefinition',
    // Type Definitions
    SCALAR_TYPE_DEFINITION: 'ScalarTypeDefinition',
    OBJECT_TYPE_DEFINITION: 'ObjectTypeDefinition',
    FIELD_DEFINITION: 'FieldDefinition',
    INPUT_VALUE_DEFINITION: 'InputValueDefinition',
    INTERFACE_TYPE_DEFINITION: 'InterfaceTypeDefinition',
    UNION_TYPE_DEFINITION: 'UnionTypeDefinition',
    ENUM_TYPE_DEFINITION: 'EnumTypeDefinition',
    ENUM_VALUE_DEFINITION: 'EnumValueDefinition',
    INPUT_OBJECT_TYPE_DEFINITION: 'InputObjectTypeDefinition',
    // Directive Definitions
    DIRECTIVE_DEFINITION: 'DirectiveDefinition',
    // Type System Extensions
    SCHEMA_EXTENSION: 'SchemaExtension',
    // Type Extensions
    SCALAR_TYPE_EXTENSION: 'ScalarTypeExtension',
    OBJECT_TYPE_EXTENSION: 'ObjectTypeExtension',
    INTERFACE_TYPE_EXTENSION: 'InterfaceTypeExtension',
    UNION_TYPE_EXTENSION: 'UnionTypeExtension',
    ENUM_TYPE_EXTENSION: 'EnumTypeExtension',
    INPUT_OBJECT_TYPE_EXTENSION: 'InputObjectTypeExtension'
  });
  /**
   * The enum type representing the possible kind values of AST nodes.
   */

  kinds.Kind = Kind;

  var ast = {};

  var defineInspect$1 = {};

  var invariant$1 = {};

  Object.defineProperty(invariant$1, "__esModule", {
    value: true
  });
  invariant$1.default = invariant;

  function invariant(condition, message) {
    var booleanCondition = Boolean(condition); // istanbul ignore else (See transformation done in './resources/inlineInvariant.js')

    if (!booleanCondition) {
      throw new Error(message != null ? message : 'Unexpected invariant triggered.');
    }
  }

  var nodejsCustomInspectSymbol$1 = {};

  Object.defineProperty(nodejsCustomInspectSymbol$1, "__esModule", {
    value: true
  });
  nodejsCustomInspectSymbol$1.default = void 0;
  // istanbul ignore next (See: 'https://github.com/graphql/graphql-js/issues/2317')
  var nodejsCustomInspectSymbol = typeof Symbol === 'function' && typeof Symbol.for === 'function' ? Symbol.for('nodejs.util.inspect.custom') : undefined;
  var _default$7 = nodejsCustomInspectSymbol;
  nodejsCustomInspectSymbol$1.default = _default$7;

  Object.defineProperty(defineInspect$1, "__esModule", {
    value: true
  });
  defineInspect$1.default = defineInspect;

  var _invariant$f = _interopRequireDefault$M(invariant$1);

  var _nodejsCustomInspectSymbol$1 = _interopRequireDefault$M(nodejsCustomInspectSymbol$1);

  function _interopRequireDefault$M(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  /**
   * The `defineInspect()` function defines `inspect()` prototype method as alias of `toJSON`
   */
  function defineInspect(classObject) {
    var fn = classObject.prototype.toJSON;
    typeof fn === 'function' || (0, _invariant$f.default)(0);
    classObject.prototype.inspect = fn; // istanbul ignore else (See: 'https://github.com/graphql/graphql-js/issues/2317')

    if (_nodejsCustomInspectSymbol$1.default) {
      classObject.prototype[_nodejsCustomInspectSymbol$1.default] = fn;
    }
  }

  Object.defineProperty(ast, "__esModule", {
    value: true
  });
  ast.isNode = isNode;
  ast.Token = ast.Location = void 0;

  var _defineInspect$2 = _interopRequireDefault$L(defineInspect$1);

  function _interopRequireDefault$L(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  /**
   * Contains a range of UTF-8 character offsets and token references that
   * identify the region of the source from which the AST derived.
   */
  var Location = /*#__PURE__*/function () {
    /**
     * The character offset at which this Node begins.
     */

    /**
     * The character offset at which this Node ends.
     */

    /**
     * The Token at which this Node begins.
     */

    /**
     * The Token at which this Node ends.
     */

    /**
     * The Source document the AST represents.
     */
    function Location(startToken, endToken, source) {
      this.start = startToken.start;
      this.end = endToken.end;
      this.startToken = startToken;
      this.endToken = endToken;
      this.source = source;
    }

    var _proto = Location.prototype;

    _proto.toJSON = function toJSON() {
      return {
        start: this.start,
        end: this.end
      };
    };

    return Location;
  }(); // Print a simplified form when appearing in `inspect` and `util.inspect`.


  ast.Location = Location;
  (0, _defineInspect$2.default)(Location);
  /**
   * Represents a range of characters represented by a lexical token
   * within a Source.
   */

  var Token = /*#__PURE__*/function () {
    /**
     * The kind of Token.
     */

    /**
     * The character offset at which this Node begins.
     */

    /**
     * The character offset at which this Node ends.
     */

    /**
     * The 1-indexed line number on which this Token appears.
     */

    /**
     * The 1-indexed column number at which this Token begins.
     */

    /**
     * For non-punctuation tokens, represents the interpreted value of the token.
     */

    /**
     * Tokens exist as nodes in a double-linked-list amongst all tokens
     * including ignored tokens. <SOF> is always the first node and <EOF>
     * the last.
     */
    function Token(kind, start, end, line, column, prev, value) {
      this.kind = kind;
      this.start = start;
      this.end = end;
      this.line = line;
      this.column = column;
      this.value = value;
      this.prev = prev;
      this.next = null;
    }

    var _proto2 = Token.prototype;

    _proto2.toJSON = function toJSON() {
      return {
        kind: this.kind,
        value: this.value,
        line: this.line,
        column: this.column
      };
    };

    return Token;
  }(); // Print a simplified form when appearing in `inspect` and `util.inspect`.


  ast.Token = Token;
  (0, _defineInspect$2.default)(Token);
  /**
   * @internal
   */

  function isNode(maybeNode) {
    return maybeNode != null && typeof maybeNode.kind === 'string';
  }

  var tokenKind = {};

  Object.defineProperty(tokenKind, "__esModule", {
    value: true
  });
  tokenKind.TokenKind = void 0;

  /**
   * An exported enum describing the different kinds of tokens that the
   * lexer emits.
   */
  var TokenKind = Object.freeze({
    SOF: '<SOF>',
    EOF: '<EOF>',
    BANG: '!',
    DOLLAR: '$',
    AMP: '&',
    PAREN_L: '(',
    PAREN_R: ')',
    SPREAD: '...',
    COLON: ':',
    EQUALS: '=',
    AT: '@',
    BRACKET_L: '[',
    BRACKET_R: ']',
    BRACE_L: '{',
    PIPE: '|',
    BRACE_R: '}',
    NAME: 'Name',
    INT: 'Int',
    FLOAT: 'Float',
    STRING: 'String',
    BLOCK_STRING: 'BlockString',
    COMMENT: 'Comment'
  });
  /**
   * The enum type representing the token kinds values.
   */

  tokenKind.TokenKind = TokenKind;

  var source = {};

  var inspect$1 = {};

  Object.defineProperty(inspect$1, "__esModule", {
    value: true
  });
  inspect$1.default = inspect;

  var _nodejsCustomInspectSymbol = _interopRequireDefault$K(nodejsCustomInspectSymbol$1);

  function _interopRequireDefault$K(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _typeof$2(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof$2 = function _typeof(obj) { return typeof obj; }; } else { _typeof$2 = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof$2(obj); }

  var MAX_ARRAY_LENGTH = 10;
  var MAX_RECURSIVE_DEPTH = 2;
  /**
   * Used to print values in error messages.
   */

  function inspect(value) {
    return formatValue(value, []);
  }

  function formatValue(value, seenValues) {
    switch (_typeof$2(value)) {
      case 'string':
        return JSON.stringify(value);

      case 'function':
        return value.name ? "[function ".concat(value.name, "]") : '[function]';

      case 'object':
        if (value === null) {
          return 'null';
        }

        return formatObjectValue(value, seenValues);

      default:
        return String(value);
    }
  }

  function formatObjectValue(value, previouslySeenValues) {
    if (previouslySeenValues.indexOf(value) !== -1) {
      return '[Circular]';
    }

    var seenValues = [].concat(previouslySeenValues, [value]);
    var customInspectFn = getCustomFn(value);

    if (customInspectFn !== undefined) {
      var customValue = customInspectFn.call(value); // check for infinite recursion

      if (customValue !== value) {
        return typeof customValue === 'string' ? customValue : formatValue(customValue, seenValues);
      }
    } else if (Array.isArray(value)) {
      return formatArray(value, seenValues);
    }

    return formatObject(value, seenValues);
  }

  function formatObject(object, seenValues) {
    var keys = Object.keys(object);

    if (keys.length === 0) {
      return '{}';
    }

    if (seenValues.length > MAX_RECURSIVE_DEPTH) {
      return '[' + getObjectTag(object) + ']';
    }

    var properties = keys.map(function (key) {
      var value = formatValue(object[key], seenValues);
      return key + ': ' + value;
    });
    return '{ ' + properties.join(', ') + ' }';
  }

  function formatArray(array, seenValues) {
    if (array.length === 0) {
      return '[]';
    }

    if (seenValues.length > MAX_RECURSIVE_DEPTH) {
      return '[Array]';
    }

    var len = Math.min(MAX_ARRAY_LENGTH, array.length);
    var remaining = array.length - len;
    var items = [];

    for (var i = 0; i < len; ++i) {
      items.push(formatValue(array[i], seenValues));
    }

    if (remaining === 1) {
      items.push('... 1 more item');
    } else if (remaining > 1) {
      items.push("... ".concat(remaining, " more items"));
    }

    return '[' + items.join(', ') + ']';
  }

  function getCustomFn(object) {
    var customInspectFn = object[String(_nodejsCustomInspectSymbol.default)];

    if (typeof customInspectFn === 'function') {
      return customInspectFn;
    }

    if (typeof object.inspect === 'function') {
      return object.inspect;
    }
  }

  function getObjectTag(object) {
    var tag = Object.prototype.toString.call(object).replace(/^\[object /, '').replace(/]$/, '');

    if (tag === 'Object' && typeof object.constructor === 'function') {
      var name = object.constructor.name;

      if (typeof name === 'string' && name !== '') {
        return name;
      }
    }

    return tag;
  }

  var devAssert$1 = {};

  Object.defineProperty(devAssert$1, "__esModule", {
    value: true
  });
  devAssert$1.default = devAssert;

  function devAssert(condition, message) {
    var booleanCondition = Boolean(condition); // istanbul ignore else (See transformation done in './resources/inlineInvariant.js')

    if (!booleanCondition) {
      throw new Error(message);
    }
  }

  var instanceOf = {};

  Object.defineProperty(instanceOf, "__esModule", {
    value: true
  });
  instanceOf.default = void 0;

  var _inspect$u = _interopRequireDefault$J(inspect$1);

  function _interopRequireDefault$J(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _typeof$1(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof$1 = function _typeof(obj) { return typeof obj; }; } else { _typeof$1 = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof$1(obj); }

  // See: https://expressjs.com/en/advanced/best-practice-performance.html#set-node_env-to-production
  // See: https://webpack.js.org/guides/production/
  var _default$6 = // eslint-disable-next-line no-shadow
  function instanceOf(value, constructor) {
    if (value instanceof constructor) {
      return true;
    }

    if (_typeof$1(value) === 'object' && value !== null) {
      var _value$constructor;

      var className = constructor.prototype[Symbol.toStringTag];
      var valueClassName = // We still need to support constructor's name to detect conflicts with older versions of this library.
      Symbol.toStringTag in value ? value[Symbol.toStringTag] : (_value$constructor = value.constructor) === null || _value$constructor === void 0 ? void 0 : _value$constructor.name;

      if (className === valueClassName) {
        var stringifiedValue = (0, _inspect$u.default)(value);
        throw new Error("Cannot use ".concat(className, " \"").concat(stringifiedValue, "\" from another module or realm.\n\nEnsure that there is only one instance of \"graphql\" in the node_modules\ndirectory. If different versions of \"graphql\" are the dependencies of other\nrelied on modules, use \"resolutions\" to ensure only one version is installed.\n\nhttps://yarnpkg.com/en/docs/selective-version-resolutions\n\nDuplicate \"graphql\" modules cannot be used at the same time since different\nversions may have different capabilities and behavior. The data from one\nversion used in the function from another could produce confusing and\nspurious results."));
      }
    }

    return false;
  };

  instanceOf.default = _default$6;

  Object.defineProperty(source, "__esModule", {
    value: true
  });
  source.isSource = isSource;
  source.Source = void 0;

  var _symbols$7 = symbols;

  var _inspect$t = _interopRequireDefault$I(inspect$1);

  var _devAssert$a = _interopRequireDefault$I(devAssert$1);

  var _instanceOf$3 = _interopRequireDefault$I(instanceOf);

  function _interopRequireDefault$I(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _defineProperties$3(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

  function _createClass$3(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties$3(Constructor.prototype, protoProps); if (staticProps) _defineProperties$3(Constructor, staticProps); return Constructor; }

  /**
   * A representation of source input to GraphQL. The `name` and `locationOffset` parameters are
   * optional, but they are useful for clients who store GraphQL documents in source files.
   * For example, if the GraphQL input starts at line 40 in a file named `Foo.graphql`, it might
   * be useful for `name` to be `"Foo.graphql"` and location to be `{ line: 40, column: 1 }`.
   * The `line` and `column` properties in `locationOffset` are 1-indexed.
   */
  var Source = /*#__PURE__*/function () {
    function Source(body) {
      var name = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'GraphQL request';
      var locationOffset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {
        line: 1,
        column: 1
      };
      typeof body === 'string' || (0, _devAssert$a.default)(0, "Body must be a string. Received: ".concat((0, _inspect$t.default)(body), "."));
      this.body = body;
      this.name = name;
      this.locationOffset = locationOffset;
      this.locationOffset.line > 0 || (0, _devAssert$a.default)(0, 'line in locationOffset is 1-indexed and must be positive.');
      this.locationOffset.column > 0 || (0, _devAssert$a.default)(0, 'column in locationOffset is 1-indexed and must be positive.');
    } // $FlowFixMe[unsupported-syntax] Flow doesn't support computed properties yet


    _createClass$3(Source, [{
      key: _symbols$7.SYMBOL_TO_STRING_TAG,
      get: function get() {
        return 'Source';
      }
    }]);

    return Source;
  }();
  /**
   * Test if the given value is a Source object.
   *
   * @internal
   */


  source.Source = Source;

  // eslint-disable-next-line no-redeclare
  function isSource(source) {
    return (0, _instanceOf$3.default)(source, Source);
  }

  var directiveLocation = {};

  Object.defineProperty(directiveLocation, "__esModule", {
    value: true
  });
  directiveLocation.DirectiveLocation = void 0;

  /**
   * The set of allowed directive location values.
   */
  var DirectiveLocation = Object.freeze({
    // Request Definitions
    QUERY: 'QUERY',
    MUTATION: 'MUTATION',
    SUBSCRIPTION: 'SUBSCRIPTION',
    FIELD: 'FIELD',
    FRAGMENT_DEFINITION: 'FRAGMENT_DEFINITION',
    FRAGMENT_SPREAD: 'FRAGMENT_SPREAD',
    INLINE_FRAGMENT: 'INLINE_FRAGMENT',
    VARIABLE_DEFINITION: 'VARIABLE_DEFINITION',
    // Type System Definitions
    SCHEMA: 'SCHEMA',
    SCALAR: 'SCALAR',
    OBJECT: 'OBJECT',
    FIELD_DEFINITION: 'FIELD_DEFINITION',
    ARGUMENT_DEFINITION: 'ARGUMENT_DEFINITION',
    INTERFACE: 'INTERFACE',
    UNION: 'UNION',
    ENUM: 'ENUM',
    ENUM_VALUE: 'ENUM_VALUE',
    INPUT_OBJECT: 'INPUT_OBJECT',
    INPUT_FIELD_DEFINITION: 'INPUT_FIELD_DEFINITION'
  });
  /**
   * The enum type representing the directive location values.
   */

  directiveLocation.DirectiveLocation = DirectiveLocation;

  var lexer = {};

  var blockString = {};

  Object.defineProperty(blockString, "__esModule", {
    value: true
  });
  blockString.dedentBlockStringValue = dedentBlockStringValue;
  blockString.getBlockStringIndentation = getBlockStringIndentation;
  blockString.printBlockString = printBlockString;

  /**
   * Produces the value of a block string from its parsed raw value, similar to
   * CoffeeScript's block string, Python's docstring trim or Ruby's strip_heredoc.
   *
   * This implements the GraphQL spec's BlockStringValue() static algorithm.
   *
   * @internal
   */
  function dedentBlockStringValue(rawString) {
    // Expand a block string's raw value into independent lines.
    var lines = rawString.split(/\r\n|[\n\r]/g); // Remove common indentation from all lines but first.

    var commonIndent = getBlockStringIndentation(rawString);

    if (commonIndent !== 0) {
      for (var i = 1; i < lines.length; i++) {
        lines[i] = lines[i].slice(commonIndent);
      }
    } // Remove leading and trailing blank lines.


    var startLine = 0;

    while (startLine < lines.length && isBlank(lines[startLine])) {
      ++startLine;
    }

    var endLine = lines.length;

    while (endLine > startLine && isBlank(lines[endLine - 1])) {
      --endLine;
    } // Return a string of the lines joined with U+000A.


    return lines.slice(startLine, endLine).join('\n');
  }

  function isBlank(str) {
    for (var i = 0; i < str.length; ++i) {
      if (str[i] !== ' ' && str[i] !== '\t') {
        return false;
      }
    }

    return true;
  }
  /**
   * @internal
   */


  function getBlockStringIndentation(value) {
    var _commonIndent;

    var isFirstLine = true;
    var isEmptyLine = true;
    var indent = 0;
    var commonIndent = null;

    for (var i = 0; i < value.length; ++i) {
      switch (value.charCodeAt(i)) {
        case 13:
          //  \r
          if (value.charCodeAt(i + 1) === 10) {
            ++i; // skip \r\n as one symbol
          }

        // falls through

        case 10:
          //  \n
          isFirstLine = false;
          isEmptyLine = true;
          indent = 0;
          break;

        case 9: //   \t

        case 32:
          //  <space>
          ++indent;
          break;

        default:
          if (isEmptyLine && !isFirstLine && (commonIndent === null || indent < commonIndent)) {
            commonIndent = indent;
          }

          isEmptyLine = false;
      }
    }

    return (_commonIndent = commonIndent) !== null && _commonIndent !== void 0 ? _commonIndent : 0;
  }
  /**
   * Print a block string in the indented block form by adding a leading and
   * trailing blank line. However, if a block string starts with whitespace and is
   * a single-line, adding a leading blank line would strip that whitespace.
   *
   * @internal
   */


  function printBlockString(value) {
    var indentation = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
    var preferMultipleLines = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
    var isSingleLine = value.indexOf('\n') === -1;
    var hasLeadingSpace = value[0] === ' ' || value[0] === '\t';
    var hasTrailingQuote = value[value.length - 1] === '"';
    var hasTrailingSlash = value[value.length - 1] === '\\';
    var printAsMultipleLines = !isSingleLine || hasTrailingQuote || hasTrailingSlash || preferMultipleLines;
    var result = ''; // Format a multi-line block quote to account for leading space.

    if (printAsMultipleLines && !(isSingleLine && hasLeadingSpace)) {
      result += '\n' + indentation;
    }

    result += indentation ? value.replace(/\n/g, '\n' + indentation) : value;

    if (printAsMultipleLines) {
      result += '\n';
    }

    return '"""' + result.replace(/"""/g, '\\"""') + '"""';
  }

  Object.defineProperty(lexer, "__esModule", {
    value: true
  });
  lexer.isPunctuatorTokenKind = isPunctuatorTokenKind;
  lexer.Lexer = void 0;

  var _syntaxError$1 = syntaxError$1;

  var _ast$3 = ast;

  var _tokenKind$3 = tokenKind;

  var _blockString$4 = blockString;

  /**
   * Given a Source object, creates a Lexer for that source.
   * A Lexer is a stateful stream generator in that every time
   * it is advanced, it returns the next token in the Source. Assuming the
   * source lexes, the final Token emitted by the lexer will be of kind
   * EOF, after which the lexer will repeatedly return the same EOF token
   * whenever called.
   */
  var Lexer = /*#__PURE__*/function () {
    /**
     * The previously focused non-ignored token.
     */

    /**
     * The currently focused non-ignored token.
     */

    /**
     * The (1-indexed) line containing the current token.
     */

    /**
     * The character offset at which the current line begins.
     */
    function Lexer(source) {
      var startOfFileToken = new _ast$3.Token(_tokenKind$3.TokenKind.SOF, 0, 0, 0, 0, null);
      this.source = source;
      this.lastToken = startOfFileToken;
      this.token = startOfFileToken;
      this.line = 1;
      this.lineStart = 0;
    }
    /**
     * Advances the token stream to the next non-ignored token.
     */


    var _proto = Lexer.prototype;

    _proto.advance = function advance() {
      this.lastToken = this.token;
      var token = this.token = this.lookahead();
      return token;
    }
    /**
     * Looks ahead and returns the next non-ignored token, but does not change
     * the state of Lexer.
     */
    ;

    _proto.lookahead = function lookahead() {
      var token = this.token;

      if (token.kind !== _tokenKind$3.TokenKind.EOF) {
        do {
          var _token$next;

          // Note: next is only mutable during parsing, so we cast to allow this.
          token = (_token$next = token.next) !== null && _token$next !== void 0 ? _token$next : token.next = readToken(this, token);
        } while (token.kind === _tokenKind$3.TokenKind.COMMENT);
      }

      return token;
    };

    return Lexer;
  }();
  /**
   * @internal
   */


  lexer.Lexer = Lexer;

  function isPunctuatorTokenKind(kind) {
    return kind === _tokenKind$3.TokenKind.BANG || kind === _tokenKind$3.TokenKind.DOLLAR || kind === _tokenKind$3.TokenKind.AMP || kind === _tokenKind$3.TokenKind.PAREN_L || kind === _tokenKind$3.TokenKind.PAREN_R || kind === _tokenKind$3.TokenKind.SPREAD || kind === _tokenKind$3.TokenKind.COLON || kind === _tokenKind$3.TokenKind.EQUALS || kind === _tokenKind$3.TokenKind.AT || kind === _tokenKind$3.TokenKind.BRACKET_L || kind === _tokenKind$3.TokenKind.BRACKET_R || kind === _tokenKind$3.TokenKind.BRACE_L || kind === _tokenKind$3.TokenKind.PIPE || kind === _tokenKind$3.TokenKind.BRACE_R;
  }

  function printCharCode(code) {
    return (// NaN/undefined represents access beyond the end of the file.
      isNaN(code) ? _tokenKind$3.TokenKind.EOF : // Trust JSON for ASCII.
      code < 0x007f ? JSON.stringify(String.fromCharCode(code)) : // Otherwise print the escaped form.
      "\"\\u".concat(('00' + code.toString(16).toUpperCase()).slice(-4), "\"")
    );
  }
  /**
   * Gets the next token from the source starting at the given position.
   *
   * This skips over whitespace until it finds the next lexable token, then lexes
   * punctuators immediately or calls the appropriate helper function for more
   * complicated tokens.
   */


  function readToken(lexer, prev) {
    var source = lexer.source;
    var body = source.body;
    var bodyLength = body.length;
    var pos = prev.end;

    while (pos < bodyLength) {
      var code = body.charCodeAt(pos);
      var _line = lexer.line;

      var _col = 1 + pos - lexer.lineStart; // SourceCharacter


      switch (code) {
        case 0xfeff: // <BOM>

        case 9: //   \t

        case 32: //  <space>

        case 44:
          //  ,
          ++pos;
          continue;

        case 10:
          //  \n
          ++pos;
          ++lexer.line;
          lexer.lineStart = pos;
          continue;

        case 13:
          //  \r
          if (body.charCodeAt(pos + 1) === 10) {
            pos += 2;
          } else {
            ++pos;
          }

          ++lexer.line;
          lexer.lineStart = pos;
          continue;

        case 33:
          //  !
          return new _ast$3.Token(_tokenKind$3.TokenKind.BANG, pos, pos + 1, _line, _col, prev);

        case 35:
          //  #
          return readComment(source, pos, _line, _col, prev);

        case 36:
          //  $
          return new _ast$3.Token(_tokenKind$3.TokenKind.DOLLAR, pos, pos + 1, _line, _col, prev);

        case 38:
          //  &
          return new _ast$3.Token(_tokenKind$3.TokenKind.AMP, pos, pos + 1, _line, _col, prev);

        case 40:
          //  (
          return new _ast$3.Token(_tokenKind$3.TokenKind.PAREN_L, pos, pos + 1, _line, _col, prev);

        case 41:
          //  )
          return new _ast$3.Token(_tokenKind$3.TokenKind.PAREN_R, pos, pos + 1, _line, _col, prev);

        case 46:
          //  .
          if (body.charCodeAt(pos + 1) === 46 && body.charCodeAt(pos + 2) === 46) {
            return new _ast$3.Token(_tokenKind$3.TokenKind.SPREAD, pos, pos + 3, _line, _col, prev);
          }

          break;

        case 58:
          //  :
          return new _ast$3.Token(_tokenKind$3.TokenKind.COLON, pos, pos + 1, _line, _col, prev);

        case 61:
          //  =
          return new _ast$3.Token(_tokenKind$3.TokenKind.EQUALS, pos, pos + 1, _line, _col, prev);

        case 64:
          //  @
          return new _ast$3.Token(_tokenKind$3.TokenKind.AT, pos, pos + 1, _line, _col, prev);

        case 91:
          //  [
          return new _ast$3.Token(_tokenKind$3.TokenKind.BRACKET_L, pos, pos + 1, _line, _col, prev);

        case 93:
          //  ]
          return new _ast$3.Token(_tokenKind$3.TokenKind.BRACKET_R, pos, pos + 1, _line, _col, prev);

        case 123:
          // {
          return new _ast$3.Token(_tokenKind$3.TokenKind.BRACE_L, pos, pos + 1, _line, _col, prev);

        case 124:
          // |
          return new _ast$3.Token(_tokenKind$3.TokenKind.PIPE, pos, pos + 1, _line, _col, prev);

        case 125:
          // }
          return new _ast$3.Token(_tokenKind$3.TokenKind.BRACE_R, pos, pos + 1, _line, _col, prev);

        case 34:
          //  "
          if (body.charCodeAt(pos + 1) === 34 && body.charCodeAt(pos + 2) === 34) {
            return readBlockString(source, pos, _line, _col, prev, lexer);
          }

          return readString(source, pos, _line, _col, prev);

        case 45: //  -

        case 48: //  0

        case 49: //  1

        case 50: //  2

        case 51: //  3

        case 52: //  4

        case 53: //  5

        case 54: //  6

        case 55: //  7

        case 56: //  8

        case 57:
          //  9
          return readNumber(source, pos, code, _line, _col, prev);

        case 65: //  A

        case 66: //  B

        case 67: //  C

        case 68: //  D

        case 69: //  E

        case 70: //  F

        case 71: //  G

        case 72: //  H

        case 73: //  I

        case 74: //  J

        case 75: //  K

        case 76: //  L

        case 77: //  M

        case 78: //  N

        case 79: //  O

        case 80: //  P

        case 81: //  Q

        case 82: //  R

        case 83: //  S

        case 84: //  T

        case 85: //  U

        case 86: //  V

        case 87: //  W

        case 88: //  X

        case 89: //  Y

        case 90: //  Z

        case 95: //  _

        case 97: //  a

        case 98: //  b

        case 99: //  c

        case 100: // d

        case 101: // e

        case 102: // f

        case 103: // g

        case 104: // h

        case 105: // i

        case 106: // j

        case 107: // k

        case 108: // l

        case 109: // m

        case 110: // n

        case 111: // o

        case 112: // p

        case 113: // q

        case 114: // r

        case 115: // s

        case 116: // t

        case 117: // u

        case 118: // v

        case 119: // w

        case 120: // x

        case 121: // y

        case 122:
          // z
          return readName(source, pos, _line, _col, prev);
      }

      throw (0, _syntaxError$1.syntaxError)(source, pos, unexpectedCharacterMessage(code));
    }

    var line = lexer.line;
    var col = 1 + pos - lexer.lineStart;
    return new _ast$3.Token(_tokenKind$3.TokenKind.EOF, bodyLength, bodyLength, line, col, prev);
  }
  /**
   * Report a message that an unexpected character was encountered.
   */


  function unexpectedCharacterMessage(code) {
    if (code < 0x0020 && code !== 0x0009 && code !== 0x000a && code !== 0x000d) {
      return "Cannot contain the invalid character ".concat(printCharCode(code), ".");
    }

    if (code === 39) {
      // '
      return 'Unexpected single quote character (\'), did you mean to use a double quote (")?';
    }

    return "Cannot parse the unexpected character ".concat(printCharCode(code), ".");
  }
  /**
   * Reads a comment token from the source file.
   *
   * #[\u0009\u0020-\uFFFF]*
   */


  function readComment(source, start, line, col, prev) {
    var body = source.body;
    var code;
    var position = start;

    do {
      code = body.charCodeAt(++position);
    } while (!isNaN(code) && ( // SourceCharacter but not LineTerminator
    code > 0x001f || code === 0x0009));

    return new _ast$3.Token(_tokenKind$3.TokenKind.COMMENT, start, position, line, col, prev, body.slice(start + 1, position));
  }
  /**
   * Reads a number token from the source file, either a float
   * or an int depending on whether a decimal point appears.
   *
   * Int:   -?(0|[1-9][0-9]*)
   * Float: -?(0|[1-9][0-9]*)(\.[0-9]+)?((E|e)(+|-)?[0-9]+)?
   */


  function readNumber(source, start, firstCode, line, col, prev) {
    var body = source.body;
    var code = firstCode;
    var position = start;
    var isFloat = false;

    if (code === 45) {
      // -
      code = body.charCodeAt(++position);
    }

    if (code === 48) {
      // 0
      code = body.charCodeAt(++position);

      if (code >= 48 && code <= 57) {
        throw (0, _syntaxError$1.syntaxError)(source, position, "Invalid number, unexpected digit after 0: ".concat(printCharCode(code), "."));
      }
    } else {
      position = readDigits(source, position, code);
      code = body.charCodeAt(position);
    }

    if (code === 46) {
      // .
      isFloat = true;
      code = body.charCodeAt(++position);
      position = readDigits(source, position, code);
      code = body.charCodeAt(position);
    }

    if (code === 69 || code === 101) {
      // E e
      isFloat = true;
      code = body.charCodeAt(++position);

      if (code === 43 || code === 45) {
        // + -
        code = body.charCodeAt(++position);
      }

      position = readDigits(source, position, code);
      code = body.charCodeAt(position);
    } // Numbers cannot be followed by . or NameStart


    if (code === 46 || isNameStart(code)) {
      throw (0, _syntaxError$1.syntaxError)(source, position, "Invalid number, expected digit but got: ".concat(printCharCode(code), "."));
    }

    return new _ast$3.Token(isFloat ? _tokenKind$3.TokenKind.FLOAT : _tokenKind$3.TokenKind.INT, start, position, line, col, prev, body.slice(start, position));
  }
  /**
   * Returns the new position in the source after reading digits.
   */


  function readDigits(source, start, firstCode) {
    var body = source.body;
    var position = start;
    var code = firstCode;

    if (code >= 48 && code <= 57) {
      // 0 - 9
      do {
        code = body.charCodeAt(++position);
      } while (code >= 48 && code <= 57); // 0 - 9


      return position;
    }

    throw (0, _syntaxError$1.syntaxError)(source, position, "Invalid number, expected digit but got: ".concat(printCharCode(code), "."));
  }
  /**
   * Reads a string token from the source file.
   *
   * "([^"\\\u000A\u000D]|(\\(u[0-9a-fA-F]{4}|["\\/bfnrt])))*"
   */


  function readString(source, start, line, col, prev) {
    var body = source.body;
    var position = start + 1;
    var chunkStart = position;
    var code = 0;
    var value = '';

    while (position < body.length && !isNaN(code = body.charCodeAt(position)) && // not LineTerminator
    code !== 0x000a && code !== 0x000d) {
      // Closing Quote (")
      if (code === 34) {
        value += body.slice(chunkStart, position);
        return new _ast$3.Token(_tokenKind$3.TokenKind.STRING, start, position + 1, line, col, prev, value);
      } // SourceCharacter


      if (code < 0x0020 && code !== 0x0009) {
        throw (0, _syntaxError$1.syntaxError)(source, position, "Invalid character within String: ".concat(printCharCode(code), "."));
      }

      ++position;

      if (code === 92) {
        // \
        value += body.slice(chunkStart, position - 1);
        code = body.charCodeAt(position);

        switch (code) {
          case 34:
            value += '"';
            break;

          case 47:
            value += '/';
            break;

          case 92:
            value += '\\';
            break;

          case 98:
            value += '\b';
            break;

          case 102:
            value += '\f';
            break;

          case 110:
            value += '\n';
            break;

          case 114:
            value += '\r';
            break;

          case 116:
            value += '\t';
            break;

          case 117:
            {
              // uXXXX
              var charCode = uniCharCode(body.charCodeAt(position + 1), body.charCodeAt(position + 2), body.charCodeAt(position + 3), body.charCodeAt(position + 4));

              if (charCode < 0) {
                var invalidSequence = body.slice(position + 1, position + 5);
                throw (0, _syntaxError$1.syntaxError)(source, position, "Invalid character escape sequence: \\u".concat(invalidSequence, "."));
              }

              value += String.fromCharCode(charCode);
              position += 4;
              break;
            }

          default:
            throw (0, _syntaxError$1.syntaxError)(source, position, "Invalid character escape sequence: \\".concat(String.fromCharCode(code), "."));
        }

        ++position;
        chunkStart = position;
      }
    }

    throw (0, _syntaxError$1.syntaxError)(source, position, 'Unterminated string.');
  }
  /**
   * Reads a block string token from the source file.
   *
   * """("?"?(\\"""|\\(?!=""")|[^"\\]))*"""
   */


  function readBlockString(source, start, line, col, prev, lexer) {
    var body = source.body;
    var position = start + 3;
    var chunkStart = position;
    var code = 0;
    var rawValue = '';

    while (position < body.length && !isNaN(code = body.charCodeAt(position))) {
      // Closing Triple-Quote (""")
      if (code === 34 && body.charCodeAt(position + 1) === 34 && body.charCodeAt(position + 2) === 34) {
        rawValue += body.slice(chunkStart, position);
        return new _ast$3.Token(_tokenKind$3.TokenKind.BLOCK_STRING, start, position + 3, line, col, prev, (0, _blockString$4.dedentBlockStringValue)(rawValue));
      } // SourceCharacter


      if (code < 0x0020 && code !== 0x0009 && code !== 0x000a && code !== 0x000d) {
        throw (0, _syntaxError$1.syntaxError)(source, position, "Invalid character within String: ".concat(printCharCode(code), "."));
      }

      if (code === 10) {
        // new line
        ++position;
        ++lexer.line;
        lexer.lineStart = position;
      } else if (code === 13) {
        // carriage return
        if (body.charCodeAt(position + 1) === 10) {
          position += 2;
        } else {
          ++position;
        }

        ++lexer.line;
        lexer.lineStart = position;
      } else if ( // Escape Triple-Quote (\""")
      code === 92 && body.charCodeAt(position + 1) === 34 && body.charCodeAt(position + 2) === 34 && body.charCodeAt(position + 3) === 34) {
        rawValue += body.slice(chunkStart, position) + '"""';
        position += 4;
        chunkStart = position;
      } else {
        ++position;
      }
    }

    throw (0, _syntaxError$1.syntaxError)(source, position, 'Unterminated string.');
  }
  /**
   * Converts four hexadecimal chars to the integer that the
   * string represents. For example, uniCharCode('0','0','0','f')
   * will return 15, and uniCharCode('0','0','f','f') returns 255.
   *
   * Returns a negative number on error, if a char was invalid.
   *
   * This is implemented by noting that char2hex() returns -1 on error,
   * which means the result of ORing the char2hex() will also be negative.
   */


  function uniCharCode(a, b, c, d) {
    return char2hex(a) << 12 | char2hex(b) << 8 | char2hex(c) << 4 | char2hex(d);
  }
  /**
   * Converts a hex character to its integer value.
   * '0' becomes 0, '9' becomes 9
   * 'A' becomes 10, 'F' becomes 15
   * 'a' becomes 10, 'f' becomes 15
   *
   * Returns -1 on error.
   */


  function char2hex(a) {
    return a >= 48 && a <= 57 ? a - 48 // 0-9
    : a >= 65 && a <= 70 ? a - 55 // A-F
    : a >= 97 && a <= 102 ? a - 87 // a-f
    : -1;
  }
  /**
   * Reads an alphanumeric + underscore name from the source.
   *
   * [_A-Za-z][_0-9A-Za-z]*
   */


  function readName(source, start, line, col, prev) {
    var body = source.body;
    var bodyLength = body.length;
    var position = start + 1;
    var code = 0;

    while (position !== bodyLength && !isNaN(code = body.charCodeAt(position)) && (code === 95 || // _
    code >= 48 && code <= 57 || // 0-9
    code >= 65 && code <= 90 || // A-Z
    code >= 97 && code <= 122) // a-z
    ) {
      ++position;
    }

    return new _ast$3.Token(_tokenKind$3.TokenKind.NAME, start, position, line, col, prev, body.slice(start, position));
  } // _ A-Z a-z


  function isNameStart(code) {
    return code === 95 || code >= 65 && code <= 90 || code >= 97 && code <= 122;
  }

  Object.defineProperty(parser, "__esModule", {
    value: true
  });
  parser.parse = parse$2;
  parser.parseValue = parseValue;
  parser.parseType = parseType;
  parser.Parser = void 0;

  var _syntaxError = syntaxError$1;

  var _kinds$o = kinds;

  var _ast$2 = ast;

  var _tokenKind$2 = tokenKind;

  var _source$1 = source;

  var _directiveLocation$3 = directiveLocation;

  var _lexer$1 = lexer;

  /**
   * Given a GraphQL source, parses it into a Document.
   * Throws GraphQLError if a syntax error is encountered.
   */
  function parse$2(source, options) {
    var parser = new Parser(source, options);
    return parser.parseDocument();
  }
  /**
   * Given a string containing a GraphQL value (ex. `[42]`), parse the AST for
   * that value.
   * Throws GraphQLError if a syntax error is encountered.
   *
   * This is useful within tools that operate upon GraphQL Values directly and
   * in isolation of complete GraphQL documents.
   *
   * Consider providing the results to the utility function: valueFromAST().
   */


  function parseValue(source, options) {
    var parser = new Parser(source, options);
    parser.expectToken(_tokenKind$2.TokenKind.SOF);
    var value = parser.parseValueLiteral(false);
    parser.expectToken(_tokenKind$2.TokenKind.EOF);
    return value;
  }
  /**
   * Given a string containing a GraphQL Type (ex. `[Int!]`), parse the AST for
   * that type.
   * Throws GraphQLError if a syntax error is encountered.
   *
   * This is useful within tools that operate upon GraphQL Types directly and
   * in isolation of complete GraphQL documents.
   *
   * Consider providing the results to the utility function: typeFromAST().
   */


  function parseType(source, options) {
    var parser = new Parser(source, options);
    parser.expectToken(_tokenKind$2.TokenKind.SOF);
    var type = parser.parseTypeReference();
    parser.expectToken(_tokenKind$2.TokenKind.EOF);
    return type;
  }
  /**
   * This class is exported only to assist people in implementing their own parsers
   * without duplicating too much code and should be used only as last resort for cases
   * such as experimental syntax or if certain features could not be contributed upstream.
   *
   * It is still part of the internal API and is versioned, so any changes to it are never
   * considered breaking changes. If you still need to support multiple versions of the
   * library, please use the `versionInfo` variable for version detection.
   *
   * @internal
   */


  var Parser = /*#__PURE__*/function () {
    function Parser(source, options) {
      var sourceObj = (0, _source$1.isSource)(source) ? source : new _source$1.Source(source);
      this._lexer = new _lexer$1.Lexer(sourceObj);
      this._options = options;
    }
    /**
     * Converts a name lex token into a name parse node.
     */


    var _proto = Parser.prototype;

    _proto.parseName = function parseName() {
      var token = this.expectToken(_tokenKind$2.TokenKind.NAME);
      return {
        kind: _kinds$o.Kind.NAME,
        value: token.value,
        loc: this.loc(token)
      };
    } // Implements the parsing rules in the Document section.

    /**
     * Document : Definition+
     */
    ;

    _proto.parseDocument = function parseDocument() {
      var start = this._lexer.token;
      return {
        kind: _kinds$o.Kind.DOCUMENT,
        definitions: this.many(_tokenKind$2.TokenKind.SOF, this.parseDefinition, _tokenKind$2.TokenKind.EOF),
        loc: this.loc(start)
      };
    }
    /**
     * Definition :
     *   - ExecutableDefinition
     *   - TypeSystemDefinition
     *   - TypeSystemExtension
     *
     * ExecutableDefinition :
     *   - OperationDefinition
     *   - FragmentDefinition
     */
    ;

    _proto.parseDefinition = function parseDefinition() {
      if (this.peek(_tokenKind$2.TokenKind.NAME)) {
        switch (this._lexer.token.value) {
          case 'query':
          case 'mutation':
          case 'subscription':
            return this.parseOperationDefinition();

          case 'fragment':
            return this.parseFragmentDefinition();

          case 'schema':
          case 'scalar':
          case 'type':
          case 'interface':
          case 'union':
          case 'enum':
          case 'input':
          case 'directive':
            return this.parseTypeSystemDefinition();

          case 'extend':
            return this.parseTypeSystemExtension();
        }
      } else if (this.peek(_tokenKind$2.TokenKind.BRACE_L)) {
        return this.parseOperationDefinition();
      } else if (this.peekDescription()) {
        return this.parseTypeSystemDefinition();
      }

      throw this.unexpected();
    } // Implements the parsing rules in the Operations section.

    /**
     * OperationDefinition :
     *  - SelectionSet
     *  - OperationType Name? VariableDefinitions? Directives? SelectionSet
     */
    ;

    _proto.parseOperationDefinition = function parseOperationDefinition() {
      var start = this._lexer.token;

      if (this.peek(_tokenKind$2.TokenKind.BRACE_L)) {
        return {
          kind: _kinds$o.Kind.OPERATION_DEFINITION,
          operation: 'query',
          name: undefined,
          variableDefinitions: [],
          directives: [],
          selectionSet: this.parseSelectionSet(),
          loc: this.loc(start)
        };
      }

      var operation = this.parseOperationType();
      var name;

      if (this.peek(_tokenKind$2.TokenKind.NAME)) {
        name = this.parseName();
      }

      return {
        kind: _kinds$o.Kind.OPERATION_DEFINITION,
        operation: operation,
        name: name,
        variableDefinitions: this.parseVariableDefinitions(),
        directives: this.parseDirectives(false),
        selectionSet: this.parseSelectionSet(),
        loc: this.loc(start)
      };
    }
    /**
     * OperationType : one of query mutation subscription
     */
    ;

    _proto.parseOperationType = function parseOperationType() {
      var operationToken = this.expectToken(_tokenKind$2.TokenKind.NAME);

      switch (operationToken.value) {
        case 'query':
          return 'query';

        case 'mutation':
          return 'mutation';

        case 'subscription':
          return 'subscription';
      }

      throw this.unexpected(operationToken);
    }
    /**
     * VariableDefinitions : ( VariableDefinition+ )
     */
    ;

    _proto.parseVariableDefinitions = function parseVariableDefinitions() {
      return this.optionalMany(_tokenKind$2.TokenKind.PAREN_L, this.parseVariableDefinition, _tokenKind$2.TokenKind.PAREN_R);
    }
    /**
     * VariableDefinition : Variable : Type DefaultValue? Directives[Const]?
     */
    ;

    _proto.parseVariableDefinition = function parseVariableDefinition() {
      var start = this._lexer.token;
      return {
        kind: _kinds$o.Kind.VARIABLE_DEFINITION,
        variable: this.parseVariable(),
        type: (this.expectToken(_tokenKind$2.TokenKind.COLON), this.parseTypeReference()),
        defaultValue: this.expectOptionalToken(_tokenKind$2.TokenKind.EQUALS) ? this.parseValueLiteral(true) : undefined,
        directives: this.parseDirectives(true),
        loc: this.loc(start)
      };
    }
    /**
     * Variable : $ Name
     */
    ;

    _proto.parseVariable = function parseVariable() {
      var start = this._lexer.token;
      this.expectToken(_tokenKind$2.TokenKind.DOLLAR);
      return {
        kind: _kinds$o.Kind.VARIABLE,
        name: this.parseName(),
        loc: this.loc(start)
      };
    }
    /**
     * SelectionSet : { Selection+ }
     */
    ;

    _proto.parseSelectionSet = function parseSelectionSet() {
      var start = this._lexer.token;
      return {
        kind: _kinds$o.Kind.SELECTION_SET,
        selections: this.many(_tokenKind$2.TokenKind.BRACE_L, this.parseSelection, _tokenKind$2.TokenKind.BRACE_R),
        loc: this.loc(start)
      };
    }
    /**
     * Selection :
     *   - Field
     *   - FragmentSpread
     *   - InlineFragment
     */
    ;

    _proto.parseSelection = function parseSelection() {
      return this.peek(_tokenKind$2.TokenKind.SPREAD) ? this.parseFragment() : this.parseField();
    }
    /**
     * Field : Alias? Name Arguments? Directives? SelectionSet?
     *
     * Alias : Name :
     */
    ;

    _proto.parseField = function parseField() {
      var start = this._lexer.token;
      var nameOrAlias = this.parseName();
      var alias;
      var name;

      if (this.expectOptionalToken(_tokenKind$2.TokenKind.COLON)) {
        alias = nameOrAlias;
        name = this.parseName();
      } else {
        name = nameOrAlias;
      }

      return {
        kind: _kinds$o.Kind.FIELD,
        alias: alias,
        name: name,
        arguments: this.parseArguments(false),
        directives: this.parseDirectives(false),
        selectionSet: this.peek(_tokenKind$2.TokenKind.BRACE_L) ? this.parseSelectionSet() : undefined,
        loc: this.loc(start)
      };
    }
    /**
     * Arguments[Const] : ( Argument[?Const]+ )
     */
    ;

    _proto.parseArguments = function parseArguments(isConst) {
      var item = isConst ? this.parseConstArgument : this.parseArgument;
      return this.optionalMany(_tokenKind$2.TokenKind.PAREN_L, item, _tokenKind$2.TokenKind.PAREN_R);
    }
    /**
     * Argument[Const] : Name : Value[?Const]
     */
    ;

    _proto.parseArgument = function parseArgument() {
      var start = this._lexer.token;
      var name = this.parseName();
      this.expectToken(_tokenKind$2.TokenKind.COLON);
      return {
        kind: _kinds$o.Kind.ARGUMENT,
        name: name,
        value: this.parseValueLiteral(false),
        loc: this.loc(start)
      };
    };

    _proto.parseConstArgument = function parseConstArgument() {
      var start = this._lexer.token;
      return {
        kind: _kinds$o.Kind.ARGUMENT,
        name: this.parseName(),
        value: (this.expectToken(_tokenKind$2.TokenKind.COLON), this.parseValueLiteral(true)),
        loc: this.loc(start)
      };
    } // Implements the parsing rules in the Fragments section.

    /**
     * Corresponds to both FragmentSpread and InlineFragment in the spec.
     *
     * FragmentSpread : ... FragmentName Directives?
     *
     * InlineFragment : ... TypeCondition? Directives? SelectionSet
     */
    ;

    _proto.parseFragment = function parseFragment() {
      var start = this._lexer.token;
      this.expectToken(_tokenKind$2.TokenKind.SPREAD);
      var hasTypeCondition = this.expectOptionalKeyword('on');

      if (!hasTypeCondition && this.peek(_tokenKind$2.TokenKind.NAME)) {
        return {
          kind: _kinds$o.Kind.FRAGMENT_SPREAD,
          name: this.parseFragmentName(),
          directives: this.parseDirectives(false),
          loc: this.loc(start)
        };
      }

      return {
        kind: _kinds$o.Kind.INLINE_FRAGMENT,
        typeCondition: hasTypeCondition ? this.parseNamedType() : undefined,
        directives: this.parseDirectives(false),
        selectionSet: this.parseSelectionSet(),
        loc: this.loc(start)
      };
    }
    /**
     * FragmentDefinition :
     *   - fragment FragmentName on TypeCondition Directives? SelectionSet
     *
     * TypeCondition : NamedType
     */
    ;

    _proto.parseFragmentDefinition = function parseFragmentDefinition() {
      var _this$_options;

      var start = this._lexer.token;
      this.expectKeyword('fragment'); // Experimental support for defining variables within fragments changes
      // the grammar of FragmentDefinition:
      //   - fragment FragmentName VariableDefinitions? on TypeCondition Directives? SelectionSet

      if (((_this$_options = this._options) === null || _this$_options === void 0 ? void 0 : _this$_options.experimentalFragmentVariables) === true) {
        return {
          kind: _kinds$o.Kind.FRAGMENT_DEFINITION,
          name: this.parseFragmentName(),
          variableDefinitions: this.parseVariableDefinitions(),
          typeCondition: (this.expectKeyword('on'), this.parseNamedType()),
          directives: this.parseDirectives(false),
          selectionSet: this.parseSelectionSet(),
          loc: this.loc(start)
        };
      }

      return {
        kind: _kinds$o.Kind.FRAGMENT_DEFINITION,
        name: this.parseFragmentName(),
        typeCondition: (this.expectKeyword('on'), this.parseNamedType()),
        directives: this.parseDirectives(false),
        selectionSet: this.parseSelectionSet(),
        loc: this.loc(start)
      };
    }
    /**
     * FragmentName : Name but not `on`
     */
    ;

    _proto.parseFragmentName = function parseFragmentName() {
      if (this._lexer.token.value === 'on') {
        throw this.unexpected();
      }

      return this.parseName();
    } // Implements the parsing rules in the Values section.

    /**
     * Value[Const] :
     *   - [~Const] Variable
     *   - IntValue
     *   - FloatValue
     *   - StringValue
     *   - BooleanValue
     *   - NullValue
     *   - EnumValue
     *   - ListValue[?Const]
     *   - ObjectValue[?Const]
     *
     * BooleanValue : one of `true` `false`
     *
     * NullValue : `null`
     *
     * EnumValue : Name but not `true`, `false` or `null`
     */
    ;

    _proto.parseValueLiteral = function parseValueLiteral(isConst) {
      var token = this._lexer.token;

      switch (token.kind) {
        case _tokenKind$2.TokenKind.BRACKET_L:
          return this.parseList(isConst);

        case _tokenKind$2.TokenKind.BRACE_L:
          return this.parseObject(isConst);

        case _tokenKind$2.TokenKind.INT:
          this._lexer.advance();

          return {
            kind: _kinds$o.Kind.INT,
            value: token.value,
            loc: this.loc(token)
          };

        case _tokenKind$2.TokenKind.FLOAT:
          this._lexer.advance();

          return {
            kind: _kinds$o.Kind.FLOAT,
            value: token.value,
            loc: this.loc(token)
          };

        case _tokenKind$2.TokenKind.STRING:
        case _tokenKind$2.TokenKind.BLOCK_STRING:
          return this.parseStringLiteral();

        case _tokenKind$2.TokenKind.NAME:
          this._lexer.advance();

          switch (token.value) {
            case 'true':
              return {
                kind: _kinds$o.Kind.BOOLEAN,
                value: true,
                loc: this.loc(token)
              };

            case 'false':
              return {
                kind: _kinds$o.Kind.BOOLEAN,
                value: false,
                loc: this.loc(token)
              };

            case 'null':
              return {
                kind: _kinds$o.Kind.NULL,
                loc: this.loc(token)
              };

            default:
              return {
                kind: _kinds$o.Kind.ENUM,
                value: token.value,
                loc: this.loc(token)
              };
          }

        case _tokenKind$2.TokenKind.DOLLAR:
          if (!isConst) {
            return this.parseVariable();
          }

          break;
      }

      throw this.unexpected();
    };

    _proto.parseStringLiteral = function parseStringLiteral() {
      var token = this._lexer.token;

      this._lexer.advance();

      return {
        kind: _kinds$o.Kind.STRING,
        value: token.value,
        block: token.kind === _tokenKind$2.TokenKind.BLOCK_STRING,
        loc: this.loc(token)
      };
    }
    /**
     * ListValue[Const] :
     *   - [ ]
     *   - [ Value[?Const]+ ]
     */
    ;

    _proto.parseList = function parseList(isConst) {
      var _this = this;

      var start = this._lexer.token;

      var item = function item() {
        return _this.parseValueLiteral(isConst);
      };

      return {
        kind: _kinds$o.Kind.LIST,
        values: this.any(_tokenKind$2.TokenKind.BRACKET_L, item, _tokenKind$2.TokenKind.BRACKET_R),
        loc: this.loc(start)
      };
    }
    /**
     * ObjectValue[Const] :
     *   - { }
     *   - { ObjectField[?Const]+ }
     */
    ;

    _proto.parseObject = function parseObject(isConst) {
      var _this2 = this;

      var start = this._lexer.token;

      var item = function item() {
        return _this2.parseObjectField(isConst);
      };

      return {
        kind: _kinds$o.Kind.OBJECT,
        fields: this.any(_tokenKind$2.TokenKind.BRACE_L, item, _tokenKind$2.TokenKind.BRACE_R),
        loc: this.loc(start)
      };
    }
    /**
     * ObjectField[Const] : Name : Value[?Const]
     */
    ;

    _proto.parseObjectField = function parseObjectField(isConst) {
      var start = this._lexer.token;
      var name = this.parseName();
      this.expectToken(_tokenKind$2.TokenKind.COLON);
      return {
        kind: _kinds$o.Kind.OBJECT_FIELD,
        name: name,
        value: this.parseValueLiteral(isConst),
        loc: this.loc(start)
      };
    } // Implements the parsing rules in the Directives section.

    /**
     * Directives[Const] : Directive[?Const]+
     */
    ;

    _proto.parseDirectives = function parseDirectives(isConst) {
      var directives = [];

      while (this.peek(_tokenKind$2.TokenKind.AT)) {
        directives.push(this.parseDirective(isConst));
      }

      return directives;
    }
    /**
     * Directive[Const] : @ Name Arguments[?Const]?
     */
    ;

    _proto.parseDirective = function parseDirective(isConst) {
      var start = this._lexer.token;
      this.expectToken(_tokenKind$2.TokenKind.AT);
      return {
        kind: _kinds$o.Kind.DIRECTIVE,
        name: this.parseName(),
        arguments: this.parseArguments(isConst),
        loc: this.loc(start)
      };
    } // Implements the parsing rules in the Types section.

    /**
     * Type :
     *   - NamedType
     *   - ListType
     *   - NonNullType
     */
    ;

    _proto.parseTypeReference = function parseTypeReference() {
      var start = this._lexer.token;
      var type;

      if (this.expectOptionalToken(_tokenKind$2.TokenKind.BRACKET_L)) {
        type = this.parseTypeReference();
        this.expectToken(_tokenKind$2.TokenKind.BRACKET_R);
        type = {
          kind: _kinds$o.Kind.LIST_TYPE,
          type: type,
          loc: this.loc(start)
        };
      } else {
        type = this.parseNamedType();
      }

      if (this.expectOptionalToken(_tokenKind$2.TokenKind.BANG)) {
        return {
          kind: _kinds$o.Kind.NON_NULL_TYPE,
          type: type,
          loc: this.loc(start)
        };
      }

      return type;
    }
    /**
     * NamedType : Name
     */
    ;

    _proto.parseNamedType = function parseNamedType() {
      var start = this._lexer.token;
      return {
        kind: _kinds$o.Kind.NAMED_TYPE,
        name: this.parseName(),
        loc: this.loc(start)
      };
    } // Implements the parsing rules in the Type Definition section.

    /**
     * TypeSystemDefinition :
     *   - SchemaDefinition
     *   - TypeDefinition
     *   - DirectiveDefinition
     *
     * TypeDefinition :
     *   - ScalarTypeDefinition
     *   - ObjectTypeDefinition
     *   - InterfaceTypeDefinition
     *   - UnionTypeDefinition
     *   - EnumTypeDefinition
     *   - InputObjectTypeDefinition
     */
    ;

    _proto.parseTypeSystemDefinition = function parseTypeSystemDefinition() {
      // Many definitions begin with a description and require a lookahead.
      var keywordToken = this.peekDescription() ? this._lexer.lookahead() : this._lexer.token;

      if (keywordToken.kind === _tokenKind$2.TokenKind.NAME) {
        switch (keywordToken.value) {
          case 'schema':
            return this.parseSchemaDefinition();

          case 'scalar':
            return this.parseScalarTypeDefinition();

          case 'type':
            return this.parseObjectTypeDefinition();

          case 'interface':
            return this.parseInterfaceTypeDefinition();

          case 'union':
            return this.parseUnionTypeDefinition();

          case 'enum':
            return this.parseEnumTypeDefinition();

          case 'input':
            return this.parseInputObjectTypeDefinition();

          case 'directive':
            return this.parseDirectiveDefinition();
        }
      }

      throw this.unexpected(keywordToken);
    };

    _proto.peekDescription = function peekDescription() {
      return this.peek(_tokenKind$2.TokenKind.STRING) || this.peek(_tokenKind$2.TokenKind.BLOCK_STRING);
    }
    /**
     * Description : StringValue
     */
    ;

    _proto.parseDescription = function parseDescription() {
      if (this.peekDescription()) {
        return this.parseStringLiteral();
      }
    }
    /**
     * SchemaDefinition : Description? schema Directives[Const]? { OperationTypeDefinition+ }
     */
    ;

    _proto.parseSchemaDefinition = function parseSchemaDefinition() {
      var start = this._lexer.token;
      var description = this.parseDescription();
      this.expectKeyword('schema');
      var directives = this.parseDirectives(true);
      var operationTypes = this.many(_tokenKind$2.TokenKind.BRACE_L, this.parseOperationTypeDefinition, _tokenKind$2.TokenKind.BRACE_R);
      return {
        kind: _kinds$o.Kind.SCHEMA_DEFINITION,
        description: description,
        directives: directives,
        operationTypes: operationTypes,
        loc: this.loc(start)
      };
    }
    /**
     * OperationTypeDefinition : OperationType : NamedType
     */
    ;

    _proto.parseOperationTypeDefinition = function parseOperationTypeDefinition() {
      var start = this._lexer.token;
      var operation = this.parseOperationType();
      this.expectToken(_tokenKind$2.TokenKind.COLON);
      var type = this.parseNamedType();
      return {
        kind: _kinds$o.Kind.OPERATION_TYPE_DEFINITION,
        operation: operation,
        type: type,
        loc: this.loc(start)
      };
    }
    /**
     * ScalarTypeDefinition : Description? scalar Name Directives[Const]?
     */
    ;

    _proto.parseScalarTypeDefinition = function parseScalarTypeDefinition() {
      var start = this._lexer.token;
      var description = this.parseDescription();
      this.expectKeyword('scalar');
      var name = this.parseName();
      var directives = this.parseDirectives(true);
      return {
        kind: _kinds$o.Kind.SCALAR_TYPE_DEFINITION,
        description: description,
        name: name,
        directives: directives,
        loc: this.loc(start)
      };
    }
    /**
     * ObjectTypeDefinition :
     *   Description?
     *   type Name ImplementsInterfaces? Directives[Const]? FieldsDefinition?
     */
    ;

    _proto.parseObjectTypeDefinition = function parseObjectTypeDefinition() {
      var start = this._lexer.token;
      var description = this.parseDescription();
      this.expectKeyword('type');
      var name = this.parseName();
      var interfaces = this.parseImplementsInterfaces();
      var directives = this.parseDirectives(true);
      var fields = this.parseFieldsDefinition();
      return {
        kind: _kinds$o.Kind.OBJECT_TYPE_DEFINITION,
        description: description,
        name: name,
        interfaces: interfaces,
        directives: directives,
        fields: fields,
        loc: this.loc(start)
      };
    }
    /**
     * ImplementsInterfaces :
     *   - implements `&`? NamedType
     *   - ImplementsInterfaces & NamedType
     */
    ;

    _proto.parseImplementsInterfaces = function parseImplementsInterfaces() {
      var _this$_options2;

      if (!this.expectOptionalKeyword('implements')) {
        return [];
      }

      if (((_this$_options2 = this._options) === null || _this$_options2 === void 0 ? void 0 : _this$_options2.allowLegacySDLImplementsInterfaces) === true) {
        var types = []; // Optional leading ampersand

        this.expectOptionalToken(_tokenKind$2.TokenKind.AMP);

        do {
          types.push(this.parseNamedType());
        } while (this.expectOptionalToken(_tokenKind$2.TokenKind.AMP) || this.peek(_tokenKind$2.TokenKind.NAME));

        return types;
      }

      return this.delimitedMany(_tokenKind$2.TokenKind.AMP, this.parseNamedType);
    }
    /**
     * FieldsDefinition : { FieldDefinition+ }
     */
    ;

    _proto.parseFieldsDefinition = function parseFieldsDefinition() {
      var _this$_options3;

      // Legacy support for the SDL?
      if (((_this$_options3 = this._options) === null || _this$_options3 === void 0 ? void 0 : _this$_options3.allowLegacySDLEmptyFields) === true && this.peek(_tokenKind$2.TokenKind.BRACE_L) && this._lexer.lookahead().kind === _tokenKind$2.TokenKind.BRACE_R) {
        this._lexer.advance();

        this._lexer.advance();

        return [];
      }

      return this.optionalMany(_tokenKind$2.TokenKind.BRACE_L, this.parseFieldDefinition, _tokenKind$2.TokenKind.BRACE_R);
    }
    /**
     * FieldDefinition :
     *   - Description? Name ArgumentsDefinition? : Type Directives[Const]?
     */
    ;

    _proto.parseFieldDefinition = function parseFieldDefinition() {
      var start = this._lexer.token;
      var description = this.parseDescription();
      var name = this.parseName();
      var args = this.parseArgumentDefs();
      this.expectToken(_tokenKind$2.TokenKind.COLON);
      var type = this.parseTypeReference();
      var directives = this.parseDirectives(true);
      return {
        kind: _kinds$o.Kind.FIELD_DEFINITION,
        description: description,
        name: name,
        arguments: args,
        type: type,
        directives: directives,
        loc: this.loc(start)
      };
    }
    /**
     * ArgumentsDefinition : ( InputValueDefinition+ )
     */
    ;

    _proto.parseArgumentDefs = function parseArgumentDefs() {
      return this.optionalMany(_tokenKind$2.TokenKind.PAREN_L, this.parseInputValueDef, _tokenKind$2.TokenKind.PAREN_R);
    }
    /**
     * InputValueDefinition :
     *   - Description? Name : Type DefaultValue? Directives[Const]?
     */
    ;

    _proto.parseInputValueDef = function parseInputValueDef() {
      var start = this._lexer.token;
      var description = this.parseDescription();
      var name = this.parseName();
      this.expectToken(_tokenKind$2.TokenKind.COLON);
      var type = this.parseTypeReference();
      var defaultValue;

      if (this.expectOptionalToken(_tokenKind$2.TokenKind.EQUALS)) {
        defaultValue = this.parseValueLiteral(true);
      }

      var directives = this.parseDirectives(true);
      return {
        kind: _kinds$o.Kind.INPUT_VALUE_DEFINITION,
        description: description,
        name: name,
        type: type,
        defaultValue: defaultValue,
        directives: directives,
        loc: this.loc(start)
      };
    }
    /**
     * InterfaceTypeDefinition :
     *   - Description? interface Name Directives[Const]? FieldsDefinition?
     */
    ;

    _proto.parseInterfaceTypeDefinition = function parseInterfaceTypeDefinition() {
      var start = this._lexer.token;
      var description = this.parseDescription();
      this.expectKeyword('interface');
      var name = this.parseName();
      var interfaces = this.parseImplementsInterfaces();
      var directives = this.parseDirectives(true);
      var fields = this.parseFieldsDefinition();
      return {
        kind: _kinds$o.Kind.INTERFACE_TYPE_DEFINITION,
        description: description,
        name: name,
        interfaces: interfaces,
        directives: directives,
        fields: fields,
        loc: this.loc(start)
      };
    }
    /**
     * UnionTypeDefinition :
     *   - Description? union Name Directives[Const]? UnionMemberTypes?
     */
    ;

    _proto.parseUnionTypeDefinition = function parseUnionTypeDefinition() {
      var start = this._lexer.token;
      var description = this.parseDescription();
      this.expectKeyword('union');
      var name = this.parseName();
      var directives = this.parseDirectives(true);
      var types = this.parseUnionMemberTypes();
      return {
        kind: _kinds$o.Kind.UNION_TYPE_DEFINITION,
        description: description,
        name: name,
        directives: directives,
        types: types,
        loc: this.loc(start)
      };
    }
    /**
     * UnionMemberTypes :
     *   - = `|`? NamedType
     *   - UnionMemberTypes | NamedType
     */
    ;

    _proto.parseUnionMemberTypes = function parseUnionMemberTypes() {
      return this.expectOptionalToken(_tokenKind$2.TokenKind.EQUALS) ? this.delimitedMany(_tokenKind$2.TokenKind.PIPE, this.parseNamedType) : [];
    }
    /**
     * EnumTypeDefinition :
     *   - Description? enum Name Directives[Const]? EnumValuesDefinition?
     */
    ;

    _proto.parseEnumTypeDefinition = function parseEnumTypeDefinition() {
      var start = this._lexer.token;
      var description = this.parseDescription();
      this.expectKeyword('enum');
      var name = this.parseName();
      var directives = this.parseDirectives(true);
      var values = this.parseEnumValuesDefinition();
      return {
        kind: _kinds$o.Kind.ENUM_TYPE_DEFINITION,
        description: description,
        name: name,
        directives: directives,
        values: values,
        loc: this.loc(start)
      };
    }
    /**
     * EnumValuesDefinition : { EnumValueDefinition+ }
     */
    ;

    _proto.parseEnumValuesDefinition = function parseEnumValuesDefinition() {
      return this.optionalMany(_tokenKind$2.TokenKind.BRACE_L, this.parseEnumValueDefinition, _tokenKind$2.TokenKind.BRACE_R);
    }
    /**
     * EnumValueDefinition : Description? EnumValue Directives[Const]?
     *
     * EnumValue : Name
     */
    ;

    _proto.parseEnumValueDefinition = function parseEnumValueDefinition() {
      var start = this._lexer.token;
      var description = this.parseDescription();
      var name = this.parseName();
      var directives = this.parseDirectives(true);
      return {
        kind: _kinds$o.Kind.ENUM_VALUE_DEFINITION,
        description: description,
        name: name,
        directives: directives,
        loc: this.loc(start)
      };
    }
    /**
     * InputObjectTypeDefinition :
     *   - Description? input Name Directives[Const]? InputFieldsDefinition?
     */
    ;

    _proto.parseInputObjectTypeDefinition = function parseInputObjectTypeDefinition() {
      var start = this._lexer.token;
      var description = this.parseDescription();
      this.expectKeyword('input');
      var name = this.parseName();
      var directives = this.parseDirectives(true);
      var fields = this.parseInputFieldsDefinition();
      return {
        kind: _kinds$o.Kind.INPUT_OBJECT_TYPE_DEFINITION,
        description: description,
        name: name,
        directives: directives,
        fields: fields,
        loc: this.loc(start)
      };
    }
    /**
     * InputFieldsDefinition : { InputValueDefinition+ }
     */
    ;

    _proto.parseInputFieldsDefinition = function parseInputFieldsDefinition() {
      return this.optionalMany(_tokenKind$2.TokenKind.BRACE_L, this.parseInputValueDef, _tokenKind$2.TokenKind.BRACE_R);
    }
    /**
     * TypeSystemExtension :
     *   - SchemaExtension
     *   - TypeExtension
     *
     * TypeExtension :
     *   - ScalarTypeExtension
     *   - ObjectTypeExtension
     *   - InterfaceTypeExtension
     *   - UnionTypeExtension
     *   - EnumTypeExtension
     *   - InputObjectTypeDefinition
     */
    ;

    _proto.parseTypeSystemExtension = function parseTypeSystemExtension() {
      var keywordToken = this._lexer.lookahead();

      if (keywordToken.kind === _tokenKind$2.TokenKind.NAME) {
        switch (keywordToken.value) {
          case 'schema':
            return this.parseSchemaExtension();

          case 'scalar':
            return this.parseScalarTypeExtension();

          case 'type':
            return this.parseObjectTypeExtension();

          case 'interface':
            return this.parseInterfaceTypeExtension();

          case 'union':
            return this.parseUnionTypeExtension();

          case 'enum':
            return this.parseEnumTypeExtension();

          case 'input':
            return this.parseInputObjectTypeExtension();
        }
      }

      throw this.unexpected(keywordToken);
    }
    /**
     * SchemaExtension :
     *  - extend schema Directives[Const]? { OperationTypeDefinition+ }
     *  - extend schema Directives[Const]
     */
    ;

    _proto.parseSchemaExtension = function parseSchemaExtension() {
      var start = this._lexer.token;
      this.expectKeyword('extend');
      this.expectKeyword('schema');
      var directives = this.parseDirectives(true);
      var operationTypes = this.optionalMany(_tokenKind$2.TokenKind.BRACE_L, this.parseOperationTypeDefinition, _tokenKind$2.TokenKind.BRACE_R);

      if (directives.length === 0 && operationTypes.length === 0) {
        throw this.unexpected();
      }

      return {
        kind: _kinds$o.Kind.SCHEMA_EXTENSION,
        directives: directives,
        operationTypes: operationTypes,
        loc: this.loc(start)
      };
    }
    /**
     * ScalarTypeExtension :
     *   - extend scalar Name Directives[Const]
     */
    ;

    _proto.parseScalarTypeExtension = function parseScalarTypeExtension() {
      var start = this._lexer.token;
      this.expectKeyword('extend');
      this.expectKeyword('scalar');
      var name = this.parseName();
      var directives = this.parseDirectives(true);

      if (directives.length === 0) {
        throw this.unexpected();
      }

      return {
        kind: _kinds$o.Kind.SCALAR_TYPE_EXTENSION,
        name: name,
        directives: directives,
        loc: this.loc(start)
      };
    }
    /**
     * ObjectTypeExtension :
     *  - extend type Name ImplementsInterfaces? Directives[Const]? FieldsDefinition
     *  - extend type Name ImplementsInterfaces? Directives[Const]
     *  - extend type Name ImplementsInterfaces
     */
    ;

    _proto.parseObjectTypeExtension = function parseObjectTypeExtension() {
      var start = this._lexer.token;
      this.expectKeyword('extend');
      this.expectKeyword('type');
      var name = this.parseName();
      var interfaces = this.parseImplementsInterfaces();
      var directives = this.parseDirectives(true);
      var fields = this.parseFieldsDefinition();

      if (interfaces.length === 0 && directives.length === 0 && fields.length === 0) {
        throw this.unexpected();
      }

      return {
        kind: _kinds$o.Kind.OBJECT_TYPE_EXTENSION,
        name: name,
        interfaces: interfaces,
        directives: directives,
        fields: fields,
        loc: this.loc(start)
      };
    }
    /**
     * InterfaceTypeExtension :
     *  - extend interface Name ImplementsInterfaces? Directives[Const]? FieldsDefinition
     *  - extend interface Name ImplementsInterfaces? Directives[Const]
     *  - extend interface Name ImplementsInterfaces
     */
    ;

    _proto.parseInterfaceTypeExtension = function parseInterfaceTypeExtension() {
      var start = this._lexer.token;
      this.expectKeyword('extend');
      this.expectKeyword('interface');
      var name = this.parseName();
      var interfaces = this.parseImplementsInterfaces();
      var directives = this.parseDirectives(true);
      var fields = this.parseFieldsDefinition();

      if (interfaces.length === 0 && directives.length === 0 && fields.length === 0) {
        throw this.unexpected();
      }

      return {
        kind: _kinds$o.Kind.INTERFACE_TYPE_EXTENSION,
        name: name,
        interfaces: interfaces,
        directives: directives,
        fields: fields,
        loc: this.loc(start)
      };
    }
    /**
     * UnionTypeExtension :
     *   - extend union Name Directives[Const]? UnionMemberTypes
     *   - extend union Name Directives[Const]
     */
    ;

    _proto.parseUnionTypeExtension = function parseUnionTypeExtension() {
      var start = this._lexer.token;
      this.expectKeyword('extend');
      this.expectKeyword('union');
      var name = this.parseName();
      var directives = this.parseDirectives(true);
      var types = this.parseUnionMemberTypes();

      if (directives.length === 0 && types.length === 0) {
        throw this.unexpected();
      }

      return {
        kind: _kinds$o.Kind.UNION_TYPE_EXTENSION,
        name: name,
        directives: directives,
        types: types,
        loc: this.loc(start)
      };
    }
    /**
     * EnumTypeExtension :
     *   - extend enum Name Directives[Const]? EnumValuesDefinition
     *   - extend enum Name Directives[Const]
     */
    ;

    _proto.parseEnumTypeExtension = function parseEnumTypeExtension() {
      var start = this._lexer.token;
      this.expectKeyword('extend');
      this.expectKeyword('enum');
      var name = this.parseName();
      var directives = this.parseDirectives(true);
      var values = this.parseEnumValuesDefinition();

      if (directives.length === 0 && values.length === 0) {
        throw this.unexpected();
      }

      return {
        kind: _kinds$o.Kind.ENUM_TYPE_EXTENSION,
        name: name,
        directives: directives,
        values: values,
        loc: this.loc(start)
      };
    }
    /**
     * InputObjectTypeExtension :
     *   - extend input Name Directives[Const]? InputFieldsDefinition
     *   - extend input Name Directives[Const]
     */
    ;

    _proto.parseInputObjectTypeExtension = function parseInputObjectTypeExtension() {
      var start = this._lexer.token;
      this.expectKeyword('extend');
      this.expectKeyword('input');
      var name = this.parseName();
      var directives = this.parseDirectives(true);
      var fields = this.parseInputFieldsDefinition();

      if (directives.length === 0 && fields.length === 0) {
        throw this.unexpected();
      }

      return {
        kind: _kinds$o.Kind.INPUT_OBJECT_TYPE_EXTENSION,
        name: name,
        directives: directives,
        fields: fields,
        loc: this.loc(start)
      };
    }
    /**
     * DirectiveDefinition :
     *   - Description? directive @ Name ArgumentsDefinition? `repeatable`? on DirectiveLocations
     */
    ;

    _proto.parseDirectiveDefinition = function parseDirectiveDefinition() {
      var start = this._lexer.token;
      var description = this.parseDescription();
      this.expectKeyword('directive');
      this.expectToken(_tokenKind$2.TokenKind.AT);
      var name = this.parseName();
      var args = this.parseArgumentDefs();
      var repeatable = this.expectOptionalKeyword('repeatable');
      this.expectKeyword('on');
      var locations = this.parseDirectiveLocations();
      return {
        kind: _kinds$o.Kind.DIRECTIVE_DEFINITION,
        description: description,
        name: name,
        arguments: args,
        repeatable: repeatable,
        locations: locations,
        loc: this.loc(start)
      };
    }
    /**
     * DirectiveLocations :
     *   - `|`? DirectiveLocation
     *   - DirectiveLocations | DirectiveLocation
     */
    ;

    _proto.parseDirectiveLocations = function parseDirectiveLocations() {
      return this.delimitedMany(_tokenKind$2.TokenKind.PIPE, this.parseDirectiveLocation);
    }
    /*
     * DirectiveLocation :
     *   - ExecutableDirectiveLocation
     *   - TypeSystemDirectiveLocation
     *
     * ExecutableDirectiveLocation : one of
     *   `QUERY`
     *   `MUTATION`
     *   `SUBSCRIPTION`
     *   `FIELD`
     *   `FRAGMENT_DEFINITION`
     *   `FRAGMENT_SPREAD`
     *   `INLINE_FRAGMENT`
     *
     * TypeSystemDirectiveLocation : one of
     *   `SCHEMA`
     *   `SCALAR`
     *   `OBJECT`
     *   `FIELD_DEFINITION`
     *   `ARGUMENT_DEFINITION`
     *   `INTERFACE`
     *   `UNION`
     *   `ENUM`
     *   `ENUM_VALUE`
     *   `INPUT_OBJECT`
     *   `INPUT_FIELD_DEFINITION`
     */
    ;

    _proto.parseDirectiveLocation = function parseDirectiveLocation() {
      var start = this._lexer.token;
      var name = this.parseName();

      if (_directiveLocation$3.DirectiveLocation[name.value] !== undefined) {
        return name;
      }

      throw this.unexpected(start);
    } // Core parsing utility functions

    /**
     * Returns a location object, used to identify the place in the source that created a given parsed object.
     */
    ;

    _proto.loc = function loc(startToken) {
      var _this$_options4;

      if (((_this$_options4 = this._options) === null || _this$_options4 === void 0 ? void 0 : _this$_options4.noLocation) !== true) {
        return new _ast$2.Location(startToken, this._lexer.lastToken, this._lexer.source);
      }
    }
    /**
     * Determines if the next token is of a given kind
     */
    ;

    _proto.peek = function peek(kind) {
      return this._lexer.token.kind === kind;
    }
    /**
     * If the next token is of the given kind, return that token after advancing the lexer.
     * Otherwise, do not change the parser state and throw an error.
     */
    ;

    _proto.expectToken = function expectToken(kind) {
      var token = this._lexer.token;

      if (token.kind === kind) {
        this._lexer.advance();

        return token;
      }

      throw (0, _syntaxError.syntaxError)(this._lexer.source, token.start, "Expected ".concat(getTokenKindDesc(kind), ", found ").concat(getTokenDesc(token), "."));
    }
    /**
     * If the next token is of the given kind, return that token after advancing the lexer.
     * Otherwise, do not change the parser state and return undefined.
     */
    ;

    _proto.expectOptionalToken = function expectOptionalToken(kind) {
      var token = this._lexer.token;

      if (token.kind === kind) {
        this._lexer.advance();

        return token;
      }

      return undefined;
    }
    /**
     * If the next token is a given keyword, advance the lexer.
     * Otherwise, do not change the parser state and throw an error.
     */
    ;

    _proto.expectKeyword = function expectKeyword(value) {
      var token = this._lexer.token;

      if (token.kind === _tokenKind$2.TokenKind.NAME && token.value === value) {
        this._lexer.advance();
      } else {
        throw (0, _syntaxError.syntaxError)(this._lexer.source, token.start, "Expected \"".concat(value, "\", found ").concat(getTokenDesc(token), "."));
      }
    }
    /**
     * If the next token is a given keyword, return "true" after advancing the lexer.
     * Otherwise, do not change the parser state and return "false".
     */
    ;

    _proto.expectOptionalKeyword = function expectOptionalKeyword(value) {
      var token = this._lexer.token;

      if (token.kind === _tokenKind$2.TokenKind.NAME && token.value === value) {
        this._lexer.advance();

        return true;
      }

      return false;
    }
    /**
     * Helper function for creating an error when an unexpected lexed token is encountered.
     */
    ;

    _proto.unexpected = function unexpected(atToken) {
      var token = atToken !== null && atToken !== void 0 ? atToken : this._lexer.token;
      return (0, _syntaxError.syntaxError)(this._lexer.source, token.start, "Unexpected ".concat(getTokenDesc(token), "."));
    }
    /**
     * Returns a possibly empty list of parse nodes, determined by the parseFn.
     * This list begins with a lex token of openKind and ends with a lex token of closeKind.
     * Advances the parser to the next lex token after the closing token.
     */
    ;

    _proto.any = function any(openKind, parseFn, closeKind) {
      this.expectToken(openKind);
      var nodes = [];

      while (!this.expectOptionalToken(closeKind)) {
        nodes.push(parseFn.call(this));
      }

      return nodes;
    }
    /**
     * Returns a list of parse nodes, determined by the parseFn.
     * It can be empty only if open token is missing otherwise it will always return non-empty list
     * that begins with a lex token of openKind and ends with a lex token of closeKind.
     * Advances the parser to the next lex token after the closing token.
     */
    ;

    _proto.optionalMany = function optionalMany(openKind, parseFn, closeKind) {
      if (this.expectOptionalToken(openKind)) {
        var nodes = [];

        do {
          nodes.push(parseFn.call(this));
        } while (!this.expectOptionalToken(closeKind));

        return nodes;
      }

      return [];
    }
    /**
     * Returns a non-empty list of parse nodes, determined by the parseFn.
     * This list begins with a lex token of openKind and ends with a lex token of closeKind.
     * Advances the parser to the next lex token after the closing token.
     */
    ;

    _proto.many = function many(openKind, parseFn, closeKind) {
      this.expectToken(openKind);
      var nodes = [];

      do {
        nodes.push(parseFn.call(this));
      } while (!this.expectOptionalToken(closeKind));

      return nodes;
    }
    /**
     * Returns a non-empty list of parse nodes, determined by the parseFn.
     * This list may begin with a lex token of delimiterKind followed by items separated by lex tokens of tokenKind.
     * Advances the parser to the next lex token after last item in the list.
     */
    ;

    _proto.delimitedMany = function delimitedMany(delimiterKind, parseFn) {
      this.expectOptionalToken(delimiterKind);
      var nodes = [];

      do {
        nodes.push(parseFn.call(this));
      } while (this.expectOptionalToken(delimiterKind));

      return nodes;
    };

    return Parser;
  }();
  /**
   * A helper function to describe a token as a string for debugging.
   */


  parser.Parser = Parser;

  function getTokenDesc(token) {
    var value = token.value;
    return getTokenKindDesc(token.kind) + (value != null ? " \"".concat(value, "\"") : '');
  }
  /**
   * A helper function to describe a token kind as a string for debugging.
   */


  function getTokenKindDesc(kind) {
    return (0, _lexer$1.isPunctuatorTokenKind)(kind) ? "\"".concat(kind, "\"") : kind;
  }

  var validate$2 = {};

  var visitor = {};

  Object.defineProperty(visitor, "__esModule", {
    value: true
  });
  visitor.visit = visit;
  visitor.visitInParallel = visitInParallel;
  visitor.getVisitFn = getVisitFn;
  visitor.BREAK = visitor.QueryDocumentKeys = void 0;

  var _inspect$s = _interopRequireDefault$H(inspect$1);

  var _ast$1 = ast;

  function _interopRequireDefault$H(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  var QueryDocumentKeys = {
    Name: [],
    Document: ['definitions'],
    OperationDefinition: ['name', 'variableDefinitions', 'directives', 'selectionSet'],
    VariableDefinition: ['variable', 'type', 'defaultValue', 'directives'],
    Variable: ['name'],
    SelectionSet: ['selections'],
    Field: ['alias', 'name', 'arguments', 'directives', 'selectionSet'],
    Argument: ['name', 'value'],
    FragmentSpread: ['name', 'directives'],
    InlineFragment: ['typeCondition', 'directives', 'selectionSet'],
    FragmentDefinition: ['name', // Note: fragment variable definitions are experimental and may be changed
    // or removed in the future.
    'variableDefinitions', 'typeCondition', 'directives', 'selectionSet'],
    IntValue: [],
    FloatValue: [],
    StringValue: [],
    BooleanValue: [],
    NullValue: [],
    EnumValue: [],
    ListValue: ['values'],
    ObjectValue: ['fields'],
    ObjectField: ['name', 'value'],
    Directive: ['name', 'arguments'],
    NamedType: ['name'],
    ListType: ['type'],
    NonNullType: ['type'],
    SchemaDefinition: ['description', 'directives', 'operationTypes'],
    OperationTypeDefinition: ['type'],
    ScalarTypeDefinition: ['description', 'name', 'directives'],
    ObjectTypeDefinition: ['description', 'name', 'interfaces', 'directives', 'fields'],
    FieldDefinition: ['description', 'name', 'arguments', 'type', 'directives'],
    InputValueDefinition: ['description', 'name', 'type', 'defaultValue', 'directives'],
    InterfaceTypeDefinition: ['description', 'name', 'interfaces', 'directives', 'fields'],
    UnionTypeDefinition: ['description', 'name', 'directives', 'types'],
    EnumTypeDefinition: ['description', 'name', 'directives', 'values'],
    EnumValueDefinition: ['description', 'name', 'directives'],
    InputObjectTypeDefinition: ['description', 'name', 'directives', 'fields'],
    DirectiveDefinition: ['description', 'name', 'arguments', 'locations'],
    SchemaExtension: ['directives', 'operationTypes'],
    ScalarTypeExtension: ['name', 'directives'],
    ObjectTypeExtension: ['name', 'interfaces', 'directives', 'fields'],
    InterfaceTypeExtension: ['name', 'interfaces', 'directives', 'fields'],
    UnionTypeExtension: ['name', 'directives', 'types'],
    EnumTypeExtension: ['name', 'directives', 'values'],
    InputObjectTypeExtension: ['name', 'directives', 'fields']
  };
  visitor.QueryDocumentKeys = QueryDocumentKeys;
  var BREAK = Object.freeze({});
  /**
   * visit() will walk through an AST using a depth-first traversal, calling
   * the visitor's enter function at each node in the traversal, and calling the
   * leave function after visiting that node and all of its child nodes.
   *
   * By returning different values from the enter and leave functions, the
   * behavior of the visitor can be altered, including skipping over a sub-tree of
   * the AST (by returning false), editing the AST by returning a value or null
   * to remove the value, or to stop the whole traversal by returning BREAK.
   *
   * When using visit() to edit an AST, the original AST will not be modified, and
   * a new version of the AST with the changes applied will be returned from the
   * visit function.
   *
   *     const editedAST = visit(ast, {
   *       enter(node, key, parent, path, ancestors) {
   *         // @return
   *         //   undefined: no action
   *         //   false: skip visiting this node
   *         //   visitor.BREAK: stop visiting altogether
   *         //   null: delete this node
   *         //   any value: replace this node with the returned value
   *       },
   *       leave(node, key, parent, path, ancestors) {
   *         // @return
   *         //   undefined: no action
   *         //   false: no action
   *         //   visitor.BREAK: stop visiting altogether
   *         //   null: delete this node
   *         //   any value: replace this node with the returned value
   *       }
   *     });
   *
   * Alternatively to providing enter() and leave() functions, a visitor can
   * instead provide functions named the same as the kinds of AST nodes, or
   * enter/leave visitors at a named key, leading to four permutations of the
   * visitor API:
   *
   * 1) Named visitors triggered when entering a node of a specific kind.
   *
   *     visit(ast, {
   *       Kind(node) {
   *         // enter the "Kind" node
   *       }
   *     })
   *
   * 2) Named visitors that trigger upon entering and leaving a node of
   *    a specific kind.
   *
   *     visit(ast, {
   *       Kind: {
   *         enter(node) {
   *           // enter the "Kind" node
   *         }
   *         leave(node) {
   *           // leave the "Kind" node
   *         }
   *       }
   *     })
   *
   * 3) Generic visitors that trigger upon entering and leaving any node.
   *
   *     visit(ast, {
   *       enter(node) {
   *         // enter any node
   *       },
   *       leave(node) {
   *         // leave any node
   *       }
   *     })
   *
   * 4) Parallel visitors for entering and leaving nodes of a specific kind.
   *
   *     visit(ast, {
   *       enter: {
   *         Kind(node) {
   *           // enter the "Kind" node
   *         }
   *       },
   *       leave: {
   *         Kind(node) {
   *           // leave the "Kind" node
   *         }
   *       }
   *     })
   */

  visitor.BREAK = BREAK;

  function visit(root, visitor) {
    var visitorKeys = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : QueryDocumentKeys;

    /* eslint-disable no-undef-init */
    var stack = undefined;
    var inArray = Array.isArray(root);
    var keys = [root];
    var index = -1;
    var edits = [];
    var node = undefined;
    var key = undefined;
    var parent = undefined;
    var path = [];
    var ancestors = [];
    var newRoot = root;
    /* eslint-enable no-undef-init */

    do {
      index++;
      var isLeaving = index === keys.length;
      var isEdited = isLeaving && edits.length !== 0;

      if (isLeaving) {
        key = ancestors.length === 0 ? undefined : path[path.length - 1];
        node = parent;
        parent = ancestors.pop();

        if (isEdited) {
          if (inArray) {
            node = node.slice();
          } else {
            var clone = {};

            for (var _i2 = 0, _Object$keys2 = Object.keys(node); _i2 < _Object$keys2.length; _i2++) {
              var k = _Object$keys2[_i2];
              clone[k] = node[k];
            }

            node = clone;
          }

          var editOffset = 0;

          for (var ii = 0; ii < edits.length; ii++) {
            var editKey = edits[ii][0];
            var editValue = edits[ii][1];

            if (inArray) {
              editKey -= editOffset;
            }

            if (inArray && editValue === null) {
              node.splice(editKey, 1);
              editOffset++;
            } else {
              node[editKey] = editValue;
            }
          }
        }

        index = stack.index;
        keys = stack.keys;
        edits = stack.edits;
        inArray = stack.inArray;
        stack = stack.prev;
      } else {
        key = parent ? inArray ? index : keys[index] : undefined;
        node = parent ? parent[key] : newRoot;

        if (node === null || node === undefined) {
          continue;
        }

        if (parent) {
          path.push(key);
        }
      }

      var result = void 0;

      if (!Array.isArray(node)) {
        if (!(0, _ast$1.isNode)(node)) {
          throw new Error("Invalid AST Node: ".concat((0, _inspect$s.default)(node), "."));
        }

        var visitFn = getVisitFn(visitor, node.kind, isLeaving);

        if (visitFn) {
          result = visitFn.call(visitor, node, key, parent, path, ancestors);

          if (result === BREAK) {
            break;
          }

          if (result === false) {
            if (!isLeaving) {
              path.pop();
              continue;
            }
          } else if (result !== undefined) {
            edits.push([key, result]);

            if (!isLeaving) {
              if ((0, _ast$1.isNode)(result)) {
                node = result;
              } else {
                path.pop();
                continue;
              }
            }
          }
        }
      }

      if (result === undefined && isEdited) {
        edits.push([key, node]);
      }

      if (isLeaving) {
        path.pop();
      } else {
        var _visitorKeys$node$kin;

        stack = {
          inArray: inArray,
          index: index,
          keys: keys,
          edits: edits,
          prev: stack
        };
        inArray = Array.isArray(node);
        keys = inArray ? node : (_visitorKeys$node$kin = visitorKeys[node.kind]) !== null && _visitorKeys$node$kin !== void 0 ? _visitorKeys$node$kin : [];
        index = -1;
        edits = [];

        if (parent) {
          ancestors.push(parent);
        }

        parent = node;
      }
    } while (stack !== undefined);

    if (edits.length !== 0) {
      newRoot = edits[edits.length - 1][1];
    }

    return newRoot;
  }
  /**
   * Creates a new visitor instance which delegates to many visitors to run in
   * parallel. Each visitor will be visited for each node before moving on.
   *
   * If a prior visitor edits a node, no following visitors will see that node.
   */


  function visitInParallel(visitors) {
    var skipping = new Array(visitors.length);
    return {
      enter: function enter(node) {
        for (var i = 0; i < visitors.length; i++) {
          if (skipping[i] == null) {
            var fn = getVisitFn(visitors[i], node.kind,
            /* isLeaving */
            false);

            if (fn) {
              var result = fn.apply(visitors[i], arguments);

              if (result === false) {
                skipping[i] = node;
              } else if (result === BREAK) {
                skipping[i] = BREAK;
              } else if (result !== undefined) {
                return result;
              }
            }
          }
        }
      },
      leave: function leave(node) {
        for (var i = 0; i < visitors.length; i++) {
          if (skipping[i] == null) {
            var fn = getVisitFn(visitors[i], node.kind,
            /* isLeaving */
            true);

            if (fn) {
              var result = fn.apply(visitors[i], arguments);

              if (result === BREAK) {
                skipping[i] = BREAK;
              } else if (result !== undefined && result !== false) {
                return result;
              }
            }
          } else if (skipping[i] === node) {
            skipping[i] = null;
          }
        }
      }
    };
  }
  /**
   * Given a visitor instance, if it is leaving or not, and a node kind, return
   * the function the visitor runtime should call.
   */


  function getVisitFn(visitor, kind, isLeaving) {
    var kindVisitor = visitor[kind];

    if (kindVisitor) {
      if (!isLeaving && typeof kindVisitor === 'function') {
        // { Kind() {} }
        return kindVisitor;
      }

      var kindSpecificVisitor = isLeaving ? kindVisitor.leave : kindVisitor.enter;

      if (typeof kindSpecificVisitor === 'function') {
        // { Kind: { enter() {}, leave() {} } }
        return kindSpecificVisitor;
      }
    } else {
      var specificVisitor = isLeaving ? visitor.leave : visitor.enter;

      if (specificVisitor) {
        if (typeof specificVisitor === 'function') {
          // { enter() {}, leave() {} }
          return specificVisitor;
        }

        var specificKindVisitor = specificVisitor[kind];

        if (typeof specificKindVisitor === 'function') {
          // { enter: { Kind() {} }, leave: { Kind() {} } }
          return specificKindVisitor;
        }
      }
    }
  }

  var validate$1 = {};

  var find$1 = {};

  Object.defineProperty(find$1, "__esModule", {
    value: true
  });
  find$1.default = void 0;

  /* eslint-disable no-redeclare */
  // $FlowFixMe[name-already-bound]
  var find = Array.prototype.find ? function (list, predicate) {
    return Array.prototype.find.call(list, predicate);
  } : function (list, predicate) {
    for (var _i2 = 0; _i2 < list.length; _i2++) {
      var value = list[_i2];

      if (predicate(value)) {
        return value;
      }
    }
  };
  var _default$5 = find;
  find$1.default = _default$5;

  var objectValues$1 = {};

  Object.defineProperty(objectValues$1, "__esModule", {
    value: true
  });
  objectValues$1.default = void 0;

  /* eslint-disable no-redeclare */
  // $FlowFixMe[name-already-bound] workaround for: https://github.com/facebook/flow/issues/4441
  var objectValues = Object.values || function (obj) {
    return Object.keys(obj).map(function (key) {
      return obj[key];
    });
  };

  var _default$4 = objectValues;
  objectValues$1.default = _default$4;

  var locatedError$1 = {};

  Object.defineProperty(locatedError$1, "__esModule", {
    value: true
  });
  locatedError$1.locatedError = locatedError;

  var _inspect$r = _interopRequireDefault$G(inspect$1);

  var _GraphQLError$J = GraphQLError$1;

  function _interopRequireDefault$G(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  /**
   * Given an arbitrary value, presumably thrown while attempting to execute a
   * GraphQL operation, produce a new GraphQLError aware of the location in the
   * document responsible for the original Error.
   */
  function locatedError(rawOriginalError, nodes, path) {
    var _nodes;

    // Sometimes a non-error is thrown, wrap it as an Error instance to ensure a consistent Error interface.
    var originalError = rawOriginalError instanceof Error ? rawOriginalError : new Error('Unexpected error value: ' + (0, _inspect$r.default)(rawOriginalError)); // Note: this uses a brand-check to support GraphQL errors originating from other contexts.

    if (Array.isArray(originalError.path)) {
      return originalError;
    }

    return new _GraphQLError$J.GraphQLError(originalError.message, (_nodes = originalError.nodes) !== null && _nodes !== void 0 ? _nodes : nodes, originalError.source, originalError.positions, path, originalError);
  }

  var assertValidName$1 = {};

  Object.defineProperty(assertValidName$1, "__esModule", {
    value: true
  });
  assertValidName$1.assertValidName = assertValidName;
  assertValidName$1.isValidNameError = isValidNameError;

  var _devAssert$9 = _interopRequireDefault$F(devAssert$1);

  var _GraphQLError$I = GraphQLError$1;

  function _interopRequireDefault$F(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  var NAME_RX = /^[_a-zA-Z][_a-zA-Z0-9]*$/;
  /**
   * Upholds the spec rules about naming.
   */

  function assertValidName(name) {
    var error = isValidNameError(name);

    if (error) {
      throw error;
    }

    return name;
  }
  /**
   * Returns an Error if a name is invalid.
   */


  function isValidNameError(name) {
    typeof name === 'string' || (0, _devAssert$9.default)(0, 'Expected name to be a string.');

    if (name.length > 1 && name[0] === '_' && name[1] === '_') {
      return new _GraphQLError$I.GraphQLError("Name \"".concat(name, "\" must not begin with \"__\", which is reserved by GraphQL introspection."));
    }

    if (!NAME_RX.test(name)) {
      return new _GraphQLError$I.GraphQLError("Names must match /^[_a-zA-Z][_a-zA-Z0-9]*$/ but \"".concat(name, "\" does not."));
    }
  }

  var typeComparators = {};

  var definition = {};

  var objectEntries$1 = {};

  Object.defineProperty(objectEntries$1, "__esModule", {
    value: true
  });
  objectEntries$1.default = void 0;

  /* eslint-disable no-redeclare */
  // $FlowFixMe[name-already-bound] workaround for: https://github.com/facebook/flow/issues/4441
  var objectEntries = Object.entries || function (obj) {
    return Object.keys(obj).map(function (key) {
      return [key, obj[key]];
    });
  };

  var _default$3 = objectEntries;
  objectEntries$1.default = _default$3;

  var keyMap$1 = {};

  Object.defineProperty(keyMap$1, "__esModule", {
    value: true
  });
  keyMap$1.default = keyMap;

  /**
   * Creates a keyed JS object from an array, given a function to produce the keys
   * for each value in the array.
   *
   * This provides a convenient lookup for the array items if the key function
   * produces unique results.
   *
   *     const phoneBook = [
   *       { name: 'Jon', num: '555-1234' },
   *       { name: 'Jenny', num: '867-5309' }
   *     ]
   *
   *     // { Jon: { name: 'Jon', num: '555-1234' },
   *     //   Jenny: { name: 'Jenny', num: '867-5309' } }
   *     const entriesByName = keyMap(
   *       phoneBook,
   *       entry => entry.name
   *     )
   *
   *     // { name: 'Jenny', num: '857-6309' }
   *     const jennyEntry = entriesByName['Jenny']
   *
   */
  function keyMap(list, keyFn) {
    return list.reduce(function (map, item) {
      map[keyFn(item)] = item;
      return map;
    }, Object.create(null));
  }

  var mapValue$1 = {};

  Object.defineProperty(mapValue$1, "__esModule", {
    value: true
  });
  mapValue$1.default = mapValue;

  var _objectEntries3$2 = _interopRequireDefault$E(objectEntries$1);

  function _interopRequireDefault$E(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  /**
   * Creates an object map with the same keys as `map` and values generated by
   * running each value of `map` thru `fn`.
   */
  function mapValue(map, fn) {
    var result = Object.create(null);

    for (var _i2 = 0, _objectEntries2 = (0, _objectEntries3$2.default)(map); _i2 < _objectEntries2.length; _i2++) {
      var _ref2 = _objectEntries2[_i2];
      var _key = _ref2[0];
      var _value = _ref2[1];
      result[_key] = fn(_value, _key);
    }

    return result;
  }

  var toObjMap$1 = {};

  Object.defineProperty(toObjMap$1, "__esModule", {
    value: true
  });
  toObjMap$1.default = toObjMap;

  var _objectEntries3$1 = _interopRequireDefault$D(objectEntries$1);

  function _interopRequireDefault$D(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function toObjMap(obj) {
    /* eslint-enable no-redeclare */
    if (Object.getPrototypeOf(obj) === null) {
      return obj;
    }

    var map = Object.create(null);

    for (var _i2 = 0, _objectEntries2 = (0, _objectEntries3$1.default)(obj); _i2 < _objectEntries2.length; _i2++) {
      var _ref2 = _objectEntries2[_i2];
      var key = _ref2[0];
      var value = _ref2[1];
      map[key] = value;
    }

    return map;
  }

  var keyValMap$1 = {};

  Object.defineProperty(keyValMap$1, "__esModule", {
    value: true
  });
  keyValMap$1.default = keyValMap;

  /**
   * Creates a keyed JS object from an array, given a function to produce the keys
   * and a function to produce the values from each item in the array.
   *
   *     const phoneBook = [
   *       { name: 'Jon', num: '555-1234' },
   *       { name: 'Jenny', num: '867-5309' }
   *     ]
   *
   *     // { Jon: '555-1234', Jenny: '867-5309' }
   *     const phonesByName = keyValMap(
   *       phoneBook,
   *       entry => entry.name,
   *       entry => entry.num
   *     )
   *
   */
  function keyValMap(list, keyFn, valFn) {
    return list.reduce(function (map, item) {
      map[keyFn(item)] = valFn(item);
      return map;
    }, Object.create(null));
  }

  var didYouMean$1 = {};

  Object.defineProperty(didYouMean$1, "__esModule", {
    value: true
  });
  didYouMean$1.default = didYouMean;
  var MAX_SUGGESTIONS = 5;
  /**
   * Given [ A, B, C ] return ' Did you mean A, B, or C?'.
   */

  // eslint-disable-next-line no-redeclare
  function didYouMean(firstArg, secondArg) {
    var _ref = typeof firstArg === 'string' ? [firstArg, secondArg] : [undefined, firstArg],
        subMessage = _ref[0],
        suggestionsArg = _ref[1];

    var message = ' Did you mean ';

    if (subMessage) {
      message += subMessage + ' ';
    }

    var suggestions = suggestionsArg.map(function (x) {
      return "\"".concat(x, "\"");
    });

    switch (suggestions.length) {
      case 0:
        return '';

      case 1:
        return message + suggestions[0] + '?';

      case 2:
        return message + suggestions[0] + ' or ' + suggestions[1] + '?';
    }

    var selected = suggestions.slice(0, MAX_SUGGESTIONS);
    var lastItem = selected.pop();
    return message + selected.join(', ') + ', or ' + lastItem + '?';
  }

  var identityFunc$1 = {};

  Object.defineProperty(identityFunc$1, "__esModule", {
    value: true
  });
  identityFunc$1.default = identityFunc;

  /**
   * Returns the first argument it receives.
   */
  function identityFunc(x) {
    return x;
  }

  var suggestionList$1 = {};

  var naturalCompare$1 = {};

  Object.defineProperty(naturalCompare$1, "__esModule", {
    value: true
  });
  naturalCompare$1.default = naturalCompare;

  /**
   * Returns a number indicating whether a reference string comes before, or after,
   * or is the same as the given string in natural sort order.
   *
   * See: https://en.wikipedia.org/wiki/Natural_sort_order
   *
   */
  function naturalCompare(aStr, bStr) {
    var aIdx = 0;
    var bIdx = 0;

    while (aIdx < aStr.length && bIdx < bStr.length) {
      var aChar = aStr.charCodeAt(aIdx);
      var bChar = bStr.charCodeAt(bIdx);

      if (isDigit(aChar) && isDigit(bChar)) {
        var aNum = 0;

        do {
          ++aIdx;
          aNum = aNum * 10 + aChar - DIGIT_0;
          aChar = aStr.charCodeAt(aIdx);
        } while (isDigit(aChar) && aNum > 0);

        var bNum = 0;

        do {
          ++bIdx;
          bNum = bNum * 10 + bChar - DIGIT_0;
          bChar = bStr.charCodeAt(bIdx);
        } while (isDigit(bChar) && bNum > 0);

        if (aNum < bNum) {
          return -1;
        }

        if (aNum > bNum) {
          return 1;
        }
      } else {
        if (aChar < bChar) {
          return -1;
        }

        if (aChar > bChar) {
          return 1;
        }

        ++aIdx;
        ++bIdx;
      }
    }

    return aStr.length - bStr.length;
  }

  var DIGIT_0 = 48;
  var DIGIT_9 = 57;

  function isDigit(code) {
    return !isNaN(code) && DIGIT_0 <= code && code <= DIGIT_9;
  }

  Object.defineProperty(suggestionList$1, "__esModule", {
    value: true
  });
  suggestionList$1.default = suggestionList;

  var _naturalCompare$3 = _interopRequireDefault$C(naturalCompare$1);

  function _interopRequireDefault$C(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  /**
   * Given an invalid input string and a list of valid options, returns a filtered
   * list of valid options sorted based on their similarity with the input.
   */
  function suggestionList(input, options) {
    var optionsByDistance = Object.create(null);
    var lexicalDistance = new LexicalDistance(input);
    var threshold = Math.floor(input.length * 0.4) + 1;

    for (var _i2 = 0; _i2 < options.length; _i2++) {
      var option = options[_i2];
      var distance = lexicalDistance.measure(option, threshold);

      if (distance !== undefined) {
        optionsByDistance[option] = distance;
      }
    }

    return Object.keys(optionsByDistance).sort(function (a, b) {
      var distanceDiff = optionsByDistance[a] - optionsByDistance[b];
      return distanceDiff !== 0 ? distanceDiff : (0, _naturalCompare$3.default)(a, b);
    });
  }
  /**
   * Computes the lexical distance between strings A and B.
   *
   * The "distance" between two strings is given by counting the minimum number
   * of edits needed to transform string A into string B. An edit can be an
   * insertion, deletion, or substitution of a single character, or a swap of two
   * adjacent characters.
   *
   * Includes a custom alteration from Damerau-Levenshtein to treat case changes
   * as a single edit which helps identify mis-cased values with an edit distance
   * of 1.
   *
   * This distance can be useful for detecting typos in input or sorting
   */


  var LexicalDistance = /*#__PURE__*/function () {
    function LexicalDistance(input) {
      this._input = input;
      this._inputLowerCase = input.toLowerCase();
      this._inputArray = stringToArray(this._inputLowerCase);
      this._rows = [new Array(input.length + 1).fill(0), new Array(input.length + 1).fill(0), new Array(input.length + 1).fill(0)];
    }

    var _proto = LexicalDistance.prototype;

    _proto.measure = function measure(option, threshold) {
      if (this._input === option) {
        return 0;
      }

      var optionLowerCase = option.toLowerCase(); // Any case change counts as a single edit

      if (this._inputLowerCase === optionLowerCase) {
        return 1;
      }

      var a = stringToArray(optionLowerCase);
      var b = this._inputArray;

      if (a.length < b.length) {
        var tmp = a;
        a = b;
        b = tmp;
      }

      var aLength = a.length;
      var bLength = b.length;

      if (aLength - bLength > threshold) {
        return undefined;
      }

      var rows = this._rows;

      for (var j = 0; j <= bLength; j++) {
        rows[0][j] = j;
      }

      for (var i = 1; i <= aLength; i++) {
        var upRow = rows[(i - 1) % 3];
        var currentRow = rows[i % 3];
        var smallestCell = currentRow[0] = i;

        for (var _j = 1; _j <= bLength; _j++) {
          var cost = a[i - 1] === b[_j - 1] ? 0 : 1;
          var currentCell = Math.min(upRow[_j] + 1, // delete
          currentRow[_j - 1] + 1, // insert
          upRow[_j - 1] + cost // substitute
          );

          if (i > 1 && _j > 1 && a[i - 1] === b[_j - 2] && a[i - 2] === b[_j - 1]) {
            // transposition
            var doubleDiagonalCell = rows[(i - 2) % 3][_j - 2];
            currentCell = Math.min(currentCell, doubleDiagonalCell + 1);
          }

          if (currentCell < smallestCell) {
            smallestCell = currentCell;
          }

          currentRow[_j] = currentCell;
        } // Early exit, since distance can't go smaller than smallest element of the previous row.


        if (smallestCell > threshold) {
          return undefined;
        }
      }

      var distance = rows[aLength % 3][bLength];
      return distance <= threshold ? distance : undefined;
    };

    return LexicalDistance;
  }();

  function stringToArray(str) {
    var strLength = str.length;
    var array = new Array(strLength);

    for (var i = 0; i < strLength; ++i) {
      array[i] = str.charCodeAt(i);
    }

    return array;
  }

  var printer = {};

  Object.defineProperty(printer, "__esModule", {
    value: true
  });
  printer.print = print;

  var _visitor$5 = visitor;

  var _blockString$3 = blockString;

  /**
   * Converts an AST into a string, using one set of reasonable
   * formatting rules.
   */
  function print(ast) {
    return (0, _visitor$5.visit)(ast, {
      leave: printDocASTReducer
    });
  }

  var MAX_LINE_LENGTH = 80; // TODO: provide better type coverage in future

  var printDocASTReducer = {
    Name: function Name(node) {
      return node.value;
    },
    Variable: function Variable(node) {
      return '$' + node.name;
    },
    // Document
    Document: function Document(node) {
      return join(node.definitions, '\n\n') + '\n';
    },
    OperationDefinition: function OperationDefinition(node) {
      var op = node.operation;
      var name = node.name;
      var varDefs = wrap('(', join(node.variableDefinitions, ', '), ')');
      var directives = join(node.directives, ' ');
      var selectionSet = node.selectionSet; // Anonymous queries with no directives or variable definitions can use
      // the query short form.

      return !name && !directives && !varDefs && op === 'query' ? selectionSet : join([op, join([name, varDefs]), directives, selectionSet], ' ');
    },
    VariableDefinition: function VariableDefinition(_ref) {
      var variable = _ref.variable,
          type = _ref.type,
          defaultValue = _ref.defaultValue,
          directives = _ref.directives;
      return variable + ': ' + type + wrap(' = ', defaultValue) + wrap(' ', join(directives, ' '));
    },
    SelectionSet: function SelectionSet(_ref2) {
      var selections = _ref2.selections;
      return block(selections);
    },
    Field: function Field(_ref3) {
      var alias = _ref3.alias,
          name = _ref3.name,
          args = _ref3.arguments,
          directives = _ref3.directives,
          selectionSet = _ref3.selectionSet;
      var prefix = wrap('', alias, ': ') + name;
      var argsLine = prefix + wrap('(', join(args, ', '), ')');

      if (argsLine.length > MAX_LINE_LENGTH) {
        argsLine = prefix + wrap('(\n', indent(join(args, '\n')), '\n)');
      }

      return join([argsLine, join(directives, ' '), selectionSet], ' ');
    },
    Argument: function Argument(_ref4) {
      var name = _ref4.name,
          value = _ref4.value;
      return name + ': ' + value;
    },
    // Fragments
    FragmentSpread: function FragmentSpread(_ref5) {
      var name = _ref5.name,
          directives = _ref5.directives;
      return '...' + name + wrap(' ', join(directives, ' '));
    },
    InlineFragment: function InlineFragment(_ref6) {
      var typeCondition = _ref6.typeCondition,
          directives = _ref6.directives,
          selectionSet = _ref6.selectionSet;
      return join(['...', wrap('on ', typeCondition), join(directives, ' '), selectionSet], ' ');
    },
    FragmentDefinition: function FragmentDefinition(_ref7) {
      var name = _ref7.name,
          typeCondition = _ref7.typeCondition,
          variableDefinitions = _ref7.variableDefinitions,
          directives = _ref7.directives,
          selectionSet = _ref7.selectionSet;
      return (// Note: fragment variable definitions are experimental and may be changed
        // or removed in the future.
        "fragment ".concat(name).concat(wrap('(', join(variableDefinitions, ', '), ')'), " ") + "on ".concat(typeCondition, " ").concat(wrap('', join(directives, ' '), ' ')) + selectionSet
      );
    },
    // Value
    IntValue: function IntValue(_ref8) {
      var value = _ref8.value;
      return value;
    },
    FloatValue: function FloatValue(_ref9) {
      var value = _ref9.value;
      return value;
    },
    StringValue: function StringValue(_ref10, key) {
      var value = _ref10.value,
          isBlockString = _ref10.block;
      return isBlockString ? (0, _blockString$3.printBlockString)(value, key === 'description' ? '' : '  ') : JSON.stringify(value);
    },
    BooleanValue: function BooleanValue(_ref11) {
      var value = _ref11.value;
      return value ? 'true' : 'false';
    },
    NullValue: function NullValue() {
      return 'null';
    },
    EnumValue: function EnumValue(_ref12) {
      var value = _ref12.value;
      return value;
    },
    ListValue: function ListValue(_ref13) {
      var values = _ref13.values;
      return '[' + join(values, ', ') + ']';
    },
    ObjectValue: function ObjectValue(_ref14) {
      var fields = _ref14.fields;
      return '{' + join(fields, ', ') + '}';
    },
    ObjectField: function ObjectField(_ref15) {
      var name = _ref15.name,
          value = _ref15.value;
      return name + ': ' + value;
    },
    // Directive
    Directive: function Directive(_ref16) {
      var name = _ref16.name,
          args = _ref16.arguments;
      return '@' + name + wrap('(', join(args, ', '), ')');
    },
    // Type
    NamedType: function NamedType(_ref17) {
      var name = _ref17.name;
      return name;
    },
    ListType: function ListType(_ref18) {
      var type = _ref18.type;
      return '[' + type + ']';
    },
    NonNullType: function NonNullType(_ref19) {
      var type = _ref19.type;
      return type + '!';
    },
    // Type System Definitions
    SchemaDefinition: addDescription(function (_ref20) {
      var directives = _ref20.directives,
          operationTypes = _ref20.operationTypes;
      return join(['schema', join(directives, ' '), block(operationTypes)], ' ');
    }),
    OperationTypeDefinition: function OperationTypeDefinition(_ref21) {
      var operation = _ref21.operation,
          type = _ref21.type;
      return operation + ': ' + type;
    },
    ScalarTypeDefinition: addDescription(function (_ref22) {
      var name = _ref22.name,
          directives = _ref22.directives;
      return join(['scalar', name, join(directives, ' ')], ' ');
    }),
    ObjectTypeDefinition: addDescription(function (_ref23) {
      var name = _ref23.name,
          interfaces = _ref23.interfaces,
          directives = _ref23.directives,
          fields = _ref23.fields;
      return join(['type', name, wrap('implements ', join(interfaces, ' & ')), join(directives, ' '), block(fields)], ' ');
    }),
    FieldDefinition: addDescription(function (_ref24) {
      var name = _ref24.name,
          args = _ref24.arguments,
          type = _ref24.type,
          directives = _ref24.directives;
      return name + (hasMultilineItems(args) ? wrap('(\n', indent(join(args, '\n')), '\n)') : wrap('(', join(args, ', '), ')')) + ': ' + type + wrap(' ', join(directives, ' '));
    }),
    InputValueDefinition: addDescription(function (_ref25) {
      var name = _ref25.name,
          type = _ref25.type,
          defaultValue = _ref25.defaultValue,
          directives = _ref25.directives;
      return join([name + ': ' + type, wrap('= ', defaultValue), join(directives, ' ')], ' ');
    }),
    InterfaceTypeDefinition: addDescription(function (_ref26) {
      var name = _ref26.name,
          interfaces = _ref26.interfaces,
          directives = _ref26.directives,
          fields = _ref26.fields;
      return join(['interface', name, wrap('implements ', join(interfaces, ' & ')), join(directives, ' '), block(fields)], ' ');
    }),
    UnionTypeDefinition: addDescription(function (_ref27) {
      var name = _ref27.name,
          directives = _ref27.directives,
          types = _ref27.types;
      return join(['union', name, join(directives, ' '), types && types.length !== 0 ? '= ' + join(types, ' | ') : ''], ' ');
    }),
    EnumTypeDefinition: addDescription(function (_ref28) {
      var name = _ref28.name,
          directives = _ref28.directives,
          values = _ref28.values;
      return join(['enum', name, join(directives, ' '), block(values)], ' ');
    }),
    EnumValueDefinition: addDescription(function (_ref29) {
      var name = _ref29.name,
          directives = _ref29.directives;
      return join([name, join(directives, ' ')], ' ');
    }),
    InputObjectTypeDefinition: addDescription(function (_ref30) {
      var name = _ref30.name,
          directives = _ref30.directives,
          fields = _ref30.fields;
      return join(['input', name, join(directives, ' '), block(fields)], ' ');
    }),
    DirectiveDefinition: addDescription(function (_ref31) {
      var name = _ref31.name,
          args = _ref31.arguments,
          repeatable = _ref31.repeatable,
          locations = _ref31.locations;
      return 'directive @' + name + (hasMultilineItems(args) ? wrap('(\n', indent(join(args, '\n')), '\n)') : wrap('(', join(args, ', '), ')')) + (repeatable ? ' repeatable' : '') + ' on ' + join(locations, ' | ');
    }),
    SchemaExtension: function SchemaExtension(_ref32) {
      var directives = _ref32.directives,
          operationTypes = _ref32.operationTypes;
      return join(['extend schema', join(directives, ' '), block(operationTypes)], ' ');
    },
    ScalarTypeExtension: function ScalarTypeExtension(_ref33) {
      var name = _ref33.name,
          directives = _ref33.directives;
      return join(['extend scalar', name, join(directives, ' ')], ' ');
    },
    ObjectTypeExtension: function ObjectTypeExtension(_ref34) {
      var name = _ref34.name,
          interfaces = _ref34.interfaces,
          directives = _ref34.directives,
          fields = _ref34.fields;
      return join(['extend type', name, wrap('implements ', join(interfaces, ' & ')), join(directives, ' '), block(fields)], ' ');
    },
    InterfaceTypeExtension: function InterfaceTypeExtension(_ref35) {
      var name = _ref35.name,
          interfaces = _ref35.interfaces,
          directives = _ref35.directives,
          fields = _ref35.fields;
      return join(['extend interface', name, wrap('implements ', join(interfaces, ' & ')), join(directives, ' '), block(fields)], ' ');
    },
    UnionTypeExtension: function UnionTypeExtension(_ref36) {
      var name = _ref36.name,
          directives = _ref36.directives,
          types = _ref36.types;
      return join(['extend union', name, join(directives, ' '), types && types.length !== 0 ? '= ' + join(types, ' | ') : ''], ' ');
    },
    EnumTypeExtension: function EnumTypeExtension(_ref37) {
      var name = _ref37.name,
          directives = _ref37.directives,
          values = _ref37.values;
      return join(['extend enum', name, join(directives, ' '), block(values)], ' ');
    },
    InputObjectTypeExtension: function InputObjectTypeExtension(_ref38) {
      var name = _ref38.name,
          directives = _ref38.directives,
          fields = _ref38.fields;
      return join(['extend input', name, join(directives, ' '), block(fields)], ' ');
    }
  };

  function addDescription(cb) {
    return function (node) {
      return join([node.description, cb(node)], '\n');
    };
  }
  /**
   * Given maybeArray, print an empty string if it is null or empty, otherwise
   * print all items together separated by separator if provided
   */


  function join(maybeArray) {
    var _maybeArray$filter$jo;

    var separator = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
    return (_maybeArray$filter$jo = maybeArray === null || maybeArray === void 0 ? void 0 : maybeArray.filter(function (x) {
      return x;
    }).join(separator)) !== null && _maybeArray$filter$jo !== void 0 ? _maybeArray$filter$jo : '';
  }
  /**
   * Given array, print each item on its own line, wrapped in an
   * indented "{ }" block.
   */


  function block(array) {
    return wrap('{\n', indent(join(array, '\n')), '\n}');
  }
  /**
   * If maybeString is not null or empty, then wrap with start and end, otherwise print an empty string.
   */


  function wrap(start, maybeString) {
    var end = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';
    return maybeString != null && maybeString !== '' ? start + maybeString + end : '';
  }

  function indent(str) {
    return wrap('  ', str.replace(/\n/g, '\n  '));
  }

  function isMultiline(str) {
    return str.indexOf('\n') !== -1;
  }

  function hasMultilineItems(maybeArray) {
    return maybeArray != null && maybeArray.some(isMultiline);
  }

  var valueFromASTUntyped$1 = {};

  Object.defineProperty(valueFromASTUntyped$1, "__esModule", {
    value: true
  });
  valueFromASTUntyped$1.valueFromASTUntyped = valueFromASTUntyped;

  var _inspect$q = _interopRequireDefault$B(inspect$1);

  var _invariant$e = _interopRequireDefault$B(invariant$1);

  var _keyValMap$3 = _interopRequireDefault$B(keyValMap$1);

  var _kinds$n = kinds;

  function _interopRequireDefault$B(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  /**
   * Produces a JavaScript value given a GraphQL Value AST.
   *
   * Unlike `valueFromAST()`, no type is provided. The resulting JavaScript value
   * will reflect the provided GraphQL value AST.
   *
   * | GraphQL Value        | JavaScript Value |
   * | -------------------- | ---------------- |
   * | Input Object         | Object           |
   * | List                 | Array            |
   * | Boolean              | Boolean          |
   * | String / Enum        | String           |
   * | Int / Float          | Number           |
   * | Null                 | null             |
   *
   */
  function valueFromASTUntyped(valueNode, variables) {
    switch (valueNode.kind) {
      case _kinds$n.Kind.NULL:
        return null;

      case _kinds$n.Kind.INT:
        return parseInt(valueNode.value, 10);

      case _kinds$n.Kind.FLOAT:
        return parseFloat(valueNode.value);

      case _kinds$n.Kind.STRING:
      case _kinds$n.Kind.ENUM:
      case _kinds$n.Kind.BOOLEAN:
        return valueNode.value;

      case _kinds$n.Kind.LIST:
        return valueNode.values.map(function (node) {
          return valueFromASTUntyped(node, variables);
        });

      case _kinds$n.Kind.OBJECT:
        return (0, _keyValMap$3.default)(valueNode.fields, function (field) {
          return field.name.value;
        }, function (field) {
          return valueFromASTUntyped(field.value, variables);
        });

      case _kinds$n.Kind.VARIABLE:
        return variables === null || variables === void 0 ? void 0 : variables[valueNode.name.value];
    } // istanbul ignore next (Not reachable. All possible value nodes have been considered)


    (0, _invariant$e.default)(0, 'Unexpected value node: ' + (0, _inspect$q.default)(valueNode));
  }

  Object.defineProperty(definition, "__esModule", {
    value: true
  });
  definition.isType = isType;
  definition.assertType = assertType;
  definition.isScalarType = isScalarType;
  definition.assertScalarType = assertScalarType;
  definition.isObjectType = isObjectType;
  definition.assertObjectType = assertObjectType;
  definition.isInterfaceType = isInterfaceType;
  definition.assertInterfaceType = assertInterfaceType;
  definition.isUnionType = isUnionType;
  definition.assertUnionType = assertUnionType;
  definition.isEnumType = isEnumType;
  definition.assertEnumType = assertEnumType;
  definition.isInputObjectType = isInputObjectType;
  definition.assertInputObjectType = assertInputObjectType;
  definition.isListType = isListType;
  definition.assertListType = assertListType;
  definition.isNonNullType = isNonNullType;
  definition.assertNonNullType = assertNonNullType;
  definition.isInputType = isInputType;
  definition.assertInputType = assertInputType;
  definition.isOutputType = isOutputType;
  definition.assertOutputType = assertOutputType;
  definition.isLeafType = isLeafType;
  definition.assertLeafType = assertLeafType;
  definition.isCompositeType = isCompositeType;
  definition.assertCompositeType = assertCompositeType;
  definition.isAbstractType = isAbstractType;
  definition.assertAbstractType = assertAbstractType;
  definition.GraphQLList = GraphQLList;
  definition.GraphQLNonNull = GraphQLNonNull;
  definition.isWrappingType = isWrappingType;
  definition.assertWrappingType = assertWrappingType;
  definition.isNullableType = isNullableType;
  definition.assertNullableType = assertNullableType;
  definition.getNullableType = getNullableType;
  definition.isNamedType = isNamedType;
  definition.assertNamedType = assertNamedType;
  definition.getNamedType = getNamedType;
  definition.argsToArgsConfig = argsToArgsConfig;
  definition.isRequiredArgument = isRequiredArgument;
  definition.isRequiredInputField = isRequiredInputField;
  definition.GraphQLInputObjectType = definition.GraphQLEnumType = definition.GraphQLUnionType = definition.GraphQLInterfaceType = definition.GraphQLObjectType = definition.GraphQLScalarType = void 0;

  var _objectEntries$1 = _interopRequireDefault$A(objectEntries$1);

  var _symbols$6 = symbols;

  var _inspect$p = _interopRequireDefault$A(inspect$1);

  var _keyMap$6 = _interopRequireDefault$A(keyMap$1);

  var _mapValue$1 = _interopRequireDefault$A(mapValue$1);

  var _toObjMap$2 = _interopRequireDefault$A(toObjMap$1);

  var _devAssert$8 = _interopRequireDefault$A(devAssert$1);

  var _keyValMap$2 = _interopRequireDefault$A(keyValMap$1);

  var _instanceOf$2 = _interopRequireDefault$A(instanceOf);

  var _didYouMean$6 = _interopRequireDefault$A(didYouMean$1);

  var _isObjectLike$7 = _interopRequireDefault$A(isObjectLike$1);

  var _identityFunc = _interopRequireDefault$A(identityFunc$1);

  var _defineInspect$1 = _interopRequireDefault$A(defineInspect$1);

  var _suggestionList$6 = _interopRequireDefault$A(suggestionList$1);

  var _GraphQLError$H = GraphQLError$1;

  var _kinds$m = kinds;

  var _printer$a = printer;

  var _valueFromASTUntyped = valueFromASTUntyped$1;

  function _interopRequireDefault$A(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _defineProperties$2(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

  function _createClass$2(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties$2(Constructor.prototype, protoProps); if (staticProps) _defineProperties$2(Constructor, staticProps); return Constructor; }

  function isType(type) {
    return isScalarType(type) || isObjectType(type) || isInterfaceType(type) || isUnionType(type) || isEnumType(type) || isInputObjectType(type) || isListType(type) || isNonNullType(type);
  }

  function assertType(type) {
    if (!isType(type)) {
      throw new Error("Expected ".concat((0, _inspect$p.default)(type), " to be a GraphQL type."));
    }

    return type;
  }
  /**
   * There are predicates for each kind of GraphQL type.
   */


  // eslint-disable-next-line no-redeclare
  function isScalarType(type) {
    return (0, _instanceOf$2.default)(type, GraphQLScalarType);
  }

  function assertScalarType(type) {
    if (!isScalarType(type)) {
      throw new Error("Expected ".concat((0, _inspect$p.default)(type), " to be a GraphQL Scalar type."));
    }

    return type;
  }

  // eslint-disable-next-line no-redeclare
  function isObjectType(type) {
    return (0, _instanceOf$2.default)(type, GraphQLObjectType);
  }

  function assertObjectType(type) {
    if (!isObjectType(type)) {
      throw new Error("Expected ".concat((0, _inspect$p.default)(type), " to be a GraphQL Object type."));
    }

    return type;
  }

  // eslint-disable-next-line no-redeclare
  function isInterfaceType(type) {
    return (0, _instanceOf$2.default)(type, GraphQLInterfaceType);
  }

  function assertInterfaceType(type) {
    if (!isInterfaceType(type)) {
      throw new Error("Expected ".concat((0, _inspect$p.default)(type), " to be a GraphQL Interface type."));
    }

    return type;
  }

  // eslint-disable-next-line no-redeclare
  function isUnionType(type) {
    return (0, _instanceOf$2.default)(type, GraphQLUnionType);
  }

  function assertUnionType(type) {
    if (!isUnionType(type)) {
      throw new Error("Expected ".concat((0, _inspect$p.default)(type), " to be a GraphQL Union type."));
    }

    return type;
  }

  // eslint-disable-next-line no-redeclare
  function isEnumType(type) {
    return (0, _instanceOf$2.default)(type, GraphQLEnumType);
  }

  function assertEnumType(type) {
    if (!isEnumType(type)) {
      throw new Error("Expected ".concat((0, _inspect$p.default)(type), " to be a GraphQL Enum type."));
    }

    return type;
  }

  // eslint-disable-next-line no-redeclare
  function isInputObjectType(type) {
    return (0, _instanceOf$2.default)(type, GraphQLInputObjectType);
  }

  function assertInputObjectType(type) {
    if (!isInputObjectType(type)) {
      throw new Error("Expected ".concat((0, _inspect$p.default)(type), " to be a GraphQL Input Object type."));
    }

    return type;
  }

  // eslint-disable-next-line no-redeclare
  function isListType(type) {
    return (0, _instanceOf$2.default)(type, GraphQLList);
  }

  function assertListType(type) {
    if (!isListType(type)) {
      throw new Error("Expected ".concat((0, _inspect$p.default)(type), " to be a GraphQL List type."));
    }

    return type;
  }

  // eslint-disable-next-line no-redeclare
  function isNonNullType(type) {
    return (0, _instanceOf$2.default)(type, GraphQLNonNull);
  }

  function assertNonNullType(type) {
    if (!isNonNullType(type)) {
      throw new Error("Expected ".concat((0, _inspect$p.default)(type), " to be a GraphQL Non-Null type."));
    }

    return type;
  }
  /**
   * These types may be used as input types for arguments and directives.
   */


  function isInputType(type) {
    return isScalarType(type) || isEnumType(type) || isInputObjectType(type) || isWrappingType(type) && isInputType(type.ofType);
  }

  function assertInputType(type) {
    if (!isInputType(type)) {
      throw new Error("Expected ".concat((0, _inspect$p.default)(type), " to be a GraphQL input type."));
    }

    return type;
  }
  /**
   * These types may be used as output types as the result of fields.
   */


  function isOutputType(type) {
    return isScalarType(type) || isObjectType(type) || isInterfaceType(type) || isUnionType(type) || isEnumType(type) || isWrappingType(type) && isOutputType(type.ofType);
  }

  function assertOutputType(type) {
    if (!isOutputType(type)) {
      throw new Error("Expected ".concat((0, _inspect$p.default)(type), " to be a GraphQL output type."));
    }

    return type;
  }
  /**
   * These types may describe types which may be leaf values.
   */


  function isLeafType(type) {
    return isScalarType(type) || isEnumType(type);
  }

  function assertLeafType(type) {
    if (!isLeafType(type)) {
      throw new Error("Expected ".concat((0, _inspect$p.default)(type), " to be a GraphQL leaf type."));
    }

    return type;
  }
  /**
   * These types may describe the parent context of a selection set.
   */


  function isCompositeType(type) {
    return isObjectType(type) || isInterfaceType(type) || isUnionType(type);
  }

  function assertCompositeType(type) {
    if (!isCompositeType(type)) {
      throw new Error("Expected ".concat((0, _inspect$p.default)(type), " to be a GraphQL composite type."));
    }

    return type;
  }
  /**
   * These types may describe the parent context of a selection set.
   */


  function isAbstractType(type) {
    return isInterfaceType(type) || isUnionType(type);
  }

  function assertAbstractType(type) {
    if (!isAbstractType(type)) {
      throw new Error("Expected ".concat((0, _inspect$p.default)(type), " to be a GraphQL abstract type."));
    }

    return type;
  }
  /**
   * List Type Wrapper
   *
   * A list is a wrapping type which points to another type.
   * Lists are often created within the context of defining the fields of
   * an object type.
   *
   * Example:
   *
   *     const PersonType = new GraphQLObjectType({
   *       name: 'Person',
   *       fields: () => ({
   *         parents: { type: new GraphQLList(PersonType) },
   *         children: { type: new GraphQLList(PersonType) },
   *       })
   *     })
   *
   */
  // FIXME: workaround to fix issue with Babel parser

  /* ::
  declare class GraphQLList<+T: GraphQLType> {
    +ofType: T;
    static <T>(ofType: T): GraphQLList<T>;
    // Note: constructors cannot be used for covariant types. Drop the "new".
    constructor(ofType: GraphQLType): void;
  }
  */


  function GraphQLList(ofType) {
    // istanbul ignore else (to be removed in v16.0.0)
    if (this instanceof GraphQLList) {
      this.ofType = assertType(ofType);
    } else {
      return new GraphQLList(ofType);
    }
  } // Need to cast through any to alter the prototype.


  GraphQLList.prototype.toString = function toString() {
    return '[' + String(this.ofType) + ']';
  };

  GraphQLList.prototype.toJSON = function toJSON() {
    return this.toString();
  };

  Object.defineProperty(GraphQLList.prototype, _symbols$6.SYMBOL_TO_STRING_TAG, {
    get: function get() {
      return 'GraphQLList';
    }
  }); // Print a simplified form when appearing in `inspect` and `util.inspect`.

  (0, _defineInspect$1.default)(GraphQLList);
  /**
   * Non-Null Type Wrapper
   *
   * A non-null is a wrapping type which points to another type.
   * Non-null types enforce that their values are never null and can ensure
   * an error is raised if this ever occurs during a request. It is useful for
   * fields which you can make a strong guarantee on non-nullability, for example
   * usually the id field of a database row will never be null.
   *
   * Example:
   *
   *     const RowType = new GraphQLObjectType({
   *       name: 'Row',
   *       fields: () => ({
   *         id: { type: new GraphQLNonNull(GraphQLString) },
   *       })
   *     })
   *
   * Note: the enforcement of non-nullability occurs within the executor.
   */
  // FIXME: workaround to fix issue with Babel parser

  /* ::
  declare class GraphQLNonNull<+T: GraphQLNullableType> {
    +ofType: T;
    static <T>(ofType: T): GraphQLNonNull<T>;
    // Note: constructors cannot be used for covariant types. Drop the "new".
    constructor(ofType: GraphQLType): void;
  }
  */

  function GraphQLNonNull(ofType) {
    // istanbul ignore else (to be removed in v16.0.0)
    if (this instanceof GraphQLNonNull) {
      this.ofType = assertNullableType(ofType);
    } else {
      return new GraphQLNonNull(ofType);
    }
  } // Need to cast through any to alter the prototype.


  GraphQLNonNull.prototype.toString = function toString() {
    return String(this.ofType) + '!';
  };

  GraphQLNonNull.prototype.toJSON = function toJSON() {
    return this.toString();
  };

  Object.defineProperty(GraphQLNonNull.prototype, _symbols$6.SYMBOL_TO_STRING_TAG, {
    get: function get() {
      return 'GraphQLNonNull';
    }
  }); // Print a simplified form when appearing in `inspect` and `util.inspect`.

  (0, _defineInspect$1.default)(GraphQLNonNull);
  /**
   * These types wrap and modify other types
   */

  function isWrappingType(type) {
    return isListType(type) || isNonNullType(type);
  }

  function assertWrappingType(type) {
    if (!isWrappingType(type)) {
      throw new Error("Expected ".concat((0, _inspect$p.default)(type), " to be a GraphQL wrapping type."));
    }

    return type;
  }
  /**
   * These types can all accept null as a value.
   */


  function isNullableType(type) {
    return isType(type) && !isNonNullType(type);
  }

  function assertNullableType(type) {
    if (!isNullableType(type)) {
      throw new Error("Expected ".concat((0, _inspect$p.default)(type), " to be a GraphQL nullable type."));
    }

    return type;
  }
  /* eslint-disable no-redeclare */


  function getNullableType(type) {
    /* eslint-enable no-redeclare */
    if (type) {
      return isNonNullType(type) ? type.ofType : type;
    }
  }
  /**
   * These named types do not include modifiers like List or NonNull.
   */


  function isNamedType(type) {
    return isScalarType(type) || isObjectType(type) || isInterfaceType(type) || isUnionType(type) || isEnumType(type) || isInputObjectType(type);
  }

  function assertNamedType(type) {
    if (!isNamedType(type)) {
      throw new Error("Expected ".concat((0, _inspect$p.default)(type), " to be a GraphQL named type."));
    }

    return type;
  }
  /* eslint-disable no-redeclare */


  function getNamedType(type) {
    /* eslint-enable no-redeclare */
    if (type) {
      var unwrappedType = type;

      while (isWrappingType(unwrappedType)) {
        unwrappedType = unwrappedType.ofType;
      }

      return unwrappedType;
    }
  }
  /**
   * Used while defining GraphQL types to allow for circular references in
   * otherwise immutable type definitions.
   */


  function resolveThunk(thunk) {
    // $FlowFixMe[incompatible-use]
    return typeof thunk === 'function' ? thunk() : thunk;
  }

  function undefineIfEmpty(arr) {
    return arr && arr.length > 0 ? arr : undefined;
  }
  /**
   * Scalar Type Definition
   *
   * The leaf values of any request and input values to arguments are
   * Scalars (or Enums) and are defined with a name and a series of functions
   * used to parse input from ast or variables and to ensure validity.
   *
   * If a type's serialize function does not return a value (i.e. it returns
   * `undefined`) then an error will be raised and a `null` value will be returned
   * in the response. If the serialize function returns `null`, then no error will
   * be included in the response.
   *
   * Example:
   *
   *     const OddType = new GraphQLScalarType({
   *       name: 'Odd',
   *       serialize(value) {
   *         if (value % 2 === 1) {
   *           return value;
   *         }
   *       }
   *     });
   *
   */


  var GraphQLScalarType = /*#__PURE__*/function () {
    function GraphQLScalarType(config) {
      var _config$parseValue, _config$serialize, _config$parseLiteral;

      var parseValue = (_config$parseValue = config.parseValue) !== null && _config$parseValue !== void 0 ? _config$parseValue : _identityFunc.default;
      this.name = config.name;
      this.description = config.description;
      this.specifiedByUrl = config.specifiedByUrl;
      this.serialize = (_config$serialize = config.serialize) !== null && _config$serialize !== void 0 ? _config$serialize : _identityFunc.default;
      this.parseValue = parseValue;
      this.parseLiteral = (_config$parseLiteral = config.parseLiteral) !== null && _config$parseLiteral !== void 0 ? _config$parseLiteral : function (node, variables) {
        return parseValue((0, _valueFromASTUntyped.valueFromASTUntyped)(node, variables));
      };
      this.extensions = config.extensions && (0, _toObjMap$2.default)(config.extensions);
      this.astNode = config.astNode;
      this.extensionASTNodes = undefineIfEmpty(config.extensionASTNodes);
      typeof config.name === 'string' || (0, _devAssert$8.default)(0, 'Must provide name.');
      config.specifiedByUrl == null || typeof config.specifiedByUrl === 'string' || (0, _devAssert$8.default)(0, "".concat(this.name, " must provide \"specifiedByUrl\" as a string, ") + "but got: ".concat((0, _inspect$p.default)(config.specifiedByUrl), "."));
      config.serialize == null || typeof config.serialize === 'function' || (0, _devAssert$8.default)(0, "".concat(this.name, " must provide \"serialize\" function. If this custom Scalar is also used as an input type, ensure \"parseValue\" and \"parseLiteral\" functions are also provided."));

      if (config.parseLiteral) {
        typeof config.parseValue === 'function' && typeof config.parseLiteral === 'function' || (0, _devAssert$8.default)(0, "".concat(this.name, " must provide both \"parseValue\" and \"parseLiteral\" functions."));
      }
    }

    var _proto = GraphQLScalarType.prototype;

    _proto.toConfig = function toConfig() {
      var _this$extensionASTNod;

      return {
        name: this.name,
        description: this.description,
        specifiedByUrl: this.specifiedByUrl,
        serialize: this.serialize,
        parseValue: this.parseValue,
        parseLiteral: this.parseLiteral,
        extensions: this.extensions,
        astNode: this.astNode,
        extensionASTNodes: (_this$extensionASTNod = this.extensionASTNodes) !== null && _this$extensionASTNod !== void 0 ? _this$extensionASTNod : []
      };
    };

    _proto.toString = function toString() {
      return this.name;
    };

    _proto.toJSON = function toJSON() {
      return this.toString();
    } // $FlowFixMe[unsupported-syntax] Flow doesn't support computed properties yet
    ;

    _createClass$2(GraphQLScalarType, [{
      key: _symbols$6.SYMBOL_TO_STRING_TAG,
      get: function get() {
        return 'GraphQLScalarType';
      }
    }]);

    return GraphQLScalarType;
  }(); // Print a simplified form when appearing in `inspect` and `util.inspect`.


  definition.GraphQLScalarType = GraphQLScalarType;
  (0, _defineInspect$1.default)(GraphQLScalarType);

  /**
   * Object Type Definition
   *
   * Almost all of the GraphQL types you define will be object types. Object types
   * have a name, but most importantly describe their fields.
   *
   * Example:
   *
   *     const AddressType = new GraphQLObjectType({
   *       name: 'Address',
   *       fields: {
   *         street: { type: GraphQLString },
   *         number: { type: GraphQLInt },
   *         formatted: {
   *           type: GraphQLString,
   *           resolve(obj) {
   *             return obj.number + ' ' + obj.street
   *           }
   *         }
   *       }
   *     });
   *
   * When two types need to refer to each other, or a type needs to refer to
   * itself in a field, you can use a function expression (aka a closure or a
   * thunk) to supply the fields lazily.
   *
   * Example:
   *
   *     const PersonType = new GraphQLObjectType({
   *       name: 'Person',
   *       fields: () => ({
   *         name: { type: GraphQLString },
   *         bestFriend: { type: PersonType },
   *       })
   *     });
   *
   */
  var GraphQLObjectType = /*#__PURE__*/function () {
    function GraphQLObjectType(config) {
      this.name = config.name;
      this.description = config.description;
      this.isTypeOf = config.isTypeOf;
      this.extensions = config.extensions && (0, _toObjMap$2.default)(config.extensions);
      this.astNode = config.astNode;
      this.extensionASTNodes = undefineIfEmpty(config.extensionASTNodes);
      this._fields = defineFieldMap.bind(undefined, config);
      this._interfaces = defineInterfaces.bind(undefined, config);
      typeof config.name === 'string' || (0, _devAssert$8.default)(0, 'Must provide name.');
      config.isTypeOf == null || typeof config.isTypeOf === 'function' || (0, _devAssert$8.default)(0, "".concat(this.name, " must provide \"isTypeOf\" as a function, ") + "but got: ".concat((0, _inspect$p.default)(config.isTypeOf), "."));
    }

    var _proto2 = GraphQLObjectType.prototype;

    _proto2.getFields = function getFields() {
      if (typeof this._fields === 'function') {
        this._fields = this._fields();
      }

      return this._fields;
    };

    _proto2.getInterfaces = function getInterfaces() {
      if (typeof this._interfaces === 'function') {
        this._interfaces = this._interfaces();
      }

      return this._interfaces;
    };

    _proto2.toConfig = function toConfig() {
      return {
        name: this.name,
        description: this.description,
        interfaces: this.getInterfaces(),
        fields: fieldsToFieldsConfig(this.getFields()),
        isTypeOf: this.isTypeOf,
        extensions: this.extensions,
        astNode: this.astNode,
        extensionASTNodes: this.extensionASTNodes || []
      };
    };

    _proto2.toString = function toString() {
      return this.name;
    };

    _proto2.toJSON = function toJSON() {
      return this.toString();
    } // $FlowFixMe[unsupported-syntax] Flow doesn't support computed properties yet
    ;

    _createClass$2(GraphQLObjectType, [{
      key: _symbols$6.SYMBOL_TO_STRING_TAG,
      get: function get() {
        return 'GraphQLObjectType';
      }
    }]);

    return GraphQLObjectType;
  }(); // Print a simplified form when appearing in `inspect` and `util.inspect`.


  definition.GraphQLObjectType = GraphQLObjectType;
  (0, _defineInspect$1.default)(GraphQLObjectType);

  function defineInterfaces(config) {
    var _resolveThunk;

    var interfaces = (_resolveThunk = resolveThunk(config.interfaces)) !== null && _resolveThunk !== void 0 ? _resolveThunk : [];
    Array.isArray(interfaces) || (0, _devAssert$8.default)(0, "".concat(config.name, " interfaces must be an Array or a function which returns an Array."));
    return interfaces;
  }

  function defineFieldMap(config) {
    var fieldMap = resolveThunk(config.fields);
    isPlainObj(fieldMap) || (0, _devAssert$8.default)(0, "".concat(config.name, " fields must be an object with field names as keys or a function which returns such an object."));
    return (0, _mapValue$1.default)(fieldMap, function (fieldConfig, fieldName) {
      var _fieldConfig$args;

      isPlainObj(fieldConfig) || (0, _devAssert$8.default)(0, "".concat(config.name, ".").concat(fieldName, " field config must be an object."));
      !('isDeprecated' in fieldConfig) || (0, _devAssert$8.default)(0, "".concat(config.name, ".").concat(fieldName, " should provide \"deprecationReason\" instead of \"isDeprecated\"."));
      fieldConfig.resolve == null || typeof fieldConfig.resolve === 'function' || (0, _devAssert$8.default)(0, "".concat(config.name, ".").concat(fieldName, " field resolver must be a function if ") + "provided, but got: ".concat((0, _inspect$p.default)(fieldConfig.resolve), "."));
      var argsConfig = (_fieldConfig$args = fieldConfig.args) !== null && _fieldConfig$args !== void 0 ? _fieldConfig$args : {};
      isPlainObj(argsConfig) || (0, _devAssert$8.default)(0, "".concat(config.name, ".").concat(fieldName, " args must be an object with argument names as keys."));
      var args = (0, _objectEntries$1.default)(argsConfig).map(function (_ref) {
        var argName = _ref[0],
            argConfig = _ref[1];
        return {
          name: argName,
          description: argConfig.description,
          type: argConfig.type,
          defaultValue: argConfig.defaultValue,
          deprecationReason: argConfig.deprecationReason,
          extensions: argConfig.extensions && (0, _toObjMap$2.default)(argConfig.extensions),
          astNode: argConfig.astNode
        };
      });
      return {
        name: fieldName,
        description: fieldConfig.description,
        type: fieldConfig.type,
        args: args,
        resolve: fieldConfig.resolve,
        subscribe: fieldConfig.subscribe,
        isDeprecated: fieldConfig.deprecationReason != null,
        deprecationReason: fieldConfig.deprecationReason,
        extensions: fieldConfig.extensions && (0, _toObjMap$2.default)(fieldConfig.extensions),
        astNode: fieldConfig.astNode
      };
    });
  }

  function isPlainObj(obj) {
    return (0, _isObjectLike$7.default)(obj) && !Array.isArray(obj);
  }

  function fieldsToFieldsConfig(fields) {
    return (0, _mapValue$1.default)(fields, function (field) {
      return {
        description: field.description,
        type: field.type,
        args: argsToArgsConfig(field.args),
        resolve: field.resolve,
        subscribe: field.subscribe,
        deprecationReason: field.deprecationReason,
        extensions: field.extensions,
        astNode: field.astNode
      };
    });
  }
  /**
   * @internal
   */


  function argsToArgsConfig(args) {
    return (0, _keyValMap$2.default)(args, function (arg) {
      return arg.name;
    }, function (arg) {
      return {
        description: arg.description,
        type: arg.type,
        defaultValue: arg.defaultValue,
        deprecationReason: arg.deprecationReason,
        extensions: arg.extensions,
        astNode: arg.astNode
      };
    });
  }

  function isRequiredArgument(arg) {
    return isNonNullType(arg.type) && arg.defaultValue === undefined;
  }

  /**
   * Interface Type Definition
   *
   * When a field can return one of a heterogeneous set of types, a Interface type
   * is used to describe what types are possible, what fields are in common across
   * all types, as well as a function to determine which type is actually used
   * when the field is resolved.
   *
   * Example:
   *
   *     const EntityType = new GraphQLInterfaceType({
   *       name: 'Entity',
   *       fields: {
   *         name: { type: GraphQLString }
   *       }
   *     });
   *
   */
  var GraphQLInterfaceType = /*#__PURE__*/function () {
    function GraphQLInterfaceType(config) {
      this.name = config.name;
      this.description = config.description;
      this.resolveType = config.resolveType;
      this.extensions = config.extensions && (0, _toObjMap$2.default)(config.extensions);
      this.astNode = config.astNode;
      this.extensionASTNodes = undefineIfEmpty(config.extensionASTNodes);
      this._fields = defineFieldMap.bind(undefined, config);
      this._interfaces = defineInterfaces.bind(undefined, config);
      typeof config.name === 'string' || (0, _devAssert$8.default)(0, 'Must provide name.');
      config.resolveType == null || typeof config.resolveType === 'function' || (0, _devAssert$8.default)(0, "".concat(this.name, " must provide \"resolveType\" as a function, ") + "but got: ".concat((0, _inspect$p.default)(config.resolveType), "."));
    }

    var _proto3 = GraphQLInterfaceType.prototype;

    _proto3.getFields = function getFields() {
      if (typeof this._fields === 'function') {
        this._fields = this._fields();
      }

      return this._fields;
    };

    _proto3.getInterfaces = function getInterfaces() {
      if (typeof this._interfaces === 'function') {
        this._interfaces = this._interfaces();
      }

      return this._interfaces;
    };

    _proto3.toConfig = function toConfig() {
      var _this$extensionASTNod2;

      return {
        name: this.name,
        description: this.description,
        interfaces: this.getInterfaces(),
        fields: fieldsToFieldsConfig(this.getFields()),
        resolveType: this.resolveType,
        extensions: this.extensions,
        astNode: this.astNode,
        extensionASTNodes: (_this$extensionASTNod2 = this.extensionASTNodes) !== null && _this$extensionASTNod2 !== void 0 ? _this$extensionASTNod2 : []
      };
    };

    _proto3.toString = function toString() {
      return this.name;
    };

    _proto3.toJSON = function toJSON() {
      return this.toString();
    } // $FlowFixMe[unsupported-syntax] Flow doesn't support computed properties yet
    ;

    _createClass$2(GraphQLInterfaceType, [{
      key: _symbols$6.SYMBOL_TO_STRING_TAG,
      get: function get() {
        return 'GraphQLInterfaceType';
      }
    }]);

    return GraphQLInterfaceType;
  }(); // Print a simplified form when appearing in `inspect` and `util.inspect`.


  definition.GraphQLInterfaceType = GraphQLInterfaceType;
  (0, _defineInspect$1.default)(GraphQLInterfaceType);

  /**
   * Union Type Definition
   *
   * When a field can return one of a heterogeneous set of types, a Union type
   * is used to describe what types are possible as well as providing a function
   * to determine which type is actually used when the field is resolved.
   *
   * Example:
   *
   *     const PetType = new GraphQLUnionType({
   *       name: 'Pet',
   *       types: [ DogType, CatType ],
   *       resolveType(value) {
   *         if (value instanceof Dog) {
   *           return DogType;
   *         }
   *         if (value instanceof Cat) {
   *           return CatType;
   *         }
   *       }
   *     });
   *
   */
  var GraphQLUnionType = /*#__PURE__*/function () {
    function GraphQLUnionType(config) {
      this.name = config.name;
      this.description = config.description;
      this.resolveType = config.resolveType;
      this.extensions = config.extensions && (0, _toObjMap$2.default)(config.extensions);
      this.astNode = config.astNode;
      this.extensionASTNodes = undefineIfEmpty(config.extensionASTNodes);
      this._types = defineTypes.bind(undefined, config);
      typeof config.name === 'string' || (0, _devAssert$8.default)(0, 'Must provide name.');
      config.resolveType == null || typeof config.resolveType === 'function' || (0, _devAssert$8.default)(0, "".concat(this.name, " must provide \"resolveType\" as a function, ") + "but got: ".concat((0, _inspect$p.default)(config.resolveType), "."));
    }

    var _proto4 = GraphQLUnionType.prototype;

    _proto4.getTypes = function getTypes() {
      if (typeof this._types === 'function') {
        this._types = this._types();
      }

      return this._types;
    };

    _proto4.toConfig = function toConfig() {
      var _this$extensionASTNod3;

      return {
        name: this.name,
        description: this.description,
        types: this.getTypes(),
        resolveType: this.resolveType,
        extensions: this.extensions,
        astNode: this.astNode,
        extensionASTNodes: (_this$extensionASTNod3 = this.extensionASTNodes) !== null && _this$extensionASTNod3 !== void 0 ? _this$extensionASTNod3 : []
      };
    };

    _proto4.toString = function toString() {
      return this.name;
    };

    _proto4.toJSON = function toJSON() {
      return this.toString();
    } // $FlowFixMe[unsupported-syntax] Flow doesn't support computed properties yet
    ;

    _createClass$2(GraphQLUnionType, [{
      key: _symbols$6.SYMBOL_TO_STRING_TAG,
      get: function get() {
        return 'GraphQLUnionType';
      }
    }]);

    return GraphQLUnionType;
  }(); // Print a simplified form when appearing in `inspect` and `util.inspect`.


  definition.GraphQLUnionType = GraphQLUnionType;
  (0, _defineInspect$1.default)(GraphQLUnionType);

  function defineTypes(config) {
    var types = resolveThunk(config.types);
    Array.isArray(types) || (0, _devAssert$8.default)(0, "Must provide Array of types or a function which returns such an array for Union ".concat(config.name, "."));
    return types;
  }

  /**
   * Enum Type Definition
   *
   * Some leaf values of requests and input values are Enums. GraphQL serializes
   * Enum values as strings, however internally Enums can be represented by any
   * kind of type, often integers.
   *
   * Example:
   *
   *     const RGBType = new GraphQLEnumType({
   *       name: 'RGB',
   *       values: {
   *         RED: { value: 0 },
   *         GREEN: { value: 1 },
   *         BLUE: { value: 2 }
   *       }
   *     });
   *
   * Note: If a value is not provided in a definition, the name of the enum value
   * will be used as its internal value.
   */
  var GraphQLEnumType
  /* <T> */
  = /*#__PURE__*/function () {
    function GraphQLEnumType(config) {
      this.name = config.name;
      this.description = config.description;
      this.extensions = config.extensions && (0, _toObjMap$2.default)(config.extensions);
      this.astNode = config.astNode;
      this.extensionASTNodes = undefineIfEmpty(config.extensionASTNodes);
      this._values = defineEnumValues(this.name, config.values);
      this._valueLookup = new Map(this._values.map(function (enumValue) {
        return [enumValue.value, enumValue];
      }));
      this._nameLookup = (0, _keyMap$6.default)(this._values, function (value) {
        return value.name;
      });
      typeof config.name === 'string' || (0, _devAssert$8.default)(0, 'Must provide name.');
    }

    var _proto5 = GraphQLEnumType.prototype;

    _proto5.getValues = function getValues() {
      return this._values;
    };

    _proto5.getValue = function getValue(name) {
      return this._nameLookup[name];
    };

    _proto5.serialize = function serialize(outputValue) {
      var enumValue = this._valueLookup.get(outputValue);

      if (enumValue === undefined) {
        throw new _GraphQLError$H.GraphQLError("Enum \"".concat(this.name, "\" cannot represent value: ").concat((0, _inspect$p.default)(outputValue)));
      }

      return enumValue.name;
    };

    _proto5.parseValue = function parseValue(inputValue)
    /* T */
    {
      if (typeof inputValue !== 'string') {
        var valueStr = (0, _inspect$p.default)(inputValue);
        throw new _GraphQLError$H.GraphQLError("Enum \"".concat(this.name, "\" cannot represent non-string value: ").concat(valueStr, ".") + didYouMeanEnumValue(this, valueStr));
      }

      var enumValue = this.getValue(inputValue);

      if (enumValue == null) {
        throw new _GraphQLError$H.GraphQLError("Value \"".concat(inputValue, "\" does not exist in \"").concat(this.name, "\" enum.") + didYouMeanEnumValue(this, inputValue));
      }

      return enumValue.value;
    };

    _proto5.parseLiteral = function parseLiteral(valueNode, _variables)
    /* T */
    {
      // Note: variables will be resolved to a value before calling this function.
      if (valueNode.kind !== _kinds$m.Kind.ENUM) {
        var valueStr = (0, _printer$a.print)(valueNode);
        throw new _GraphQLError$H.GraphQLError("Enum \"".concat(this.name, "\" cannot represent non-enum value: ").concat(valueStr, ".") + didYouMeanEnumValue(this, valueStr), valueNode);
      }

      var enumValue = this.getValue(valueNode.value);

      if (enumValue == null) {
        var _valueStr = (0, _printer$a.print)(valueNode);

        throw new _GraphQLError$H.GraphQLError("Value \"".concat(_valueStr, "\" does not exist in \"").concat(this.name, "\" enum.") + didYouMeanEnumValue(this, _valueStr), valueNode);
      }

      return enumValue.value;
    };

    _proto5.toConfig = function toConfig() {
      var _this$extensionASTNod4;

      var values = (0, _keyValMap$2.default)(this.getValues(), function (value) {
        return value.name;
      }, function (value) {
        return {
          description: value.description,
          value: value.value,
          deprecationReason: value.deprecationReason,
          extensions: value.extensions,
          astNode: value.astNode
        };
      });
      return {
        name: this.name,
        description: this.description,
        values: values,
        extensions: this.extensions,
        astNode: this.astNode,
        extensionASTNodes: (_this$extensionASTNod4 = this.extensionASTNodes) !== null && _this$extensionASTNod4 !== void 0 ? _this$extensionASTNod4 : []
      };
    };

    _proto5.toString = function toString() {
      return this.name;
    };

    _proto5.toJSON = function toJSON() {
      return this.toString();
    } // $FlowFixMe[unsupported-syntax] Flow doesn't support computed properties yet
    ;

    _createClass$2(GraphQLEnumType, [{
      key: _symbols$6.SYMBOL_TO_STRING_TAG,
      get: function get() {
        return 'GraphQLEnumType';
      }
    }]);

    return GraphQLEnumType;
  }(); // Print a simplified form when appearing in `inspect` and `util.inspect`.


  definition.GraphQLEnumType = GraphQLEnumType;
  (0, _defineInspect$1.default)(GraphQLEnumType);

  function didYouMeanEnumValue(enumType, unknownValueStr) {
    var allNames = enumType.getValues().map(function (value) {
      return value.name;
    });
    var suggestedValues = (0, _suggestionList$6.default)(unknownValueStr, allNames);
    return (0, _didYouMean$6.default)('the enum value', suggestedValues);
  }

  function defineEnumValues(typeName, valueMap) {
    isPlainObj(valueMap) || (0, _devAssert$8.default)(0, "".concat(typeName, " values must be an object with value names as keys."));
    return (0, _objectEntries$1.default)(valueMap).map(function (_ref2) {
      var valueName = _ref2[0],
          valueConfig = _ref2[1];
      isPlainObj(valueConfig) || (0, _devAssert$8.default)(0, "".concat(typeName, ".").concat(valueName, " must refer to an object with a \"value\" key ") + "representing an internal value but got: ".concat((0, _inspect$p.default)(valueConfig), "."));
      !('isDeprecated' in valueConfig) || (0, _devAssert$8.default)(0, "".concat(typeName, ".").concat(valueName, " should provide \"deprecationReason\" instead of \"isDeprecated\"."));
      return {
        name: valueName,
        description: valueConfig.description,
        value: valueConfig.value !== undefined ? valueConfig.value : valueName,
        isDeprecated: valueConfig.deprecationReason != null,
        deprecationReason: valueConfig.deprecationReason,
        extensions: valueConfig.extensions && (0, _toObjMap$2.default)(valueConfig.extensions),
        astNode: valueConfig.astNode
      };
    });
  }

  /**
   * Input Object Type Definition
   *
   * An input object defines a structured collection of fields which may be
   * supplied to a field argument.
   *
   * Using `NonNull` will ensure that a value must be provided by the query
   *
   * Example:
   *
   *     const GeoPoint = new GraphQLInputObjectType({
   *       name: 'GeoPoint',
   *       fields: {
   *         lat: { type: new GraphQLNonNull(GraphQLFloat) },
   *         lon: { type: new GraphQLNonNull(GraphQLFloat) },
   *         alt: { type: GraphQLFloat, defaultValue: 0 },
   *       }
   *     });
   *
   */
  var GraphQLInputObjectType = /*#__PURE__*/function () {
    function GraphQLInputObjectType(config) {
      this.name = config.name;
      this.description = config.description;
      this.extensions = config.extensions && (0, _toObjMap$2.default)(config.extensions);
      this.astNode = config.astNode;
      this.extensionASTNodes = undefineIfEmpty(config.extensionASTNodes);
      this._fields = defineInputFieldMap.bind(undefined, config);
      typeof config.name === 'string' || (0, _devAssert$8.default)(0, 'Must provide name.');
    }

    var _proto6 = GraphQLInputObjectType.prototype;

    _proto6.getFields = function getFields() {
      if (typeof this._fields === 'function') {
        this._fields = this._fields();
      }

      return this._fields;
    };

    _proto6.toConfig = function toConfig() {
      var _this$extensionASTNod5;

      var fields = (0, _mapValue$1.default)(this.getFields(), function (field) {
        return {
          description: field.description,
          type: field.type,
          defaultValue: field.defaultValue,
          extensions: field.extensions,
          astNode: field.astNode
        };
      });
      return {
        name: this.name,
        description: this.description,
        fields: fields,
        extensions: this.extensions,
        astNode: this.astNode,
        extensionASTNodes: (_this$extensionASTNod5 = this.extensionASTNodes) !== null && _this$extensionASTNod5 !== void 0 ? _this$extensionASTNod5 : []
      };
    };

    _proto6.toString = function toString() {
      return this.name;
    };

    _proto6.toJSON = function toJSON() {
      return this.toString();
    } // $FlowFixMe[unsupported-syntax] Flow doesn't support computed properties yet
    ;

    _createClass$2(GraphQLInputObjectType, [{
      key: _symbols$6.SYMBOL_TO_STRING_TAG,
      get: function get() {
        return 'GraphQLInputObjectType';
      }
    }]);

    return GraphQLInputObjectType;
  }(); // Print a simplified form when appearing in `inspect` and `util.inspect`.


  definition.GraphQLInputObjectType = GraphQLInputObjectType;
  (0, _defineInspect$1.default)(GraphQLInputObjectType);

  function defineInputFieldMap(config) {
    var fieldMap = resolveThunk(config.fields);
    isPlainObj(fieldMap) || (0, _devAssert$8.default)(0, "".concat(config.name, " fields must be an object with field names as keys or a function which returns such an object."));
    return (0, _mapValue$1.default)(fieldMap, function (fieldConfig, fieldName) {
      !('resolve' in fieldConfig) || (0, _devAssert$8.default)(0, "".concat(config.name, ".").concat(fieldName, " field has a resolve property, but Input Types cannot define resolvers."));
      return {
        name: fieldName,
        description: fieldConfig.description,
        type: fieldConfig.type,
        defaultValue: fieldConfig.defaultValue,
        deprecationReason: fieldConfig.deprecationReason,
        extensions: fieldConfig.extensions && (0, _toObjMap$2.default)(fieldConfig.extensions),
        astNode: fieldConfig.astNode
      };
    });
  }

  function isRequiredInputField(field) {
    return isNonNullType(field.type) && field.defaultValue === undefined;
  }

  Object.defineProperty(typeComparators, "__esModule", {
    value: true
  });
  typeComparators.isEqualType = isEqualType;
  typeComparators.isTypeSubTypeOf = isTypeSubTypeOf;
  typeComparators.doTypesOverlap = doTypesOverlap;

  var _definition$v = definition;

  /**
   * Provided two types, return true if the types are equal (invariant).
   */
  function isEqualType(typeA, typeB) {
    // Equivalent types are equal.
    if (typeA === typeB) {
      return true;
    } // If either type is non-null, the other must also be non-null.


    if ((0, _definition$v.isNonNullType)(typeA) && (0, _definition$v.isNonNullType)(typeB)) {
      return isEqualType(typeA.ofType, typeB.ofType);
    } // If either type is a list, the other must also be a list.


    if ((0, _definition$v.isListType)(typeA) && (0, _definition$v.isListType)(typeB)) {
      return isEqualType(typeA.ofType, typeB.ofType);
    } // Otherwise the types are not equal.


    return false;
  }
  /**
   * Provided a type and a super type, return true if the first type is either
   * equal or a subset of the second super type (covariant).
   */


  function isTypeSubTypeOf(schema, maybeSubType, superType) {
    // Equivalent type is a valid subtype
    if (maybeSubType === superType) {
      return true;
    } // If superType is non-null, maybeSubType must also be non-null.


    if ((0, _definition$v.isNonNullType)(superType)) {
      if ((0, _definition$v.isNonNullType)(maybeSubType)) {
        return isTypeSubTypeOf(schema, maybeSubType.ofType, superType.ofType);
      }

      return false;
    }

    if ((0, _definition$v.isNonNullType)(maybeSubType)) {
      // If superType is nullable, maybeSubType may be non-null or nullable.
      return isTypeSubTypeOf(schema, maybeSubType.ofType, superType);
    } // If superType type is a list, maybeSubType type must also be a list.


    if ((0, _definition$v.isListType)(superType)) {
      if ((0, _definition$v.isListType)(maybeSubType)) {
        return isTypeSubTypeOf(schema, maybeSubType.ofType, superType.ofType);
      }

      return false;
    }

    if ((0, _definition$v.isListType)(maybeSubType)) {
      // If superType is not a list, maybeSubType must also be not a list.
      return false;
    } // If superType type is an abstract type, check if it is super type of maybeSubType.
    // Otherwise, the child type is not a valid subtype of the parent type.


    return (0, _definition$v.isAbstractType)(superType) && ((0, _definition$v.isInterfaceType)(maybeSubType) || (0, _definition$v.isObjectType)(maybeSubType)) && schema.isSubType(superType, maybeSubType);
  }
  /**
   * Provided two composite types, determine if they "overlap". Two composite
   * types overlap when the Sets of possible concrete types for each intersect.
   *
   * This is often used to determine if a fragment of a given type could possibly
   * be visited in a context of another type.
   *
   * This function is commutative.
   */


  function doTypesOverlap(schema, typeA, typeB) {
    // Equivalent types overlap
    if (typeA === typeB) {
      return true;
    }

    if ((0, _definition$v.isAbstractType)(typeA)) {
      if ((0, _definition$v.isAbstractType)(typeB)) {
        // If both types are abstract, then determine if there is any intersection
        // between possible concrete types of each.
        return schema.getPossibleTypes(typeA).some(function (type) {
          return schema.isSubType(typeB, type);
        });
      } // Determine if the latter type is a possible concrete type of the former.


      return schema.isSubType(typeA, typeB);
    }

    if ((0, _definition$v.isAbstractType)(typeB)) {
      // Determine if the former type is a possible concrete type of the latter.
      return schema.isSubType(typeB, typeA);
    } // Otherwise the types do not overlap.


    return false;
  }

  var schema = {};

  var arrayFrom$1 = {};

  Object.defineProperty(arrayFrom$1, "__esModule", {
    value: true
  });
  arrayFrom$1.default = void 0;

  var _symbols$5 = symbols;

  /* eslint-disable no-redeclare */
  // $FlowFixMe[name-already-bound]
  var arrayFrom = Array.from || function (obj, mapFn, thisArg) {
    if (obj == null) {
      throw new TypeError('Array.from requires an array-like object - not null or undefined');
    } // Is Iterable?


    var iteratorMethod = obj[_symbols$5.SYMBOL_ITERATOR];

    if (typeof iteratorMethod === 'function') {
      var iterator = iteratorMethod.call(obj);
      var result = [];
      var step;

      for (var i = 0; !(step = iterator.next()).done; ++i) {
        result.push(mapFn.call(thisArg, step.value, i)); // Infinite Iterators could cause forEach to run forever.
        // After a very large number of iterations, produce an error.
        // istanbul ignore if (Too big to actually test)

        if (i > 9999999) {
          throw new TypeError('Near-infinite iteration.');
        }
      }

      return result;
    } // Is Array like?


    var length = obj.length;

    if (typeof length === 'number' && length >= 0 && length % 1 === 0) {
      var _result = [];

      for (var _i = 0; _i < length; ++_i) {
        if (Object.prototype.hasOwnProperty.call(obj, _i)) {
          _result.push(mapFn.call(thisArg, obj[_i], _i));
        }
      }

      return _result;
    }

    return [];
  };

  var _default$2 = arrayFrom;
  arrayFrom$1.default = _default$2;

  var introspection = {};

  var astFromValue$1 = {};

  var _isFinite$2 = {};

  Object.defineProperty(_isFinite$2, "__esModule", {
    value: true
  });
  _isFinite$2.default = void 0;

  /* eslint-disable no-redeclare */
  // $FlowFixMe[name-already-bound] workaround for: https://github.com/facebook/flow/issues/4441
  var isFinitePolyfill = Number.isFinite || function (value) {
    return typeof value === 'number' && isFinite(value);
  };

  var _default$1 = isFinitePolyfill;
  _isFinite$2.default = _default$1;

  var safeArrayFrom$1 = {};

  Object.defineProperty(safeArrayFrom$1, "__esModule", {
    value: true
  });
  safeArrayFrom$1.default = safeArrayFrom;

  var _symbols$4 = symbols;

  function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

  /**
   * Safer version of `Array.from` that return `null` if value isn't convertible to array.
   * Also protects against Array-like objects without items.
   *
   * @example
   *
   * safeArrayFrom([ 1, 2, 3 ]) // [1, 2, 3]
   * safeArrayFrom('ABC') // null
   * safeArrayFrom({ length: 1 }) // null
   * safeArrayFrom({ length: 1, 0: 'Alpha' }) // ['Alpha']
   * safeArrayFrom({ key: 'value' }) // null
   * safeArrayFrom(new Map()) // []
   *
   */
  function safeArrayFrom(collection) {
    var mapFn = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : function (item) {
      return item;
    };

    if (collection == null || _typeof(collection) !== 'object') {
      return null;
    }

    if (Array.isArray(collection)) {
      return collection.map(mapFn);
    } // Is Iterable?


    var iteratorMethod = collection[_symbols$4.SYMBOL_ITERATOR];

    if (typeof iteratorMethod === 'function') {
      // $FlowFixMe[incompatible-use]
      var iterator = iteratorMethod.call(collection);
      var result = [];
      var step;

      for (var i = 0; !(step = iterator.next()).done; ++i) {
        result.push(mapFn(step.value, i));
      }

      return result;
    } // Is Array like?


    var length = collection.length;

    if (typeof length === 'number' && length >= 0 && length % 1 === 0) {
      var _result = [];

      for (var _i = 0; _i < length; ++_i) {
        if (!Object.prototype.hasOwnProperty.call(collection, _i)) {
          return null;
        }

        _result.push(mapFn(collection[String(_i)], _i));
      }

      return _result;
    }

    return null;
  }

  var scalars = {};

  var isInteger$1 = {};

  Object.defineProperty(isInteger$1, "__esModule", {
    value: true
  });
  isInteger$1.default = void 0;

  /* eslint-disable no-redeclare */
  // $FlowFixMe[name-already-bound] workaround for: https://github.com/facebook/flow/issues/4441
  var isInteger = Number.isInteger || function (value) {
    return typeof value === 'number' && isFinite(value) && Math.floor(value) === value;
  };

  var _default = isInteger;
  isInteger$1.default = _default;

  Object.defineProperty(scalars, "__esModule", {
    value: true
  });
  scalars.isSpecifiedScalarType = isSpecifiedScalarType;
  scalars.specifiedScalarTypes = scalars.GraphQLID = scalars.GraphQLBoolean = scalars.GraphQLString = scalars.GraphQLFloat = scalars.GraphQLInt = void 0;

  var _isFinite$1 = _interopRequireDefault$z(_isFinite$2);

  var _isInteger = _interopRequireDefault$z(isInteger$1);

  var _inspect$o = _interopRequireDefault$z(inspect$1);

  var _isObjectLike$6 = _interopRequireDefault$z(isObjectLike$1);

  var _kinds$l = kinds;

  var _printer$9 = printer;

  var _GraphQLError$G = GraphQLError$1;

  var _definition$u = definition;

  function _interopRequireDefault$z(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  // As per the GraphQL Spec, Integers are only treated as valid when a valid
  // 32-bit signed integer, providing the broadest support across platforms.
  //
  // n.b. JavaScript's integers are safe between -(2^53 - 1) and 2^53 - 1 because
  // they are internally represented as IEEE 754 doubles.
  var MAX_INT = 2147483647;
  var MIN_INT = -2147483648;

  function serializeInt(outputValue) {
    var coercedValue = serializeObject(outputValue);

    if (typeof coercedValue === 'boolean') {
      return coercedValue ? 1 : 0;
    }

    var num = coercedValue;

    if (typeof coercedValue === 'string' && coercedValue !== '') {
      num = Number(coercedValue);
    }

    if (!(0, _isInteger.default)(num)) {
      throw new _GraphQLError$G.GraphQLError("Int cannot represent non-integer value: ".concat((0, _inspect$o.default)(coercedValue)));
    }

    if (num > MAX_INT || num < MIN_INT) {
      throw new _GraphQLError$G.GraphQLError('Int cannot represent non 32-bit signed integer value: ' + (0, _inspect$o.default)(coercedValue));
    }

    return num;
  }

  function coerceInt(inputValue) {
    if (!(0, _isInteger.default)(inputValue)) {
      throw new _GraphQLError$G.GraphQLError("Int cannot represent non-integer value: ".concat((0, _inspect$o.default)(inputValue)));
    }

    if (inputValue > MAX_INT || inputValue < MIN_INT) {
      throw new _GraphQLError$G.GraphQLError("Int cannot represent non 32-bit signed integer value: ".concat(inputValue));
    }

    return inputValue;
  }

  var GraphQLInt = new _definition$u.GraphQLScalarType({
    name: 'Int',
    description: 'The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.',
    serialize: serializeInt,
    parseValue: coerceInt,
    parseLiteral: function parseLiteral(valueNode) {
      if (valueNode.kind !== _kinds$l.Kind.INT) {
        throw new _GraphQLError$G.GraphQLError("Int cannot represent non-integer value: ".concat((0, _printer$9.print)(valueNode)), valueNode);
      }

      var num = parseInt(valueNode.value, 10);

      if (num > MAX_INT || num < MIN_INT) {
        throw new _GraphQLError$G.GraphQLError("Int cannot represent non 32-bit signed integer value: ".concat(valueNode.value), valueNode);
      }

      return num;
    }
  });
  scalars.GraphQLInt = GraphQLInt;

  function serializeFloat(outputValue) {
    var coercedValue = serializeObject(outputValue);

    if (typeof coercedValue === 'boolean') {
      return coercedValue ? 1 : 0;
    }

    var num = coercedValue;

    if (typeof coercedValue === 'string' && coercedValue !== '') {
      num = Number(coercedValue);
    }

    if (!(0, _isFinite$1.default)(num)) {
      throw new _GraphQLError$G.GraphQLError("Float cannot represent non numeric value: ".concat((0, _inspect$o.default)(coercedValue)));
    }

    return num;
  }

  function coerceFloat(inputValue) {
    if (!(0, _isFinite$1.default)(inputValue)) {
      throw new _GraphQLError$G.GraphQLError("Float cannot represent non numeric value: ".concat((0, _inspect$o.default)(inputValue)));
    }

    return inputValue;
  }

  var GraphQLFloat = new _definition$u.GraphQLScalarType({
    name: 'Float',
    description: 'The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](https://en.wikipedia.org/wiki/IEEE_floating_point).',
    serialize: serializeFloat,
    parseValue: coerceFloat,
    parseLiteral: function parseLiteral(valueNode) {
      if (valueNode.kind !== _kinds$l.Kind.FLOAT && valueNode.kind !== _kinds$l.Kind.INT) {
        throw new _GraphQLError$G.GraphQLError("Float cannot represent non numeric value: ".concat((0, _printer$9.print)(valueNode)), valueNode);
      }

      return parseFloat(valueNode.value);
    }
  }); // Support serializing objects with custom valueOf() or toJSON() functions -
  // a common way to represent a complex value which can be represented as
  // a string (ex: MongoDB id objects).

  scalars.GraphQLFloat = GraphQLFloat;

  function serializeObject(outputValue) {
    if ((0, _isObjectLike$6.default)(outputValue)) {
      if (typeof outputValue.valueOf === 'function') {
        var valueOfResult = outputValue.valueOf();

        if (!(0, _isObjectLike$6.default)(valueOfResult)) {
          return valueOfResult;
        }
      }

      if (typeof outputValue.toJSON === 'function') {
        // $FlowFixMe[incompatible-use]
        return outputValue.toJSON();
      }
    }

    return outputValue;
  }

  function serializeString(outputValue) {
    var coercedValue = serializeObject(outputValue); // Serialize string, boolean and number values to a string, but do not
    // attempt to coerce object, function, symbol, or other types as strings.

    if (typeof coercedValue === 'string') {
      return coercedValue;
    }

    if (typeof coercedValue === 'boolean') {
      return coercedValue ? 'true' : 'false';
    }

    if ((0, _isFinite$1.default)(coercedValue)) {
      return coercedValue.toString();
    }

    throw new _GraphQLError$G.GraphQLError("String cannot represent value: ".concat((0, _inspect$o.default)(outputValue)));
  }

  function coerceString(inputValue) {
    if (typeof inputValue !== 'string') {
      throw new _GraphQLError$G.GraphQLError("String cannot represent a non string value: ".concat((0, _inspect$o.default)(inputValue)));
    }

    return inputValue;
  }

  var GraphQLString = new _definition$u.GraphQLScalarType({
    name: 'String',
    description: 'The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.',
    serialize: serializeString,
    parseValue: coerceString,
    parseLiteral: function parseLiteral(valueNode) {
      if (valueNode.kind !== _kinds$l.Kind.STRING) {
        throw new _GraphQLError$G.GraphQLError("String cannot represent a non string value: ".concat((0, _printer$9.print)(valueNode)), valueNode);
      }

      return valueNode.value;
    }
  });
  scalars.GraphQLString = GraphQLString;

  function serializeBoolean(outputValue) {
    var coercedValue = serializeObject(outputValue);

    if (typeof coercedValue === 'boolean') {
      return coercedValue;
    }

    if ((0, _isFinite$1.default)(coercedValue)) {
      return coercedValue !== 0;
    }

    throw new _GraphQLError$G.GraphQLError("Boolean cannot represent a non boolean value: ".concat((0, _inspect$o.default)(coercedValue)));
  }

  function coerceBoolean(inputValue) {
    if (typeof inputValue !== 'boolean') {
      throw new _GraphQLError$G.GraphQLError("Boolean cannot represent a non boolean value: ".concat((0, _inspect$o.default)(inputValue)));
    }

    return inputValue;
  }

  var GraphQLBoolean = new _definition$u.GraphQLScalarType({
    name: 'Boolean',
    description: 'The `Boolean` scalar type represents `true` or `false`.',
    serialize: serializeBoolean,
    parseValue: coerceBoolean,
    parseLiteral: function parseLiteral(valueNode) {
      if (valueNode.kind !== _kinds$l.Kind.BOOLEAN) {
        throw new _GraphQLError$G.GraphQLError("Boolean cannot represent a non boolean value: ".concat((0, _printer$9.print)(valueNode)), valueNode);
      }

      return valueNode.value;
    }
  });
  scalars.GraphQLBoolean = GraphQLBoolean;

  function serializeID(outputValue) {
    var coercedValue = serializeObject(outputValue);

    if (typeof coercedValue === 'string') {
      return coercedValue;
    }

    if ((0, _isInteger.default)(coercedValue)) {
      return String(coercedValue);
    }

    throw new _GraphQLError$G.GraphQLError("ID cannot represent value: ".concat((0, _inspect$o.default)(outputValue)));
  }

  function coerceID(inputValue) {
    if (typeof inputValue === 'string') {
      return inputValue;
    }

    if ((0, _isInteger.default)(inputValue)) {
      return inputValue.toString();
    }

    throw new _GraphQLError$G.GraphQLError("ID cannot represent value: ".concat((0, _inspect$o.default)(inputValue)));
  }

  var GraphQLID = new _definition$u.GraphQLScalarType({
    name: 'ID',
    description: 'The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.',
    serialize: serializeID,
    parseValue: coerceID,
    parseLiteral: function parseLiteral(valueNode) {
      if (valueNode.kind !== _kinds$l.Kind.STRING && valueNode.kind !== _kinds$l.Kind.INT) {
        throw new _GraphQLError$G.GraphQLError('ID cannot represent a non-string and non-integer value: ' + (0, _printer$9.print)(valueNode), valueNode);
      }

      return valueNode.value;
    }
  });
  scalars.GraphQLID = GraphQLID;
  var specifiedScalarTypes = Object.freeze([GraphQLString, GraphQLInt, GraphQLFloat, GraphQLBoolean, GraphQLID]);
  scalars.specifiedScalarTypes = specifiedScalarTypes;

  function isSpecifiedScalarType(type) {
    return specifiedScalarTypes.some(function (_ref) {
      var name = _ref.name;
      return type.name === name;
    });
  }

  Object.defineProperty(astFromValue$1, "__esModule", {
    value: true
  });
  astFromValue$1.astFromValue = astFromValue;

  var _isFinite = _interopRequireDefault$y(_isFinite$2);

  var _objectValues3$3 = _interopRequireDefault$y(objectValues$1);

  var _inspect$n = _interopRequireDefault$y(inspect$1);

  var _invariant$d = _interopRequireDefault$y(invariant$1);

  var _isObjectLike$5 = _interopRequireDefault$y(isObjectLike$1);

  var _safeArrayFrom$2 = _interopRequireDefault$y(safeArrayFrom$1);

  var _kinds$k = kinds;

  var _scalars$7 = scalars;

  var _definition$t = definition;

  function _interopRequireDefault$y(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  /**
   * Produces a GraphQL Value AST given a JavaScript object.
   * Function will match JavaScript/JSON values to GraphQL AST schema format
   * by using suggested GraphQLInputType. For example:
   *
   *     astFromValue("value", GraphQLString)
   *
   * A GraphQL type must be provided, which will be used to interpret different
   * JavaScript values.
   *
   * | JSON Value    | GraphQL Value        |
   * | ------------- | -------------------- |
   * | Object        | Input Object         |
   * | Array         | List                 |
   * | Boolean       | Boolean              |
   * | String        | String / Enum Value  |
   * | Number        | Int / Float          |
   * | Mixed         | Enum Value           |
   * | null          | NullValue            |
   *
   */
  function astFromValue(value, type) {
    if ((0, _definition$t.isNonNullType)(type)) {
      var astValue = astFromValue(value, type.ofType);

      if ((astValue === null || astValue === void 0 ? void 0 : astValue.kind) === _kinds$k.Kind.NULL) {
        return null;
      }

      return astValue;
    } // only explicit null, not undefined, NaN


    if (value === null) {
      return {
        kind: _kinds$k.Kind.NULL
      };
    } // undefined


    if (value === undefined) {
      return null;
    } // Convert JavaScript array to GraphQL list. If the GraphQLType is a list, but
    // the value is not an array, convert the value using the list's item type.


    if ((0, _definition$t.isListType)(type)) {
      var itemType = type.ofType;
      var items = (0, _safeArrayFrom$2.default)(value);

      if (items != null) {
        var valuesNodes = [];

        for (var _i2 = 0; _i2 < items.length; _i2++) {
          var item = items[_i2];
          var itemNode = astFromValue(item, itemType);

          if (itemNode != null) {
            valuesNodes.push(itemNode);
          }
        }

        return {
          kind: _kinds$k.Kind.LIST,
          values: valuesNodes
        };
      }

      return astFromValue(value, itemType);
    } // Populate the fields of the input object by creating ASTs from each value
    // in the JavaScript object according to the fields in the input type.


    if ((0, _definition$t.isInputObjectType)(type)) {
      if (!(0, _isObjectLike$5.default)(value)) {
        return null;
      }

      var fieldNodes = [];

      for (var _i4 = 0, _objectValues2 = (0, _objectValues3$3.default)(type.getFields()); _i4 < _objectValues2.length; _i4++) {
        var field = _objectValues2[_i4];
        var fieldValue = astFromValue(value[field.name], field.type);

        if (fieldValue) {
          fieldNodes.push({
            kind: _kinds$k.Kind.OBJECT_FIELD,
            name: {
              kind: _kinds$k.Kind.NAME,
              value: field.name
            },
            value: fieldValue
          });
        }
      }

      return {
        kind: _kinds$k.Kind.OBJECT,
        fields: fieldNodes
      };
    } // istanbul ignore else (See: 'https://github.com/graphql/graphql-js/issues/2618')


    if ((0, _definition$t.isLeafType)(type)) {
      // Since value is an internally represented value, it must be serialized
      // to an externally represented value before converting into an AST.
      var serialized = type.serialize(value);

      if (serialized == null) {
        return null;
      } // Others serialize based on their corresponding JavaScript scalar types.


      if (typeof serialized === 'boolean') {
        return {
          kind: _kinds$k.Kind.BOOLEAN,
          value: serialized
        };
      } // JavaScript numbers can be Int or Float values.


      if (typeof serialized === 'number' && (0, _isFinite.default)(serialized)) {
        var stringNum = String(serialized);
        return integerStringRegExp.test(stringNum) ? {
          kind: _kinds$k.Kind.INT,
          value: stringNum
        } : {
          kind: _kinds$k.Kind.FLOAT,
          value: stringNum
        };
      }

      if (typeof serialized === 'string') {
        // Enum types use Enum literals.
        if ((0, _definition$t.isEnumType)(type)) {
          return {
            kind: _kinds$k.Kind.ENUM,
            value: serialized
          };
        } // ID types can use Int literals.


        if (type === _scalars$7.GraphQLID && integerStringRegExp.test(serialized)) {
          return {
            kind: _kinds$k.Kind.INT,
            value: serialized
          };
        }

        return {
          kind: _kinds$k.Kind.STRING,
          value: serialized
        };
      }

      throw new TypeError("Cannot convert value to AST: ".concat((0, _inspect$n.default)(serialized), "."));
    } // istanbul ignore next (Not reachable. All possible input types have been considered)


    (0, _invariant$d.default)(0, 'Unexpected input type: ' + (0, _inspect$n.default)(type));
  }
  /**
   * IntValue:
   *   - NegativeSign? 0
   *   - NegativeSign? NonZeroDigit ( Digit+ )?
   */


  var integerStringRegExp = /^-?(?:0|[1-9][0-9]*)$/;

  Object.defineProperty(introspection, "__esModule", {
    value: true
  });
  introspection.isIntrospectionType = isIntrospectionType;
  introspection.introspectionTypes = introspection.TypeNameMetaFieldDef = introspection.TypeMetaFieldDef = introspection.SchemaMetaFieldDef = introspection.__TypeKind = introspection.TypeKind = introspection.__EnumValue = introspection.__InputValue = introspection.__Field = introspection.__Type = introspection.__DirectiveLocation = introspection.__Directive = introspection.__Schema = void 0;

  var _objectValues$5 = _interopRequireDefault$x(objectValues$1);

  var _inspect$m = _interopRequireDefault$x(inspect$1);

  var _invariant$c = _interopRequireDefault$x(invariant$1);

  var _printer$8 = printer;

  var _directiveLocation$2 = directiveLocation;

  var _astFromValue$2 = astFromValue$1;

  var _scalars$6 = scalars;

  var _definition$s = definition;

  function _interopRequireDefault$x(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  var __Schema = new _definition$s.GraphQLObjectType({
    name: '__Schema',
    description: 'A GraphQL Schema defines the capabilities of a GraphQL server. It exposes all available types and directives on the server, as well as the entry points for query, mutation, and subscription operations.',
    fields: function fields() {
      return {
        description: {
          type: _scalars$6.GraphQLString,
          resolve: function resolve(schema) {
            return schema.description;
          }
        },
        types: {
          description: 'A list of all types supported by this server.',
          type: new _definition$s.GraphQLNonNull(new _definition$s.GraphQLList(new _definition$s.GraphQLNonNull(__Type))),
          resolve: function resolve(schema) {
            return (0, _objectValues$5.default)(schema.getTypeMap());
          }
        },
        queryType: {
          description: 'The type that query operations will be rooted at.',
          type: new _definition$s.GraphQLNonNull(__Type),
          resolve: function resolve(schema) {
            return schema.getQueryType();
          }
        },
        mutationType: {
          description: 'If this server supports mutation, the type that mutation operations will be rooted at.',
          type: __Type,
          resolve: function resolve(schema) {
            return schema.getMutationType();
          }
        },
        subscriptionType: {
          description: 'If this server support subscription, the type that subscription operations will be rooted at.',
          type: __Type,
          resolve: function resolve(schema) {
            return schema.getSubscriptionType();
          }
        },
        directives: {
          description: 'A list of all directives supported by this server.',
          type: new _definition$s.GraphQLNonNull(new _definition$s.GraphQLList(new _definition$s.GraphQLNonNull(__Directive))),
          resolve: function resolve(schema) {
            return schema.getDirectives();
          }
        }
      };
    }
  });

  introspection.__Schema = __Schema;

  var __Directive = new _definition$s.GraphQLObjectType({
    name: '__Directive',
    description: "A Directive provides a way to describe alternate runtime execution and type validation behavior in a GraphQL document.\n\nIn some cases, you need to provide options to alter GraphQL's execution behavior in ways field arguments will not suffice, such as conditionally including or skipping a field. Directives provide this by describing additional information to the executor.",
    fields: function fields() {
      return {
        name: {
          type: new _definition$s.GraphQLNonNull(_scalars$6.GraphQLString),
          resolve: function resolve(directive) {
            return directive.name;
          }
        },
        description: {
          type: _scalars$6.GraphQLString,
          resolve: function resolve(directive) {
            return directive.description;
          }
        },
        isRepeatable: {
          type: new _definition$s.GraphQLNonNull(_scalars$6.GraphQLBoolean),
          resolve: function resolve(directive) {
            return directive.isRepeatable;
          }
        },
        locations: {
          type: new _definition$s.GraphQLNonNull(new _definition$s.GraphQLList(new _definition$s.GraphQLNonNull(__DirectiveLocation))),
          resolve: function resolve(directive) {
            return directive.locations;
          }
        },
        args: {
          type: new _definition$s.GraphQLNonNull(new _definition$s.GraphQLList(new _definition$s.GraphQLNonNull(__InputValue))),
          resolve: function resolve(directive) {
            return directive.args;
          }
        }
      };
    }
  });

  introspection.__Directive = __Directive;

  var __DirectiveLocation = new _definition$s.GraphQLEnumType({
    name: '__DirectiveLocation',
    description: 'A Directive can be adjacent to many parts of the GraphQL language, a __DirectiveLocation describes one such possible adjacencies.',
    values: {
      QUERY: {
        value: _directiveLocation$2.DirectiveLocation.QUERY,
        description: 'Location adjacent to a query operation.'
      },
      MUTATION: {
        value: _directiveLocation$2.DirectiveLocation.MUTATION,
        description: 'Location adjacent to a mutation operation.'
      },
      SUBSCRIPTION: {
        value: _directiveLocation$2.DirectiveLocation.SUBSCRIPTION,
        description: 'Location adjacent to a subscription operation.'
      },
      FIELD: {
        value: _directiveLocation$2.DirectiveLocation.FIELD,
        description: 'Location adjacent to a field.'
      },
      FRAGMENT_DEFINITION: {
        value: _directiveLocation$2.DirectiveLocation.FRAGMENT_DEFINITION,
        description: 'Location adjacent to a fragment definition.'
      },
      FRAGMENT_SPREAD: {
        value: _directiveLocation$2.DirectiveLocation.FRAGMENT_SPREAD,
        description: 'Location adjacent to a fragment spread.'
      },
      INLINE_FRAGMENT: {
        value: _directiveLocation$2.DirectiveLocation.INLINE_FRAGMENT,
        description: 'Location adjacent to an inline fragment.'
      },
      VARIABLE_DEFINITION: {
        value: _directiveLocation$2.DirectiveLocation.VARIABLE_DEFINITION,
        description: 'Location adjacent to a variable definition.'
      },
      SCHEMA: {
        value: _directiveLocation$2.DirectiveLocation.SCHEMA,
        description: 'Location adjacent to a schema definition.'
      },
      SCALAR: {
        value: _directiveLocation$2.DirectiveLocation.SCALAR,
        description: 'Location adjacent to a scalar definition.'
      },
      OBJECT: {
        value: _directiveLocation$2.DirectiveLocation.OBJECT,
        description: 'Location adjacent to an object type definition.'
      },
      FIELD_DEFINITION: {
        value: _directiveLocation$2.DirectiveLocation.FIELD_DEFINITION,
        description: 'Location adjacent to a field definition.'
      },
      ARGUMENT_DEFINITION: {
        value: _directiveLocation$2.DirectiveLocation.ARGUMENT_DEFINITION,
        description: 'Location adjacent to an argument definition.'
      },
      INTERFACE: {
        value: _directiveLocation$2.DirectiveLocation.INTERFACE,
        description: 'Location adjacent to an interface definition.'
      },
      UNION: {
        value: _directiveLocation$2.DirectiveLocation.UNION,
        description: 'Location adjacent to a union definition.'
      },
      ENUM: {
        value: _directiveLocation$2.DirectiveLocation.ENUM,
        description: 'Location adjacent to an enum definition.'
      },
      ENUM_VALUE: {
        value: _directiveLocation$2.DirectiveLocation.ENUM_VALUE,
        description: 'Location adjacent to an enum value definition.'
      },
      INPUT_OBJECT: {
        value: _directiveLocation$2.DirectiveLocation.INPUT_OBJECT,
        description: 'Location adjacent to an input object type definition.'
      },
      INPUT_FIELD_DEFINITION: {
        value: _directiveLocation$2.DirectiveLocation.INPUT_FIELD_DEFINITION,
        description: 'Location adjacent to an input object field definition.'
      }
    }
  });

  introspection.__DirectiveLocation = __DirectiveLocation;

  var __Type = new _definition$s.GraphQLObjectType({
    name: '__Type',
    description: 'The fundamental unit of any GraphQL Schema is the type. There are many kinds of types in GraphQL as represented by the `__TypeKind` enum.\n\nDepending on the kind of a type, certain fields describe information about that type. Scalar types provide no information beyond a name, description and optional `specifiedByUrl`, while Enum types provide their values. Object and Interface types provide the fields they describe. Abstract types, Union and Interface, provide the Object types possible at runtime. List and NonNull types compose other types.',
    fields: function fields() {
      return {
        kind: {
          type: new _definition$s.GraphQLNonNull(__TypeKind),
          resolve: function resolve(type) {
            if ((0, _definition$s.isScalarType)(type)) {
              return TypeKind.SCALAR;
            }

            if ((0, _definition$s.isObjectType)(type)) {
              return TypeKind.OBJECT;
            }

            if ((0, _definition$s.isInterfaceType)(type)) {
              return TypeKind.INTERFACE;
            }

            if ((0, _definition$s.isUnionType)(type)) {
              return TypeKind.UNION;
            }

            if ((0, _definition$s.isEnumType)(type)) {
              return TypeKind.ENUM;
            }

            if ((0, _definition$s.isInputObjectType)(type)) {
              return TypeKind.INPUT_OBJECT;
            }

            if ((0, _definition$s.isListType)(type)) {
              return TypeKind.LIST;
            } // istanbul ignore else (See: 'https://github.com/graphql/graphql-js/issues/2618')


            if ((0, _definition$s.isNonNullType)(type)) {
              return TypeKind.NON_NULL;
            } // istanbul ignore next (Not reachable. All possible types have been considered)


            (0, _invariant$c.default)(0, "Unexpected type: \"".concat((0, _inspect$m.default)(type), "\"."));
          }
        },
        name: {
          type: _scalars$6.GraphQLString,
          resolve: function resolve(type) {
            return type.name !== undefined ? type.name : undefined;
          }
        },
        description: {
          type: _scalars$6.GraphQLString,
          resolve: function resolve(type) {
            return type.description !== undefined ? type.description : undefined;
          }
        },
        specifiedByUrl: {
          type: _scalars$6.GraphQLString,
          resolve: function resolve(obj) {
            return obj.specifiedByUrl !== undefined ? obj.specifiedByUrl : undefined;
          }
        },
        fields: {
          type: new _definition$s.GraphQLList(new _definition$s.GraphQLNonNull(__Field)),
          args: {
            includeDeprecated: {
              type: _scalars$6.GraphQLBoolean,
              defaultValue: false
            }
          },
          resolve: function resolve(type, _ref) {
            var includeDeprecated = _ref.includeDeprecated;

            if ((0, _definition$s.isObjectType)(type) || (0, _definition$s.isInterfaceType)(type)) {
              var fields = (0, _objectValues$5.default)(type.getFields());
              return includeDeprecated ? fields : fields.filter(function (field) {
                return field.deprecationReason == null;
              });
            }
          }
        },
        interfaces: {
          type: new _definition$s.GraphQLList(new _definition$s.GraphQLNonNull(__Type)),
          resolve: function resolve(type) {
            if ((0, _definition$s.isObjectType)(type) || (0, _definition$s.isInterfaceType)(type)) {
              return type.getInterfaces();
            }
          }
        },
        possibleTypes: {
          type: new _definition$s.GraphQLList(new _definition$s.GraphQLNonNull(__Type)),
          resolve: function resolve(type, _args, _context, _ref2) {
            var schema = _ref2.schema;

            if ((0, _definition$s.isAbstractType)(type)) {
              return schema.getPossibleTypes(type);
            }
          }
        },
        enumValues: {
          type: new _definition$s.GraphQLList(new _definition$s.GraphQLNonNull(__EnumValue)),
          args: {
            includeDeprecated: {
              type: _scalars$6.GraphQLBoolean,
              defaultValue: false
            }
          },
          resolve: function resolve(type, _ref3) {
            var includeDeprecated = _ref3.includeDeprecated;

            if ((0, _definition$s.isEnumType)(type)) {
              var values = type.getValues();
              return includeDeprecated ? values : values.filter(function (field) {
                return field.deprecationReason == null;
              });
            }
          }
        },
        inputFields: {
          type: new _definition$s.GraphQLList(new _definition$s.GraphQLNonNull(__InputValue)),
          args: {
            includeDeprecated: {
              type: _scalars$6.GraphQLBoolean,
              defaultValue: false
            }
          },
          resolve: function resolve(type, _ref4) {
            var includeDeprecated = _ref4.includeDeprecated;

            if ((0, _definition$s.isInputObjectType)(type)) {
              var values = (0, _objectValues$5.default)(type.getFields());
              return includeDeprecated ? values : values.filter(function (field) {
                return field.deprecationReason == null;
              });
            }
          }
        },
        ofType: {
          type: __Type,
          resolve: function resolve(type) {
            return type.ofType !== undefined ? type.ofType : undefined;
          }
        }
      };
    }
  });

  introspection.__Type = __Type;

  var __Field = new _definition$s.GraphQLObjectType({
    name: '__Field',
    description: 'Object and Interface types are described by a list of Fields, each of which has a name, potentially a list of arguments, and a return type.',
    fields: function fields() {
      return {
        name: {
          type: new _definition$s.GraphQLNonNull(_scalars$6.GraphQLString),
          resolve: function resolve(field) {
            return field.name;
          }
        },
        description: {
          type: _scalars$6.GraphQLString,
          resolve: function resolve(field) {
            return field.description;
          }
        },
        args: {
          type: new _definition$s.GraphQLNonNull(new _definition$s.GraphQLList(new _definition$s.GraphQLNonNull(__InputValue))),
          args: {
            includeDeprecated: {
              type: _scalars$6.GraphQLBoolean,
              defaultValue: false
            }
          },
          resolve: function resolve(field, _ref5) {
            var includeDeprecated = _ref5.includeDeprecated;
            return includeDeprecated ? field.args : field.args.filter(function (arg) {
              return arg.deprecationReason == null;
            });
          }
        },
        type: {
          type: new _definition$s.GraphQLNonNull(__Type),
          resolve: function resolve(field) {
            return field.type;
          }
        },
        isDeprecated: {
          type: new _definition$s.GraphQLNonNull(_scalars$6.GraphQLBoolean),
          resolve: function resolve(field) {
            return field.deprecationReason != null;
          }
        },
        deprecationReason: {
          type: _scalars$6.GraphQLString,
          resolve: function resolve(field) {
            return field.deprecationReason;
          }
        }
      };
    }
  });

  introspection.__Field = __Field;

  var __InputValue = new _definition$s.GraphQLObjectType({
    name: '__InputValue',
    description: 'Arguments provided to Fields or Directives and the input fields of an InputObject are represented as Input Values which describe their type and optionally a default value.',
    fields: function fields() {
      return {
        name: {
          type: new _definition$s.GraphQLNonNull(_scalars$6.GraphQLString),
          resolve: function resolve(inputValue) {
            return inputValue.name;
          }
        },
        description: {
          type: _scalars$6.GraphQLString,
          resolve: function resolve(inputValue) {
            return inputValue.description;
          }
        },
        type: {
          type: new _definition$s.GraphQLNonNull(__Type),
          resolve: function resolve(inputValue) {
            return inputValue.type;
          }
        },
        defaultValue: {
          type: _scalars$6.GraphQLString,
          description: 'A GraphQL-formatted string representing the default value for this input value.',
          resolve: function resolve(inputValue) {
            var type = inputValue.type,
                defaultValue = inputValue.defaultValue;
            var valueAST = (0, _astFromValue$2.astFromValue)(defaultValue, type);
            return valueAST ? (0, _printer$8.print)(valueAST) : null;
          }
        },
        isDeprecated: {
          type: new _definition$s.GraphQLNonNull(_scalars$6.GraphQLBoolean),
          resolve: function resolve(field) {
            return field.deprecationReason != null;
          }
        },
        deprecationReason: {
          type: _scalars$6.GraphQLString,
          resolve: function resolve(obj) {
            return obj.deprecationReason;
          }
        }
      };
    }
  });

  introspection.__InputValue = __InputValue;

  var __EnumValue = new _definition$s.GraphQLObjectType({
    name: '__EnumValue',
    description: 'One possible value for a given Enum. Enum values are unique values, not a placeholder for a string or numeric value. However an Enum value is returned in a JSON response as a string.',
    fields: function fields() {
      return {
        name: {
          type: new _definition$s.GraphQLNonNull(_scalars$6.GraphQLString),
          resolve: function resolve(enumValue) {
            return enumValue.name;
          }
        },
        description: {
          type: _scalars$6.GraphQLString,
          resolve: function resolve(enumValue) {
            return enumValue.description;
          }
        },
        isDeprecated: {
          type: new _definition$s.GraphQLNonNull(_scalars$6.GraphQLBoolean),
          resolve: function resolve(enumValue) {
            return enumValue.deprecationReason != null;
          }
        },
        deprecationReason: {
          type: _scalars$6.GraphQLString,
          resolve: function resolve(enumValue) {
            return enumValue.deprecationReason;
          }
        }
      };
    }
  });

  introspection.__EnumValue = __EnumValue;
  var TypeKind = Object.freeze({
    SCALAR: 'SCALAR',
    OBJECT: 'OBJECT',
    INTERFACE: 'INTERFACE',
    UNION: 'UNION',
    ENUM: 'ENUM',
    INPUT_OBJECT: 'INPUT_OBJECT',
    LIST: 'LIST',
    NON_NULL: 'NON_NULL'
  });
  introspection.TypeKind = TypeKind;

  var __TypeKind = new _definition$s.GraphQLEnumType({
    name: '__TypeKind',
    description: 'An enum describing what kind of type a given `__Type` is.',
    values: {
      SCALAR: {
        value: TypeKind.SCALAR,
        description: 'Indicates this type is a scalar.'
      },
      OBJECT: {
        value: TypeKind.OBJECT,
        description: 'Indicates this type is an object. `fields` and `interfaces` are valid fields.'
      },
      INTERFACE: {
        value: TypeKind.INTERFACE,
        description: 'Indicates this type is an interface. `fields`, `interfaces`, and `possibleTypes` are valid fields.'
      },
      UNION: {
        value: TypeKind.UNION,
        description: 'Indicates this type is a union. `possibleTypes` is a valid field.'
      },
      ENUM: {
        value: TypeKind.ENUM,
        description: 'Indicates this type is an enum. `enumValues` is a valid field.'
      },
      INPUT_OBJECT: {
        value: TypeKind.INPUT_OBJECT,
        description: 'Indicates this type is an input object. `inputFields` is a valid field.'
      },
      LIST: {
        value: TypeKind.LIST,
        description: 'Indicates this type is a list. `ofType` is a valid field.'
      },
      NON_NULL: {
        value: TypeKind.NON_NULL,
        description: 'Indicates this type is a non-null. `ofType` is a valid field.'
      }
    }
  });
  /**
   * Note that these are GraphQLField and not GraphQLFieldConfig,
   * so the format for args is different.
   */


  introspection.__TypeKind = __TypeKind;
  var SchemaMetaFieldDef = {
    name: '__schema',
    type: new _definition$s.GraphQLNonNull(__Schema),
    description: 'Access the current type schema of this server.',
    args: [],
    resolve: function resolve(_source, _args, _context, _ref6) {
      var schema = _ref6.schema;
      return schema;
    },
    isDeprecated: false,
    deprecationReason: undefined,
    extensions: undefined,
    astNode: undefined
  };
  introspection.SchemaMetaFieldDef = SchemaMetaFieldDef;
  var TypeMetaFieldDef = {
    name: '__type',
    type: __Type,
    description: 'Request the type information of a single type.',
    args: [{
      name: 'name',
      description: undefined,
      type: new _definition$s.GraphQLNonNull(_scalars$6.GraphQLString),
      defaultValue: undefined,
      deprecationReason: undefined,
      extensions: undefined,
      astNode: undefined
    }],
    resolve: function resolve(_source, _ref7, _context, _ref8) {
      var name = _ref7.name;
      var schema = _ref8.schema;
      return schema.getType(name);
    },
    isDeprecated: false,
    deprecationReason: undefined,
    extensions: undefined,
    astNode: undefined
  };
  introspection.TypeMetaFieldDef = TypeMetaFieldDef;
  var TypeNameMetaFieldDef = {
    name: '__typename',
    type: new _definition$s.GraphQLNonNull(_scalars$6.GraphQLString),
    description: 'The name of the current Object type at runtime.',
    args: [],
    resolve: function resolve(_source, _args, _context, _ref9) {
      var parentType = _ref9.parentType;
      return parentType.name;
    },
    isDeprecated: false,
    deprecationReason: undefined,
    extensions: undefined,
    astNode: undefined
  };
  introspection.TypeNameMetaFieldDef = TypeNameMetaFieldDef;
  var introspectionTypes = Object.freeze([__Schema, __Directive, __DirectiveLocation, __Type, __Field, __InputValue, __EnumValue, __TypeKind]);
  introspection.introspectionTypes = introspectionTypes;

  function isIntrospectionType(type) {
    return introspectionTypes.some(function (_ref10) {
      var name = _ref10.name;
      return type.name === name;
    });
  }

  var directives = {};

  Object.defineProperty(directives, "__esModule", {
    value: true
  });
  directives.isDirective = isDirective;
  directives.assertDirective = assertDirective;
  directives.isSpecifiedDirective = isSpecifiedDirective;
  directives.specifiedDirectives = directives.GraphQLSpecifiedByDirective = directives.GraphQLDeprecatedDirective = directives.DEFAULT_DEPRECATION_REASON = directives.GraphQLSkipDirective = directives.GraphQLIncludeDirective = directives.GraphQLDirective = void 0;

  var _objectEntries = _interopRequireDefault$w(objectEntries$1);

  var _symbols$3 = symbols;

  var _inspect$l = _interopRequireDefault$w(inspect$1);

  var _toObjMap$1 = _interopRequireDefault$w(toObjMap$1);

  var _devAssert$7 = _interopRequireDefault$w(devAssert$1);

  var _instanceOf$1 = _interopRequireDefault$w(instanceOf);

  var _isObjectLike$4 = _interopRequireDefault$w(isObjectLike$1);

  var _defineInspect = _interopRequireDefault$w(defineInspect$1);

  var _directiveLocation$1 = directiveLocation;

  var _scalars$5 = scalars;

  var _definition$r = definition;

  function _interopRequireDefault$w(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _defineProperties$1(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

  function _createClass$1(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties$1(Constructor.prototype, protoProps); if (staticProps) _defineProperties$1(Constructor, staticProps); return Constructor; }

  // eslint-disable-next-line no-redeclare
  function isDirective(directive) {
    return (0, _instanceOf$1.default)(directive, GraphQLDirective);
  }

  function assertDirective(directive) {
    if (!isDirective(directive)) {
      throw new Error("Expected ".concat((0, _inspect$l.default)(directive), " to be a GraphQL directive."));
    }

    return directive;
  }
  /**
   * Directives are used by the GraphQL runtime as a way of modifying execution
   * behavior. Type system creators will usually not create these directly.
   */


  var GraphQLDirective = /*#__PURE__*/function () {
    function GraphQLDirective(config) {
      var _config$isRepeatable, _config$args;

      this.name = config.name;
      this.description = config.description;
      this.locations = config.locations;
      this.isRepeatable = (_config$isRepeatable = config.isRepeatable) !== null && _config$isRepeatable !== void 0 ? _config$isRepeatable : false;
      this.extensions = config.extensions && (0, _toObjMap$1.default)(config.extensions);
      this.astNode = config.astNode;
      config.name || (0, _devAssert$7.default)(0, 'Directive must be named.');
      Array.isArray(config.locations) || (0, _devAssert$7.default)(0, "@".concat(config.name, " locations must be an Array."));
      var args = (_config$args = config.args) !== null && _config$args !== void 0 ? _config$args : {};
      (0, _isObjectLike$4.default)(args) && !Array.isArray(args) || (0, _devAssert$7.default)(0, "@".concat(config.name, " args must be an object with argument names as keys."));
      this.args = (0, _objectEntries.default)(args).map(function (_ref) {
        var argName = _ref[0],
            argConfig = _ref[1];
        return {
          name: argName,
          description: argConfig.description,
          type: argConfig.type,
          defaultValue: argConfig.defaultValue,
          deprecationReason: argConfig.deprecationReason,
          extensions: argConfig.extensions && (0, _toObjMap$1.default)(argConfig.extensions),
          astNode: argConfig.astNode
        };
      });
    }

    var _proto = GraphQLDirective.prototype;

    _proto.toConfig = function toConfig() {
      return {
        name: this.name,
        description: this.description,
        locations: this.locations,
        args: (0, _definition$r.argsToArgsConfig)(this.args),
        isRepeatable: this.isRepeatable,
        extensions: this.extensions,
        astNode: this.astNode
      };
    };

    _proto.toString = function toString() {
      return '@' + this.name;
    };

    _proto.toJSON = function toJSON() {
      return this.toString();
    } // $FlowFixMe[unsupported-syntax] Flow doesn't support computed properties yet
    ;

    _createClass$1(GraphQLDirective, [{
      key: _symbols$3.SYMBOL_TO_STRING_TAG,
      get: function get() {
        return 'GraphQLDirective';
      }
    }]);

    return GraphQLDirective;
  }(); // Print a simplified form when appearing in `inspect` and `util.inspect`.


  directives.GraphQLDirective = GraphQLDirective;
  (0, _defineInspect.default)(GraphQLDirective);

  /**
   * Used to conditionally include fields or fragments.
   */
  var GraphQLIncludeDirective = new GraphQLDirective({
    name: 'include',
    description: 'Directs the executor to include this field or fragment only when the `if` argument is true.',
    locations: [_directiveLocation$1.DirectiveLocation.FIELD, _directiveLocation$1.DirectiveLocation.FRAGMENT_SPREAD, _directiveLocation$1.DirectiveLocation.INLINE_FRAGMENT],
    args: {
      if: {
        type: new _definition$r.GraphQLNonNull(_scalars$5.GraphQLBoolean),
        description: 'Included when true.'
      }
    }
  });
  /**
   * Used to conditionally skip (exclude) fields or fragments.
   */

  directives.GraphQLIncludeDirective = GraphQLIncludeDirective;
  var GraphQLSkipDirective = new GraphQLDirective({
    name: 'skip',
    description: 'Directs the executor to skip this field or fragment when the `if` argument is true.',
    locations: [_directiveLocation$1.DirectiveLocation.FIELD, _directiveLocation$1.DirectiveLocation.FRAGMENT_SPREAD, _directiveLocation$1.DirectiveLocation.INLINE_FRAGMENT],
    args: {
      if: {
        type: new _definition$r.GraphQLNonNull(_scalars$5.GraphQLBoolean),
        description: 'Skipped when true.'
      }
    }
  });
  /**
   * Constant string used for default reason for a deprecation.
   */

  directives.GraphQLSkipDirective = GraphQLSkipDirective;
  var DEFAULT_DEPRECATION_REASON = 'No longer supported';
  /**
   * Used to declare element of a GraphQL schema as deprecated.
   */

  directives.DEFAULT_DEPRECATION_REASON = DEFAULT_DEPRECATION_REASON;
  var GraphQLDeprecatedDirective = new GraphQLDirective({
    name: 'deprecated',
    description: 'Marks an element of a GraphQL schema as no longer supported.',
    locations: [_directiveLocation$1.DirectiveLocation.FIELD_DEFINITION, _directiveLocation$1.DirectiveLocation.ARGUMENT_DEFINITION, _directiveLocation$1.DirectiveLocation.INPUT_FIELD_DEFINITION, _directiveLocation$1.DirectiveLocation.ENUM_VALUE],
    args: {
      reason: {
        type: _scalars$5.GraphQLString,
        description: 'Explains why this element was deprecated, usually also including a suggestion for how to access supported similar data. Formatted using the Markdown syntax, as specified by [CommonMark](https://commonmark.org/).',
        defaultValue: DEFAULT_DEPRECATION_REASON
      }
    }
  });
  /**
   * Used to provide a URL for specifying the behaviour of custom scalar definitions.
   */

  directives.GraphQLDeprecatedDirective = GraphQLDeprecatedDirective;
  var GraphQLSpecifiedByDirective = new GraphQLDirective({
    name: 'specifiedBy',
    description: 'Exposes a URL that specifies the behaviour of this scalar.',
    locations: [_directiveLocation$1.DirectiveLocation.SCALAR],
    args: {
      url: {
        type: new _definition$r.GraphQLNonNull(_scalars$5.GraphQLString),
        description: 'The URL that specifies the behaviour of this scalar.'
      }
    }
  });
  /**
   * The full list of specified directives.
   */

  directives.GraphQLSpecifiedByDirective = GraphQLSpecifiedByDirective;
  var specifiedDirectives = Object.freeze([GraphQLIncludeDirective, GraphQLSkipDirective, GraphQLDeprecatedDirective, GraphQLSpecifiedByDirective]);
  directives.specifiedDirectives = specifiedDirectives;

  function isSpecifiedDirective(directive) {
    return specifiedDirectives.some(function (_ref2) {
      var name = _ref2.name;
      return name === directive.name;
    });
  }

  Object.defineProperty(schema, "__esModule", {
    value: true
  });
  schema.isSchema = isSchema;
  schema.assertSchema = assertSchema;
  schema.GraphQLSchema = void 0;

  var _find$4 = _interopRequireDefault$v(find$1);

  var _arrayFrom3 = _interopRequireDefault$v(arrayFrom$1);

  var _objectValues5$1 = _interopRequireDefault$v(objectValues$1);

  var _symbols$2 = symbols;

  var _inspect$k = _interopRequireDefault$v(inspect$1);

  var _toObjMap = _interopRequireDefault$v(toObjMap$1);

  var _devAssert$6 = _interopRequireDefault$v(devAssert$1);

  var _instanceOf = _interopRequireDefault$v(instanceOf);

  var _isObjectLike$3 = _interopRequireDefault$v(isObjectLike$1);

  var _introspection$9 = introspection;

  var _directives$b = directives;

  var _definition$q = definition;

  function _interopRequireDefault$v(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

  function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

  // eslint-disable-next-line no-redeclare
  function isSchema(schema) {
    return (0, _instanceOf.default)(schema, GraphQLSchema);
  }

  function assertSchema(schema) {
    if (!isSchema(schema)) {
      throw new Error("Expected ".concat((0, _inspect$k.default)(schema), " to be a GraphQL schema."));
    }

    return schema;
  }
  /**
   * Schema Definition
   *
   * A Schema is created by supplying the root types of each type of operation,
   * query and mutation (optional). A schema definition is then supplied to the
   * validator and executor.
   *
   * Example:
   *
   *     const MyAppSchema = new GraphQLSchema({
   *       query: MyAppQueryRootType,
   *       mutation: MyAppMutationRootType,
   *     })
   *
   * Note: When the schema is constructed, by default only the types that are
   * reachable by traversing the root types are included, other types must be
   * explicitly referenced.
   *
   * Example:
   *
   *     const characterInterface = new GraphQLInterfaceType({
   *       name: 'Character',
   *       ...
   *     });
   *
   *     const humanType = new GraphQLObjectType({
   *       name: 'Human',
   *       interfaces: [characterInterface],
   *       ...
   *     });
   *
   *     const droidType = new GraphQLObjectType({
   *       name: 'Droid',
   *       interfaces: [characterInterface],
   *       ...
   *     });
   *
   *     const schema = new GraphQLSchema({
   *       query: new GraphQLObjectType({
   *         name: 'Query',
   *         fields: {
   *           hero: { type: characterInterface, ... },
   *         }
   *       }),
   *       ...
   *       // Since this schema references only the `Character` interface it's
   *       // necessary to explicitly list the types that implement it if
   *       // you want them to be included in the final schema.
   *       types: [humanType, droidType],
   *     })
   *
   * Note: If an array of `directives` are provided to GraphQLSchema, that will be
   * the exact list of directives represented and allowed. If `directives` is not
   * provided then a default set of the specified directives (e.g. @include and
   * @skip) will be used. If you wish to provide *additional* directives to these
   * specified directives, you must explicitly declare them. Example:
   *
   *     const MyAppSchema = new GraphQLSchema({
   *       ...
   *       directives: specifiedDirectives.concat([ myCustomDirective ]),
   *     })
   *
   */


  var GraphQLSchema = /*#__PURE__*/function () {
    // Used as a cache for validateSchema().
    function GraphQLSchema(config) {
      var _config$directives;

      // If this schema was built from a source known to be valid, then it may be
      // marked with assumeValid to avoid an additional type system validation.
      this.__validationErrors = config.assumeValid === true ? [] : undefined; // Check for common mistakes during construction to produce early errors.

      (0, _isObjectLike$3.default)(config) || (0, _devAssert$6.default)(0, 'Must provide configuration object.');
      !config.types || Array.isArray(config.types) || (0, _devAssert$6.default)(0, "\"types\" must be Array if provided but got: ".concat((0, _inspect$k.default)(config.types), "."));
      !config.directives || Array.isArray(config.directives) || (0, _devAssert$6.default)(0, '"directives" must be Array if provided but got: ' + "".concat((0, _inspect$k.default)(config.directives), "."));
      this.description = config.description;
      this.extensions = config.extensions && (0, _toObjMap.default)(config.extensions);
      this.astNode = config.astNode;
      this.extensionASTNodes = config.extensionASTNodes;
      this._queryType = config.query;
      this._mutationType = config.mutation;
      this._subscriptionType = config.subscription; // Provide specified directives (e.g. @include and @skip) by default.

      this._directives = (_config$directives = config.directives) !== null && _config$directives !== void 0 ? _config$directives : _directives$b.specifiedDirectives; // To preserve order of user-provided types, we add first to add them to
      // the set of "collected" types, so `collectReferencedTypes` ignore them.

      var allReferencedTypes = new Set(config.types);

      if (config.types != null) {
        for (var _i2 = 0, _config$types2 = config.types; _i2 < _config$types2.length; _i2++) {
          var type = _config$types2[_i2];
          // When we ready to process this type, we remove it from "collected" types
          // and then add it together with all dependent types in the correct position.
          allReferencedTypes.delete(type);
          collectReferencedTypes(type, allReferencedTypes);
        }
      }

      if (this._queryType != null) {
        collectReferencedTypes(this._queryType, allReferencedTypes);
      }

      if (this._mutationType != null) {
        collectReferencedTypes(this._mutationType, allReferencedTypes);
      }

      if (this._subscriptionType != null) {
        collectReferencedTypes(this._subscriptionType, allReferencedTypes);
      }

      for (var _i4 = 0, _this$_directives2 = this._directives; _i4 < _this$_directives2.length; _i4++) {
        var directive = _this$_directives2[_i4];

        // Directives are not validated until validateSchema() is called.
        if ((0, _directives$b.isDirective)(directive)) {
          for (var _i6 = 0, _directive$args2 = directive.args; _i6 < _directive$args2.length; _i6++) {
            var arg = _directive$args2[_i6];
            collectReferencedTypes(arg.type, allReferencedTypes);
          }
        }
      }

      collectReferencedTypes(_introspection$9.__Schema, allReferencedTypes); // Storing the resulting map for reference by the schema.

      this._typeMap = Object.create(null);
      this._subTypeMap = Object.create(null); // Keep track of all implementations by interface name.

      this._implementationsMap = Object.create(null);

      for (var _i8 = 0, _arrayFrom2 = (0, _arrayFrom3.default)(allReferencedTypes); _i8 < _arrayFrom2.length; _i8++) {
        var namedType = _arrayFrom2[_i8];

        if (namedType == null) {
          continue;
        }

        var typeName = namedType.name;
        typeName || (0, _devAssert$6.default)(0, 'One of the provided types for building the Schema is missing a name.');

        if (this._typeMap[typeName] !== undefined) {
          throw new Error("Schema must contain uniquely named types but contains multiple types named \"".concat(typeName, "\"."));
        }

        this._typeMap[typeName] = namedType;

        if ((0, _definition$q.isInterfaceType)(namedType)) {
          // Store implementations by interface.
          for (var _i10 = 0, _namedType$getInterfa2 = namedType.getInterfaces(); _i10 < _namedType$getInterfa2.length; _i10++) {
            var iface = _namedType$getInterfa2[_i10];

            if ((0, _definition$q.isInterfaceType)(iface)) {
              var implementations = this._implementationsMap[iface.name];

              if (implementations === undefined) {
                implementations = this._implementationsMap[iface.name] = {
                  objects: [],
                  interfaces: []
                };
              }

              implementations.interfaces.push(namedType);
            }
          }
        } else if ((0, _definition$q.isObjectType)(namedType)) {
          // Store implementations by objects.
          for (var _i12 = 0, _namedType$getInterfa4 = namedType.getInterfaces(); _i12 < _namedType$getInterfa4.length; _i12++) {
            var _iface = _namedType$getInterfa4[_i12];

            if ((0, _definition$q.isInterfaceType)(_iface)) {
              var _implementations = this._implementationsMap[_iface.name];

              if (_implementations === undefined) {
                _implementations = this._implementationsMap[_iface.name] = {
                  objects: [],
                  interfaces: []
                };
              }

              _implementations.objects.push(namedType);
            }
          }
        }
      }
    }

    var _proto = GraphQLSchema.prototype;

    _proto.getQueryType = function getQueryType() {
      return this._queryType;
    };

    _proto.getMutationType = function getMutationType() {
      return this._mutationType;
    };

    _proto.getSubscriptionType = function getSubscriptionType() {
      return this._subscriptionType;
    };

    _proto.getTypeMap = function getTypeMap() {
      return this._typeMap;
    };

    _proto.getType = function getType(name) {
      return this.getTypeMap()[name];
    };

    _proto.getPossibleTypes = function getPossibleTypes(abstractType) {
      return (0, _definition$q.isUnionType)(abstractType) ? abstractType.getTypes() : this.getImplementations(abstractType).objects;
    };

    _proto.getImplementations = function getImplementations(interfaceType) {
      var implementations = this._implementationsMap[interfaceType.name];
      return implementations !== null && implementations !== void 0 ? implementations : {
        objects: [],
        interfaces: []
      };
    } // @deprecated: use isSubType instead - will be removed in v16.
    ;

    _proto.isPossibleType = function isPossibleType(abstractType, possibleType) {
      return this.isSubType(abstractType, possibleType);
    };

    _proto.isSubType = function isSubType(abstractType, maybeSubType) {
      var map = this._subTypeMap[abstractType.name];

      if (map === undefined) {
        map = Object.create(null);

        if ((0, _definition$q.isUnionType)(abstractType)) {
          for (var _i14 = 0, _abstractType$getType2 = abstractType.getTypes(); _i14 < _abstractType$getType2.length; _i14++) {
            var type = _abstractType$getType2[_i14];
            map[type.name] = true;
          }
        } else {
          var implementations = this.getImplementations(abstractType);

          for (var _i16 = 0, _implementations$obje2 = implementations.objects; _i16 < _implementations$obje2.length; _i16++) {
            var _type = _implementations$obje2[_i16];
            map[_type.name] = true;
          }

          for (var _i18 = 0, _implementations$inte2 = implementations.interfaces; _i18 < _implementations$inte2.length; _i18++) {
            var _type2 = _implementations$inte2[_i18];
            map[_type2.name] = true;
          }
        }

        this._subTypeMap[abstractType.name] = map;
      }

      return map[maybeSubType.name] !== undefined;
    };

    _proto.getDirectives = function getDirectives() {
      return this._directives;
    };

    _proto.getDirective = function getDirective(name) {
      return (0, _find$4.default)(this.getDirectives(), function (directive) {
        return directive.name === name;
      });
    };

    _proto.toConfig = function toConfig() {
      var _this$extensionASTNod;

      return {
        description: this.description,
        query: this.getQueryType(),
        mutation: this.getMutationType(),
        subscription: this.getSubscriptionType(),
        types: (0, _objectValues5$1.default)(this.getTypeMap()),
        directives: this.getDirectives().slice(),
        extensions: this.extensions,
        astNode: this.astNode,
        extensionASTNodes: (_this$extensionASTNod = this.extensionASTNodes) !== null && _this$extensionASTNod !== void 0 ? _this$extensionASTNod : [],
        assumeValid: this.__validationErrors !== undefined
      };
    } // $FlowFixMe[unsupported-syntax] Flow doesn't support computed properties yet
    ;

    _createClass(GraphQLSchema, [{
      key: _symbols$2.SYMBOL_TO_STRING_TAG,
      get: function get() {
        return 'GraphQLSchema';
      }
    }]);

    return GraphQLSchema;
  }();

  schema.GraphQLSchema = GraphQLSchema;

  function collectReferencedTypes(type, typeSet) {
    var namedType = (0, _definition$q.getNamedType)(type);

    if (!typeSet.has(namedType)) {
      typeSet.add(namedType);

      if ((0, _definition$q.isUnionType)(namedType)) {
        for (var _i20 = 0, _namedType$getTypes2 = namedType.getTypes(); _i20 < _namedType$getTypes2.length; _i20++) {
          var memberType = _namedType$getTypes2[_i20];
          collectReferencedTypes(memberType, typeSet);
        }
      } else if ((0, _definition$q.isObjectType)(namedType) || (0, _definition$q.isInterfaceType)(namedType)) {
        for (var _i22 = 0, _namedType$getInterfa6 = namedType.getInterfaces(); _i22 < _namedType$getInterfa6.length; _i22++) {
          var interfaceType = _namedType$getInterfa6[_i22];
          collectReferencedTypes(interfaceType, typeSet);
        }

        for (var _i24 = 0, _objectValues2 = (0, _objectValues5$1.default)(namedType.getFields()); _i24 < _objectValues2.length; _i24++) {
          var field = _objectValues2[_i24];
          collectReferencedTypes(field.type, typeSet);

          for (var _i26 = 0, _field$args2 = field.args; _i26 < _field$args2.length; _i26++) {
            var arg = _field$args2[_i26];
            collectReferencedTypes(arg.type, typeSet);
          }
        }
      } else if ((0, _definition$q.isInputObjectType)(namedType)) {
        for (var _i28 = 0, _objectValues4 = (0, _objectValues5$1.default)(namedType.getFields()); _i28 < _objectValues4.length; _i28++) {
          var _field = _objectValues4[_i28];
          collectReferencedTypes(_field.type, typeSet);
        }
      }
    }

    return typeSet;
  }

  Object.defineProperty(validate$1, "__esModule", {
    value: true
  });
  validate$1.validateSchema = validateSchema;
  validate$1.assertValidSchema = assertValidSchema;

  var _find$3 = _interopRequireDefault$u(find$1);

  var _objectValues5 = _interopRequireDefault$u(objectValues$1);

  var _inspect$j = _interopRequireDefault$u(inspect$1);

  var _GraphQLError$F = GraphQLError$1;

  var _locatedError$2 = locatedError$1;

  var _assertValidName = assertValidName$1;

  var _typeComparators$2 = typeComparators;

  var _schema$4 = schema;

  var _introspection$8 = introspection;

  var _directives$a = directives;

  var _definition$p = definition;

  function _interopRequireDefault$u(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  /**
   * Implements the "Type Validation" sub-sections of the specification's
   * "Type System" section.
   *
   * Validation runs synchronously, returning an array of encountered errors, or
   * an empty array if no errors were encountered and the Schema is valid.
   */
  function validateSchema(schema) {
    // First check to ensure the provided value is in fact a GraphQLSchema.
    (0, _schema$4.assertSchema)(schema); // If this Schema has already been validated, return the previous results.

    if (schema.__validationErrors) {
      return schema.__validationErrors;
    } // Validate the schema, producing a list of errors.


    var context = new SchemaValidationContext(schema);
    validateRootTypes(context);
    validateDirectives(context);
    validateTypes(context); // Persist the results of validation before returning to ensure validation
    // does not run multiple times for this schema.

    var errors = context.getErrors();
    schema.__validationErrors = errors;
    return errors;
  }
  /**
   * Utility function which asserts a schema is valid by throwing an error if
   * it is invalid.
   */


  function assertValidSchema(schema) {
    var errors = validateSchema(schema);

    if (errors.length !== 0) {
      throw new Error(errors.map(function (error) {
        return error.message;
      }).join('\n\n'));
    }
  }

  var SchemaValidationContext = /*#__PURE__*/function () {
    function SchemaValidationContext(schema) {
      this._errors = [];
      this.schema = schema;
    }

    var _proto = SchemaValidationContext.prototype;

    _proto.reportError = function reportError(message, nodes) {
      var _nodes = Array.isArray(nodes) ? nodes.filter(Boolean) : nodes;

      this.addError(new _GraphQLError$F.GraphQLError(message, _nodes));
    };

    _proto.addError = function addError(error) {
      this._errors.push(error);
    };

    _proto.getErrors = function getErrors() {
      return this._errors;
    };

    return SchemaValidationContext;
  }();

  function validateRootTypes(context) {
    var schema = context.schema;
    var queryType = schema.getQueryType();

    if (!queryType) {
      context.reportError('Query root type must be provided.', schema.astNode);
    } else if (!(0, _definition$p.isObjectType)(queryType)) {
      var _getOperationTypeNode;

      context.reportError("Query root type must be Object type, it cannot be ".concat((0, _inspect$j.default)(queryType), "."), (_getOperationTypeNode = getOperationTypeNode(schema, 'query')) !== null && _getOperationTypeNode !== void 0 ? _getOperationTypeNode : queryType.astNode);
    }

    var mutationType = schema.getMutationType();

    if (mutationType && !(0, _definition$p.isObjectType)(mutationType)) {
      var _getOperationTypeNode2;

      context.reportError('Mutation root type must be Object type if provided, it cannot be ' + "".concat((0, _inspect$j.default)(mutationType), "."), (_getOperationTypeNode2 = getOperationTypeNode(schema, 'mutation')) !== null && _getOperationTypeNode2 !== void 0 ? _getOperationTypeNode2 : mutationType.astNode);
    }

    var subscriptionType = schema.getSubscriptionType();

    if (subscriptionType && !(0, _definition$p.isObjectType)(subscriptionType)) {
      var _getOperationTypeNode3;

      context.reportError('Subscription root type must be Object type if provided, it cannot be ' + "".concat((0, _inspect$j.default)(subscriptionType), "."), (_getOperationTypeNode3 = getOperationTypeNode(schema, 'subscription')) !== null && _getOperationTypeNode3 !== void 0 ? _getOperationTypeNode3 : subscriptionType.astNode);
    }
  }

  function getOperationTypeNode(schema, operation) {
    var operationNodes = getAllSubNodes(schema, function (node) {
      return node.operationTypes;
    });

    for (var _i2 = 0; _i2 < operationNodes.length; _i2++) {
      var node = operationNodes[_i2];

      if (node.operation === operation) {
        return node.type;
      }
    }

    return undefined;
  }

  function validateDirectives(context) {
    for (var _i4 = 0, _context$schema$getDi2 = context.schema.getDirectives(); _i4 < _context$schema$getDi2.length; _i4++) {
      var directive = _context$schema$getDi2[_i4];

      // Ensure all directives are in fact GraphQL directives.
      if (!(0, _directives$a.isDirective)(directive)) {
        context.reportError("Expected directive but got: ".concat((0, _inspect$j.default)(directive), "."), directive === null || directive === void 0 ? void 0 : directive.astNode);
        continue;
      } // Ensure they are named correctly.


      validateName(context, directive); // TODO: Ensure proper locations.
      // Ensure the arguments are valid.

      for (var _i6 = 0, _directive$args2 = directive.args; _i6 < _directive$args2.length; _i6++) {
        var arg = _directive$args2[_i6];
        // Ensure they are named correctly.
        validateName(context, arg); // Ensure the type is an input type.

        if (!(0, _definition$p.isInputType)(arg.type)) {
          context.reportError("The type of @".concat(directive.name, "(").concat(arg.name, ":) must be Input Type ") + "but got: ".concat((0, _inspect$j.default)(arg.type), "."), arg.astNode);
        }

        if ((0, _definition$p.isRequiredArgument)(arg) && arg.deprecationReason != null) {
          var _arg$astNode;

          context.reportError("Required argument @".concat(directive.name, "(").concat(arg.name, ":) cannot be deprecated."), [getDeprecatedDirectiveNode(arg.astNode), // istanbul ignore next (TODO need to write coverage tests)
          (_arg$astNode = arg.astNode) === null || _arg$astNode === void 0 ? void 0 : _arg$astNode.type]);
        }
      }
    }
  }

  function validateName(context, node) {
    // Ensure names are valid, however introspection types opt out.
    var error = (0, _assertValidName.isValidNameError)(node.name);

    if (error) {
      context.addError((0, _locatedError$2.locatedError)(error, node.astNode));
    }
  }

  function validateTypes(context) {
    var validateInputObjectCircularRefs = createInputObjectCircularRefsValidator(context);
    var typeMap = context.schema.getTypeMap();

    for (var _i8 = 0, _objectValues2 = (0, _objectValues5.default)(typeMap); _i8 < _objectValues2.length; _i8++) {
      var type = _objectValues2[_i8];

      // Ensure all provided types are in fact GraphQL type.
      if (!(0, _definition$p.isNamedType)(type)) {
        context.reportError("Expected GraphQL named type but got: ".concat((0, _inspect$j.default)(type), "."), type.astNode);
        continue;
      } // Ensure it is named correctly (excluding introspection types).


      if (!(0, _introspection$8.isIntrospectionType)(type)) {
        validateName(context, type);
      }

      if ((0, _definition$p.isObjectType)(type)) {
        // Ensure fields are valid
        validateFields(context, type); // Ensure objects implement the interfaces they claim to.

        validateInterfaces(context, type);
      } else if ((0, _definition$p.isInterfaceType)(type)) {
        // Ensure fields are valid.
        validateFields(context, type); // Ensure interfaces implement the interfaces they claim to.

        validateInterfaces(context, type);
      } else if ((0, _definition$p.isUnionType)(type)) {
        // Ensure Unions include valid member types.
        validateUnionMembers(context, type);
      } else if ((0, _definition$p.isEnumType)(type)) {
        // Ensure Enums have valid values.
        validateEnumValues(context, type);
      } else if ((0, _definition$p.isInputObjectType)(type)) {
        // Ensure Input Object fields are valid.
        validateInputFields(context, type); // Ensure Input Objects do not contain non-nullable circular references

        validateInputObjectCircularRefs(type);
      }
    }
  }

  function validateFields(context, type) {
    var fields = (0, _objectValues5.default)(type.getFields()); // Objects and Interfaces both must define one or more fields.

    if (fields.length === 0) {
      context.reportError("Type ".concat(type.name, " must define one or more fields."), getAllNodes(type));
    }

    for (var _i10 = 0; _i10 < fields.length; _i10++) {
      var field = fields[_i10];
      // Ensure they are named correctly.
      validateName(context, field); // Ensure the type is an output type

      if (!(0, _definition$p.isOutputType)(field.type)) {
        var _field$astNode;

        context.reportError("The type of ".concat(type.name, ".").concat(field.name, " must be Output Type ") + "but got: ".concat((0, _inspect$j.default)(field.type), "."), (_field$astNode = field.astNode) === null || _field$astNode === void 0 ? void 0 : _field$astNode.type);
      } // Ensure the arguments are valid


      for (var _i12 = 0, _field$args2 = field.args; _i12 < _field$args2.length; _i12++) {
        var arg = _field$args2[_i12];
        var argName = arg.name; // Ensure they are named correctly.

        validateName(context, arg); // Ensure the type is an input type

        if (!(0, _definition$p.isInputType)(arg.type)) {
          var _arg$astNode2;

          context.reportError("The type of ".concat(type.name, ".").concat(field.name, "(").concat(argName, ":) must be Input ") + "Type but got: ".concat((0, _inspect$j.default)(arg.type), "."), (_arg$astNode2 = arg.astNode) === null || _arg$astNode2 === void 0 ? void 0 : _arg$astNode2.type);
        }

        if ((0, _definition$p.isRequiredArgument)(arg) && arg.deprecationReason != null) {
          var _arg$astNode3;

          context.reportError("Required argument ".concat(type.name, ".").concat(field.name, "(").concat(argName, ":) cannot be deprecated."), [getDeprecatedDirectiveNode(arg.astNode), // istanbul ignore next (TODO need to write coverage tests)
          (_arg$astNode3 = arg.astNode) === null || _arg$astNode3 === void 0 ? void 0 : _arg$astNode3.type]);
        }
      }
    }
  }

  function validateInterfaces(context, type) {
    var ifaceTypeNames = Object.create(null);

    for (var _i14 = 0, _type$getInterfaces2 = type.getInterfaces(); _i14 < _type$getInterfaces2.length; _i14++) {
      var iface = _type$getInterfaces2[_i14];

      if (!(0, _definition$p.isInterfaceType)(iface)) {
        context.reportError("Type ".concat((0, _inspect$j.default)(type), " must only implement Interface types, ") + "it cannot implement ".concat((0, _inspect$j.default)(iface), "."), getAllImplementsInterfaceNodes(type, iface));
        continue;
      }

      if (type === iface) {
        context.reportError("Type ".concat(type.name, " cannot implement itself because it would create a circular reference."), getAllImplementsInterfaceNodes(type, iface));
        continue;
      }

      if (ifaceTypeNames[iface.name]) {
        context.reportError("Type ".concat(type.name, " can only implement ").concat(iface.name, " once."), getAllImplementsInterfaceNodes(type, iface));
        continue;
      }

      ifaceTypeNames[iface.name] = true;
      validateTypeImplementsAncestors(context, type, iface);
      validateTypeImplementsInterface(context, type, iface);
    }
  }

  function validateTypeImplementsInterface(context, type, iface) {
    var typeFieldMap = type.getFields(); // Assert each interface field is implemented.

    for (var _i16 = 0, _objectValues4 = (0, _objectValues5.default)(iface.getFields()); _i16 < _objectValues4.length; _i16++) {
      var ifaceField = _objectValues4[_i16];
      var fieldName = ifaceField.name;
      var typeField = typeFieldMap[fieldName]; // Assert interface field exists on type.

      if (!typeField) {
        context.reportError("Interface field ".concat(iface.name, ".").concat(fieldName, " expected but ").concat(type.name, " does not provide it."), [ifaceField.astNode].concat(getAllNodes(type)));
        continue;
      } // Assert interface field type is satisfied by type field type, by being
      // a valid subtype. (covariant)


      if (!(0, _typeComparators$2.isTypeSubTypeOf)(context.schema, typeField.type, ifaceField.type)) {
        var _ifaceField$astNode, _typeField$astNode;

        context.reportError("Interface field ".concat(iface.name, ".").concat(fieldName, " expects type ") + "".concat((0, _inspect$j.default)(ifaceField.type), " but ").concat(type.name, ".").concat(fieldName, " ") + "is type ".concat((0, _inspect$j.default)(typeField.type), "."), [// istanbul ignore next (TODO need to write coverage tests)
        (_ifaceField$astNode = ifaceField.astNode) === null || _ifaceField$astNode === void 0 ? void 0 : _ifaceField$astNode.type, // istanbul ignore next (TODO need to write coverage tests)
        (_typeField$astNode = typeField.astNode) === null || _typeField$astNode === void 0 ? void 0 : _typeField$astNode.type]);
      } // Assert each interface field arg is implemented.


      var _loop = function _loop(_i18, _ifaceField$args2) {
        var ifaceArg = _ifaceField$args2[_i18];
        var argName = ifaceArg.name;
        var typeArg = (0, _find$3.default)(typeField.args, function (arg) {
          return arg.name === argName;
        }); // Assert interface field arg exists on object field.

        if (!typeArg) {
          context.reportError("Interface field argument ".concat(iface.name, ".").concat(fieldName, "(").concat(argName, ":) expected but ").concat(type.name, ".").concat(fieldName, " does not provide it."), [ifaceArg.astNode, typeField.astNode]);
          return "continue";
        } // Assert interface field arg type matches object field arg type.
        // (invariant)
        // TODO: change to contravariant?


        if (!(0, _typeComparators$2.isEqualType)(ifaceArg.type, typeArg.type)) {
          var _ifaceArg$astNode, _typeArg$astNode;

          context.reportError("Interface field argument ".concat(iface.name, ".").concat(fieldName, "(").concat(argName, ":) ") + "expects type ".concat((0, _inspect$j.default)(ifaceArg.type), " but ") + "".concat(type.name, ".").concat(fieldName, "(").concat(argName, ":) is type ") + "".concat((0, _inspect$j.default)(typeArg.type), "."), [// istanbul ignore next (TODO need to write coverage tests)
          (_ifaceArg$astNode = ifaceArg.astNode) === null || _ifaceArg$astNode === void 0 ? void 0 : _ifaceArg$astNode.type, // istanbul ignore next (TODO need to write coverage tests)
          (_typeArg$astNode = typeArg.astNode) === null || _typeArg$astNode === void 0 ? void 0 : _typeArg$astNode.type]);
        } // TODO: validate default values?

      };

      for (var _i18 = 0, _ifaceField$args2 = ifaceField.args; _i18 < _ifaceField$args2.length; _i18++) {
        var _ret = _loop(_i18, _ifaceField$args2);

        if (_ret === "continue") continue;
      } // Assert additional arguments must not be required.


      var _loop2 = function _loop2(_i20, _typeField$args2) {
        var typeArg = _typeField$args2[_i20];
        var argName = typeArg.name;
        var ifaceArg = (0, _find$3.default)(ifaceField.args, function (arg) {
          return arg.name === argName;
        });

        if (!ifaceArg && (0, _definition$p.isRequiredArgument)(typeArg)) {
          context.reportError("Object field ".concat(type.name, ".").concat(fieldName, " includes required argument ").concat(argName, " that is missing from the Interface field ").concat(iface.name, ".").concat(fieldName, "."), [typeArg.astNode, ifaceField.astNode]);
        }
      };

      for (var _i20 = 0, _typeField$args2 = typeField.args; _i20 < _typeField$args2.length; _i20++) {
        _loop2(_i20, _typeField$args2);
      }
    }
  }

  function validateTypeImplementsAncestors(context, type, iface) {
    var ifaceInterfaces = type.getInterfaces();

    for (var _i22 = 0, _iface$getInterfaces2 = iface.getInterfaces(); _i22 < _iface$getInterfaces2.length; _i22++) {
      var transitive = _iface$getInterfaces2[_i22];

      if (ifaceInterfaces.indexOf(transitive) === -1) {
        context.reportError(transitive === type ? "Type ".concat(type.name, " cannot implement ").concat(iface.name, " because it would create a circular reference.") : "Type ".concat(type.name, " must implement ").concat(transitive.name, " because it is implemented by ").concat(iface.name, "."), [].concat(getAllImplementsInterfaceNodes(iface, transitive), getAllImplementsInterfaceNodes(type, iface)));
      }
    }
  }

  function validateUnionMembers(context, union) {
    var memberTypes = union.getTypes();

    if (memberTypes.length === 0) {
      context.reportError("Union type ".concat(union.name, " must define one or more member types."), getAllNodes(union));
    }

    var includedTypeNames = Object.create(null);

    for (var _i24 = 0; _i24 < memberTypes.length; _i24++) {
      var memberType = memberTypes[_i24];

      if (includedTypeNames[memberType.name]) {
        context.reportError("Union type ".concat(union.name, " can only include type ").concat(memberType.name, " once."), getUnionMemberTypeNodes(union, memberType.name));
        continue;
      }

      includedTypeNames[memberType.name] = true;

      if (!(0, _definition$p.isObjectType)(memberType)) {
        context.reportError("Union type ".concat(union.name, " can only include Object types, ") + "it cannot include ".concat((0, _inspect$j.default)(memberType), "."), getUnionMemberTypeNodes(union, String(memberType)));
      }
    }
  }

  function validateEnumValues(context, enumType) {
    var enumValues = enumType.getValues();

    if (enumValues.length === 0) {
      context.reportError("Enum type ".concat(enumType.name, " must define one or more values."), getAllNodes(enumType));
    }

    for (var _i26 = 0; _i26 < enumValues.length; _i26++) {
      var enumValue = enumValues[_i26];
      var valueName = enumValue.name; // Ensure valid name.

      validateName(context, enumValue);

      if (valueName === 'true' || valueName === 'false' || valueName === 'null') {
        context.reportError("Enum type ".concat(enumType.name, " cannot include value: ").concat(valueName, "."), enumValue.astNode);
      }
    }
  }

  function validateInputFields(context, inputObj) {
    var fields = (0, _objectValues5.default)(inputObj.getFields());

    if (fields.length === 0) {
      context.reportError("Input Object type ".concat(inputObj.name, " must define one or more fields."), getAllNodes(inputObj));
    } // Ensure the arguments are valid


    for (var _i28 = 0; _i28 < fields.length; _i28++) {
      var field = fields[_i28];
      // Ensure they are named correctly.
      validateName(context, field); // Ensure the type is an input type

      if (!(0, _definition$p.isInputType)(field.type)) {
        var _field$astNode2;

        context.reportError("The type of ".concat(inputObj.name, ".").concat(field.name, " must be Input Type ") + "but got: ".concat((0, _inspect$j.default)(field.type), "."), (_field$astNode2 = field.astNode) === null || _field$astNode2 === void 0 ? void 0 : _field$astNode2.type);
      }

      if ((0, _definition$p.isRequiredInputField)(field) && field.deprecationReason != null) {
        var _field$astNode3;

        context.reportError("Required input field ".concat(inputObj.name, ".").concat(field.name, " cannot be deprecated."), [getDeprecatedDirectiveNode(field.astNode), // istanbul ignore next (TODO need to write coverage tests)
        (_field$astNode3 = field.astNode) === null || _field$astNode3 === void 0 ? void 0 : _field$astNode3.type]);
      }
    }
  }

  function createInputObjectCircularRefsValidator(context) {
    // Modified copy of algorithm from 'src/validation/rules/NoFragmentCycles.js'.
    // Tracks already visited types to maintain O(N) and to ensure that cycles
    // are not redundantly reported.
    var visitedTypes = Object.create(null); // Array of types nodes used to produce meaningful errors

    var fieldPath = []; // Position in the type path

    var fieldPathIndexByTypeName = Object.create(null);
    return detectCycleRecursive; // This does a straight-forward DFS to find cycles.
    // It does not terminate when a cycle was found but continues to explore
    // the graph to find all possible cycles.

    function detectCycleRecursive(inputObj) {
      if (visitedTypes[inputObj.name]) {
        return;
      }

      visitedTypes[inputObj.name] = true;
      fieldPathIndexByTypeName[inputObj.name] = fieldPath.length;
      var fields = (0, _objectValues5.default)(inputObj.getFields());

      for (var _i30 = 0; _i30 < fields.length; _i30++) {
        var field = fields[_i30];

        if ((0, _definition$p.isNonNullType)(field.type) && (0, _definition$p.isInputObjectType)(field.type.ofType)) {
          var fieldType = field.type.ofType;
          var cycleIndex = fieldPathIndexByTypeName[fieldType.name];
          fieldPath.push(field);

          if (cycleIndex === undefined) {
            detectCycleRecursive(fieldType);
          } else {
            var cyclePath = fieldPath.slice(cycleIndex);
            var pathStr = cyclePath.map(function (fieldObj) {
              return fieldObj.name;
            }).join('.');
            context.reportError("Cannot reference Input Object \"".concat(fieldType.name, "\" within itself through a series of non-null fields: \"").concat(pathStr, "\"."), cyclePath.map(function (fieldObj) {
              return fieldObj.astNode;
            }));
          }

          fieldPath.pop();
        }
      }

      fieldPathIndexByTypeName[inputObj.name] = undefined;
    }
  }

  function getAllNodes(object) {
    var astNode = object.astNode,
        extensionASTNodes = object.extensionASTNodes;
    return astNode ? extensionASTNodes ? [astNode].concat(extensionASTNodes) : [astNode] : extensionASTNodes !== null && extensionASTNodes !== void 0 ? extensionASTNodes : [];
  }

  function getAllSubNodes(object, getter) {
    var subNodes = [];

    for (var _i32 = 0, _getAllNodes2 = getAllNodes(object); _i32 < _getAllNodes2.length; _i32++) {
      var _getter;

      var node = _getAllNodes2[_i32];
      // istanbul ignore next (See: 'https://github.com/graphql/graphql-js/issues/2203')
      subNodes = subNodes.concat((_getter = getter(node)) !== null && _getter !== void 0 ? _getter : []);
    }

    return subNodes;
  }

  function getAllImplementsInterfaceNodes(type, iface) {
    return getAllSubNodes(type, function (typeNode) {
      return typeNode.interfaces;
    }).filter(function (ifaceNode) {
      return ifaceNode.name.value === iface.name;
    });
  }

  function getUnionMemberTypeNodes(union, typeName) {
    return getAllSubNodes(union, function (unionNode) {
      return unionNode.types;
    }).filter(function (typeNode) {
      return typeNode.name.value === typeName;
    });
  }

  function getDeprecatedDirectiveNode(definitionNode) {
    var _definitionNode$direc;

    // istanbul ignore next (See: 'https://github.com/graphql/graphql-js/issues/2203')
    return definitionNode === null || definitionNode === void 0 ? void 0 : (_definitionNode$direc = definitionNode.directives) === null || _definitionNode$direc === void 0 ? void 0 : _definitionNode$direc.find(function (node) {
      return node.name.value === _directives$a.GraphQLDeprecatedDirective.name;
    });
  }

  var TypeInfo$1 = {};

  var typeFromAST$1 = {};

  Object.defineProperty(typeFromAST$1, "__esModule", {
    value: true
  });
  typeFromAST$1.typeFromAST = typeFromAST;

  var _inspect$i = _interopRequireDefault$t(inspect$1);

  var _invariant$b = _interopRequireDefault$t(invariant$1);

  var _kinds$j = kinds;

  var _definition$o = definition;

  function _interopRequireDefault$t(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function typeFromAST(schema, typeNode) {
    /* eslint-enable no-redeclare */
    var innerType;

    if (typeNode.kind === _kinds$j.Kind.LIST_TYPE) {
      innerType = typeFromAST(schema, typeNode.type);
      return innerType && new _definition$o.GraphQLList(innerType);
    }

    if (typeNode.kind === _kinds$j.Kind.NON_NULL_TYPE) {
      innerType = typeFromAST(schema, typeNode.type);
      return innerType && new _definition$o.GraphQLNonNull(innerType);
    } // istanbul ignore else (See: 'https://github.com/graphql/graphql-js/issues/2618')


    if (typeNode.kind === _kinds$j.Kind.NAMED_TYPE) {
      return schema.getType(typeNode.name.value);
    } // istanbul ignore next (Not reachable. All possible type nodes have been considered)


    (0, _invariant$b.default)(0, 'Unexpected type node: ' + (0, _inspect$i.default)(typeNode));
  }

  Object.defineProperty(TypeInfo$1, "__esModule", {
    value: true
  });
  TypeInfo$1.visitWithTypeInfo = visitWithTypeInfo;
  TypeInfo$1.TypeInfo = void 0;

  var _find$2 = _interopRequireDefault$s(find$1);

  var _kinds$i = kinds;

  var _ast = ast;

  var _visitor$4 = visitor;

  var _definition$n = definition;

  var _introspection$7 = introspection;

  var _typeFromAST$7 = typeFromAST$1;

  function _interopRequireDefault$s(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  /**
   * TypeInfo is a utility class which, given a GraphQL schema, can keep track
   * of the current field and type definitions at any point in a GraphQL document
   * AST during a recursive descent by calling `enter(node)` and `leave(node)`.
   */
  var TypeInfo = /*#__PURE__*/function () {
    function TypeInfo(schema, // NOTE: this experimental optional second parameter is only needed in order
    // to support non-spec-compliant code bases. You should never need to use it.
    // It may disappear in the future.
    getFieldDefFn, // Initial type may be provided in rare cases to facilitate traversals
    // beginning somewhere other than documents.
    initialType) {
      this._schema = schema;
      this._typeStack = [];
      this._parentTypeStack = [];
      this._inputTypeStack = [];
      this._fieldDefStack = [];
      this._defaultValueStack = [];
      this._directive = null;
      this._argument = null;
      this._enumValue = null;
      this._getFieldDef = getFieldDefFn !== null && getFieldDefFn !== void 0 ? getFieldDefFn : getFieldDef$1;

      if (initialType) {
        if ((0, _definition$n.isInputType)(initialType)) {
          this._inputTypeStack.push(initialType);
        }

        if ((0, _definition$n.isCompositeType)(initialType)) {
          this._parentTypeStack.push(initialType);
        }

        if ((0, _definition$n.isOutputType)(initialType)) {
          this._typeStack.push(initialType);
        }
      }
    }

    var _proto = TypeInfo.prototype;

    _proto.getType = function getType() {
      if (this._typeStack.length > 0) {
        return this._typeStack[this._typeStack.length - 1];
      }
    };

    _proto.getParentType = function getParentType() {
      if (this._parentTypeStack.length > 0) {
        return this._parentTypeStack[this._parentTypeStack.length - 1];
      }
    };

    _proto.getInputType = function getInputType() {
      if (this._inputTypeStack.length > 0) {
        return this._inputTypeStack[this._inputTypeStack.length - 1];
      }
    };

    _proto.getParentInputType = function getParentInputType() {
      if (this._inputTypeStack.length > 1) {
        return this._inputTypeStack[this._inputTypeStack.length - 2];
      }
    };

    _proto.getFieldDef = function getFieldDef() {
      if (this._fieldDefStack.length > 0) {
        return this._fieldDefStack[this._fieldDefStack.length - 1];
      }
    };

    _proto.getDefaultValue = function getDefaultValue() {
      if (this._defaultValueStack.length > 0) {
        return this._defaultValueStack[this._defaultValueStack.length - 1];
      }
    };

    _proto.getDirective = function getDirective() {
      return this._directive;
    };

    _proto.getArgument = function getArgument() {
      return this._argument;
    };

    _proto.getEnumValue = function getEnumValue() {
      return this._enumValue;
    };

    _proto.enter = function enter(node) {
      var schema = this._schema; // Note: many of the types below are explicitly typed as "mixed" to drop
      // any assumptions of a valid schema to ensure runtime types are properly
      // checked before continuing since TypeInfo is used as part of validation
      // which occurs before guarantees of schema and document validity.

      switch (node.kind) {
        case _kinds$i.Kind.SELECTION_SET:
          {
            var namedType = (0, _definition$n.getNamedType)(this.getType());

            this._parentTypeStack.push((0, _definition$n.isCompositeType)(namedType) ? namedType : undefined);

            break;
          }

        case _kinds$i.Kind.FIELD:
          {
            var parentType = this.getParentType();
            var fieldDef;
            var fieldType;

            if (parentType) {
              fieldDef = this._getFieldDef(schema, parentType, node);

              if (fieldDef) {
                fieldType = fieldDef.type;
              }
            }

            this._fieldDefStack.push(fieldDef);

            this._typeStack.push((0, _definition$n.isOutputType)(fieldType) ? fieldType : undefined);

            break;
          }

        case _kinds$i.Kind.DIRECTIVE:
          this._directive = schema.getDirective(node.name.value);
          break;

        case _kinds$i.Kind.OPERATION_DEFINITION:
          {
            var type;

            switch (node.operation) {
              case 'query':
                type = schema.getQueryType();
                break;

              case 'mutation':
                type = schema.getMutationType();
                break;

              case 'subscription':
                type = schema.getSubscriptionType();
                break;
            }

            this._typeStack.push((0, _definition$n.isObjectType)(type) ? type : undefined);

            break;
          }

        case _kinds$i.Kind.INLINE_FRAGMENT:
        case _kinds$i.Kind.FRAGMENT_DEFINITION:
          {
            var typeConditionAST = node.typeCondition;
            var outputType = typeConditionAST ? (0, _typeFromAST$7.typeFromAST)(schema, typeConditionAST) : (0, _definition$n.getNamedType)(this.getType());

            this._typeStack.push((0, _definition$n.isOutputType)(outputType) ? outputType : undefined);

            break;
          }

        case _kinds$i.Kind.VARIABLE_DEFINITION:
          {
            var inputType = (0, _typeFromAST$7.typeFromAST)(schema, node.type);

            this._inputTypeStack.push((0, _definition$n.isInputType)(inputType) ? inputType : undefined);

            break;
          }

        case _kinds$i.Kind.ARGUMENT:
          {
            var _this$getDirective;

            var argDef;
            var argType;
            var fieldOrDirective = (_this$getDirective = this.getDirective()) !== null && _this$getDirective !== void 0 ? _this$getDirective : this.getFieldDef();

            if (fieldOrDirective) {
              argDef = (0, _find$2.default)(fieldOrDirective.args, function (arg) {
                return arg.name === node.name.value;
              });

              if (argDef) {
                argType = argDef.type;
              }
            }

            this._argument = argDef;

            this._defaultValueStack.push(argDef ? argDef.defaultValue : undefined);

            this._inputTypeStack.push((0, _definition$n.isInputType)(argType) ? argType : undefined);

            break;
          }

        case _kinds$i.Kind.LIST:
          {
            var listType = (0, _definition$n.getNullableType)(this.getInputType());
            var itemType = (0, _definition$n.isListType)(listType) ? listType.ofType : listType; // List positions never have a default value.

            this._defaultValueStack.push(undefined);

            this._inputTypeStack.push((0, _definition$n.isInputType)(itemType) ? itemType : undefined);

            break;
          }

        case _kinds$i.Kind.OBJECT_FIELD:
          {
            var objectType = (0, _definition$n.getNamedType)(this.getInputType());
            var inputFieldType;
            var inputField;

            if ((0, _definition$n.isInputObjectType)(objectType)) {
              inputField = objectType.getFields()[node.name.value];

              if (inputField) {
                inputFieldType = inputField.type;
              }
            }

            this._defaultValueStack.push(inputField ? inputField.defaultValue : undefined);

            this._inputTypeStack.push((0, _definition$n.isInputType)(inputFieldType) ? inputFieldType : undefined);

            break;
          }

        case _kinds$i.Kind.ENUM:
          {
            var enumType = (0, _definition$n.getNamedType)(this.getInputType());
            var enumValue;

            if ((0, _definition$n.isEnumType)(enumType)) {
              enumValue = enumType.getValue(node.value);
            }

            this._enumValue = enumValue;
            break;
          }
      }
    };

    _proto.leave = function leave(node) {
      switch (node.kind) {
        case _kinds$i.Kind.SELECTION_SET:
          this._parentTypeStack.pop();

          break;

        case _kinds$i.Kind.FIELD:
          this._fieldDefStack.pop();

          this._typeStack.pop();

          break;

        case _kinds$i.Kind.DIRECTIVE:
          this._directive = null;
          break;

        case _kinds$i.Kind.OPERATION_DEFINITION:
        case _kinds$i.Kind.INLINE_FRAGMENT:
        case _kinds$i.Kind.FRAGMENT_DEFINITION:
          this._typeStack.pop();

          break;

        case _kinds$i.Kind.VARIABLE_DEFINITION:
          this._inputTypeStack.pop();

          break;

        case _kinds$i.Kind.ARGUMENT:
          this._argument = null;

          this._defaultValueStack.pop();

          this._inputTypeStack.pop();

          break;

        case _kinds$i.Kind.LIST:
        case _kinds$i.Kind.OBJECT_FIELD:
          this._defaultValueStack.pop();

          this._inputTypeStack.pop();

          break;

        case _kinds$i.Kind.ENUM:
          this._enumValue = null;
          break;
      }
    };

    return TypeInfo;
  }();
  /**
   * Not exactly the same as the executor's definition of getFieldDef, in this
   * statically evaluated environment we do not always have an Object type,
   * and need to handle Interface and Union types.
   */


  TypeInfo$1.TypeInfo = TypeInfo;

  function getFieldDef$1(schema, parentType, fieldNode) {
    var name = fieldNode.name.value;

    if (name === _introspection$7.SchemaMetaFieldDef.name && schema.getQueryType() === parentType) {
      return _introspection$7.SchemaMetaFieldDef;
    }

    if (name === _introspection$7.TypeMetaFieldDef.name && schema.getQueryType() === parentType) {
      return _introspection$7.TypeMetaFieldDef;
    }

    if (name === _introspection$7.TypeNameMetaFieldDef.name && (0, _definition$n.isCompositeType)(parentType)) {
      return _introspection$7.TypeNameMetaFieldDef;
    }

    if ((0, _definition$n.isObjectType)(parentType) || (0, _definition$n.isInterfaceType)(parentType)) {
      return parentType.getFields()[name];
    }
  }
  /**
   * Creates a new visitor instance which maintains a provided TypeInfo instance
   * along with visiting visitor.
   */


  function visitWithTypeInfo(typeInfo, visitor) {
    return {
      enter: function enter(node) {
        typeInfo.enter(node);
        var fn = (0, _visitor$4.getVisitFn)(visitor, node.kind,
        /* isLeaving */
        false);

        if (fn) {
          var result = fn.apply(visitor, arguments);

          if (result !== undefined) {
            typeInfo.leave(node);

            if ((0, _ast.isNode)(result)) {
              typeInfo.enter(result);
            }
          }

          return result;
        }
      },
      leave: function leave(node) {
        var fn = (0, _visitor$4.getVisitFn)(visitor, node.kind,
        /* isLeaving */
        true);
        var result;

        if (fn) {
          result = fn.apply(visitor, arguments);
        }

        typeInfo.leave(node);
        return result;
      }
    };
  }

  var specifiedRules$1 = {};

  var ExecutableDefinitionsRule$1 = {};

  var predicates = {};

  Object.defineProperty(predicates, "__esModule", {
    value: true
  });
  predicates.isDefinitionNode = isDefinitionNode;
  predicates.isExecutableDefinitionNode = isExecutableDefinitionNode;
  predicates.isSelectionNode = isSelectionNode;
  predicates.isValueNode = isValueNode;
  predicates.isTypeNode = isTypeNode;
  predicates.isTypeSystemDefinitionNode = isTypeSystemDefinitionNode;
  predicates.isTypeDefinitionNode = isTypeDefinitionNode;
  predicates.isTypeSystemExtensionNode = isTypeSystemExtensionNode;
  predicates.isTypeExtensionNode = isTypeExtensionNode;

  var _kinds$h = kinds;

  function isDefinitionNode(node) {
    return isExecutableDefinitionNode(node) || isTypeSystemDefinitionNode(node) || isTypeSystemExtensionNode(node);
  }

  function isExecutableDefinitionNode(node) {
    return node.kind === _kinds$h.Kind.OPERATION_DEFINITION || node.kind === _kinds$h.Kind.FRAGMENT_DEFINITION;
  }

  function isSelectionNode(node) {
    return node.kind === _kinds$h.Kind.FIELD || node.kind === _kinds$h.Kind.FRAGMENT_SPREAD || node.kind === _kinds$h.Kind.INLINE_FRAGMENT;
  }

  function isValueNode(node) {
    return node.kind === _kinds$h.Kind.VARIABLE || node.kind === _kinds$h.Kind.INT || node.kind === _kinds$h.Kind.FLOAT || node.kind === _kinds$h.Kind.STRING || node.kind === _kinds$h.Kind.BOOLEAN || node.kind === _kinds$h.Kind.NULL || node.kind === _kinds$h.Kind.ENUM || node.kind === _kinds$h.Kind.LIST || node.kind === _kinds$h.Kind.OBJECT;
  }

  function isTypeNode(node) {
    return node.kind === _kinds$h.Kind.NAMED_TYPE || node.kind === _kinds$h.Kind.LIST_TYPE || node.kind === _kinds$h.Kind.NON_NULL_TYPE;
  }

  function isTypeSystemDefinitionNode(node) {
    return node.kind === _kinds$h.Kind.SCHEMA_DEFINITION || isTypeDefinitionNode(node) || node.kind === _kinds$h.Kind.DIRECTIVE_DEFINITION;
  }

  function isTypeDefinitionNode(node) {
    return node.kind === _kinds$h.Kind.SCALAR_TYPE_DEFINITION || node.kind === _kinds$h.Kind.OBJECT_TYPE_DEFINITION || node.kind === _kinds$h.Kind.INTERFACE_TYPE_DEFINITION || node.kind === _kinds$h.Kind.UNION_TYPE_DEFINITION || node.kind === _kinds$h.Kind.ENUM_TYPE_DEFINITION || node.kind === _kinds$h.Kind.INPUT_OBJECT_TYPE_DEFINITION;
  }

  function isTypeSystemExtensionNode(node) {
    return node.kind === _kinds$h.Kind.SCHEMA_EXTENSION || isTypeExtensionNode(node);
  }

  function isTypeExtensionNode(node) {
    return node.kind === _kinds$h.Kind.SCALAR_TYPE_EXTENSION || node.kind === _kinds$h.Kind.OBJECT_TYPE_EXTENSION || node.kind === _kinds$h.Kind.INTERFACE_TYPE_EXTENSION || node.kind === _kinds$h.Kind.UNION_TYPE_EXTENSION || node.kind === _kinds$h.Kind.ENUM_TYPE_EXTENSION || node.kind === _kinds$h.Kind.INPUT_OBJECT_TYPE_EXTENSION;
  }

  Object.defineProperty(ExecutableDefinitionsRule$1, "__esModule", {
    value: true
  });
  ExecutableDefinitionsRule$1.ExecutableDefinitionsRule = ExecutableDefinitionsRule;

  var _GraphQLError$E = GraphQLError$1;

  var _kinds$g = kinds;

  var _predicates$4 = predicates;

  /**
   * Executable definitions
   *
   * A GraphQL document is only valid for execution if all definitions are either
   * operation or fragment definitions.
   */
  function ExecutableDefinitionsRule(context) {
    return {
      Document: function Document(node) {
        for (var _i2 = 0, _node$definitions2 = node.definitions; _i2 < _node$definitions2.length; _i2++) {
          var definition = _node$definitions2[_i2];

          if (!(0, _predicates$4.isExecutableDefinitionNode)(definition)) {
            var defName = definition.kind === _kinds$g.Kind.SCHEMA_DEFINITION || definition.kind === _kinds$g.Kind.SCHEMA_EXTENSION ? 'schema' : '"' + definition.name.value + '"';
            context.reportError(new _GraphQLError$E.GraphQLError("The ".concat(defName, " definition is not executable."), definition));
          }
        }

        return false;
      }
    };
  }

  var UniqueOperationNamesRule$1 = {};

  Object.defineProperty(UniqueOperationNamesRule$1, "__esModule", {
    value: true
  });
  UniqueOperationNamesRule$1.UniqueOperationNamesRule = UniqueOperationNamesRule;

  var _GraphQLError$D = GraphQLError$1;

  /**
   * Unique operation names
   *
   * A GraphQL document is only valid if all defined operations have unique names.
   */
  function UniqueOperationNamesRule(context) {
    var knownOperationNames = Object.create(null);
    return {
      OperationDefinition: function OperationDefinition(node) {
        var operationName = node.name;

        if (operationName) {
          if (knownOperationNames[operationName.value]) {
            context.reportError(new _GraphQLError$D.GraphQLError("There can be only one operation named \"".concat(operationName.value, "\"."), [knownOperationNames[operationName.value], operationName]));
          } else {
            knownOperationNames[operationName.value] = operationName;
          }
        }

        return false;
      },
      FragmentDefinition: function FragmentDefinition() {
        return false;
      }
    };
  }

  var LoneAnonymousOperationRule$1 = {};

  Object.defineProperty(LoneAnonymousOperationRule$1, "__esModule", {
    value: true
  });
  LoneAnonymousOperationRule$1.LoneAnonymousOperationRule = LoneAnonymousOperationRule;

  var _GraphQLError$C = GraphQLError$1;

  var _kinds$f = kinds;

  /**
   * Lone anonymous operation
   *
   * A GraphQL document is only valid if when it contains an anonymous operation
   * (the query short-hand) that it contains only that one operation definition.
   */
  function LoneAnonymousOperationRule(context) {
    var operationCount = 0;
    return {
      Document: function Document(node) {
        operationCount = node.definitions.filter(function (definition) {
          return definition.kind === _kinds$f.Kind.OPERATION_DEFINITION;
        }).length;
      },
      OperationDefinition: function OperationDefinition(node) {
        if (!node.name && operationCount > 1) {
          context.reportError(new _GraphQLError$C.GraphQLError('This anonymous operation must be the only defined operation.', node));
        }
      }
    };
  }

  var SingleFieldSubscriptionsRule$1 = {};

  Object.defineProperty(SingleFieldSubscriptionsRule$1, "__esModule", {
    value: true
  });
  SingleFieldSubscriptionsRule$1.SingleFieldSubscriptionsRule = SingleFieldSubscriptionsRule;

  var _GraphQLError$B = GraphQLError$1;

  /**
   * Subscriptions must only include one field.
   *
   * A GraphQL subscription is valid only if it contains a single root field.
   */
  function SingleFieldSubscriptionsRule(context) {
    return {
      OperationDefinition: function OperationDefinition(node) {
        if (node.operation === 'subscription') {
          if (node.selectionSet.selections.length !== 1) {
            context.reportError(new _GraphQLError$B.GraphQLError(node.name ? "Subscription \"".concat(node.name.value, "\" must select only one top level field.") : 'Anonymous Subscription must select only one top level field.', node.selectionSet.selections.slice(1)));
          }
        }
      }
    };
  }

  var KnownTypeNamesRule$1 = {};

  Object.defineProperty(KnownTypeNamesRule$1, "__esModule", {
    value: true
  });
  KnownTypeNamesRule$1.KnownTypeNamesRule = KnownTypeNamesRule;

  var _didYouMean$5 = _interopRequireDefault$r(didYouMean$1);

  var _suggestionList$5 = _interopRequireDefault$r(suggestionList$1);

  var _GraphQLError$A = GraphQLError$1;

  var _predicates$3 = predicates;

  var _scalars$4 = scalars;

  var _introspection$6 = introspection;

  function _interopRequireDefault$r(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  /**
   * Known type names
   *
   * A GraphQL document is only valid if referenced types (specifically
   * variable definitions and fragment conditions) are defined by the type schema.
   */
  function KnownTypeNamesRule(context) {
    var schema = context.getSchema();
    var existingTypesMap = schema ? schema.getTypeMap() : Object.create(null);
    var definedTypes = Object.create(null);

    for (var _i2 = 0, _context$getDocument$2 = context.getDocument().definitions; _i2 < _context$getDocument$2.length; _i2++) {
      var def = _context$getDocument$2[_i2];

      if ((0, _predicates$3.isTypeDefinitionNode)(def)) {
        definedTypes[def.name.value] = true;
      }
    }

    var typeNames = Object.keys(existingTypesMap).concat(Object.keys(definedTypes));
    return {
      NamedType: function NamedType(node, _1, parent, _2, ancestors) {
        var typeName = node.name.value;

        if (!existingTypesMap[typeName] && !definedTypes[typeName]) {
          var _ancestors$;

          var definitionNode = (_ancestors$ = ancestors[2]) !== null && _ancestors$ !== void 0 ? _ancestors$ : parent;
          var isSDL = definitionNode != null && isSDLNode(definitionNode);

          if (isSDL && isStandardTypeName(typeName)) {
            return;
          }

          var suggestedTypes = (0, _suggestionList$5.default)(typeName, isSDL ? standardTypeNames.concat(typeNames) : typeNames);
          context.reportError(new _GraphQLError$A.GraphQLError("Unknown type \"".concat(typeName, "\".") + (0, _didYouMean$5.default)(suggestedTypes), node));
        }
      }
    };
  }

  var standardTypeNames = [].concat(_scalars$4.specifiedScalarTypes, _introspection$6.introspectionTypes).map(function (type) {
    return type.name;
  });

  function isStandardTypeName(typeName) {
    return standardTypeNames.indexOf(typeName) !== -1;
  }

  function isSDLNode(value) {
    return !Array.isArray(value) && ((0, _predicates$3.isTypeSystemDefinitionNode)(value) || (0, _predicates$3.isTypeSystemExtensionNode)(value));
  }

  var FragmentsOnCompositeTypesRule$1 = {};

  Object.defineProperty(FragmentsOnCompositeTypesRule$1, "__esModule", {
    value: true
  });
  FragmentsOnCompositeTypesRule$1.FragmentsOnCompositeTypesRule = FragmentsOnCompositeTypesRule;

  var _GraphQLError$z = GraphQLError$1;

  var _printer$7 = printer;

  var _definition$m = definition;

  var _typeFromAST$6 = typeFromAST$1;

  /**
   * Fragments on composite type
   *
   * Fragments use a type condition to determine if they apply, since fragments
   * can only be spread into a composite type (object, interface, or union), the
   * type condition must also be a composite type.
   */
  function FragmentsOnCompositeTypesRule(context) {
    return {
      InlineFragment: function InlineFragment(node) {
        var typeCondition = node.typeCondition;

        if (typeCondition) {
          var type = (0, _typeFromAST$6.typeFromAST)(context.getSchema(), typeCondition);

          if (type && !(0, _definition$m.isCompositeType)(type)) {
            var typeStr = (0, _printer$7.print)(typeCondition);
            context.reportError(new _GraphQLError$z.GraphQLError("Fragment cannot condition on non composite type \"".concat(typeStr, "\"."), typeCondition));
          }
        }
      },
      FragmentDefinition: function FragmentDefinition(node) {
        var type = (0, _typeFromAST$6.typeFromAST)(context.getSchema(), node.typeCondition);

        if (type && !(0, _definition$m.isCompositeType)(type)) {
          var typeStr = (0, _printer$7.print)(node.typeCondition);
          context.reportError(new _GraphQLError$z.GraphQLError("Fragment \"".concat(node.name.value, "\" cannot condition on non composite type \"").concat(typeStr, "\"."), node.typeCondition));
        }
      }
    };
  }

  var VariablesAreInputTypesRule$1 = {};

  Object.defineProperty(VariablesAreInputTypesRule$1, "__esModule", {
    value: true
  });
  VariablesAreInputTypesRule$1.VariablesAreInputTypesRule = VariablesAreInputTypesRule;

  var _GraphQLError$y = GraphQLError$1;

  var _printer$6 = printer;

  var _definition$l = definition;

  var _typeFromAST$5 = typeFromAST$1;

  /**
   * Variables are input types
   *
   * A GraphQL operation is only valid if all the variables it defines are of
   * input types (scalar, enum, or input object).
   */
  function VariablesAreInputTypesRule(context) {
    return {
      VariableDefinition: function VariableDefinition(node) {
        var type = (0, _typeFromAST$5.typeFromAST)(context.getSchema(), node.type);

        if (type && !(0, _definition$l.isInputType)(type)) {
          var variableName = node.variable.name.value;
          var typeName = (0, _printer$6.print)(node.type);
          context.reportError(new _GraphQLError$y.GraphQLError("Variable \"$".concat(variableName, "\" cannot be non-input type \"").concat(typeName, "\"."), node.type));
        }
      }
    };
  }

  var ScalarLeafsRule$1 = {};

  Object.defineProperty(ScalarLeafsRule$1, "__esModule", {
    value: true
  });
  ScalarLeafsRule$1.ScalarLeafsRule = ScalarLeafsRule;

  var _inspect$h = _interopRequireDefault$q(inspect$1);

  var _GraphQLError$x = GraphQLError$1;

  var _definition$k = definition;

  function _interopRequireDefault$q(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  /**
   * Scalar leafs
   *
   * A GraphQL document is valid only if all leaf fields (fields without
   * sub selections) are of scalar or enum types.
   */
  function ScalarLeafsRule(context) {
    return {
      Field: function Field(node) {
        var type = context.getType();
        var selectionSet = node.selectionSet;

        if (type) {
          if ((0, _definition$k.isLeafType)((0, _definition$k.getNamedType)(type))) {
            if (selectionSet) {
              var fieldName = node.name.value;
              var typeStr = (0, _inspect$h.default)(type);
              context.reportError(new _GraphQLError$x.GraphQLError("Field \"".concat(fieldName, "\" must not have a selection since type \"").concat(typeStr, "\" has no subfields."), selectionSet));
            }
          } else if (!selectionSet) {
            var _fieldName = node.name.value;

            var _typeStr = (0, _inspect$h.default)(type);

            context.reportError(new _GraphQLError$x.GraphQLError("Field \"".concat(_fieldName, "\" of type \"").concat(_typeStr, "\" must have a selection of subfields. Did you mean \"").concat(_fieldName, " { ... }\"?"), node));
          }
        }
      }
    };
  }

  var FieldsOnCorrectTypeRule$1 = {};

  Object.defineProperty(FieldsOnCorrectTypeRule$1, "__esModule", {
    value: true
  });
  FieldsOnCorrectTypeRule$1.FieldsOnCorrectTypeRule = FieldsOnCorrectTypeRule;

  var _arrayFrom = _interopRequireDefault$p(arrayFrom$1);

  var _didYouMean$4 = _interopRequireDefault$p(didYouMean$1);

  var _suggestionList$4 = _interopRequireDefault$p(suggestionList$1);

  var _naturalCompare$2 = _interopRequireDefault$p(naturalCompare$1);

  var _GraphQLError$w = GraphQLError$1;

  var _definition$j = definition;

  function _interopRequireDefault$p(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  /**
   * Fields on correct type
   *
   * A GraphQL document is only valid if all fields selected are defined by the
   * parent type, or are an allowed meta field such as __typename.
   */
  function FieldsOnCorrectTypeRule(context) {
    return {
      Field: function Field(node) {
        var type = context.getParentType();

        if (type) {
          var fieldDef = context.getFieldDef();

          if (!fieldDef) {
            // This field doesn't exist, lets look for suggestions.
            var schema = context.getSchema();
            var fieldName = node.name.value; // First determine if there are any suggested types to condition on.

            var suggestion = (0, _didYouMean$4.default)('to use an inline fragment on', getSuggestedTypeNames(schema, type, fieldName)); // If there are no suggested types, then perhaps this was a typo?

            if (suggestion === '') {
              suggestion = (0, _didYouMean$4.default)(getSuggestedFieldNames(type, fieldName));
            } // Report an error, including helpful suggestions.


            context.reportError(new _GraphQLError$w.GraphQLError("Cannot query field \"".concat(fieldName, "\" on type \"").concat(type.name, "\".") + suggestion, node));
          }
        }
      }
    };
  }
  /**
   * Go through all of the implementations of type, as well as the interfaces that
   * they implement. If any of those types include the provided field, suggest them,
   * sorted by how often the type is referenced.
   */


  function getSuggestedTypeNames(schema, type, fieldName) {
    if (!(0, _definition$j.isAbstractType)(type)) {
      // Must be an Object type, which does not have possible fields.
      return [];
    }

    var suggestedTypes = new Set();
    var usageCount = Object.create(null);

    for (var _i2 = 0, _schema$getPossibleTy2 = schema.getPossibleTypes(type); _i2 < _schema$getPossibleTy2.length; _i2++) {
      var possibleType = _schema$getPossibleTy2[_i2];

      if (!possibleType.getFields()[fieldName]) {
        continue;
      } // This object type defines this field.


      suggestedTypes.add(possibleType);
      usageCount[possibleType.name] = 1;

      for (var _i4 = 0, _possibleType$getInte2 = possibleType.getInterfaces(); _i4 < _possibleType$getInte2.length; _i4++) {
        var _usageCount$possibleI;

        var possibleInterface = _possibleType$getInte2[_i4];

        if (!possibleInterface.getFields()[fieldName]) {
          continue;
        } // This interface type defines this field.


        suggestedTypes.add(possibleInterface);
        usageCount[possibleInterface.name] = ((_usageCount$possibleI = usageCount[possibleInterface.name]) !== null && _usageCount$possibleI !== void 0 ? _usageCount$possibleI : 0) + 1;
      }
    }

    return (0, _arrayFrom.default)(suggestedTypes).sort(function (typeA, typeB) {
      // Suggest both interface and object types based on how common they are.
      var usageCountDiff = usageCount[typeB.name] - usageCount[typeA.name];

      if (usageCountDiff !== 0) {
        return usageCountDiff;
      } // Suggest super types first followed by subtypes


      if ((0, _definition$j.isInterfaceType)(typeA) && schema.isSubType(typeA, typeB)) {
        return -1;
      }

      if ((0, _definition$j.isInterfaceType)(typeB) && schema.isSubType(typeB, typeA)) {
        return 1;
      }

      return (0, _naturalCompare$2.default)(typeA.name, typeB.name);
    }).map(function (x) {
      return x.name;
    });
  }
  /**
   * For the field name provided, determine if there are any similar field names
   * that may be the result of a typo.
   */


  function getSuggestedFieldNames(type, fieldName) {
    if ((0, _definition$j.isObjectType)(type) || (0, _definition$j.isInterfaceType)(type)) {
      var possibleFieldNames = Object.keys(type.getFields());
      return (0, _suggestionList$4.default)(fieldName, possibleFieldNames);
    } // Otherwise, must be a Union type, which does not define fields.


    return [];
  }

  var UniqueFragmentNamesRule$1 = {};

  Object.defineProperty(UniqueFragmentNamesRule$1, "__esModule", {
    value: true
  });
  UniqueFragmentNamesRule$1.UniqueFragmentNamesRule = UniqueFragmentNamesRule;

  var _GraphQLError$v = GraphQLError$1;

  /**
   * Unique fragment names
   *
   * A GraphQL document is only valid if all defined fragments have unique names.
   */
  function UniqueFragmentNamesRule(context) {
    var knownFragmentNames = Object.create(null);
    return {
      OperationDefinition: function OperationDefinition() {
        return false;
      },
      FragmentDefinition: function FragmentDefinition(node) {
        var fragmentName = node.name.value;

        if (knownFragmentNames[fragmentName]) {
          context.reportError(new _GraphQLError$v.GraphQLError("There can be only one fragment named \"".concat(fragmentName, "\"."), [knownFragmentNames[fragmentName], node.name]));
        } else {
          knownFragmentNames[fragmentName] = node.name;
        }

        return false;
      }
    };
  }

  var KnownFragmentNamesRule$1 = {};

  Object.defineProperty(KnownFragmentNamesRule$1, "__esModule", {
    value: true
  });
  KnownFragmentNamesRule$1.KnownFragmentNamesRule = KnownFragmentNamesRule;

  var _GraphQLError$u = GraphQLError$1;

  /**
   * Known fragment names
   *
   * A GraphQL document is only valid if all `...Fragment` fragment spreads refer
   * to fragments defined in the same document.
   */
  function KnownFragmentNamesRule(context) {
    return {
      FragmentSpread: function FragmentSpread(node) {
        var fragmentName = node.name.value;
        var fragment = context.getFragment(fragmentName);

        if (!fragment) {
          context.reportError(new _GraphQLError$u.GraphQLError("Unknown fragment \"".concat(fragmentName, "\"."), node.name));
        }
      }
    };
  }

  var NoUnusedFragmentsRule$1 = {};

  Object.defineProperty(NoUnusedFragmentsRule$1, "__esModule", {
    value: true
  });
  NoUnusedFragmentsRule$1.NoUnusedFragmentsRule = NoUnusedFragmentsRule;

  var _GraphQLError$t = GraphQLError$1;

  /**
   * No unused fragments
   *
   * A GraphQL document is only valid if all fragment definitions are spread
   * within operations, or spread within other fragments spread within operations.
   */
  function NoUnusedFragmentsRule(context) {
    var operationDefs = [];
    var fragmentDefs = [];
    return {
      OperationDefinition: function OperationDefinition(node) {
        operationDefs.push(node);
        return false;
      },
      FragmentDefinition: function FragmentDefinition(node) {
        fragmentDefs.push(node);
        return false;
      },
      Document: {
        leave: function leave() {
          var fragmentNameUsed = Object.create(null);

          for (var _i2 = 0; _i2 < operationDefs.length; _i2++) {
            var operation = operationDefs[_i2];

            for (var _i4 = 0, _context$getRecursive2 = context.getRecursivelyReferencedFragments(operation); _i4 < _context$getRecursive2.length; _i4++) {
              var fragment = _context$getRecursive2[_i4];
              fragmentNameUsed[fragment.name.value] = true;
            }
          }

          for (var _i6 = 0; _i6 < fragmentDefs.length; _i6++) {
            var fragmentDef = fragmentDefs[_i6];
            var fragName = fragmentDef.name.value;

            if (fragmentNameUsed[fragName] !== true) {
              context.reportError(new _GraphQLError$t.GraphQLError("Fragment \"".concat(fragName, "\" is never used."), fragmentDef));
            }
          }
        }
      }
    };
  }

  var PossibleFragmentSpreadsRule$1 = {};

  Object.defineProperty(PossibleFragmentSpreadsRule$1, "__esModule", {
    value: true
  });
  PossibleFragmentSpreadsRule$1.PossibleFragmentSpreadsRule = PossibleFragmentSpreadsRule;

  var _inspect$g = _interopRequireDefault$o(inspect$1);

  var _GraphQLError$s = GraphQLError$1;

  var _definition$i = definition;

  var _typeFromAST$4 = typeFromAST$1;

  var _typeComparators$1 = typeComparators;

  function _interopRequireDefault$o(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  /**
   * Possible fragment spread
   *
   * A fragment spread is only valid if the type condition could ever possibly
   * be true: if there is a non-empty intersection of the possible parent types,
   * and possible types which pass the type condition.
   */
  function PossibleFragmentSpreadsRule(context) {
    return {
      InlineFragment: function InlineFragment(node) {
        var fragType = context.getType();
        var parentType = context.getParentType();

        if ((0, _definition$i.isCompositeType)(fragType) && (0, _definition$i.isCompositeType)(parentType) && !(0, _typeComparators$1.doTypesOverlap)(context.getSchema(), fragType, parentType)) {
          var parentTypeStr = (0, _inspect$g.default)(parentType);
          var fragTypeStr = (0, _inspect$g.default)(fragType);
          context.reportError(new _GraphQLError$s.GraphQLError("Fragment cannot be spread here as objects of type \"".concat(parentTypeStr, "\" can never be of type \"").concat(fragTypeStr, "\"."), node));
        }
      },
      FragmentSpread: function FragmentSpread(node) {
        var fragName = node.name.value;
        var fragType = getFragmentType(context, fragName);
        var parentType = context.getParentType();

        if (fragType && parentType && !(0, _typeComparators$1.doTypesOverlap)(context.getSchema(), fragType, parentType)) {
          var parentTypeStr = (0, _inspect$g.default)(parentType);
          var fragTypeStr = (0, _inspect$g.default)(fragType);
          context.reportError(new _GraphQLError$s.GraphQLError("Fragment \"".concat(fragName, "\" cannot be spread here as objects of type \"").concat(parentTypeStr, "\" can never be of type \"").concat(fragTypeStr, "\"."), node));
        }
      }
    };
  }

  function getFragmentType(context, name) {
    var frag = context.getFragment(name);

    if (frag) {
      var type = (0, _typeFromAST$4.typeFromAST)(context.getSchema(), frag.typeCondition);

      if ((0, _definition$i.isCompositeType)(type)) {
        return type;
      }
    }
  }

  var NoFragmentCyclesRule$1 = {};

  Object.defineProperty(NoFragmentCyclesRule$1, "__esModule", {
    value: true
  });
  NoFragmentCyclesRule$1.NoFragmentCyclesRule = NoFragmentCyclesRule;

  var _GraphQLError$r = GraphQLError$1;

  function NoFragmentCyclesRule(context) {
    // Tracks already visited fragments to maintain O(N) and to ensure that cycles
    // are not redundantly reported.
    var visitedFrags = Object.create(null); // Array of AST nodes used to produce meaningful errors

    var spreadPath = []; // Position in the spread path

    var spreadPathIndexByName = Object.create(null);
    return {
      OperationDefinition: function OperationDefinition() {
        return false;
      },
      FragmentDefinition: function FragmentDefinition(node) {
        detectCycleRecursive(node);
        return false;
      }
    }; // This does a straight-forward DFS to find cycles.
    // It does not terminate when a cycle was found but continues to explore
    // the graph to find all possible cycles.

    function detectCycleRecursive(fragment) {
      if (visitedFrags[fragment.name.value]) {
        return;
      }

      var fragmentName = fragment.name.value;
      visitedFrags[fragmentName] = true;
      var spreadNodes = context.getFragmentSpreads(fragment.selectionSet);

      if (spreadNodes.length === 0) {
        return;
      }

      spreadPathIndexByName[fragmentName] = spreadPath.length;

      for (var _i2 = 0; _i2 < spreadNodes.length; _i2++) {
        var spreadNode = spreadNodes[_i2];
        var spreadName = spreadNode.name.value;
        var cycleIndex = spreadPathIndexByName[spreadName];
        spreadPath.push(spreadNode);

        if (cycleIndex === undefined) {
          var spreadFragment = context.getFragment(spreadName);

          if (spreadFragment) {
            detectCycleRecursive(spreadFragment);
          }
        } else {
          var cyclePath = spreadPath.slice(cycleIndex);
          var viaPath = cyclePath.slice(0, -1).map(function (s) {
            return '"' + s.name.value + '"';
          }).join(', ');
          context.reportError(new _GraphQLError$r.GraphQLError("Cannot spread fragment \"".concat(spreadName, "\" within itself") + (viaPath !== '' ? " via ".concat(viaPath, ".") : '.'), cyclePath));
        }

        spreadPath.pop();
      }

      spreadPathIndexByName[fragmentName] = undefined;
    }
  }

  var UniqueVariableNamesRule$1 = {};

  Object.defineProperty(UniqueVariableNamesRule$1, "__esModule", {
    value: true
  });
  UniqueVariableNamesRule$1.UniqueVariableNamesRule = UniqueVariableNamesRule;

  var _GraphQLError$q = GraphQLError$1;

  /**
   * Unique variable names
   *
   * A GraphQL operation is only valid if all its variables are uniquely named.
   */
  function UniqueVariableNamesRule(context) {
    var knownVariableNames = Object.create(null);
    return {
      OperationDefinition: function OperationDefinition() {
        knownVariableNames = Object.create(null);
      },
      VariableDefinition: function VariableDefinition(node) {
        var variableName = node.variable.name.value;

        if (knownVariableNames[variableName]) {
          context.reportError(new _GraphQLError$q.GraphQLError("There can be only one variable named \"$".concat(variableName, "\"."), [knownVariableNames[variableName], node.variable.name]));
        } else {
          knownVariableNames[variableName] = node.variable.name;
        }
      }
    };
  }

  var NoUndefinedVariablesRule$1 = {};

  Object.defineProperty(NoUndefinedVariablesRule$1, "__esModule", {
    value: true
  });
  NoUndefinedVariablesRule$1.NoUndefinedVariablesRule = NoUndefinedVariablesRule;

  var _GraphQLError$p = GraphQLError$1;

  /**
   * No undefined variables
   *
   * A GraphQL operation is only valid if all variables encountered, both directly
   * and via fragment spreads, are defined by that operation.
   */
  function NoUndefinedVariablesRule(context) {
    var variableNameDefined = Object.create(null);
    return {
      OperationDefinition: {
        enter: function enter() {
          variableNameDefined = Object.create(null);
        },
        leave: function leave(operation) {
          var usages = context.getRecursiveVariableUsages(operation);

          for (var _i2 = 0; _i2 < usages.length; _i2++) {
            var _ref2 = usages[_i2];
            var node = _ref2.node;
            var varName = node.name.value;

            if (variableNameDefined[varName] !== true) {
              context.reportError(new _GraphQLError$p.GraphQLError(operation.name ? "Variable \"$".concat(varName, "\" is not defined by operation \"").concat(operation.name.value, "\".") : "Variable \"$".concat(varName, "\" is not defined."), [node, operation]));
            }
          }
        }
      },
      VariableDefinition: function VariableDefinition(node) {
        variableNameDefined[node.variable.name.value] = true;
      }
    };
  }

  var NoUnusedVariablesRule$1 = {};

  Object.defineProperty(NoUnusedVariablesRule$1, "__esModule", {
    value: true
  });
  NoUnusedVariablesRule$1.NoUnusedVariablesRule = NoUnusedVariablesRule;

  var _GraphQLError$o = GraphQLError$1;

  /**
   * No unused variables
   *
   * A GraphQL operation is only valid if all variables defined by an operation
   * are used, either directly or within a spread fragment.
   */
  function NoUnusedVariablesRule(context) {
    var variableDefs = [];
    return {
      OperationDefinition: {
        enter: function enter() {
          variableDefs = [];
        },
        leave: function leave(operation) {
          var variableNameUsed = Object.create(null);
          var usages = context.getRecursiveVariableUsages(operation);

          for (var _i2 = 0; _i2 < usages.length; _i2++) {
            var _ref2 = usages[_i2];
            var node = _ref2.node;
            variableNameUsed[node.name.value] = true;
          }

          for (var _i4 = 0, _variableDefs2 = variableDefs; _i4 < _variableDefs2.length; _i4++) {
            var variableDef = _variableDefs2[_i4];
            var variableName = variableDef.variable.name.value;

            if (variableNameUsed[variableName] !== true) {
              context.reportError(new _GraphQLError$o.GraphQLError(operation.name ? "Variable \"$".concat(variableName, "\" is never used in operation \"").concat(operation.name.value, "\".") : "Variable \"$".concat(variableName, "\" is never used."), variableDef));
            }
          }
        }
      },
      VariableDefinition: function VariableDefinition(def) {
        variableDefs.push(def);
      }
    };
  }

  var KnownDirectivesRule$1 = {};

  Object.defineProperty(KnownDirectivesRule$1, "__esModule", {
    value: true
  });
  KnownDirectivesRule$1.KnownDirectivesRule = KnownDirectivesRule;

  var _inspect$f = _interopRequireDefault$n(inspect$1);

  var _invariant$a = _interopRequireDefault$n(invariant$1);

  var _GraphQLError$n = GraphQLError$1;

  var _kinds$e = kinds;

  var _directiveLocation = directiveLocation;

  var _directives$9 = directives;

  function _interopRequireDefault$n(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  /**
   * Known directives
   *
   * A GraphQL document is only valid if all `@directives` are known by the
   * schema and legally positioned.
   */
  function KnownDirectivesRule(context) {
    var locationsMap = Object.create(null);
    var schema = context.getSchema();
    var definedDirectives = schema ? schema.getDirectives() : _directives$9.specifiedDirectives;

    for (var _i2 = 0; _i2 < definedDirectives.length; _i2++) {
      var directive = definedDirectives[_i2];
      locationsMap[directive.name] = directive.locations;
    }

    var astDefinitions = context.getDocument().definitions;

    for (var _i4 = 0; _i4 < astDefinitions.length; _i4++) {
      var def = astDefinitions[_i4];

      if (def.kind === _kinds$e.Kind.DIRECTIVE_DEFINITION) {
        locationsMap[def.name.value] = def.locations.map(function (name) {
          return name.value;
        });
      }
    }

    return {
      Directive: function Directive(node, _key, _parent, _path, ancestors) {
        var name = node.name.value;
        var locations = locationsMap[name];

        if (!locations) {
          context.reportError(new _GraphQLError$n.GraphQLError("Unknown directive \"@".concat(name, "\"."), node));
          return;
        }

        var candidateLocation = getDirectiveLocationForASTPath(ancestors);

        if (candidateLocation && locations.indexOf(candidateLocation) === -1) {
          context.reportError(new _GraphQLError$n.GraphQLError("Directive \"@".concat(name, "\" may not be used on ").concat(candidateLocation, "."), node));
        }
      }
    };
  }

  function getDirectiveLocationForASTPath(ancestors) {
    var appliedTo = ancestors[ancestors.length - 1];
    !Array.isArray(appliedTo) || (0, _invariant$a.default)(0);

    switch (appliedTo.kind) {
      case _kinds$e.Kind.OPERATION_DEFINITION:
        return getDirectiveLocationForOperation(appliedTo.operation);

      case _kinds$e.Kind.FIELD:
        return _directiveLocation.DirectiveLocation.FIELD;

      case _kinds$e.Kind.FRAGMENT_SPREAD:
        return _directiveLocation.DirectiveLocation.FRAGMENT_SPREAD;

      case _kinds$e.Kind.INLINE_FRAGMENT:
        return _directiveLocation.DirectiveLocation.INLINE_FRAGMENT;

      case _kinds$e.Kind.FRAGMENT_DEFINITION:
        return _directiveLocation.DirectiveLocation.FRAGMENT_DEFINITION;

      case _kinds$e.Kind.VARIABLE_DEFINITION:
        return _directiveLocation.DirectiveLocation.VARIABLE_DEFINITION;

      case _kinds$e.Kind.SCHEMA_DEFINITION:
      case _kinds$e.Kind.SCHEMA_EXTENSION:
        return _directiveLocation.DirectiveLocation.SCHEMA;

      case _kinds$e.Kind.SCALAR_TYPE_DEFINITION:
      case _kinds$e.Kind.SCALAR_TYPE_EXTENSION:
        return _directiveLocation.DirectiveLocation.SCALAR;

      case _kinds$e.Kind.OBJECT_TYPE_DEFINITION:
      case _kinds$e.Kind.OBJECT_TYPE_EXTENSION:
        return _directiveLocation.DirectiveLocation.OBJECT;

      case _kinds$e.Kind.FIELD_DEFINITION:
        return _directiveLocation.DirectiveLocation.FIELD_DEFINITION;

      case _kinds$e.Kind.INTERFACE_TYPE_DEFINITION:
      case _kinds$e.Kind.INTERFACE_TYPE_EXTENSION:
        return _directiveLocation.DirectiveLocation.INTERFACE;

      case _kinds$e.Kind.UNION_TYPE_DEFINITION:
      case _kinds$e.Kind.UNION_TYPE_EXTENSION:
        return _directiveLocation.DirectiveLocation.UNION;

      case _kinds$e.Kind.ENUM_TYPE_DEFINITION:
      case _kinds$e.Kind.ENUM_TYPE_EXTENSION:
        return _directiveLocation.DirectiveLocation.ENUM;

      case _kinds$e.Kind.ENUM_VALUE_DEFINITION:
        return _directiveLocation.DirectiveLocation.ENUM_VALUE;

      case _kinds$e.Kind.INPUT_OBJECT_TYPE_DEFINITION:
      case _kinds$e.Kind.INPUT_OBJECT_TYPE_EXTENSION:
        return _directiveLocation.DirectiveLocation.INPUT_OBJECT;

      case _kinds$e.Kind.INPUT_VALUE_DEFINITION:
        {
          var parentNode = ancestors[ancestors.length - 3];
          return parentNode.kind === _kinds$e.Kind.INPUT_OBJECT_TYPE_DEFINITION ? _directiveLocation.DirectiveLocation.INPUT_FIELD_DEFINITION : _directiveLocation.DirectiveLocation.ARGUMENT_DEFINITION;
        }
    }
  }

  function getDirectiveLocationForOperation(operation) {
    switch (operation) {
      case 'query':
        return _directiveLocation.DirectiveLocation.QUERY;

      case 'mutation':
        return _directiveLocation.DirectiveLocation.MUTATION;

      case 'subscription':
        return _directiveLocation.DirectiveLocation.SUBSCRIPTION;
    } // istanbul ignore next (Not reachable. All possible types have been considered)


    (0, _invariant$a.default)(0, 'Unexpected operation: ' + (0, _inspect$f.default)(operation));
  }

  var UniqueDirectivesPerLocationRule$1 = {};

  Object.defineProperty(UniqueDirectivesPerLocationRule$1, "__esModule", {
    value: true
  });
  UniqueDirectivesPerLocationRule$1.UniqueDirectivesPerLocationRule = UniqueDirectivesPerLocationRule;

  var _GraphQLError$m = GraphQLError$1;

  var _kinds$d = kinds;

  var _predicates$2 = predicates;

  var _directives$8 = directives;

  /**
   * Unique directive names per location
   *
   * A GraphQL document is only valid if all non-repeatable directives at
   * a given location are uniquely named.
   */
  function UniqueDirectivesPerLocationRule(context) {
    var uniqueDirectiveMap = Object.create(null);
    var schema = context.getSchema();
    var definedDirectives = schema ? schema.getDirectives() : _directives$8.specifiedDirectives;

    for (var _i2 = 0; _i2 < definedDirectives.length; _i2++) {
      var directive = definedDirectives[_i2];
      uniqueDirectiveMap[directive.name] = !directive.isRepeatable;
    }

    var astDefinitions = context.getDocument().definitions;

    for (var _i4 = 0; _i4 < astDefinitions.length; _i4++) {
      var def = astDefinitions[_i4];

      if (def.kind === _kinds$d.Kind.DIRECTIVE_DEFINITION) {
        uniqueDirectiveMap[def.name.value] = !def.repeatable;
      }
    }

    var schemaDirectives = Object.create(null);
    var typeDirectivesMap = Object.create(null);
    return {
      // Many different AST nodes may contain directives. Rather than listing
      // them all, just listen for entering any node, and check to see if it
      // defines any directives.
      enter: function enter(node) {
        if (node.directives == null) {
          return;
        }

        var seenDirectives;

        if (node.kind === _kinds$d.Kind.SCHEMA_DEFINITION || node.kind === _kinds$d.Kind.SCHEMA_EXTENSION) {
          seenDirectives = schemaDirectives;
        } else if ((0, _predicates$2.isTypeDefinitionNode)(node) || (0, _predicates$2.isTypeExtensionNode)(node)) {
          var typeName = node.name.value;
          seenDirectives = typeDirectivesMap[typeName];

          if (seenDirectives === undefined) {
            typeDirectivesMap[typeName] = seenDirectives = Object.create(null);
          }
        } else {
          seenDirectives = Object.create(null);
        }

        for (var _i6 = 0, _node$directives2 = node.directives; _i6 < _node$directives2.length; _i6++) {
          var _directive = _node$directives2[_i6];
          var directiveName = _directive.name.value;

          if (uniqueDirectiveMap[directiveName]) {
            if (seenDirectives[directiveName]) {
              context.reportError(new _GraphQLError$m.GraphQLError("The directive \"@".concat(directiveName, "\" can only be used once at this location."), [seenDirectives[directiveName], _directive]));
            } else {
              seenDirectives[directiveName] = _directive;
            }
          }
        }
      }
    };
  }

  var KnownArgumentNamesRule$1 = {};

  Object.defineProperty(KnownArgumentNamesRule$1, "__esModule", {
    value: true
  });
  KnownArgumentNamesRule$1.KnownArgumentNamesRule = KnownArgumentNamesRule;
  KnownArgumentNamesRule$1.KnownArgumentNamesOnDirectivesRule = KnownArgumentNamesOnDirectivesRule;

  var _didYouMean$3 = _interopRequireDefault$m(didYouMean$1);

  var _suggestionList$3 = _interopRequireDefault$m(suggestionList$1);

  var _GraphQLError$l = GraphQLError$1;

  var _kinds$c = kinds;

  var _directives$7 = directives;

  function _interopRequireDefault$m(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function ownKeys$6(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$6(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$6(Object(source), true).forEach(function (key) { _defineProperty$8(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$6(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

  function _defineProperty$8(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

  /**
   * Known argument names
   *
   * A GraphQL field is only valid if all supplied arguments are defined by
   * that field.
   */
  function KnownArgumentNamesRule(context) {
    return _objectSpread$6(_objectSpread$6({}, KnownArgumentNamesOnDirectivesRule(context)), {}, {
      Argument: function Argument(argNode) {
        var argDef = context.getArgument();
        var fieldDef = context.getFieldDef();
        var parentType = context.getParentType();

        if (!argDef && fieldDef && parentType) {
          var argName = argNode.name.value;
          var knownArgsNames = fieldDef.args.map(function (arg) {
            return arg.name;
          });
          var suggestions = (0, _suggestionList$3.default)(argName, knownArgsNames);
          context.reportError(new _GraphQLError$l.GraphQLError("Unknown argument \"".concat(argName, "\" on field \"").concat(parentType.name, ".").concat(fieldDef.name, "\".") + (0, _didYouMean$3.default)(suggestions), argNode));
        }
      }
    });
  }
  /**
   * @internal
   */


  function KnownArgumentNamesOnDirectivesRule(context) {
    var directiveArgs = Object.create(null);
    var schema = context.getSchema();
    var definedDirectives = schema ? schema.getDirectives() : _directives$7.specifiedDirectives;

    for (var _i2 = 0; _i2 < definedDirectives.length; _i2++) {
      var directive = definedDirectives[_i2];
      directiveArgs[directive.name] = directive.args.map(function (arg) {
        return arg.name;
      });
    }

    var astDefinitions = context.getDocument().definitions;

    for (var _i4 = 0; _i4 < astDefinitions.length; _i4++) {
      var def = astDefinitions[_i4];

      if (def.kind === _kinds$c.Kind.DIRECTIVE_DEFINITION) {
        var _def$arguments;

        // istanbul ignore next (See: 'https://github.com/graphql/graphql-js/issues/2203')
        var argsNodes = (_def$arguments = def.arguments) !== null && _def$arguments !== void 0 ? _def$arguments : [];
        directiveArgs[def.name.value] = argsNodes.map(function (arg) {
          return arg.name.value;
        });
      }
    }

    return {
      Directive: function Directive(directiveNode) {
        var directiveName = directiveNode.name.value;
        var knownArgs = directiveArgs[directiveName];

        if (directiveNode.arguments && knownArgs) {
          for (var _i6 = 0, _directiveNode$argume2 = directiveNode.arguments; _i6 < _directiveNode$argume2.length; _i6++) {
            var argNode = _directiveNode$argume2[_i6];
            var argName = argNode.name.value;

            if (knownArgs.indexOf(argName) === -1) {
              var suggestions = (0, _suggestionList$3.default)(argName, knownArgs);
              context.reportError(new _GraphQLError$l.GraphQLError("Unknown argument \"".concat(argName, "\" on directive \"@").concat(directiveName, "\".") + (0, _didYouMean$3.default)(suggestions), argNode));
            }
          }
        }

        return false;
      }
    };
  }

  var UniqueArgumentNamesRule$1 = {};

  Object.defineProperty(UniqueArgumentNamesRule$1, "__esModule", {
    value: true
  });
  UniqueArgumentNamesRule$1.UniqueArgumentNamesRule = UniqueArgumentNamesRule;

  var _GraphQLError$k = GraphQLError$1;

  /**
   * Unique argument names
   *
   * A GraphQL field or directive is only valid if all supplied arguments are
   * uniquely named.
   */
  function UniqueArgumentNamesRule(context) {
    var knownArgNames = Object.create(null);
    return {
      Field: function Field() {
        knownArgNames = Object.create(null);
      },
      Directive: function Directive() {
        knownArgNames = Object.create(null);
      },
      Argument: function Argument(node) {
        var argName = node.name.value;

        if (knownArgNames[argName]) {
          context.reportError(new _GraphQLError$k.GraphQLError("There can be only one argument named \"".concat(argName, "\"."), [knownArgNames[argName], node.name]));
        } else {
          knownArgNames[argName] = node.name;
        }

        return false;
      }
    };
  }

  var ValuesOfCorrectTypeRule$1 = {};

  Object.defineProperty(ValuesOfCorrectTypeRule$1, "__esModule", {
    value: true
  });
  ValuesOfCorrectTypeRule$1.ValuesOfCorrectTypeRule = ValuesOfCorrectTypeRule;

  var _objectValues3$2 = _interopRequireDefault$l(objectValues$1);

  var _keyMap$5 = _interopRequireDefault$l(keyMap$1);

  var _inspect$e = _interopRequireDefault$l(inspect$1);

  var _didYouMean$2 = _interopRequireDefault$l(didYouMean$1);

  var _suggestionList$2 = _interopRequireDefault$l(suggestionList$1);

  var _GraphQLError$j = GraphQLError$1;

  var _printer$5 = printer;

  var _definition$h = definition;

  function _interopRequireDefault$l(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  /**
   * Value literals of correct type
   *
   * A GraphQL document is only valid if all value literals are of the type
   * expected at their position.
   */
  function ValuesOfCorrectTypeRule(context) {
    return {
      ListValue: function ListValue(node) {
        // Note: TypeInfo will traverse into a list's item type, so look to the
        // parent input type to check if it is a list.
        var type = (0, _definition$h.getNullableType)(context.getParentInputType());

        if (!(0, _definition$h.isListType)(type)) {
          isValidValueNode(context, node);
          return false; // Don't traverse further.
        }
      },
      ObjectValue: function ObjectValue(node) {
        var type = (0, _definition$h.getNamedType)(context.getInputType());

        if (!(0, _definition$h.isInputObjectType)(type)) {
          isValidValueNode(context, node);
          return false; // Don't traverse further.
        } // Ensure every required field exists.


        var fieldNodeMap = (0, _keyMap$5.default)(node.fields, function (field) {
          return field.name.value;
        });

        for (var _i2 = 0, _objectValues2 = (0, _objectValues3$2.default)(type.getFields()); _i2 < _objectValues2.length; _i2++) {
          var fieldDef = _objectValues2[_i2];
          var fieldNode = fieldNodeMap[fieldDef.name];

          if (!fieldNode && (0, _definition$h.isRequiredInputField)(fieldDef)) {
            var typeStr = (0, _inspect$e.default)(fieldDef.type);
            context.reportError(new _GraphQLError$j.GraphQLError("Field \"".concat(type.name, ".").concat(fieldDef.name, "\" of required type \"").concat(typeStr, "\" was not provided."), node));
          }
        }
      },
      ObjectField: function ObjectField(node) {
        var parentType = (0, _definition$h.getNamedType)(context.getParentInputType());
        var fieldType = context.getInputType();

        if (!fieldType && (0, _definition$h.isInputObjectType)(parentType)) {
          var suggestions = (0, _suggestionList$2.default)(node.name.value, Object.keys(parentType.getFields()));
          context.reportError(new _GraphQLError$j.GraphQLError("Field \"".concat(node.name.value, "\" is not defined by type \"").concat(parentType.name, "\".") + (0, _didYouMean$2.default)(suggestions), node));
        }
      },
      NullValue: function NullValue(node) {
        var type = context.getInputType();

        if ((0, _definition$h.isNonNullType)(type)) {
          context.reportError(new _GraphQLError$j.GraphQLError("Expected value of type \"".concat((0, _inspect$e.default)(type), "\", found ").concat((0, _printer$5.print)(node), "."), node));
        }
      },
      EnumValue: function EnumValue(node) {
        return isValidValueNode(context, node);
      },
      IntValue: function IntValue(node) {
        return isValidValueNode(context, node);
      },
      FloatValue: function FloatValue(node) {
        return isValidValueNode(context, node);
      },
      StringValue: function StringValue(node) {
        return isValidValueNode(context, node);
      },
      BooleanValue: function BooleanValue(node) {
        return isValidValueNode(context, node);
      }
    };
  }
  /**
   * Any value literal may be a valid representation of a Scalar, depending on
   * that scalar type.
   */


  function isValidValueNode(context, node) {
    // Report any error at the full type expected by the location.
    var locationType = context.getInputType();

    if (!locationType) {
      return;
    }

    var type = (0, _definition$h.getNamedType)(locationType);

    if (!(0, _definition$h.isLeafType)(type)) {
      var typeStr = (0, _inspect$e.default)(locationType);
      context.reportError(new _GraphQLError$j.GraphQLError("Expected value of type \"".concat(typeStr, "\", found ").concat((0, _printer$5.print)(node), "."), node));
      return;
    } // Scalars and Enums determine if a literal value is valid via parseLiteral(),
    // which may throw or return an invalid value to indicate failure.


    try {
      var parseResult = type.parseLiteral(node, undefined
      /* variables */
      );

      if (parseResult === undefined) {
        var _typeStr = (0, _inspect$e.default)(locationType);

        context.reportError(new _GraphQLError$j.GraphQLError("Expected value of type \"".concat(_typeStr, "\", found ").concat((0, _printer$5.print)(node), "."), node));
      }
    } catch (error) {
      var _typeStr2 = (0, _inspect$e.default)(locationType);

      if (error instanceof _GraphQLError$j.GraphQLError) {
        context.reportError(error);
      } else {
        context.reportError(new _GraphQLError$j.GraphQLError("Expected value of type \"".concat(_typeStr2, "\", found ").concat((0, _printer$5.print)(node), "; ") + error.message, node, undefined, undefined, undefined, error));
      }
    }
  }

  var ProvidedRequiredArgumentsRule$1 = {};

  Object.defineProperty(ProvidedRequiredArgumentsRule$1, "__esModule", {
    value: true
  });
  ProvidedRequiredArgumentsRule$1.ProvidedRequiredArgumentsRule = ProvidedRequiredArgumentsRule;
  ProvidedRequiredArgumentsRule$1.ProvidedRequiredArgumentsOnDirectivesRule = ProvidedRequiredArgumentsOnDirectivesRule;

  var _inspect$d = _interopRequireDefault$k(inspect$1);

  var _keyMap$4 = _interopRequireDefault$k(keyMap$1);

  var _GraphQLError$i = GraphQLError$1;

  var _kinds$b = kinds;

  var _printer$4 = printer;

  var _directives$6 = directives;

  var _definition$g = definition;

  function _interopRequireDefault$k(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function ownKeys$5(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$5(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$5(Object(source), true).forEach(function (key) { _defineProperty$7(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$5(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

  function _defineProperty$7(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

  /**
   * Provided required arguments
   *
   * A field or directive is only valid if all required (non-null without a
   * default value) field arguments have been provided.
   */
  function ProvidedRequiredArgumentsRule(context) {
    return _objectSpread$5(_objectSpread$5({}, ProvidedRequiredArgumentsOnDirectivesRule(context)), {}, {
      Field: {
        // Validate on leave to allow for deeper errors to appear first.
        leave: function leave(fieldNode) {
          var _fieldNode$arguments;

          var fieldDef = context.getFieldDef();

          if (!fieldDef) {
            return false;
          } // istanbul ignore next (See: 'https://github.com/graphql/graphql-js/issues/2203')


          var argNodes = (_fieldNode$arguments = fieldNode.arguments) !== null && _fieldNode$arguments !== void 0 ? _fieldNode$arguments : [];
          var argNodeMap = (0, _keyMap$4.default)(argNodes, function (arg) {
            return arg.name.value;
          });

          for (var _i2 = 0, _fieldDef$args2 = fieldDef.args; _i2 < _fieldDef$args2.length; _i2++) {
            var argDef = _fieldDef$args2[_i2];
            var argNode = argNodeMap[argDef.name];

            if (!argNode && (0, _definition$g.isRequiredArgument)(argDef)) {
              var argTypeStr = (0, _inspect$d.default)(argDef.type);
              context.reportError(new _GraphQLError$i.GraphQLError("Field \"".concat(fieldDef.name, "\" argument \"").concat(argDef.name, "\" of type \"").concat(argTypeStr, "\" is required, but it was not provided."), fieldNode));
            }
          }
        }
      }
    });
  }
  /**
   * @internal
   */


  function ProvidedRequiredArgumentsOnDirectivesRule(context) {
    var requiredArgsMap = Object.create(null);
    var schema = context.getSchema();
    var definedDirectives = schema ? schema.getDirectives() : _directives$6.specifiedDirectives;

    for (var _i4 = 0; _i4 < definedDirectives.length; _i4++) {
      var directive = definedDirectives[_i4];
      requiredArgsMap[directive.name] = (0, _keyMap$4.default)(directive.args.filter(_definition$g.isRequiredArgument), function (arg) {
        return arg.name;
      });
    }

    var astDefinitions = context.getDocument().definitions;

    for (var _i6 = 0; _i6 < astDefinitions.length; _i6++) {
      var def = astDefinitions[_i6];

      if (def.kind === _kinds$b.Kind.DIRECTIVE_DEFINITION) {
        var _def$arguments;

        // istanbul ignore next (See: 'https://github.com/graphql/graphql-js/issues/2203')
        var argNodes = (_def$arguments = def.arguments) !== null && _def$arguments !== void 0 ? _def$arguments : [];
        requiredArgsMap[def.name.value] = (0, _keyMap$4.default)(argNodes.filter(isRequiredArgumentNode), function (arg) {
          return arg.name.value;
        });
      }
    }

    return {
      Directive: {
        // Validate on leave to allow for deeper errors to appear first.
        leave: function leave(directiveNode) {
          var directiveName = directiveNode.name.value;
          var requiredArgs = requiredArgsMap[directiveName];

          if (requiredArgs) {
            var _directiveNode$argume;

            // istanbul ignore next (See: 'https://github.com/graphql/graphql-js/issues/2203')
            var _argNodes = (_directiveNode$argume = directiveNode.arguments) !== null && _directiveNode$argume !== void 0 ? _directiveNode$argume : [];

            var argNodeMap = (0, _keyMap$4.default)(_argNodes, function (arg) {
              return arg.name.value;
            });

            for (var _i8 = 0, _Object$keys2 = Object.keys(requiredArgs); _i8 < _Object$keys2.length; _i8++) {
              var argName = _Object$keys2[_i8];

              if (!argNodeMap[argName]) {
                var argType = requiredArgs[argName].type;
                var argTypeStr = (0, _definition$g.isType)(argType) ? (0, _inspect$d.default)(argType) : (0, _printer$4.print)(argType);
                context.reportError(new _GraphQLError$i.GraphQLError("Directive \"@".concat(directiveName, "\" argument \"").concat(argName, "\" of type \"").concat(argTypeStr, "\" is required, but it was not provided."), directiveNode));
              }
            }
          }
        }
      }
    };
  }

  function isRequiredArgumentNode(arg) {
    return arg.type.kind === _kinds$b.Kind.NON_NULL_TYPE && arg.defaultValue == null;
  }

  var VariablesInAllowedPositionRule$1 = {};

  Object.defineProperty(VariablesInAllowedPositionRule$1, "__esModule", {
    value: true
  });
  VariablesInAllowedPositionRule$1.VariablesInAllowedPositionRule = VariablesInAllowedPositionRule;

  var _inspect$c = _interopRequireDefault$j(inspect$1);

  var _GraphQLError$h = GraphQLError$1;

  var _kinds$a = kinds;

  var _definition$f = definition;

  var _typeFromAST$3 = typeFromAST$1;

  var _typeComparators = typeComparators;

  function _interopRequireDefault$j(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  /**
   * Variables passed to field arguments conform to type
   */
  function VariablesInAllowedPositionRule(context) {
    var varDefMap = Object.create(null);
    return {
      OperationDefinition: {
        enter: function enter() {
          varDefMap = Object.create(null);
        },
        leave: function leave(operation) {
          var usages = context.getRecursiveVariableUsages(operation);

          for (var _i2 = 0; _i2 < usages.length; _i2++) {
            var _ref2 = usages[_i2];
            var node = _ref2.node;
            var type = _ref2.type;
            var defaultValue = _ref2.defaultValue;
            var varName = node.name.value;
            var varDef = varDefMap[varName];

            if (varDef && type) {
              // A var type is allowed if it is the same or more strict (e.g. is
              // a subtype of) than the expected type. It can be more strict if
              // the variable type is non-null when the expected type is nullable.
              // If both are list types, the variable item type can be more strict
              // than the expected item type (contravariant).
              var schema = context.getSchema();
              var varType = (0, _typeFromAST$3.typeFromAST)(schema, varDef.type);

              if (varType && !allowedVariableUsage(schema, varType, varDef.defaultValue, type, defaultValue)) {
                var varTypeStr = (0, _inspect$c.default)(varType);
                var typeStr = (0, _inspect$c.default)(type);
                context.reportError(new _GraphQLError$h.GraphQLError("Variable \"$".concat(varName, "\" of type \"").concat(varTypeStr, "\" used in position expecting type \"").concat(typeStr, "\"."), [varDef, node]));
              }
            }
          }
        }
      },
      VariableDefinition: function VariableDefinition(node) {
        varDefMap[node.variable.name.value] = node;
      }
    };
  }
  /**
   * Returns true if the variable is allowed in the location it was found,
   * which includes considering if default values exist for either the variable
   * or the location at which it is located.
   */


  function allowedVariableUsage(schema, varType, varDefaultValue, locationType, locationDefaultValue) {
    if ((0, _definition$f.isNonNullType)(locationType) && !(0, _definition$f.isNonNullType)(varType)) {
      var hasNonNullVariableDefaultValue = varDefaultValue != null && varDefaultValue.kind !== _kinds$a.Kind.NULL;
      var hasLocationDefaultValue = locationDefaultValue !== undefined;

      if (!hasNonNullVariableDefaultValue && !hasLocationDefaultValue) {
        return false;
      }

      var nullableLocationType = locationType.ofType;
      return (0, _typeComparators.isTypeSubTypeOf)(schema, varType, nullableLocationType);
    }

    return (0, _typeComparators.isTypeSubTypeOf)(schema, varType, locationType);
  }

  var OverlappingFieldsCanBeMergedRule$1 = {};

  Object.defineProperty(OverlappingFieldsCanBeMergedRule$1, "__esModule", {
    value: true
  });
  OverlappingFieldsCanBeMergedRule$1.OverlappingFieldsCanBeMergedRule = OverlappingFieldsCanBeMergedRule;

  var _find$1 = _interopRequireDefault$i(find$1);

  var _objectEntries3 = _interopRequireDefault$i(objectEntries$1);

  var _inspect$b = _interopRequireDefault$i(inspect$1);

  var _GraphQLError$g = GraphQLError$1;

  var _kinds$9 = kinds;

  var _printer$3 = printer;

  var _definition$e = definition;

  var _typeFromAST$2 = typeFromAST$1;

  function _interopRequireDefault$i(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function reasonMessage(reason) {
    if (Array.isArray(reason)) {
      return reason.map(function (_ref) {
        var responseName = _ref[0],
            subReason = _ref[1];
        return "subfields \"".concat(responseName, "\" conflict because ") + reasonMessage(subReason);
      }).join(' and ');
    }

    return reason;
  }
  /**
   * Overlapping fields can be merged
   *
   * A selection set is only valid if all fields (including spreading any
   * fragments) either correspond to distinct response names or can be merged
   * without ambiguity.
   */


  function OverlappingFieldsCanBeMergedRule(context) {
    // A memoization for when two fragments are compared "between" each other for
    // conflicts. Two fragments may be compared many times, so memoizing this can
    // dramatically improve the performance of this validator.
    var comparedFragmentPairs = new PairSet(); // A cache for the "field map" and list of fragment names found in any given
    // selection set. Selection sets may be asked for this information multiple
    // times, so this improves the performance of this validator.

    var cachedFieldsAndFragmentNames = new Map();
    return {
      SelectionSet: function SelectionSet(selectionSet) {
        var conflicts = findConflictsWithinSelectionSet(context, cachedFieldsAndFragmentNames, comparedFragmentPairs, context.getParentType(), selectionSet);

        for (var _i2 = 0; _i2 < conflicts.length; _i2++) {
          var _ref3 = conflicts[_i2];
          var _ref2$ = _ref3[0];
          var responseName = _ref2$[0];
          var reason = _ref2$[1];
          var fields1 = _ref3[1];
          var fields2 = _ref3[2];
          var reasonMsg = reasonMessage(reason);
          context.reportError(new _GraphQLError$g.GraphQLError("Fields \"".concat(responseName, "\" conflict because ").concat(reasonMsg, ". Use different aliases on the fields to fetch both if this was intentional."), fields1.concat(fields2)));
        }
      }
    };
  }

  /**
   * Algorithm:
   *
   * Conflicts occur when two fields exist in a query which will produce the same
   * response name, but represent differing values, thus creating a conflict.
   * The algorithm below finds all conflicts via making a series of comparisons
   * between fields. In order to compare as few fields as possible, this makes
   * a series of comparisons "within" sets of fields and "between" sets of fields.
   *
   * Given any selection set, a collection produces both a set of fields by
   * also including all inline fragments, as well as a list of fragments
   * referenced by fragment spreads.
   *
   * A) Each selection set represented in the document first compares "within" its
   * collected set of fields, finding any conflicts between every pair of
   * overlapping fields.
   * Note: This is the *only time* that a the fields "within" a set are compared
   * to each other. After this only fields "between" sets are compared.
   *
   * B) Also, if any fragment is referenced in a selection set, then a
   * comparison is made "between" the original set of fields and the
   * referenced fragment.
   *
   * C) Also, if multiple fragments are referenced, then comparisons
   * are made "between" each referenced fragment.
   *
   * D) When comparing "between" a set of fields and a referenced fragment, first
   * a comparison is made between each field in the original set of fields and
   * each field in the the referenced set of fields.
   *
   * E) Also, if any fragment is referenced in the referenced selection set,
   * then a comparison is made "between" the original set of fields and the
   * referenced fragment (recursively referring to step D).
   *
   * F) When comparing "between" two fragments, first a comparison is made between
   * each field in the first referenced set of fields and each field in the the
   * second referenced set of fields.
   *
   * G) Also, any fragments referenced by the first must be compared to the
   * second, and any fragments referenced by the second must be compared to the
   * first (recursively referring to step F).
   *
   * H) When comparing two fields, if both have selection sets, then a comparison
   * is made "between" both selection sets, first comparing the set of fields in
   * the first selection set with the set of fields in the second.
   *
   * I) Also, if any fragment is referenced in either selection set, then a
   * comparison is made "between" the other set of fields and the
   * referenced fragment.
   *
   * J) Also, if two fragments are referenced in both selection sets, then a
   * comparison is made "between" the two fragments.
   *
   */
  // Find all conflicts found "within" a selection set, including those found
  // via spreading in fragments. Called when visiting each SelectionSet in the
  // GraphQL Document.
  function findConflictsWithinSelectionSet(context, cachedFieldsAndFragmentNames, comparedFragmentPairs, parentType, selectionSet) {
    var conflicts = [];

    var _getFieldsAndFragment = getFieldsAndFragmentNames(context, cachedFieldsAndFragmentNames, parentType, selectionSet),
        fieldMap = _getFieldsAndFragment[0],
        fragmentNames = _getFieldsAndFragment[1]; // (A) Find find all conflicts "within" the fields of this selection set.
    // Note: this is the *only place* `collectConflictsWithin` is called.


    collectConflictsWithin(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, fieldMap);

    if (fragmentNames.length !== 0) {
      // (B) Then collect conflicts between these fields and those represented by
      // each spread fragment name found.
      for (var i = 0; i < fragmentNames.length; i++) {
        collectConflictsBetweenFieldsAndFragment(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, false, fieldMap, fragmentNames[i]); // (C) Then compare this fragment with all other fragments found in this
        // selection set to collect conflicts between fragments spread together.
        // This compares each item in the list of fragment names to every other
        // item in that same list (except for itself).

        for (var j = i + 1; j < fragmentNames.length; j++) {
          collectConflictsBetweenFragments(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, false, fragmentNames[i], fragmentNames[j]);
        }
      }
    }

    return conflicts;
  } // Collect all conflicts found between a set of fields and a fragment reference
  // including via spreading in any nested fragments.


  function collectConflictsBetweenFieldsAndFragment(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, areMutuallyExclusive, fieldMap, fragmentName) {
    var fragment = context.getFragment(fragmentName);

    if (!fragment) {
      return;
    }

    var _getReferencedFieldsA = getReferencedFieldsAndFragmentNames(context, cachedFieldsAndFragmentNames, fragment),
        fieldMap2 = _getReferencedFieldsA[0],
        fragmentNames2 = _getReferencedFieldsA[1]; // Do not compare a fragment's fieldMap to itself.


    if (fieldMap === fieldMap2) {
      return;
    } // (D) First collect any conflicts between the provided collection of fields
    // and the collection of fields represented by the given fragment.


    collectConflictsBetween(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, areMutuallyExclusive, fieldMap, fieldMap2); // (E) Then collect any conflicts between the provided collection of fields
    // and any fragment names found in the given fragment.

    for (var i = 0; i < fragmentNames2.length; i++) {
      collectConflictsBetweenFieldsAndFragment(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, areMutuallyExclusive, fieldMap, fragmentNames2[i]);
    }
  } // Collect all conflicts found between two fragments, including via spreading in
  // any nested fragments.


  function collectConflictsBetweenFragments(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, areMutuallyExclusive, fragmentName1, fragmentName2) {
    // No need to compare a fragment to itself.
    if (fragmentName1 === fragmentName2) {
      return;
    } // Memoize so two fragments are not compared for conflicts more than once.


    if (comparedFragmentPairs.has(fragmentName1, fragmentName2, areMutuallyExclusive)) {
      return;
    }

    comparedFragmentPairs.add(fragmentName1, fragmentName2, areMutuallyExclusive);
    var fragment1 = context.getFragment(fragmentName1);
    var fragment2 = context.getFragment(fragmentName2);

    if (!fragment1 || !fragment2) {
      return;
    }

    var _getReferencedFieldsA2 = getReferencedFieldsAndFragmentNames(context, cachedFieldsAndFragmentNames, fragment1),
        fieldMap1 = _getReferencedFieldsA2[0],
        fragmentNames1 = _getReferencedFieldsA2[1];

    var _getReferencedFieldsA3 = getReferencedFieldsAndFragmentNames(context, cachedFieldsAndFragmentNames, fragment2),
        fieldMap2 = _getReferencedFieldsA3[0],
        fragmentNames2 = _getReferencedFieldsA3[1]; // (F) First, collect all conflicts between these two collections of fields
    // (not including any nested fragments).


    collectConflictsBetween(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, areMutuallyExclusive, fieldMap1, fieldMap2); // (G) Then collect conflicts between the first fragment and any nested
    // fragments spread in the second fragment.

    for (var j = 0; j < fragmentNames2.length; j++) {
      collectConflictsBetweenFragments(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, areMutuallyExclusive, fragmentName1, fragmentNames2[j]);
    } // (G) Then collect conflicts between the second fragment and any nested
    // fragments spread in the first fragment.


    for (var i = 0; i < fragmentNames1.length; i++) {
      collectConflictsBetweenFragments(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, areMutuallyExclusive, fragmentNames1[i], fragmentName2);
    }
  } // Find all conflicts found between two selection sets, including those found
  // via spreading in fragments. Called when determining if conflicts exist
  // between the sub-fields of two overlapping fields.


  function findConflictsBetweenSubSelectionSets(context, cachedFieldsAndFragmentNames, comparedFragmentPairs, areMutuallyExclusive, parentType1, selectionSet1, parentType2, selectionSet2) {
    var conflicts = [];

    var _getFieldsAndFragment2 = getFieldsAndFragmentNames(context, cachedFieldsAndFragmentNames, parentType1, selectionSet1),
        fieldMap1 = _getFieldsAndFragment2[0],
        fragmentNames1 = _getFieldsAndFragment2[1];

    var _getFieldsAndFragment3 = getFieldsAndFragmentNames(context, cachedFieldsAndFragmentNames, parentType2, selectionSet2),
        fieldMap2 = _getFieldsAndFragment3[0],
        fragmentNames2 = _getFieldsAndFragment3[1]; // (H) First, collect all conflicts between these two collections of field.


    collectConflictsBetween(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, areMutuallyExclusive, fieldMap1, fieldMap2); // (I) Then collect conflicts between the first collection of fields and
    // those referenced by each fragment name associated with the second.

    if (fragmentNames2.length !== 0) {
      for (var j = 0; j < fragmentNames2.length; j++) {
        collectConflictsBetweenFieldsAndFragment(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, areMutuallyExclusive, fieldMap1, fragmentNames2[j]);
      }
    } // (I) Then collect conflicts between the second collection of fields and
    // those referenced by each fragment name associated with the first.


    if (fragmentNames1.length !== 0) {
      for (var i = 0; i < fragmentNames1.length; i++) {
        collectConflictsBetweenFieldsAndFragment(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, areMutuallyExclusive, fieldMap2, fragmentNames1[i]);
      }
    } // (J) Also collect conflicts between any fragment names by the first and
    // fragment names by the second. This compares each item in the first set of
    // names to each item in the second set of names.


    for (var _i3 = 0; _i3 < fragmentNames1.length; _i3++) {
      for (var _j = 0; _j < fragmentNames2.length; _j++) {
        collectConflictsBetweenFragments(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, areMutuallyExclusive, fragmentNames1[_i3], fragmentNames2[_j]);
      }
    }

    return conflicts;
  } // Collect all Conflicts "within" one collection of fields.


  function collectConflictsWithin(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, fieldMap) {
    // A field map is a keyed collection, where each key represents a response
    // name and the value at that key is a list of all fields which provide that
    // response name. For every response name, if there are multiple fields, they
    // must be compared to find a potential conflict.
    for (var _i5 = 0, _objectEntries2 = (0, _objectEntries3.default)(fieldMap); _i5 < _objectEntries2.length; _i5++) {
      var _ref5 = _objectEntries2[_i5];
      var responseName = _ref5[0];
      var fields = _ref5[1];

      // This compares every field in the list to every other field in this list
      // (except to itself). If the list only has one item, nothing needs to
      // be compared.
      if (fields.length > 1) {
        for (var i = 0; i < fields.length; i++) {
          for (var j = i + 1; j < fields.length; j++) {
            var conflict = findConflict(context, cachedFieldsAndFragmentNames, comparedFragmentPairs, false, // within one collection is never mutually exclusive
            responseName, fields[i], fields[j]);

            if (conflict) {
              conflicts.push(conflict);
            }
          }
        }
      }
    }
  } // Collect all Conflicts between two collections of fields. This is similar to,
  // but different from the `collectConflictsWithin` function above. This check
  // assumes that `collectConflictsWithin` has already been called on each
  // provided collection of fields. This is true because this validator traverses
  // each individual selection set.


  function collectConflictsBetween(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, parentFieldsAreMutuallyExclusive, fieldMap1, fieldMap2) {
    // A field map is a keyed collection, where each key represents a response
    // name and the value at that key is a list of all fields which provide that
    // response name. For any response name which appears in both provided field
    // maps, each field from the first field map must be compared to every field
    // in the second field map to find potential conflicts.
    for (var _i7 = 0, _Object$keys2 = Object.keys(fieldMap1); _i7 < _Object$keys2.length; _i7++) {
      var responseName = _Object$keys2[_i7];
      var fields2 = fieldMap2[responseName];

      if (fields2) {
        var fields1 = fieldMap1[responseName];

        for (var i = 0; i < fields1.length; i++) {
          for (var j = 0; j < fields2.length; j++) {
            var conflict = findConflict(context, cachedFieldsAndFragmentNames, comparedFragmentPairs, parentFieldsAreMutuallyExclusive, responseName, fields1[i], fields2[j]);

            if (conflict) {
              conflicts.push(conflict);
            }
          }
        }
      }
    }
  } // Determines if there is a conflict between two particular fields, including
  // comparing their sub-fields.


  function findConflict(context, cachedFieldsAndFragmentNames, comparedFragmentPairs, parentFieldsAreMutuallyExclusive, responseName, field1, field2) {
    var parentType1 = field1[0],
        node1 = field1[1],
        def1 = field1[2];
    var parentType2 = field2[0],
        node2 = field2[1],
        def2 = field2[2]; // If it is known that two fields could not possibly apply at the same
    // time, due to the parent types, then it is safe to permit them to diverge
    // in aliased field or arguments used as they will not present any ambiguity
    // by differing.
    // It is known that two parent types could never overlap if they are
    // different Object types. Interface or Union types might overlap - if not
    // in the current state of the schema, then perhaps in some future version,
    // thus may not safely diverge.

    var areMutuallyExclusive = parentFieldsAreMutuallyExclusive || parentType1 !== parentType2 && (0, _definition$e.isObjectType)(parentType1) && (0, _definition$e.isObjectType)(parentType2);

    if (!areMutuallyExclusive) {
      var _node1$arguments, _node2$arguments;

      // Two aliases must refer to the same field.
      var name1 = node1.name.value;
      var name2 = node2.name.value;

      if (name1 !== name2) {
        return [[responseName, "\"".concat(name1, "\" and \"").concat(name2, "\" are different fields")], [node1], [node2]];
      } // istanbul ignore next (See: 'https://github.com/graphql/graphql-js/issues/2203')


      var args1 = (_node1$arguments = node1.arguments) !== null && _node1$arguments !== void 0 ? _node1$arguments : []; // istanbul ignore next (See: 'https://github.com/graphql/graphql-js/issues/2203')

      var args2 = (_node2$arguments = node2.arguments) !== null && _node2$arguments !== void 0 ? _node2$arguments : []; // Two field calls must have the same arguments.

      if (!sameArguments(args1, args2)) {
        return [[responseName, 'they have differing arguments'], [node1], [node2]];
      }
    } // The return type for each field.


    var type1 = def1 === null || def1 === void 0 ? void 0 : def1.type;
    var type2 = def2 === null || def2 === void 0 ? void 0 : def2.type;

    if (type1 && type2 && doTypesConflict(type1, type2)) {
      return [[responseName, "they return conflicting types \"".concat((0, _inspect$b.default)(type1), "\" and \"").concat((0, _inspect$b.default)(type2), "\"")], [node1], [node2]];
    } // Collect and compare sub-fields. Use the same "visited fragment names" list
    // for both collections so fields in a fragment reference are never
    // compared to themselves.


    var selectionSet1 = node1.selectionSet;
    var selectionSet2 = node2.selectionSet;

    if (selectionSet1 && selectionSet2) {
      var conflicts = findConflictsBetweenSubSelectionSets(context, cachedFieldsAndFragmentNames, comparedFragmentPairs, areMutuallyExclusive, (0, _definition$e.getNamedType)(type1), selectionSet1, (0, _definition$e.getNamedType)(type2), selectionSet2);
      return subfieldConflicts(conflicts, responseName, node1, node2);
    }
  }

  function sameArguments(arguments1, arguments2) {
    if (arguments1.length !== arguments2.length) {
      return false;
    }

    return arguments1.every(function (argument1) {
      var argument2 = (0, _find$1.default)(arguments2, function (argument) {
        return argument.name.value === argument1.name.value;
      });

      if (!argument2) {
        return false;
      }

      return sameValue(argument1.value, argument2.value);
    });
  }

  function sameValue(value1, value2) {
    return (0, _printer$3.print)(value1) === (0, _printer$3.print)(value2);
  } // Two types conflict if both types could not apply to a value simultaneously.
  // Composite types are ignored as their individual field types will be compared
  // later recursively. However List and Non-Null types must match.


  function doTypesConflict(type1, type2) {
    if ((0, _definition$e.isListType)(type1)) {
      return (0, _definition$e.isListType)(type2) ? doTypesConflict(type1.ofType, type2.ofType) : true;
    }

    if ((0, _definition$e.isListType)(type2)) {
      return true;
    }

    if ((0, _definition$e.isNonNullType)(type1)) {
      return (0, _definition$e.isNonNullType)(type2) ? doTypesConflict(type1.ofType, type2.ofType) : true;
    }

    if ((0, _definition$e.isNonNullType)(type2)) {
      return true;
    }

    if ((0, _definition$e.isLeafType)(type1) || (0, _definition$e.isLeafType)(type2)) {
      return type1 !== type2;
    }

    return false;
  } // Given a selection set, return the collection of fields (a mapping of response
  // name to field nodes and definitions) as well as a list of fragment names
  // referenced via fragment spreads.


  function getFieldsAndFragmentNames(context, cachedFieldsAndFragmentNames, parentType, selectionSet) {
    var cached = cachedFieldsAndFragmentNames.get(selectionSet);

    if (!cached) {
      var nodeAndDefs = Object.create(null);
      var fragmentNames = Object.create(null);

      _collectFieldsAndFragmentNames(context, parentType, selectionSet, nodeAndDefs, fragmentNames);

      cached = [nodeAndDefs, Object.keys(fragmentNames)];
      cachedFieldsAndFragmentNames.set(selectionSet, cached);
    }

    return cached;
  } // Given a reference to a fragment, return the represented collection of fields
  // as well as a list of nested fragment names referenced via fragment spreads.


  function getReferencedFieldsAndFragmentNames(context, cachedFieldsAndFragmentNames, fragment) {
    // Short-circuit building a type from the node if possible.
    var cached = cachedFieldsAndFragmentNames.get(fragment.selectionSet);

    if (cached) {
      return cached;
    }

    var fragmentType = (0, _typeFromAST$2.typeFromAST)(context.getSchema(), fragment.typeCondition);
    return getFieldsAndFragmentNames(context, cachedFieldsAndFragmentNames, fragmentType, fragment.selectionSet);
  }

  function _collectFieldsAndFragmentNames(context, parentType, selectionSet, nodeAndDefs, fragmentNames) {
    for (var _i9 = 0, _selectionSet$selecti2 = selectionSet.selections; _i9 < _selectionSet$selecti2.length; _i9++) {
      var selection = _selectionSet$selecti2[_i9];

      switch (selection.kind) {
        case _kinds$9.Kind.FIELD:
          {
            var fieldName = selection.name.value;
            var fieldDef = void 0;

            if ((0, _definition$e.isObjectType)(parentType) || (0, _definition$e.isInterfaceType)(parentType)) {
              fieldDef = parentType.getFields()[fieldName];
            }

            var responseName = selection.alias ? selection.alias.value : fieldName;

            if (!nodeAndDefs[responseName]) {
              nodeAndDefs[responseName] = [];
            }

            nodeAndDefs[responseName].push([parentType, selection, fieldDef]);
            break;
          }

        case _kinds$9.Kind.FRAGMENT_SPREAD:
          fragmentNames[selection.name.value] = true;
          break;

        case _kinds$9.Kind.INLINE_FRAGMENT:
          {
            var typeCondition = selection.typeCondition;
            var inlineFragmentType = typeCondition ? (0, _typeFromAST$2.typeFromAST)(context.getSchema(), typeCondition) : parentType;

            _collectFieldsAndFragmentNames(context, inlineFragmentType, selection.selectionSet, nodeAndDefs, fragmentNames);

            break;
          }
      }
    }
  } // Given a series of Conflicts which occurred between two sub-fields, generate
  // a single Conflict.


  function subfieldConflicts(conflicts, responseName, node1, node2) {
    if (conflicts.length > 0) {
      return [[responseName, conflicts.map(function (_ref6) {
        var reason = _ref6[0];
        return reason;
      })], conflicts.reduce(function (allFields, _ref7) {
        var fields1 = _ref7[1];
        return allFields.concat(fields1);
      }, [node1]), conflicts.reduce(function (allFields, _ref8) {
        var fields2 = _ref8[2];
        return allFields.concat(fields2);
      }, [node2])];
    }
  }
  /**
   * A way to keep track of pairs of things when the ordering of the pair does
   * not matter. We do this by maintaining a sort of double adjacency sets.
   */


  var PairSet = /*#__PURE__*/function () {
    function PairSet() {
      this._data = Object.create(null);
    }

    var _proto = PairSet.prototype;

    _proto.has = function has(a, b, areMutuallyExclusive) {
      var first = this._data[a];
      var result = first && first[b];

      if (result === undefined) {
        return false;
      } // areMutuallyExclusive being false is a superset of being true,
      // hence if we want to know if this PairSet "has" these two with no
      // exclusivity, we have to ensure it was added as such.


      if (areMutuallyExclusive === false) {
        return result === false;
      }

      return true;
    };

    _proto.add = function add(a, b, areMutuallyExclusive) {
      this._pairSetAdd(a, b, areMutuallyExclusive);

      this._pairSetAdd(b, a, areMutuallyExclusive);
    };

    _proto._pairSetAdd = function _pairSetAdd(a, b, areMutuallyExclusive) {
      var map = this._data[a];

      if (!map) {
        map = Object.create(null);
        this._data[a] = map;
      }

      map[b] = areMutuallyExclusive;
    };

    return PairSet;
  }();

  var UniqueInputFieldNamesRule$1 = {};

  Object.defineProperty(UniqueInputFieldNamesRule$1, "__esModule", {
    value: true
  });
  UniqueInputFieldNamesRule$1.UniqueInputFieldNamesRule = UniqueInputFieldNamesRule;

  var _GraphQLError$f = GraphQLError$1;

  /**
   * Unique input field names
   *
   * A GraphQL input object value is only valid if all supplied fields are
   * uniquely named.
   */
  function UniqueInputFieldNamesRule(context) {
    var knownNameStack = [];
    var knownNames = Object.create(null);
    return {
      ObjectValue: {
        enter: function enter() {
          knownNameStack.push(knownNames);
          knownNames = Object.create(null);
        },
        leave: function leave() {
          knownNames = knownNameStack.pop();
        }
      },
      ObjectField: function ObjectField(node) {
        var fieldName = node.name.value;

        if (knownNames[fieldName]) {
          context.reportError(new _GraphQLError$f.GraphQLError("There can be only one input field named \"".concat(fieldName, "\"."), [knownNames[fieldName], node.name]));
        } else {
          knownNames[fieldName] = node.name;
        }
      }
    };
  }

  var LoneSchemaDefinitionRule$1 = {};

  Object.defineProperty(LoneSchemaDefinitionRule$1, "__esModule", {
    value: true
  });
  LoneSchemaDefinitionRule$1.LoneSchemaDefinitionRule = LoneSchemaDefinitionRule;

  var _GraphQLError$e = GraphQLError$1;

  /**
   * Lone Schema definition
   *
   * A GraphQL document is only valid if it contains only one schema definition.
   */
  function LoneSchemaDefinitionRule(context) {
    var _ref, _ref2, _oldSchema$astNode;

    var oldSchema = context.getSchema();
    var alreadyDefined = (_ref = (_ref2 = (_oldSchema$astNode = oldSchema === null || oldSchema === void 0 ? void 0 : oldSchema.astNode) !== null && _oldSchema$astNode !== void 0 ? _oldSchema$astNode : oldSchema === null || oldSchema === void 0 ? void 0 : oldSchema.getQueryType()) !== null && _ref2 !== void 0 ? _ref2 : oldSchema === null || oldSchema === void 0 ? void 0 : oldSchema.getMutationType()) !== null && _ref !== void 0 ? _ref : oldSchema === null || oldSchema === void 0 ? void 0 : oldSchema.getSubscriptionType();
    var schemaDefinitionsCount = 0;
    return {
      SchemaDefinition: function SchemaDefinition(node) {
        if (alreadyDefined) {
          context.reportError(new _GraphQLError$e.GraphQLError('Cannot define a new schema within a schema extension.', node));
          return;
        }

        if (schemaDefinitionsCount > 0) {
          context.reportError(new _GraphQLError$e.GraphQLError('Must provide only one schema definition.', node));
        }

        ++schemaDefinitionsCount;
      }
    };
  }

  var UniqueOperationTypesRule$1 = {};

  Object.defineProperty(UniqueOperationTypesRule$1, "__esModule", {
    value: true
  });
  UniqueOperationTypesRule$1.UniqueOperationTypesRule = UniqueOperationTypesRule;

  var _GraphQLError$d = GraphQLError$1;

  /**
   * Unique operation types
   *
   * A GraphQL document is only valid if it has only one type per operation.
   */
  function UniqueOperationTypesRule(context) {
    var schema = context.getSchema();
    var definedOperationTypes = Object.create(null);
    var existingOperationTypes = schema ? {
      query: schema.getQueryType(),
      mutation: schema.getMutationType(),
      subscription: schema.getSubscriptionType()
    } : {};
    return {
      SchemaDefinition: checkOperationTypes,
      SchemaExtension: checkOperationTypes
    };

    function checkOperationTypes(node) {
      var _node$operationTypes;

      // istanbul ignore next (See: 'https://github.com/graphql/graphql-js/issues/2203')
      var operationTypesNodes = (_node$operationTypes = node.operationTypes) !== null && _node$operationTypes !== void 0 ? _node$operationTypes : [];

      for (var _i2 = 0; _i2 < operationTypesNodes.length; _i2++) {
        var operationType = operationTypesNodes[_i2];
        var operation = operationType.operation;
        var alreadyDefinedOperationType = definedOperationTypes[operation];

        if (existingOperationTypes[operation]) {
          context.reportError(new _GraphQLError$d.GraphQLError("Type for ".concat(operation, " already defined in the schema. It cannot be redefined."), operationType));
        } else if (alreadyDefinedOperationType) {
          context.reportError(new _GraphQLError$d.GraphQLError("There can be only one ".concat(operation, " type in schema."), [alreadyDefinedOperationType, operationType]));
        } else {
          definedOperationTypes[operation] = operationType;
        }
      }

      return false;
    }
  }

  var UniqueTypeNamesRule$1 = {};

  Object.defineProperty(UniqueTypeNamesRule$1, "__esModule", {
    value: true
  });
  UniqueTypeNamesRule$1.UniqueTypeNamesRule = UniqueTypeNamesRule;

  var _GraphQLError$c = GraphQLError$1;

  /**
   * Unique type names
   *
   * A GraphQL document is only valid if all defined types have unique names.
   */
  function UniqueTypeNamesRule(context) {
    var knownTypeNames = Object.create(null);
    var schema = context.getSchema();
    return {
      ScalarTypeDefinition: checkTypeName,
      ObjectTypeDefinition: checkTypeName,
      InterfaceTypeDefinition: checkTypeName,
      UnionTypeDefinition: checkTypeName,
      EnumTypeDefinition: checkTypeName,
      InputObjectTypeDefinition: checkTypeName
    };

    function checkTypeName(node) {
      var typeName = node.name.value;

      if (schema !== null && schema !== void 0 && schema.getType(typeName)) {
        context.reportError(new _GraphQLError$c.GraphQLError("Type \"".concat(typeName, "\" already exists in the schema. It cannot also be defined in this type definition."), node.name));
        return;
      }

      if (knownTypeNames[typeName]) {
        context.reportError(new _GraphQLError$c.GraphQLError("There can be only one type named \"".concat(typeName, "\"."), [knownTypeNames[typeName], node.name]));
      } else {
        knownTypeNames[typeName] = node.name;
      }

      return false;
    }
  }

  var UniqueEnumValueNamesRule$1 = {};

  Object.defineProperty(UniqueEnumValueNamesRule$1, "__esModule", {
    value: true
  });
  UniqueEnumValueNamesRule$1.UniqueEnumValueNamesRule = UniqueEnumValueNamesRule;

  var _GraphQLError$b = GraphQLError$1;

  var _definition$d = definition;

  /**
   * Unique enum value names
   *
   * A GraphQL enum type is only valid if all its values are uniquely named.
   */
  function UniqueEnumValueNamesRule(context) {
    var schema = context.getSchema();
    var existingTypeMap = schema ? schema.getTypeMap() : Object.create(null);
    var knownValueNames = Object.create(null);
    return {
      EnumTypeDefinition: checkValueUniqueness,
      EnumTypeExtension: checkValueUniqueness
    };

    function checkValueUniqueness(node) {
      var _node$values;

      var typeName = node.name.value;

      if (!knownValueNames[typeName]) {
        knownValueNames[typeName] = Object.create(null);
      } // istanbul ignore next (See: 'https://github.com/graphql/graphql-js/issues/2203')


      var valueNodes = (_node$values = node.values) !== null && _node$values !== void 0 ? _node$values : [];
      var valueNames = knownValueNames[typeName];

      for (var _i2 = 0; _i2 < valueNodes.length; _i2++) {
        var valueDef = valueNodes[_i2];
        var valueName = valueDef.name.value;
        var existingType = existingTypeMap[typeName];

        if ((0, _definition$d.isEnumType)(existingType) && existingType.getValue(valueName)) {
          context.reportError(new _GraphQLError$b.GraphQLError("Enum value \"".concat(typeName, ".").concat(valueName, "\" already exists in the schema. It cannot also be defined in this type extension."), valueDef.name));
        } else if (valueNames[valueName]) {
          context.reportError(new _GraphQLError$b.GraphQLError("Enum value \"".concat(typeName, ".").concat(valueName, "\" can only be defined once."), [valueNames[valueName], valueDef.name]));
        } else {
          valueNames[valueName] = valueDef.name;
        }
      }

      return false;
    }
  }

  var UniqueFieldDefinitionNamesRule$1 = {};

  Object.defineProperty(UniqueFieldDefinitionNamesRule$1, "__esModule", {
    value: true
  });
  UniqueFieldDefinitionNamesRule$1.UniqueFieldDefinitionNamesRule = UniqueFieldDefinitionNamesRule;

  var _GraphQLError$a = GraphQLError$1;

  var _definition$c = definition;

  /**
   * Unique field definition names
   *
   * A GraphQL complex type is only valid if all its fields are uniquely named.
   */
  function UniqueFieldDefinitionNamesRule(context) {
    var schema = context.getSchema();
    var existingTypeMap = schema ? schema.getTypeMap() : Object.create(null);
    var knownFieldNames = Object.create(null);
    return {
      InputObjectTypeDefinition: checkFieldUniqueness,
      InputObjectTypeExtension: checkFieldUniqueness,
      InterfaceTypeDefinition: checkFieldUniqueness,
      InterfaceTypeExtension: checkFieldUniqueness,
      ObjectTypeDefinition: checkFieldUniqueness,
      ObjectTypeExtension: checkFieldUniqueness
    };

    function checkFieldUniqueness(node) {
      var _node$fields;

      var typeName = node.name.value;

      if (!knownFieldNames[typeName]) {
        knownFieldNames[typeName] = Object.create(null);
      } // istanbul ignore next (See: 'https://github.com/graphql/graphql-js/issues/2203')


      var fieldNodes = (_node$fields = node.fields) !== null && _node$fields !== void 0 ? _node$fields : [];
      var fieldNames = knownFieldNames[typeName];

      for (var _i2 = 0; _i2 < fieldNodes.length; _i2++) {
        var fieldDef = fieldNodes[_i2];
        var fieldName = fieldDef.name.value;

        if (hasField(existingTypeMap[typeName], fieldName)) {
          context.reportError(new _GraphQLError$a.GraphQLError("Field \"".concat(typeName, ".").concat(fieldName, "\" already exists in the schema. It cannot also be defined in this type extension."), fieldDef.name));
        } else if (fieldNames[fieldName]) {
          context.reportError(new _GraphQLError$a.GraphQLError("Field \"".concat(typeName, ".").concat(fieldName, "\" can only be defined once."), [fieldNames[fieldName], fieldDef.name]));
        } else {
          fieldNames[fieldName] = fieldDef.name;
        }
      }

      return false;
    }
  }

  function hasField(type, fieldName) {
    if ((0, _definition$c.isObjectType)(type) || (0, _definition$c.isInterfaceType)(type) || (0, _definition$c.isInputObjectType)(type)) {
      return type.getFields()[fieldName] != null;
    }

    return false;
  }

  var UniqueDirectiveNamesRule$1 = {};

  Object.defineProperty(UniqueDirectiveNamesRule$1, "__esModule", {
    value: true
  });
  UniqueDirectiveNamesRule$1.UniqueDirectiveNamesRule = UniqueDirectiveNamesRule;

  var _GraphQLError$9 = GraphQLError$1;

  /**
   * Unique directive names
   *
   * A GraphQL document is only valid if all defined directives have unique names.
   */
  function UniqueDirectiveNamesRule(context) {
    var knownDirectiveNames = Object.create(null);
    var schema = context.getSchema();
    return {
      DirectiveDefinition: function DirectiveDefinition(node) {
        var directiveName = node.name.value;

        if (schema !== null && schema !== void 0 && schema.getDirective(directiveName)) {
          context.reportError(new _GraphQLError$9.GraphQLError("Directive \"@".concat(directiveName, "\" already exists in the schema. It cannot be redefined."), node.name));
          return;
        }

        if (knownDirectiveNames[directiveName]) {
          context.reportError(new _GraphQLError$9.GraphQLError("There can be only one directive named \"@".concat(directiveName, "\"."), [knownDirectiveNames[directiveName], node.name]));
        } else {
          knownDirectiveNames[directiveName] = node.name;
        }

        return false;
      }
    };
  }

  var PossibleTypeExtensionsRule$1 = {};

  Object.defineProperty(PossibleTypeExtensionsRule$1, "__esModule", {
    value: true
  });
  PossibleTypeExtensionsRule$1.PossibleTypeExtensionsRule = PossibleTypeExtensionsRule;

  var _inspect$a = _interopRequireDefault$h(inspect$1);

  var _invariant$9 = _interopRequireDefault$h(invariant$1);

  var _didYouMean$1 = _interopRequireDefault$h(didYouMean$1);

  var _suggestionList$1 = _interopRequireDefault$h(suggestionList$1);

  var _GraphQLError$8 = GraphQLError$1;

  var _kinds$8 = kinds;

  var _predicates$1 = predicates;

  var _definition$b = definition;

  var _defKindToExtKind;

  function _interopRequireDefault$h(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _defineProperty$6(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

  /**
   * Possible type extension
   *
   * A type extension is only valid if the type is defined and has the same kind.
   */
  function PossibleTypeExtensionsRule(context) {
    var schema = context.getSchema();
    var definedTypes = Object.create(null);

    for (var _i2 = 0, _context$getDocument$2 = context.getDocument().definitions; _i2 < _context$getDocument$2.length; _i2++) {
      var def = _context$getDocument$2[_i2];

      if ((0, _predicates$1.isTypeDefinitionNode)(def)) {
        definedTypes[def.name.value] = def;
      }
    }

    return {
      ScalarTypeExtension: checkExtension,
      ObjectTypeExtension: checkExtension,
      InterfaceTypeExtension: checkExtension,
      UnionTypeExtension: checkExtension,
      EnumTypeExtension: checkExtension,
      InputObjectTypeExtension: checkExtension
    };

    function checkExtension(node) {
      var typeName = node.name.value;
      var defNode = definedTypes[typeName];
      var existingType = schema === null || schema === void 0 ? void 0 : schema.getType(typeName);
      var expectedKind;

      if (defNode) {
        expectedKind = defKindToExtKind[defNode.kind];
      } else if (existingType) {
        expectedKind = typeToExtKind(existingType);
      }

      if (expectedKind) {
        if (expectedKind !== node.kind) {
          var kindStr = extensionKindToTypeName(node.kind);
          context.reportError(new _GraphQLError$8.GraphQLError("Cannot extend non-".concat(kindStr, " type \"").concat(typeName, "\"."), defNode ? [defNode, node] : node));
        }
      } else {
        var allTypeNames = Object.keys(definedTypes);

        if (schema) {
          allTypeNames = allTypeNames.concat(Object.keys(schema.getTypeMap()));
        }

        var suggestedTypes = (0, _suggestionList$1.default)(typeName, allTypeNames);
        context.reportError(new _GraphQLError$8.GraphQLError("Cannot extend type \"".concat(typeName, "\" because it is not defined.") + (0, _didYouMean$1.default)(suggestedTypes), node.name));
      }
    }
  }

  var defKindToExtKind = (_defKindToExtKind = {}, _defineProperty$6(_defKindToExtKind, _kinds$8.Kind.SCALAR_TYPE_DEFINITION, _kinds$8.Kind.SCALAR_TYPE_EXTENSION), _defineProperty$6(_defKindToExtKind, _kinds$8.Kind.OBJECT_TYPE_DEFINITION, _kinds$8.Kind.OBJECT_TYPE_EXTENSION), _defineProperty$6(_defKindToExtKind, _kinds$8.Kind.INTERFACE_TYPE_DEFINITION, _kinds$8.Kind.INTERFACE_TYPE_EXTENSION), _defineProperty$6(_defKindToExtKind, _kinds$8.Kind.UNION_TYPE_DEFINITION, _kinds$8.Kind.UNION_TYPE_EXTENSION), _defineProperty$6(_defKindToExtKind, _kinds$8.Kind.ENUM_TYPE_DEFINITION, _kinds$8.Kind.ENUM_TYPE_EXTENSION), _defineProperty$6(_defKindToExtKind, _kinds$8.Kind.INPUT_OBJECT_TYPE_DEFINITION, _kinds$8.Kind.INPUT_OBJECT_TYPE_EXTENSION), _defKindToExtKind);

  function typeToExtKind(type) {
    if ((0, _definition$b.isScalarType)(type)) {
      return _kinds$8.Kind.SCALAR_TYPE_EXTENSION;
    }

    if ((0, _definition$b.isObjectType)(type)) {
      return _kinds$8.Kind.OBJECT_TYPE_EXTENSION;
    }

    if ((0, _definition$b.isInterfaceType)(type)) {
      return _kinds$8.Kind.INTERFACE_TYPE_EXTENSION;
    }

    if ((0, _definition$b.isUnionType)(type)) {
      return _kinds$8.Kind.UNION_TYPE_EXTENSION;
    }

    if ((0, _definition$b.isEnumType)(type)) {
      return _kinds$8.Kind.ENUM_TYPE_EXTENSION;
    } // istanbul ignore else (See: 'https://github.com/graphql/graphql-js/issues/2618')


    if ((0, _definition$b.isInputObjectType)(type)) {
      return _kinds$8.Kind.INPUT_OBJECT_TYPE_EXTENSION;
    } // istanbul ignore next (Not reachable. All possible types have been considered)


    (0, _invariant$9.default)(0, 'Unexpected type: ' + (0, _inspect$a.default)(type));
  }

  function extensionKindToTypeName(kind) {
    switch (kind) {
      case _kinds$8.Kind.SCALAR_TYPE_EXTENSION:
        return 'scalar';

      case _kinds$8.Kind.OBJECT_TYPE_EXTENSION:
        return 'object';

      case _kinds$8.Kind.INTERFACE_TYPE_EXTENSION:
        return 'interface';

      case _kinds$8.Kind.UNION_TYPE_EXTENSION:
        return 'union';

      case _kinds$8.Kind.ENUM_TYPE_EXTENSION:
        return 'enum';

      case _kinds$8.Kind.INPUT_OBJECT_TYPE_EXTENSION:
        return 'input object';
    } // istanbul ignore next (Not reachable. All possible types have been considered)


    (0, _invariant$9.default)(0, 'Unexpected kind: ' + (0, _inspect$a.default)(kind));
  }

  Object.defineProperty(specifiedRules$1, "__esModule", {
    value: true
  });
  specifiedRules$1.specifiedSDLRules = specifiedRules$1.specifiedRules = void 0;

  var _ExecutableDefinitionsRule = ExecutableDefinitionsRule$1;

  var _UniqueOperationNamesRule = UniqueOperationNamesRule$1;

  var _LoneAnonymousOperationRule = LoneAnonymousOperationRule$1;

  var _SingleFieldSubscriptionsRule = SingleFieldSubscriptionsRule$1;

  var _KnownTypeNamesRule = KnownTypeNamesRule$1;

  var _FragmentsOnCompositeTypesRule = FragmentsOnCompositeTypesRule$1;

  var _VariablesAreInputTypesRule = VariablesAreInputTypesRule$1;

  var _ScalarLeafsRule = ScalarLeafsRule$1;

  var _FieldsOnCorrectTypeRule = FieldsOnCorrectTypeRule$1;

  var _UniqueFragmentNamesRule = UniqueFragmentNamesRule$1;

  var _KnownFragmentNamesRule = KnownFragmentNamesRule$1;

  var _NoUnusedFragmentsRule = NoUnusedFragmentsRule$1;

  var _PossibleFragmentSpreadsRule = PossibleFragmentSpreadsRule$1;

  var _NoFragmentCyclesRule = NoFragmentCyclesRule$1;

  var _UniqueVariableNamesRule = UniqueVariableNamesRule$1;

  var _NoUndefinedVariablesRule = NoUndefinedVariablesRule$1;

  var _NoUnusedVariablesRule = NoUnusedVariablesRule$1;

  var _KnownDirectivesRule = KnownDirectivesRule$1;

  var _UniqueDirectivesPerLocationRule = UniqueDirectivesPerLocationRule$1;

  var _KnownArgumentNamesRule = KnownArgumentNamesRule$1;

  var _UniqueArgumentNamesRule = UniqueArgumentNamesRule$1;

  var _ValuesOfCorrectTypeRule = ValuesOfCorrectTypeRule$1;

  var _ProvidedRequiredArgumentsRule = ProvidedRequiredArgumentsRule$1;

  var _VariablesInAllowedPositionRule = VariablesInAllowedPositionRule$1;

  var _OverlappingFieldsCanBeMergedRule = OverlappingFieldsCanBeMergedRule$1;

  var _UniqueInputFieldNamesRule = UniqueInputFieldNamesRule$1;

  var _LoneSchemaDefinitionRule = LoneSchemaDefinitionRule$1;

  var _UniqueOperationTypesRule = UniqueOperationTypesRule$1;

  var _UniqueTypeNamesRule = UniqueTypeNamesRule$1;

  var _UniqueEnumValueNamesRule = UniqueEnumValueNamesRule$1;

  var _UniqueFieldDefinitionNamesRule = UniqueFieldDefinitionNamesRule$1;

  var _UniqueDirectiveNamesRule = UniqueDirectiveNamesRule$1;

  var _PossibleTypeExtensionsRule = PossibleTypeExtensionsRule$1;

  // Spec Section: "Executable Definitions"
  // Spec Section: "Operation Name Uniqueness"
  // Spec Section: "Lone Anonymous Operation"
  // Spec Section: "Subscriptions with Single Root Field"
  // Spec Section: "Fragment Spread Type Existence"
  // Spec Section: "Fragments on Composite Types"
  // Spec Section: "Variables are Input Types"
  // Spec Section: "Leaf Field Selections"
  // Spec Section: "Field Selections on Objects, Interfaces, and Unions Types"
  // Spec Section: "Fragment Name Uniqueness"
  // Spec Section: "Fragment spread target defined"
  // Spec Section: "Fragments must be used"
  // Spec Section: "Fragment spread is possible"
  // Spec Section: "Fragments must not form cycles"
  // Spec Section: "Variable Uniqueness"
  // Spec Section: "All Variable Used Defined"
  // Spec Section: "All Variables Used"
  // Spec Section: "Directives Are Defined"
  // Spec Section: "Directives Are Unique Per Location"
  // Spec Section: "Argument Names"
  // Spec Section: "Argument Uniqueness"
  // Spec Section: "Value Type Correctness"
  // Spec Section: "Argument Optionality"
  // Spec Section: "All Variable Usages Are Allowed"
  // Spec Section: "Field Selection Merging"
  // Spec Section: "Input Object Field Uniqueness"
  // SDL-specific validation rules

  /**
   * This set includes all validation rules defined by the GraphQL spec.
   *
   * The order of the rules in this list has been adjusted to lead to the
   * most clear output when encountering multiple validation errors.
   */
  var specifiedRules = Object.freeze([_ExecutableDefinitionsRule.ExecutableDefinitionsRule, _UniqueOperationNamesRule.UniqueOperationNamesRule, _LoneAnonymousOperationRule.LoneAnonymousOperationRule, _SingleFieldSubscriptionsRule.SingleFieldSubscriptionsRule, _KnownTypeNamesRule.KnownTypeNamesRule, _FragmentsOnCompositeTypesRule.FragmentsOnCompositeTypesRule, _VariablesAreInputTypesRule.VariablesAreInputTypesRule, _ScalarLeafsRule.ScalarLeafsRule, _FieldsOnCorrectTypeRule.FieldsOnCorrectTypeRule, _UniqueFragmentNamesRule.UniqueFragmentNamesRule, _KnownFragmentNamesRule.KnownFragmentNamesRule, _NoUnusedFragmentsRule.NoUnusedFragmentsRule, _PossibleFragmentSpreadsRule.PossibleFragmentSpreadsRule, _NoFragmentCyclesRule.NoFragmentCyclesRule, _UniqueVariableNamesRule.UniqueVariableNamesRule, _NoUndefinedVariablesRule.NoUndefinedVariablesRule, _NoUnusedVariablesRule.NoUnusedVariablesRule, _KnownDirectivesRule.KnownDirectivesRule, _UniqueDirectivesPerLocationRule.UniqueDirectivesPerLocationRule, _KnownArgumentNamesRule.KnownArgumentNamesRule, _UniqueArgumentNamesRule.UniqueArgumentNamesRule, _ValuesOfCorrectTypeRule.ValuesOfCorrectTypeRule, _ProvidedRequiredArgumentsRule.ProvidedRequiredArgumentsRule, _VariablesInAllowedPositionRule.VariablesInAllowedPositionRule, _OverlappingFieldsCanBeMergedRule.OverlappingFieldsCanBeMergedRule, _UniqueInputFieldNamesRule.UniqueInputFieldNamesRule]);
  /**
   * @internal
   */

  specifiedRules$1.specifiedRules = specifiedRules;
  var specifiedSDLRules = Object.freeze([_LoneSchemaDefinitionRule.LoneSchemaDefinitionRule, _UniqueOperationTypesRule.UniqueOperationTypesRule, _UniqueTypeNamesRule.UniqueTypeNamesRule, _UniqueEnumValueNamesRule.UniqueEnumValueNamesRule, _UniqueFieldDefinitionNamesRule.UniqueFieldDefinitionNamesRule, _UniqueDirectiveNamesRule.UniqueDirectiveNamesRule, _KnownTypeNamesRule.KnownTypeNamesRule, _KnownDirectivesRule.KnownDirectivesRule, _UniqueDirectivesPerLocationRule.UniqueDirectivesPerLocationRule, _PossibleTypeExtensionsRule.PossibleTypeExtensionsRule, _KnownArgumentNamesRule.KnownArgumentNamesOnDirectivesRule, _UniqueArgumentNamesRule.UniqueArgumentNamesRule, _UniqueInputFieldNamesRule.UniqueInputFieldNamesRule, _ProvidedRequiredArgumentsRule.ProvidedRequiredArgumentsOnDirectivesRule]);
  specifiedRules$1.specifiedSDLRules = specifiedSDLRules;

  var ValidationContext$1 = {};

  Object.defineProperty(ValidationContext$1, "__esModule", {
    value: true
  });
  ValidationContext$1.ValidationContext = ValidationContext$1.SDLValidationContext = ValidationContext$1.ASTValidationContext = void 0;

  var _kinds$7 = kinds;

  var _visitor$3 = visitor;

  var _TypeInfo$1 = TypeInfo$1;

  function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }

  /**
   * An instance of this class is passed as the "this" context to all validators,
   * allowing access to commonly useful contextual information from within a
   * validation rule.
   */
  var ASTValidationContext = /*#__PURE__*/function () {
    function ASTValidationContext(ast, onError) {
      this._ast = ast;
      this._fragments = undefined;
      this._fragmentSpreads = new Map();
      this._recursivelyReferencedFragments = new Map();
      this._onError = onError;
    }

    var _proto = ASTValidationContext.prototype;

    _proto.reportError = function reportError(error) {
      this._onError(error);
    };

    _proto.getDocument = function getDocument() {
      return this._ast;
    };

    _proto.getFragment = function getFragment(name) {
      var fragments = this._fragments;

      if (!fragments) {
        this._fragments = fragments = this.getDocument().definitions.reduce(function (frags, statement) {
          if (statement.kind === _kinds$7.Kind.FRAGMENT_DEFINITION) {
            frags[statement.name.value] = statement;
          }

          return frags;
        }, Object.create(null));
      }

      return fragments[name];
    };

    _proto.getFragmentSpreads = function getFragmentSpreads(node) {
      var spreads = this._fragmentSpreads.get(node);

      if (!spreads) {
        spreads = [];
        var setsToVisit = [node];

        while (setsToVisit.length !== 0) {
          var set = setsToVisit.pop();

          for (var _i2 = 0, _set$selections2 = set.selections; _i2 < _set$selections2.length; _i2++) {
            var selection = _set$selections2[_i2];

            if (selection.kind === _kinds$7.Kind.FRAGMENT_SPREAD) {
              spreads.push(selection);
            } else if (selection.selectionSet) {
              setsToVisit.push(selection.selectionSet);
            }
          }
        }

        this._fragmentSpreads.set(node, spreads);
      }

      return spreads;
    };

    _proto.getRecursivelyReferencedFragments = function getRecursivelyReferencedFragments(operation) {
      var fragments = this._recursivelyReferencedFragments.get(operation);

      if (!fragments) {
        fragments = [];
        var collectedNames = Object.create(null);
        var nodesToVisit = [operation.selectionSet];

        while (nodesToVisit.length !== 0) {
          var node = nodesToVisit.pop();

          for (var _i4 = 0, _this$getFragmentSpre2 = this.getFragmentSpreads(node); _i4 < _this$getFragmentSpre2.length; _i4++) {
            var spread = _this$getFragmentSpre2[_i4];
            var fragName = spread.name.value;

            if (collectedNames[fragName] !== true) {
              collectedNames[fragName] = true;
              var fragment = this.getFragment(fragName);

              if (fragment) {
                fragments.push(fragment);
                nodesToVisit.push(fragment.selectionSet);
              }
            }
          }
        }

        this._recursivelyReferencedFragments.set(operation, fragments);
      }

      return fragments;
    };

    return ASTValidationContext;
  }();

  ValidationContext$1.ASTValidationContext = ASTValidationContext;

  var SDLValidationContext = /*#__PURE__*/function (_ASTValidationContext) {
    _inheritsLoose(SDLValidationContext, _ASTValidationContext);

    function SDLValidationContext(ast, schema, onError) {
      var _this;

      _this = _ASTValidationContext.call(this, ast, onError) || this;
      _this._schema = schema;
      return _this;
    }

    var _proto2 = SDLValidationContext.prototype;

    _proto2.getSchema = function getSchema() {
      return this._schema;
    };

    return SDLValidationContext;
  }(ASTValidationContext);

  ValidationContext$1.SDLValidationContext = SDLValidationContext;

  var ValidationContext = /*#__PURE__*/function (_ASTValidationContext2) {
    _inheritsLoose(ValidationContext, _ASTValidationContext2);

    function ValidationContext(schema, ast, typeInfo, onError) {
      var _this2;

      _this2 = _ASTValidationContext2.call(this, ast, onError) || this;
      _this2._schema = schema;
      _this2._typeInfo = typeInfo;
      _this2._variableUsages = new Map();
      _this2._recursiveVariableUsages = new Map();
      return _this2;
    }

    var _proto3 = ValidationContext.prototype;

    _proto3.getSchema = function getSchema() {
      return this._schema;
    };

    _proto3.getVariableUsages = function getVariableUsages(node) {
      var usages = this._variableUsages.get(node);

      if (!usages) {
        var newUsages = [];
        var typeInfo = new _TypeInfo$1.TypeInfo(this._schema);
        (0, _visitor$3.visit)(node, (0, _TypeInfo$1.visitWithTypeInfo)(typeInfo, {
          VariableDefinition: function VariableDefinition() {
            return false;
          },
          Variable: function Variable(variable) {
            newUsages.push({
              node: variable,
              type: typeInfo.getInputType(),
              defaultValue: typeInfo.getDefaultValue()
            });
          }
        }));
        usages = newUsages;

        this._variableUsages.set(node, usages);
      }

      return usages;
    };

    _proto3.getRecursiveVariableUsages = function getRecursiveVariableUsages(operation) {
      var usages = this._recursiveVariableUsages.get(operation);

      if (!usages) {
        usages = this.getVariableUsages(operation);

        for (var _i6 = 0, _this$getRecursivelyR2 = this.getRecursivelyReferencedFragments(operation); _i6 < _this$getRecursivelyR2.length; _i6++) {
          var frag = _this$getRecursivelyR2[_i6];
          usages = usages.concat(this.getVariableUsages(frag));
        }

        this._recursiveVariableUsages.set(operation, usages);
      }

      return usages;
    };

    _proto3.getType = function getType() {
      return this._typeInfo.getType();
    };

    _proto3.getParentType = function getParentType() {
      return this._typeInfo.getParentType();
    };

    _proto3.getInputType = function getInputType() {
      return this._typeInfo.getInputType();
    };

    _proto3.getParentInputType = function getParentInputType() {
      return this._typeInfo.getParentInputType();
    };

    _proto3.getFieldDef = function getFieldDef() {
      return this._typeInfo.getFieldDef();
    };

    _proto3.getDirective = function getDirective() {
      return this._typeInfo.getDirective();
    };

    _proto3.getArgument = function getArgument() {
      return this._typeInfo.getArgument();
    };

    _proto3.getEnumValue = function getEnumValue() {
      return this._typeInfo.getEnumValue();
    };

    return ValidationContext;
  }(ASTValidationContext);

  ValidationContext$1.ValidationContext = ValidationContext;

  Object.defineProperty(validate$2, "__esModule", {
    value: true
  });
  validate$2.validate = validate;
  validate$2.validateSDL = validateSDL;
  validate$2.assertValidSDL = assertValidSDL;
  validate$2.assertValidSDLExtension = assertValidSDLExtension;

  var _devAssert$5 = _interopRequireDefault$g(devAssert$1);

  var _GraphQLError$7 = GraphQLError$1;

  var _visitor$2 = visitor;

  var _validate$5 = validate$1;

  var _TypeInfo = TypeInfo$1;

  var _specifiedRules = specifiedRules$1;

  var _ValidationContext = ValidationContext$1;

  function _interopRequireDefault$g(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  /**
   * Implements the "Validation" section of the spec.
   *
   * Validation runs synchronously, returning an array of encountered errors, or
   * an empty array if no errors were encountered and the document is valid.
   *
   * A list of specific validation rules may be provided. If not provided, the
   * default list of rules defined by the GraphQL specification will be used.
   *
   * Each validation rules is a function which returns a visitor
   * (see the language/visitor API). Visitor methods are expected to return
   * GraphQLErrors, or Arrays of GraphQLErrors when invalid.
   *
   * Optionally a custom TypeInfo instance may be provided. If not provided, one
   * will be created from the provided schema.
   */
  function validate(schema, documentAST) {
    var rules = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : _specifiedRules.specifiedRules;
    var typeInfo = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : new _TypeInfo.TypeInfo(schema);
    var options = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {
      maxErrors: undefined
    };
    documentAST || (0, _devAssert$5.default)(0, 'Must provide document.'); // If the schema used for validation is invalid, throw an error.

    (0, _validate$5.assertValidSchema)(schema);
    var abortObj = Object.freeze({});
    var errors = [];
    var context = new _ValidationContext.ValidationContext(schema, documentAST, typeInfo, function (error) {
      if (options.maxErrors != null && errors.length >= options.maxErrors) {
        errors.push(new _GraphQLError$7.GraphQLError('Too many validation errors, error limit reached. Validation aborted.'));
        throw abortObj;
      }

      errors.push(error);
    }); // This uses a specialized visitor which runs multiple visitors in parallel,
    // while maintaining the visitor skip and break API.

    var visitor = (0, _visitor$2.visitInParallel)(rules.map(function (rule) {
      return rule(context);
    })); // Visit the whole document with each instance of all provided rules.

    try {
      (0, _visitor$2.visit)(documentAST, (0, _TypeInfo.visitWithTypeInfo)(typeInfo, visitor));
    } catch (e) {
      if (e !== abortObj) {
        throw e;
      }
    }

    return errors;
  }
  /**
   * @internal
   */


  function validateSDL(documentAST, schemaToExtend) {
    var rules = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : _specifiedRules.specifiedSDLRules;
    var errors = [];
    var context = new _ValidationContext.SDLValidationContext(documentAST, schemaToExtend, function (error) {
      errors.push(error);
    });
    var visitors = rules.map(function (rule) {
      return rule(context);
    });
    (0, _visitor$2.visit)(documentAST, (0, _visitor$2.visitInParallel)(visitors));
    return errors;
  }
  /**
   * Utility function which asserts a SDL document is valid by throwing an error
   * if it is invalid.
   *
   * @internal
   */


  function assertValidSDL(documentAST) {
    var errors = validateSDL(documentAST);

    if (errors.length !== 0) {
      throw new Error(errors.map(function (error) {
        return error.message;
      }).join('\n\n'));
    }
  }
  /**
   * Utility function which asserts a SDL document is valid by throwing an error
   * if it is invalid.
   *
   * @internal
   */


  function assertValidSDLExtension(documentAST, schema) {
    var errors = validateSDL(documentAST, schema);

    if (errors.length !== 0) {
      throw new Error(errors.map(function (error) {
        return error.message;
      }).join('\n\n'));
    }
  }

  var execute$1 = {};

  var memoize3$1 = {};

  Object.defineProperty(memoize3$1, "__esModule", {
    value: true
  });
  memoize3$1.default = memoize3;

  /**
   * Memoizes the provided three-argument function.
   */
  function memoize3(fn) {
    var cache0;
    return function memoized(a1, a2, a3) {
      if (!cache0) {
        cache0 = new WeakMap();
      }

      var cache1 = cache0.get(a1);
      var cache2;

      if (cache1) {
        cache2 = cache1.get(a2);

        if (cache2) {
          var cachedValue = cache2.get(a3);

          if (cachedValue !== undefined) {
            return cachedValue;
          }
        }
      } else {
        cache1 = new WeakMap();
        cache0.set(a1, cache1);
      }

      if (!cache2) {
        cache2 = new WeakMap();
        cache1.set(a2, cache2);
      }

      var newValue = fn(a1, a2, a3);
      cache2.set(a3, newValue);
      return newValue;
    };
  }

  var promiseReduce$1 = {};

  Object.defineProperty(promiseReduce$1, "__esModule", {
    value: true
  });
  promiseReduce$1.default = promiseReduce;

  var _isPromise$2 = _interopRequireDefault$f(isPromise$1);

  function _interopRequireDefault$f(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  /**
   * Similar to Array.prototype.reduce(), however the reducing callback may return
   * a Promise, in which case reduction will continue after each promise resolves.
   *
   * If the callback does not return a Promise, then this function will also not
   * return a Promise.
   */
  function promiseReduce(values, callback, initialValue) {
    return values.reduce(function (previous, value) {
      return (0, _isPromise$2.default)(previous) ? previous.then(function (resolved) {
        return callback(resolved, value);
      }) : callback(previous, value);
    }, initialValue);
  }

  var promiseForObject$1 = {};

  Object.defineProperty(promiseForObject$1, "__esModule", {
    value: true
  });
  promiseForObject$1.default = promiseForObject;

  /**
   * This function transforms a JS object `ObjMap<Promise<T>>` into
   * a `Promise<ObjMap<T>>`
   *
   * This is akin to bluebird's `Promise.props`, but implemented only using
   * `Promise.all` so it will work with any implementation of ES6 promises.
   */
  function promiseForObject(object) {
    var keys = Object.keys(object);
    var valuesAndPromises = keys.map(function (name) {
      return object[name];
    });
    return Promise.all(valuesAndPromises).then(function (values) {
      return values.reduce(function (resolvedObject, value, i) {
        resolvedObject[keys[i]] = value;
        return resolvedObject;
      }, Object.create(null));
    });
  }

  var Path = {};

  Object.defineProperty(Path, "__esModule", {
    value: true
  });
  Path.addPath = addPath;
  Path.pathToArray = pathToArray;

  /**
   * Given a Path and a key, return a new Path containing the new key.
   */
  function addPath(prev, key, typename) {
    return {
      prev: prev,
      key: key,
      typename: typename
    };
  }
  /**
   * Given a Path, return an Array of the path keys.
   */


  function pathToArray(path) {
    var flattened = [];
    var curr = path;

    while (curr) {
      flattened.push(curr.key);
      curr = curr.prev;
    }

    return flattened.reverse();
  }

  var getOperationRootType$1 = {};

  Object.defineProperty(getOperationRootType$1, "__esModule", {
    value: true
  });
  getOperationRootType$1.getOperationRootType = getOperationRootType;

  var _GraphQLError$6 = GraphQLError$1;

  /**
   * Extracts the root type of the operation from the schema.
   */
  function getOperationRootType(schema, operation) {
    if (operation.operation === 'query') {
      var queryType = schema.getQueryType();

      if (!queryType) {
        throw new _GraphQLError$6.GraphQLError('Schema does not define the required query root type.', operation);
      }

      return queryType;
    }

    if (operation.operation === 'mutation') {
      var mutationType = schema.getMutationType();

      if (!mutationType) {
        throw new _GraphQLError$6.GraphQLError('Schema is not configured for mutations.', operation);
      }

      return mutationType;
    }

    if (operation.operation === 'subscription') {
      var subscriptionType = schema.getSubscriptionType();

      if (!subscriptionType) {
        throw new _GraphQLError$6.GraphQLError('Schema is not configured for subscriptions.', operation);
      }

      return subscriptionType;
    }

    throw new _GraphQLError$6.GraphQLError('Can only have query, mutation and subscription operations.', operation);
  }

  var values = {};

  var printPathArray$1 = {};

  Object.defineProperty(printPathArray$1, "__esModule", {
    value: true
  });
  printPathArray$1.default = printPathArray;

  /**
   * Build a string describing the path.
   */
  function printPathArray(path) {
    return path.map(function (key) {
      return typeof key === 'number' ? '[' + key.toString() + ']' : '.' + key;
    }).join('');
  }

  var valueFromAST$1 = {};

  Object.defineProperty(valueFromAST$1, "__esModule", {
    value: true
  });
  valueFromAST$1.valueFromAST = valueFromAST;

  var _objectValues3$1 = _interopRequireDefault$e(objectValues$1);

  var _keyMap$3 = _interopRequireDefault$e(keyMap$1);

  var _inspect$9 = _interopRequireDefault$e(inspect$1);

  var _invariant$8 = _interopRequireDefault$e(invariant$1);

  var _kinds$6 = kinds;

  var _definition$a = definition;

  function _interopRequireDefault$e(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  /**
   * Produces a JavaScript value given a GraphQL Value AST.
   *
   * A GraphQL type must be provided, which will be used to interpret different
   * GraphQL Value literals.
   *
   * Returns `undefined` when the value could not be validly coerced according to
   * the provided type.
   *
   * | GraphQL Value        | JSON Value    |
   * | -------------------- | ------------- |
   * | Input Object         | Object        |
   * | List                 | Array         |
   * | Boolean              | Boolean       |
   * | String               | String        |
   * | Int / Float          | Number        |
   * | Enum Value           | Mixed         |
   * | NullValue            | null          |
   *
   */
  function valueFromAST(valueNode, type, variables) {
    if (!valueNode) {
      // When there is no node, then there is also no value.
      // Importantly, this is different from returning the value null.
      return;
    }

    if (valueNode.kind === _kinds$6.Kind.VARIABLE) {
      var variableName = valueNode.name.value;

      if (variables == null || variables[variableName] === undefined) {
        // No valid return value.
        return;
      }

      var variableValue = variables[variableName];

      if (variableValue === null && (0, _definition$a.isNonNullType)(type)) {
        return; // Invalid: intentionally return no value.
      } // Note: This does no further checking that this variable is correct.
      // This assumes that this query has been validated and the variable
      // usage here is of the correct type.


      return variableValue;
    }

    if ((0, _definition$a.isNonNullType)(type)) {
      if (valueNode.kind === _kinds$6.Kind.NULL) {
        return; // Invalid: intentionally return no value.
      }

      return valueFromAST(valueNode, type.ofType, variables);
    }

    if (valueNode.kind === _kinds$6.Kind.NULL) {
      // This is explicitly returning the value null.
      return null;
    }

    if ((0, _definition$a.isListType)(type)) {
      var itemType = type.ofType;

      if (valueNode.kind === _kinds$6.Kind.LIST) {
        var coercedValues = [];

        for (var _i2 = 0, _valueNode$values2 = valueNode.values; _i2 < _valueNode$values2.length; _i2++) {
          var itemNode = _valueNode$values2[_i2];

          if (isMissingVariable(itemNode, variables)) {
            // If an array contains a missing variable, it is either coerced to
            // null or if the item type is non-null, it considered invalid.
            if ((0, _definition$a.isNonNullType)(itemType)) {
              return; // Invalid: intentionally return no value.
            }

            coercedValues.push(null);
          } else {
            var itemValue = valueFromAST(itemNode, itemType, variables);

            if (itemValue === undefined) {
              return; // Invalid: intentionally return no value.
            }

            coercedValues.push(itemValue);
          }
        }

        return coercedValues;
      }

      var coercedValue = valueFromAST(valueNode, itemType, variables);

      if (coercedValue === undefined) {
        return; // Invalid: intentionally return no value.
      }

      return [coercedValue];
    }

    if ((0, _definition$a.isInputObjectType)(type)) {
      if (valueNode.kind !== _kinds$6.Kind.OBJECT) {
        return; // Invalid: intentionally return no value.
      }

      var coercedObj = Object.create(null);
      var fieldNodes = (0, _keyMap$3.default)(valueNode.fields, function (field) {
        return field.name.value;
      });

      for (var _i4 = 0, _objectValues2 = (0, _objectValues3$1.default)(type.getFields()); _i4 < _objectValues2.length; _i4++) {
        var field = _objectValues2[_i4];
        var fieldNode = fieldNodes[field.name];

        if (!fieldNode || isMissingVariable(fieldNode.value, variables)) {
          if (field.defaultValue !== undefined) {
            coercedObj[field.name] = field.defaultValue;
          } else if ((0, _definition$a.isNonNullType)(field.type)) {
            return; // Invalid: intentionally return no value.
          }

          continue;
        }

        var fieldValue = valueFromAST(fieldNode.value, field.type, variables);

        if (fieldValue === undefined) {
          return; // Invalid: intentionally return no value.
        }

        coercedObj[field.name] = fieldValue;
      }

      return coercedObj;
    } // istanbul ignore else (See: 'https://github.com/graphql/graphql-js/issues/2618')


    if ((0, _definition$a.isLeafType)(type)) {
      // Scalars and Enums fulfill parsing a literal value via parseLiteral().
      // Invalid values represent a failure to parse correctly, in which case
      // no value is returned.
      var result;

      try {
        result = type.parseLiteral(valueNode, variables);
      } catch (_error) {
        return; // Invalid: intentionally return no value.
      }

      if (result === undefined) {
        return; // Invalid: intentionally return no value.
      }

      return result;
    } // istanbul ignore next (Not reachable. All possible input types have been considered)


    (0, _invariant$8.default)(0, 'Unexpected input type: ' + (0, _inspect$9.default)(type));
  } // Returns true if the provided valueNode is a variable which is not defined
  // in the set of variables.


  function isMissingVariable(valueNode, variables) {
    return valueNode.kind === _kinds$6.Kind.VARIABLE && (variables == null || variables[valueNode.name.value] === undefined);
  }

  var coerceInputValue$1 = {};

  Object.defineProperty(coerceInputValue$1, "__esModule", {
    value: true
  });
  coerceInputValue$1.coerceInputValue = coerceInputValue;

  var _objectValues3 = _interopRequireDefault$d(objectValues$1);

  var _inspect$8 = _interopRequireDefault$d(inspect$1);

  var _invariant$7 = _interopRequireDefault$d(invariant$1);

  var _didYouMean = _interopRequireDefault$d(didYouMean$1);

  var _isObjectLike$2 = _interopRequireDefault$d(isObjectLike$1);

  var _safeArrayFrom$1 = _interopRequireDefault$d(safeArrayFrom$1);

  var _suggestionList = _interopRequireDefault$d(suggestionList$1);

  var _printPathArray$1 = _interopRequireDefault$d(printPathArray$1);

  var _Path$2 = Path;

  var _GraphQLError$5 = GraphQLError$1;

  var _definition$9 = definition;

  function _interopRequireDefault$d(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  /**
   * Coerces a JavaScript value given a GraphQL Input Type.
   */
  function coerceInputValue(inputValue, type) {
    var onError = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : defaultOnError;
    return coerceInputValueImpl(inputValue, type, onError);
  }

  function defaultOnError(path, invalidValue, error) {
    var errorPrefix = 'Invalid value ' + (0, _inspect$8.default)(invalidValue);

    if (path.length > 0) {
      errorPrefix += " at \"value".concat((0, _printPathArray$1.default)(path), "\"");
    }

    error.message = errorPrefix + ': ' + error.message;
    throw error;
  }

  function coerceInputValueImpl(inputValue, type, onError, path) {
    if ((0, _definition$9.isNonNullType)(type)) {
      if (inputValue != null) {
        return coerceInputValueImpl(inputValue, type.ofType, onError, path);
      }

      onError((0, _Path$2.pathToArray)(path), inputValue, new _GraphQLError$5.GraphQLError("Expected non-nullable type \"".concat((0, _inspect$8.default)(type), "\" not to be null.")));
      return;
    }

    if (inputValue == null) {
      // Explicitly return the value null.
      return null;
    }

    if ((0, _definition$9.isListType)(type)) {
      var itemType = type.ofType;
      var coercedList = (0, _safeArrayFrom$1.default)(inputValue, function (itemValue, index) {
        var itemPath = (0, _Path$2.addPath)(path, index, undefined);
        return coerceInputValueImpl(itemValue, itemType, onError, itemPath);
      });

      if (coercedList != null) {
        return coercedList;
      } // Lists accept a non-list value as a list of one.


      return [coerceInputValueImpl(inputValue, itemType, onError, path)];
    }

    if ((0, _definition$9.isInputObjectType)(type)) {
      if (!(0, _isObjectLike$2.default)(inputValue)) {
        onError((0, _Path$2.pathToArray)(path), inputValue, new _GraphQLError$5.GraphQLError("Expected type \"".concat(type.name, "\" to be an object.")));
        return;
      }

      var coercedValue = {};
      var fieldDefs = type.getFields();

      for (var _i2 = 0, _objectValues2 = (0, _objectValues3.default)(fieldDefs); _i2 < _objectValues2.length; _i2++) {
        var field = _objectValues2[_i2];
        var fieldValue = inputValue[field.name];

        if (fieldValue === undefined) {
          if (field.defaultValue !== undefined) {
            coercedValue[field.name] = field.defaultValue;
          } else if ((0, _definition$9.isNonNullType)(field.type)) {
            var typeStr = (0, _inspect$8.default)(field.type);
            onError((0, _Path$2.pathToArray)(path), inputValue, new _GraphQLError$5.GraphQLError("Field \"".concat(field.name, "\" of required type \"").concat(typeStr, "\" was not provided.")));
          }

          continue;
        }

        coercedValue[field.name] = coerceInputValueImpl(fieldValue, field.type, onError, (0, _Path$2.addPath)(path, field.name, type.name));
      } // Ensure every provided field is defined.


      for (var _i4 = 0, _Object$keys2 = Object.keys(inputValue); _i4 < _Object$keys2.length; _i4++) {
        var fieldName = _Object$keys2[_i4];

        if (!fieldDefs[fieldName]) {
          var suggestions = (0, _suggestionList.default)(fieldName, Object.keys(type.getFields()));
          onError((0, _Path$2.pathToArray)(path), inputValue, new _GraphQLError$5.GraphQLError("Field \"".concat(fieldName, "\" is not defined by type \"").concat(type.name, "\".") + (0, _didYouMean.default)(suggestions)));
        }
      }

      return coercedValue;
    } // istanbul ignore else (See: 'https://github.com/graphql/graphql-js/issues/2618')


    if ((0, _definition$9.isLeafType)(type)) {
      var parseResult; // Scalars and Enums determine if a input value is valid via parseValue(),
      // which can throw to indicate failure. If it throws, maintain a reference
      // to the original error.

      try {
        parseResult = type.parseValue(inputValue);
      } catch (error) {
        if (error instanceof _GraphQLError$5.GraphQLError) {
          onError((0, _Path$2.pathToArray)(path), inputValue, error);
        } else {
          onError((0, _Path$2.pathToArray)(path), inputValue, new _GraphQLError$5.GraphQLError("Expected type \"".concat(type.name, "\". ") + error.message, undefined, undefined, undefined, undefined, error));
        }

        return;
      }

      if (parseResult === undefined) {
        onError((0, _Path$2.pathToArray)(path), inputValue, new _GraphQLError$5.GraphQLError("Expected type \"".concat(type.name, "\".")));
      }

      return parseResult;
    } // istanbul ignore next (Not reachable. All possible input types have been considered)


    (0, _invariant$7.default)(0, 'Unexpected input type: ' + (0, _inspect$8.default)(type));
  }

  Object.defineProperty(values, "__esModule", {
    value: true
  });
  values.getVariableValues = getVariableValues;
  values.getArgumentValues = getArgumentValues;
  values.getDirectiveValues = getDirectiveValues;

  var _find = _interopRequireDefault$c(find$1);

  var _keyMap$2 = _interopRequireDefault$c(keyMap$1);

  var _inspect$7 = _interopRequireDefault$c(inspect$1);

  var _printPathArray = _interopRequireDefault$c(printPathArray$1);

  var _GraphQLError$4 = GraphQLError$1;

  var _kinds$5 = kinds;

  var _printer$2 = printer;

  var _definition$8 = definition;

  var _typeFromAST$1 = typeFromAST$1;

  var _valueFromAST$2 = valueFromAST$1;

  var _coerceInputValue = coerceInputValue$1;

  function _interopRequireDefault$c(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  /**
   * Prepares an object map of variableValues of the correct type based on the
   * provided variable definitions and arbitrary input. If the input cannot be
   * parsed to match the variable definitions, a GraphQLError will be thrown.
   *
   * Note: The returned value is a plain Object with a prototype, since it is
   * exposed to user code. Care should be taken to not pull values from the
   * Object prototype.
   *
   * @internal
   */
  function getVariableValues(schema, varDefNodes, inputs, options) {
    var errors = [];
    var maxErrors = options === null || options === void 0 ? void 0 : options.maxErrors;

    try {
      var coerced = coerceVariableValues(schema, varDefNodes, inputs, function (error) {
        if (maxErrors != null && errors.length >= maxErrors) {
          throw new _GraphQLError$4.GraphQLError('Too many errors processing variables, error limit reached. Execution aborted.');
        }

        errors.push(error);
      });

      if (errors.length === 0) {
        return {
          coerced: coerced
        };
      }
    } catch (error) {
      errors.push(error);
    }

    return {
      errors: errors
    };
  }

  function coerceVariableValues(schema, varDefNodes, inputs, onError) {
    var coercedValues = {};

    var _loop = function _loop(_i2) {
      var varDefNode = varDefNodes[_i2];
      var varName = varDefNode.variable.name.value;
      var varType = (0, _typeFromAST$1.typeFromAST)(schema, varDefNode.type);

      if (!(0, _definition$8.isInputType)(varType)) {
        // Must use input types for variables. This should be caught during
        // validation, however is checked again here for safety.
        var varTypeStr = (0, _printer$2.print)(varDefNode.type);
        onError(new _GraphQLError$4.GraphQLError("Variable \"$".concat(varName, "\" expected value of type \"").concat(varTypeStr, "\" which cannot be used as an input type."), varDefNode.type));
        return "continue";
      }

      if (!hasOwnProperty(inputs, varName)) {
        if (varDefNode.defaultValue) {
          coercedValues[varName] = (0, _valueFromAST$2.valueFromAST)(varDefNode.defaultValue, varType);
        } else if ((0, _definition$8.isNonNullType)(varType)) {
          var _varTypeStr = (0, _inspect$7.default)(varType);

          onError(new _GraphQLError$4.GraphQLError("Variable \"$".concat(varName, "\" of required type \"").concat(_varTypeStr, "\" was not provided."), varDefNode));
        }

        return "continue";
      }

      var value = inputs[varName];

      if (value === null && (0, _definition$8.isNonNullType)(varType)) {
        var _varTypeStr2 = (0, _inspect$7.default)(varType);

        onError(new _GraphQLError$4.GraphQLError("Variable \"$".concat(varName, "\" of non-null type \"").concat(_varTypeStr2, "\" must not be null."), varDefNode));
        return "continue";
      }

      coercedValues[varName] = (0, _coerceInputValue.coerceInputValue)(value, varType, function (path, invalidValue, error) {
        var prefix = "Variable \"$".concat(varName, "\" got invalid value ") + (0, _inspect$7.default)(invalidValue);

        if (path.length > 0) {
          prefix += " at \"".concat(varName).concat((0, _printPathArray.default)(path), "\"");
        }

        onError(new _GraphQLError$4.GraphQLError(prefix + '; ' + error.message, varDefNode, undefined, undefined, undefined, error.originalError));
      });
    };

    for (var _i2 = 0; _i2 < varDefNodes.length; _i2++) {
      var _ret = _loop(_i2);

      if (_ret === "continue") continue;
    }

    return coercedValues;
  }
  /**
   * Prepares an object map of argument values given a list of argument
   * definitions and list of argument AST nodes.
   *
   * Note: The returned value is a plain Object with a prototype, since it is
   * exposed to user code. Care should be taken to not pull values from the
   * Object prototype.
   *
   * @internal
   */


  function getArgumentValues(def, node, variableValues) {
    var _node$arguments;

    var coercedValues = {}; // istanbul ignore next (See: 'https://github.com/graphql/graphql-js/issues/2203')

    var argumentNodes = (_node$arguments = node.arguments) !== null && _node$arguments !== void 0 ? _node$arguments : [];
    var argNodeMap = (0, _keyMap$2.default)(argumentNodes, function (arg) {
      return arg.name.value;
    });

    for (var _i4 = 0, _def$args2 = def.args; _i4 < _def$args2.length; _i4++) {
      var argDef = _def$args2[_i4];
      var name = argDef.name;
      var argType = argDef.type;
      var argumentNode = argNodeMap[name];

      if (!argumentNode) {
        if (argDef.defaultValue !== undefined) {
          coercedValues[name] = argDef.defaultValue;
        } else if ((0, _definition$8.isNonNullType)(argType)) {
          throw new _GraphQLError$4.GraphQLError("Argument \"".concat(name, "\" of required type \"").concat((0, _inspect$7.default)(argType), "\" ") + 'was not provided.', node);
        }

        continue;
      }

      var valueNode = argumentNode.value;
      var isNull = valueNode.kind === _kinds$5.Kind.NULL;

      if (valueNode.kind === _kinds$5.Kind.VARIABLE) {
        var variableName = valueNode.name.value;

        if (variableValues == null || !hasOwnProperty(variableValues, variableName)) {
          if (argDef.defaultValue !== undefined) {
            coercedValues[name] = argDef.defaultValue;
          } else if ((0, _definition$8.isNonNullType)(argType)) {
            throw new _GraphQLError$4.GraphQLError("Argument \"".concat(name, "\" of required type \"").concat((0, _inspect$7.default)(argType), "\" ") + "was provided the variable \"$".concat(variableName, "\" which was not provided a runtime value."), valueNode);
          }

          continue;
        }

        isNull = variableValues[variableName] == null;
      }

      if (isNull && (0, _definition$8.isNonNullType)(argType)) {
        throw new _GraphQLError$4.GraphQLError("Argument \"".concat(name, "\" of non-null type \"").concat((0, _inspect$7.default)(argType), "\" ") + 'must not be null.', valueNode);
      }

      var coercedValue = (0, _valueFromAST$2.valueFromAST)(valueNode, argType, variableValues);

      if (coercedValue === undefined) {
        // Note: ValuesOfCorrectTypeRule validation should catch this before
        // execution. This is a runtime check to ensure execution does not
        // continue with an invalid argument value.
        throw new _GraphQLError$4.GraphQLError("Argument \"".concat(name, "\" has invalid value ").concat((0, _printer$2.print)(valueNode), "."), valueNode);
      }

      coercedValues[name] = coercedValue;
    }

    return coercedValues;
  }
  /**
   * Prepares an object map of argument values given a directive definition
   * and a AST node which may contain directives. Optionally also accepts a map
   * of variable values.
   *
   * If the directive does not exist on the node, returns undefined.
   *
   * Note: The returned value is a plain Object with a prototype, since it is
   * exposed to user code. Care should be taken to not pull values from the
   * Object prototype.
   */


  function getDirectiveValues(directiveDef, node, variableValues) {
    var directiveNode = node.directives && (0, _find.default)(node.directives, function (directive) {
      return directive.name.value === directiveDef.name;
    });

    if (directiveNode) {
      return getArgumentValues(directiveDef, directiveNode, variableValues);
    }
  }

  function hasOwnProperty(obj, prop) {
    return Object.prototype.hasOwnProperty.call(obj, prop);
  }

  Object.defineProperty(execute$1, "__esModule", {
    value: true
  });
  execute$1.execute = execute;
  execute$1.executeSync = executeSync;
  execute$1.assertValidExecutionArguments = assertValidExecutionArguments;
  execute$1.buildExecutionContext = buildExecutionContext;
  execute$1.collectFields = collectFields;
  execute$1.buildResolveInfo = buildResolveInfo;
  execute$1.getFieldDef = getFieldDef;
  execute$1.defaultFieldResolver = execute$1.defaultTypeResolver = void 0;

  var _inspect$6 = _interopRequireDefault$b(inspect$1);

  var _memoize = _interopRequireDefault$b(memoize3$1);

  var _invariant$6 = _interopRequireDefault$b(invariant$1);

  var _devAssert$4 = _interopRequireDefault$b(devAssert$1);

  var _isPromise$1 = _interopRequireDefault$b(isPromise$1);

  var _isObjectLike$1 = _interopRequireDefault$b(isObjectLike$1);

  var _safeArrayFrom = _interopRequireDefault$b(safeArrayFrom$1);

  var _promiseReduce = _interopRequireDefault$b(promiseReduce$1);

  var _promiseForObject = _interopRequireDefault$b(promiseForObject$1);

  var _Path$1 = Path;

  var _GraphQLError$3 = GraphQLError$1;

  var _locatedError$1 = locatedError$1;

  var _kinds$4 = kinds;

  var _validate$4 = validate$1;

  var _introspection$5 = introspection;

  var _directives$5 = directives;

  var _definition$7 = definition;

  var _typeFromAST = typeFromAST$1;

  var _getOperationRootType$1 = getOperationRootType$1;

  var _values$2 = values;

  function _interopRequireDefault$b(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function execute(argsOrSchema, document, rootValue, contextValue, variableValues, operationName, fieldResolver, typeResolver) {
    /* eslint-enable no-redeclare */
    // Extract arguments from object args if provided.
    return arguments.length === 1 ? executeImpl(argsOrSchema) : executeImpl({
      schema: argsOrSchema,
      document: document,
      rootValue: rootValue,
      contextValue: contextValue,
      variableValues: variableValues,
      operationName: operationName,
      fieldResolver: fieldResolver,
      typeResolver: typeResolver
    });
  }
  /**
   * Also implements the "Evaluating requests" section of the GraphQL specification.
   * However, it guarantees to complete synchronously (or throw an error) assuming
   * that all field resolvers are also synchronous.
   */


  function executeSync(args) {
    var result = executeImpl(args); // Assert that the execution was synchronous.

    if ((0, _isPromise$1.default)(result)) {
      throw new Error('GraphQL execution failed to complete synchronously.');
    }

    return result;
  }

  function executeImpl(args) {
    var schema = args.schema,
        document = args.document,
        rootValue = args.rootValue,
        contextValue = args.contextValue,
        variableValues = args.variableValues,
        operationName = args.operationName,
        fieldResolver = args.fieldResolver,
        typeResolver = args.typeResolver; // If arguments are missing or incorrect, throw an error.

    assertValidExecutionArguments(schema, document, variableValues); // If a valid execution context cannot be created due to incorrect arguments,
    // a "Response" with only errors is returned.

    var exeContext = buildExecutionContext(schema, document, rootValue, contextValue, variableValues, operationName, fieldResolver, typeResolver); // Return early errors if execution context failed.

    if (Array.isArray(exeContext)) {
      return {
        errors: exeContext
      };
    } // Return a Promise that will eventually resolve to the data described by
    // The "Response" section of the GraphQL specification.
    //
    // If errors are encountered while executing a GraphQL field, only that
    // field and its descendants will be omitted, and sibling fields will still
    // be executed. An execution which encounters errors will still result in a
    // resolved Promise.


    var data = executeOperation(exeContext, exeContext.operation, rootValue);
    return buildResponse(exeContext, data);
  }
  /**
   * Given a completed execution context and data, build the { errors, data }
   * response defined by the "Response" section of the GraphQL specification.
   */


  function buildResponse(exeContext, data) {
    if ((0, _isPromise$1.default)(data)) {
      return data.then(function (resolved) {
        return buildResponse(exeContext, resolved);
      });
    }

    return exeContext.errors.length === 0 ? {
      data: data
    } : {
      errors: exeContext.errors,
      data: data
    };
  }
  /**
   * Essential assertions before executing to provide developer feedback for
   * improper use of the GraphQL library.
   *
   * @internal
   */


  function assertValidExecutionArguments(schema, document, rawVariableValues) {
    document || (0, _devAssert$4.default)(0, 'Must provide document.'); // If the schema used for execution is invalid, throw an error.

    (0, _validate$4.assertValidSchema)(schema); // Variables, if provided, must be an object.

    rawVariableValues == null || (0, _isObjectLike$1.default)(rawVariableValues) || (0, _devAssert$4.default)(0, 'Variables must be provided as an Object where each property is a variable value. Perhaps look to see if an unparsed JSON string was provided.');
  }
  /**
   * Constructs a ExecutionContext object from the arguments passed to
   * execute, which we will pass throughout the other execution methods.
   *
   * Throws a GraphQLError if a valid execution context cannot be created.
   *
   * @internal
   */


  function buildExecutionContext(schema, document, rootValue, contextValue, rawVariableValues, operationName, fieldResolver, typeResolver) {
    var _definition$name, _operation$variableDe;

    var operation;
    var fragments = Object.create(null);

    for (var _i2 = 0, _document$definitions2 = document.definitions; _i2 < _document$definitions2.length; _i2++) {
      var definition = _document$definitions2[_i2];

      switch (definition.kind) {
        case _kinds$4.Kind.OPERATION_DEFINITION:
          if (operationName == null) {
            if (operation !== undefined) {
              return [new _GraphQLError$3.GraphQLError('Must provide operation name if query contains multiple operations.')];
            }

            operation = definition;
          } else if (((_definition$name = definition.name) === null || _definition$name === void 0 ? void 0 : _definition$name.value) === operationName) {
            operation = definition;
          }

          break;

        case _kinds$4.Kind.FRAGMENT_DEFINITION:
          fragments[definition.name.value] = definition;
          break;
      }
    }

    if (!operation) {
      if (operationName != null) {
        return [new _GraphQLError$3.GraphQLError("Unknown operation named \"".concat(operationName, "\"."))];
      }

      return [new _GraphQLError$3.GraphQLError('Must provide an operation.')];
    } // istanbul ignore next (See: 'https://github.com/graphql/graphql-js/issues/2203')


    var variableDefinitions = (_operation$variableDe = operation.variableDefinitions) !== null && _operation$variableDe !== void 0 ? _operation$variableDe : [];
    var coercedVariableValues = (0, _values$2.getVariableValues)(schema, variableDefinitions, rawVariableValues !== null && rawVariableValues !== void 0 ? rawVariableValues : {}, {
      maxErrors: 50
    });

    if (coercedVariableValues.errors) {
      return coercedVariableValues.errors;
    }

    return {
      schema: schema,
      fragments: fragments,
      rootValue: rootValue,
      contextValue: contextValue,
      operation: operation,
      variableValues: coercedVariableValues.coerced,
      fieldResolver: fieldResolver !== null && fieldResolver !== void 0 ? fieldResolver : defaultFieldResolver,
      typeResolver: typeResolver !== null && typeResolver !== void 0 ? typeResolver : defaultTypeResolver,
      errors: []
    };
  }
  /**
   * Implements the "Evaluating operations" section of the spec.
   */


  function executeOperation(exeContext, operation, rootValue) {
    var type = (0, _getOperationRootType$1.getOperationRootType)(exeContext.schema, operation);
    var fields = collectFields(exeContext, type, operation.selectionSet, Object.create(null), Object.create(null));
    var path = undefined; // Errors from sub-fields of a NonNull type may propagate to the top level,
    // at which point we still log the error and null the parent field, which
    // in this case is the entire response.

    try {
      var result = operation.operation === 'mutation' ? executeFieldsSerially(exeContext, type, rootValue, path, fields) : executeFields(exeContext, type, rootValue, path, fields);

      if ((0, _isPromise$1.default)(result)) {
        return result.then(undefined, function (error) {
          exeContext.errors.push(error);
          return Promise.resolve(null);
        });
      }

      return result;
    } catch (error) {
      exeContext.errors.push(error);
      return null;
    }
  }
  /**
   * Implements the "Evaluating selection sets" section of the spec
   * for "write" mode.
   */


  function executeFieldsSerially(exeContext, parentType, sourceValue, path, fields) {
    return (0, _promiseReduce.default)(Object.keys(fields), function (results, responseName) {
      var fieldNodes = fields[responseName];
      var fieldPath = (0, _Path$1.addPath)(path, responseName, parentType.name);
      var result = resolveField(exeContext, parentType, sourceValue, fieldNodes, fieldPath);

      if (result === undefined) {
        return results;
      }

      if ((0, _isPromise$1.default)(result)) {
        return result.then(function (resolvedResult) {
          results[responseName] = resolvedResult;
          return results;
        });
      }

      results[responseName] = result;
      return results;
    }, Object.create(null));
  }
  /**
   * Implements the "Evaluating selection sets" section of the spec
   * for "read" mode.
   */


  function executeFields(exeContext, parentType, sourceValue, path, fields) {
    var results = Object.create(null);
    var containsPromise = false;

    for (var _i4 = 0, _Object$keys2 = Object.keys(fields); _i4 < _Object$keys2.length; _i4++) {
      var responseName = _Object$keys2[_i4];
      var fieldNodes = fields[responseName];
      var fieldPath = (0, _Path$1.addPath)(path, responseName, parentType.name);
      var result = resolveField(exeContext, parentType, sourceValue, fieldNodes, fieldPath);

      if (result !== undefined) {
        results[responseName] = result;

        if ((0, _isPromise$1.default)(result)) {
          containsPromise = true;
        }
      }
    } // If there are no promises, we can just return the object


    if (!containsPromise) {
      return results;
    } // Otherwise, results is a map from field name to the result of resolving that
    // field, which is possibly a promise. Return a promise that will return this
    // same map, but with any promises replaced with the values they resolved to.


    return (0, _promiseForObject.default)(results);
  }
  /**
   * Given a selectionSet, adds all of the fields in that selection to
   * the passed in map of fields, and returns it at the end.
   *
   * CollectFields requires the "runtime type" of an object. For a field which
   * returns an Interface or Union type, the "runtime type" will be the actual
   * Object type returned by that field.
   *
   * @internal
   */


  function collectFields(exeContext, runtimeType, selectionSet, fields, visitedFragmentNames) {
    for (var _i6 = 0, _selectionSet$selecti2 = selectionSet.selections; _i6 < _selectionSet$selecti2.length; _i6++) {
      var selection = _selectionSet$selecti2[_i6];

      switch (selection.kind) {
        case _kinds$4.Kind.FIELD:
          {
            if (!shouldIncludeNode(exeContext, selection)) {
              continue;
            }

            var name = getFieldEntryKey(selection);

            if (!fields[name]) {
              fields[name] = [];
            }

            fields[name].push(selection);
            break;
          }

        case _kinds$4.Kind.INLINE_FRAGMENT:
          {
            if (!shouldIncludeNode(exeContext, selection) || !doesFragmentConditionMatch(exeContext, selection, runtimeType)) {
              continue;
            }

            collectFields(exeContext, runtimeType, selection.selectionSet, fields, visitedFragmentNames);
            break;
          }

        case _kinds$4.Kind.FRAGMENT_SPREAD:
          {
            var fragName = selection.name.value;

            if (visitedFragmentNames[fragName] || !shouldIncludeNode(exeContext, selection)) {
              continue;
            }

            visitedFragmentNames[fragName] = true;
            var fragment = exeContext.fragments[fragName];

            if (!fragment || !doesFragmentConditionMatch(exeContext, fragment, runtimeType)) {
              continue;
            }

            collectFields(exeContext, runtimeType, fragment.selectionSet, fields, visitedFragmentNames);
            break;
          }
      }
    }

    return fields;
  }
  /**
   * Determines if a field should be included based on the @include and @skip
   * directives, where @skip has higher precedence than @include.
   */


  function shouldIncludeNode(exeContext, node) {
    var skip = (0, _values$2.getDirectiveValues)(_directives$5.GraphQLSkipDirective, node, exeContext.variableValues);

    if ((skip === null || skip === void 0 ? void 0 : skip.if) === true) {
      return false;
    }

    var include = (0, _values$2.getDirectiveValues)(_directives$5.GraphQLIncludeDirective, node, exeContext.variableValues);

    if ((include === null || include === void 0 ? void 0 : include.if) === false) {
      return false;
    }

    return true;
  }
  /**
   * Determines if a fragment is applicable to the given type.
   */


  function doesFragmentConditionMatch(exeContext, fragment, type) {
    var typeConditionNode = fragment.typeCondition;

    if (!typeConditionNode) {
      return true;
    }

    var conditionalType = (0, _typeFromAST.typeFromAST)(exeContext.schema, typeConditionNode);

    if (conditionalType === type) {
      return true;
    }

    if ((0, _definition$7.isAbstractType)(conditionalType)) {
      return exeContext.schema.isSubType(conditionalType, type);
    }

    return false;
  }
  /**
   * Implements the logic to compute the key of a given field's entry
   */


  function getFieldEntryKey(node) {
    return node.alias ? node.alias.value : node.name.value;
  }
  /**
   * Resolves the field on the given source object. In particular, this
   * figures out the value that the field returns by calling its resolve function,
   * then calls completeValue to complete promises, serialize scalars, or execute
   * the sub-selection-set for objects.
   */


  function resolveField(exeContext, parentType, source, fieldNodes, path) {
    var _fieldDef$resolve;

    var fieldNode = fieldNodes[0];
    var fieldName = fieldNode.name.value;
    var fieldDef = getFieldDef(exeContext.schema, parentType, fieldName);

    if (!fieldDef) {
      return;
    }

    var returnType = fieldDef.type;
    var resolveFn = (_fieldDef$resolve = fieldDef.resolve) !== null && _fieldDef$resolve !== void 0 ? _fieldDef$resolve : exeContext.fieldResolver;
    var info = buildResolveInfo(exeContext, fieldDef, fieldNodes, parentType, path); // Get the resolve function, regardless of if its result is normal or abrupt (error).

    try {
      // Build a JS object of arguments from the field.arguments AST, using the
      // variables scope to fulfill any variable references.
      // TODO: find a way to memoize, in case this field is within a List type.
      var args = (0, _values$2.getArgumentValues)(fieldDef, fieldNodes[0], exeContext.variableValues); // The resolve function's optional third argument is a context value that
      // is provided to every resolve function within an execution. It is commonly
      // used to represent an authenticated user, or request-specific caches.

      var _contextValue = exeContext.contextValue;
      var result = resolveFn(source, args, _contextValue, info);
      var completed;

      if ((0, _isPromise$1.default)(result)) {
        completed = result.then(function (resolved) {
          return completeValue(exeContext, returnType, fieldNodes, info, path, resolved);
        });
      } else {
        completed = completeValue(exeContext, returnType, fieldNodes, info, path, result);
      }

      if ((0, _isPromise$1.default)(completed)) {
        // Note: we don't rely on a `catch` method, but we do expect "thenable"
        // to take a second callback for the error case.
        return completed.then(undefined, function (rawError) {
          var error = (0, _locatedError$1.locatedError)(rawError, fieldNodes, (0, _Path$1.pathToArray)(path));
          return handleFieldError(error, returnType, exeContext);
        });
      }

      return completed;
    } catch (rawError) {
      var error = (0, _locatedError$1.locatedError)(rawError, fieldNodes, (0, _Path$1.pathToArray)(path));
      return handleFieldError(error, returnType, exeContext);
    }
  }
  /**
   * @internal
   */


  function buildResolveInfo(exeContext, fieldDef, fieldNodes, parentType, path) {
    // The resolve function's optional fourth argument is a collection of
    // information about the current execution state.
    return {
      fieldName: fieldDef.name,
      fieldNodes: fieldNodes,
      returnType: fieldDef.type,
      parentType: parentType,
      path: path,
      schema: exeContext.schema,
      fragments: exeContext.fragments,
      rootValue: exeContext.rootValue,
      operation: exeContext.operation,
      variableValues: exeContext.variableValues
    };
  }

  function handleFieldError(error, returnType, exeContext) {
    // If the field type is non-nullable, then it is resolved without any
    // protection from errors, however it still properly locates the error.
    if ((0, _definition$7.isNonNullType)(returnType)) {
      throw error;
    } // Otherwise, error protection is applied, logging the error and resolving
    // a null value for this field if one is encountered.


    exeContext.errors.push(error);
    return null;
  }
  /**
   * Implements the instructions for completeValue as defined in the
   * "Field entries" section of the spec.
   *
   * If the field type is Non-Null, then this recursively completes the value
   * for the inner type. It throws a field error if that completion returns null,
   * as per the "Nullability" section of the spec.
   *
   * If the field type is a List, then this recursively completes the value
   * for the inner type on each item in the list.
   *
   * If the field type is a Scalar or Enum, ensures the completed value is a legal
   * value of the type by calling the `serialize` method of GraphQL type
   * definition.
   *
   * If the field is an abstract type, determine the runtime type of the value
   * and then complete based on that type
   *
   * Otherwise, the field type expects a sub-selection set, and will complete the
   * value by evaluating all sub-selections.
   */


  function completeValue(exeContext, returnType, fieldNodes, info, path, result) {
    // If result is an Error, throw a located error.
    if (result instanceof Error) {
      throw result;
    } // If field type is NonNull, complete for inner type, and throw field error
    // if result is null.


    if ((0, _definition$7.isNonNullType)(returnType)) {
      var completed = completeValue(exeContext, returnType.ofType, fieldNodes, info, path, result);

      if (completed === null) {
        throw new Error("Cannot return null for non-nullable field ".concat(info.parentType.name, ".").concat(info.fieldName, "."));
      }

      return completed;
    } // If result value is null or undefined then return null.


    if (result == null) {
      return null;
    } // If field type is List, complete each item in the list with the inner type


    if ((0, _definition$7.isListType)(returnType)) {
      return completeListValue(exeContext, returnType, fieldNodes, info, path, result);
    } // If field type is a leaf type, Scalar or Enum, serialize to a valid value,
    // returning null if serialization is not possible.


    if ((0, _definition$7.isLeafType)(returnType)) {
      return completeLeafValue(returnType, result);
    } // If field type is an abstract type, Interface or Union, determine the
    // runtime Object type and complete for that type.


    if ((0, _definition$7.isAbstractType)(returnType)) {
      return completeAbstractValue(exeContext, returnType, fieldNodes, info, path, result);
    } // If field type is Object, execute and complete all sub-selections.
    // istanbul ignore else (See: 'https://github.com/graphql/graphql-js/issues/2618')


    if ((0, _definition$7.isObjectType)(returnType)) {
      return completeObjectValue(exeContext, returnType, fieldNodes, info, path, result);
    } // istanbul ignore next (Not reachable. All possible output types have been considered)


    (0, _invariant$6.default)(0, 'Cannot complete value of unexpected output type: ' + (0, _inspect$6.default)(returnType));
  }
  /**
   * Complete a list value by completing each item in the list with the
   * inner type
   */


  function completeListValue(exeContext, returnType, fieldNodes, info, path, result) {
    // This is specified as a simple map, however we're optimizing the path
    // where the list contains no Promises by avoiding creating another Promise.
    var itemType = returnType.ofType;
    var containsPromise = false;
    var completedResults = (0, _safeArrayFrom.default)(result, function (item, index) {
      // No need to modify the info object containing the path,
      // since from here on it is not ever accessed by resolver functions.
      var itemPath = (0, _Path$1.addPath)(path, index, undefined);

      try {
        var completedItem;

        if ((0, _isPromise$1.default)(item)) {
          completedItem = item.then(function (resolved) {
            return completeValue(exeContext, itemType, fieldNodes, info, itemPath, resolved);
          });
        } else {
          completedItem = completeValue(exeContext, itemType, fieldNodes, info, itemPath, item);
        }

        if ((0, _isPromise$1.default)(completedItem)) {
          containsPromise = true; // Note: we don't rely on a `catch` method, but we do expect "thenable"
          // to take a second callback for the error case.

          return completedItem.then(undefined, function (rawError) {
            var error = (0, _locatedError$1.locatedError)(rawError, fieldNodes, (0, _Path$1.pathToArray)(itemPath));
            return handleFieldError(error, itemType, exeContext);
          });
        }

        return completedItem;
      } catch (rawError) {
        var error = (0, _locatedError$1.locatedError)(rawError, fieldNodes, (0, _Path$1.pathToArray)(itemPath));
        return handleFieldError(error, itemType, exeContext);
      }
    });

    if (completedResults == null) {
      throw new _GraphQLError$3.GraphQLError("Expected Iterable, but did not find one for field \"".concat(info.parentType.name, ".").concat(info.fieldName, "\"."));
    }

    return containsPromise ? Promise.all(completedResults) : completedResults;
  }
  /**
   * Complete a Scalar or Enum by serializing to a valid value, returning
   * null if serialization is not possible.
   */


  function completeLeafValue(returnType, result) {
    var serializedResult = returnType.serialize(result);

    if (serializedResult === undefined) {
      throw new Error("Expected a value of type \"".concat((0, _inspect$6.default)(returnType), "\" but ") + "received: ".concat((0, _inspect$6.default)(result)));
    }

    return serializedResult;
  }
  /**
   * Complete a value of an abstract type by determining the runtime object type
   * of that value, then complete the value for that type.
   */


  function completeAbstractValue(exeContext, returnType, fieldNodes, info, path, result) {
    var _returnType$resolveTy;

    var resolveTypeFn = (_returnType$resolveTy = returnType.resolveType) !== null && _returnType$resolveTy !== void 0 ? _returnType$resolveTy : exeContext.typeResolver;
    var contextValue = exeContext.contextValue;
    var runtimeType = resolveTypeFn(result, contextValue, info, returnType);

    if ((0, _isPromise$1.default)(runtimeType)) {
      return runtimeType.then(function (resolvedRuntimeType) {
        return completeObjectValue(exeContext, ensureValidRuntimeType(resolvedRuntimeType, exeContext, returnType, fieldNodes, info, result), fieldNodes, info, path, result);
      });
    }

    return completeObjectValue(exeContext, ensureValidRuntimeType(runtimeType, exeContext, returnType, fieldNodes, info, result), fieldNodes, info, path, result);
  }

  function ensureValidRuntimeType(runtimeTypeOrName, exeContext, returnType, fieldNodes, info, result) {
    if (runtimeTypeOrName == null) {
      throw new _GraphQLError$3.GraphQLError("Abstract type \"".concat(returnType.name, "\" must resolve to an Object type at runtime for field \"").concat(info.parentType.name, ".").concat(info.fieldName, "\". Either the \"").concat(returnType.name, "\" type should provide a \"resolveType\" function or each possible type should provide an \"isTypeOf\" function."), fieldNodes);
    } // FIXME: temporary workaround until support for passing object types would be removed in v16.0.0


    var runtimeTypeName = (0, _definition$7.isNamedType)(runtimeTypeOrName) ? runtimeTypeOrName.name : runtimeTypeOrName;

    if (typeof runtimeTypeName !== 'string') {
      throw new _GraphQLError$3.GraphQLError("Abstract type \"".concat(returnType.name, "\" must resolve to an Object type at runtime for field \"").concat(info.parentType.name, ".").concat(info.fieldName, "\" with ") + "value ".concat((0, _inspect$6.default)(result), ", received \"").concat((0, _inspect$6.default)(runtimeTypeOrName), "\"."));
    }

    var runtimeType = exeContext.schema.getType(runtimeTypeName);

    if (runtimeType == null) {
      throw new _GraphQLError$3.GraphQLError("Abstract type \"".concat(returnType.name, "\" was resolve to a type \"").concat(runtimeTypeName, "\" that does not exist inside schema."), fieldNodes);
    }

    if (!(0, _definition$7.isObjectType)(runtimeType)) {
      throw new _GraphQLError$3.GraphQLError("Abstract type \"".concat(returnType.name, "\" was resolve to a non-object type \"").concat(runtimeTypeName, "\"."), fieldNodes);
    }

    if (!exeContext.schema.isSubType(returnType, runtimeType)) {
      throw new _GraphQLError$3.GraphQLError("Runtime Object type \"".concat(runtimeType.name, "\" is not a possible type for \"").concat(returnType.name, "\"."), fieldNodes);
    }

    return runtimeType;
  }
  /**
   * Complete an Object value by executing all sub-selections.
   */


  function completeObjectValue(exeContext, returnType, fieldNodes, info, path, result) {
    // If there is an isTypeOf predicate function, call it with the
    // current result. If isTypeOf returns false, then raise an error rather
    // than continuing execution.
    if (returnType.isTypeOf) {
      var isTypeOf = returnType.isTypeOf(result, exeContext.contextValue, info);

      if ((0, _isPromise$1.default)(isTypeOf)) {
        return isTypeOf.then(function (resolvedIsTypeOf) {
          if (!resolvedIsTypeOf) {
            throw invalidReturnTypeError(returnType, result, fieldNodes);
          }

          return collectAndExecuteSubfields(exeContext, returnType, fieldNodes, path, result);
        });
      }

      if (!isTypeOf) {
        throw invalidReturnTypeError(returnType, result, fieldNodes);
      }
    }

    return collectAndExecuteSubfields(exeContext, returnType, fieldNodes, path, result);
  }

  function invalidReturnTypeError(returnType, result, fieldNodes) {
    return new _GraphQLError$3.GraphQLError("Expected value of type \"".concat(returnType.name, "\" but got: ").concat((0, _inspect$6.default)(result), "."), fieldNodes);
  }

  function collectAndExecuteSubfields(exeContext, returnType, fieldNodes, path, result) {
    // Collect sub-fields to execute to complete this value.
    var subFieldNodes = collectSubfields(exeContext, returnType, fieldNodes);
    return executeFields(exeContext, returnType, result, path, subFieldNodes);
  }
  /**
   * A memoized collection of relevant subfields with regard to the return
   * type. Memoizing ensures the subfields are not repeatedly calculated, which
   * saves overhead when resolving lists of values.
   */


  var collectSubfields = (0, _memoize.default)(_collectSubfields);

  function _collectSubfields(exeContext, returnType, fieldNodes) {
    var subFieldNodes = Object.create(null);
    var visitedFragmentNames = Object.create(null);

    for (var _i8 = 0; _i8 < fieldNodes.length; _i8++) {
      var node = fieldNodes[_i8];

      if (node.selectionSet) {
        subFieldNodes = collectFields(exeContext, returnType, node.selectionSet, subFieldNodes, visitedFragmentNames);
      }
    }

    return subFieldNodes;
  }
  /**
   * If a resolveType function is not given, then a default resolve behavior is
   * used which attempts two strategies:
   *
   * First, See if the provided value has a `__typename` field defined, if so, use
   * that value as name of the resolved type.
   *
   * Otherwise, test each possible type for the abstract type by calling
   * isTypeOf for the object being coerced, returning the first type that matches.
   */


  var defaultTypeResolver = function defaultTypeResolver(value, contextValue, info, abstractType) {
    // First, look for `__typename`.
    if ((0, _isObjectLike$1.default)(value) && typeof value.__typename === 'string') {
      return value.__typename;
    } // Otherwise, test each possible type.


    var possibleTypes = info.schema.getPossibleTypes(abstractType);
    var promisedIsTypeOfResults = [];

    for (var i = 0; i < possibleTypes.length; i++) {
      var type = possibleTypes[i];

      if (type.isTypeOf) {
        var isTypeOfResult = type.isTypeOf(value, contextValue, info);

        if ((0, _isPromise$1.default)(isTypeOfResult)) {
          promisedIsTypeOfResults[i] = isTypeOfResult;
        } else if (isTypeOfResult) {
          return type.name;
        }
      }
    }

    if (promisedIsTypeOfResults.length) {
      return Promise.all(promisedIsTypeOfResults).then(function (isTypeOfResults) {
        for (var _i9 = 0; _i9 < isTypeOfResults.length; _i9++) {
          if (isTypeOfResults[_i9]) {
            return possibleTypes[_i9].name;
          }
        }
      });
    }
  };
  /**
   * If a resolve function is not given, then a default resolve behavior is used
   * which takes the property of the source object of the same name as the field
   * and returns it as the result, or if it's a function, returns the result
   * of calling that function while passing along args and context value.
   */


  execute$1.defaultTypeResolver = defaultTypeResolver;

  var defaultFieldResolver = function defaultFieldResolver(source, args, contextValue, info) {
    // ensure source is a value for which property access is acceptable.
    if ((0, _isObjectLike$1.default)(source) || typeof source === 'function') {
      var property = source[info.fieldName];

      if (typeof property === 'function') {
        return source[info.fieldName](args, contextValue, info);
      }

      return property;
    }
  };
  /**
   * This method looks up the field on the given type definition.
   * It has special casing for the three introspection fields,
   * __schema, __type and __typename. __typename is special because
   * it can always be queried as a field, even in situations where no
   * other fields are allowed, like on a Union. __schema and __type
   * could get automatically added to the query type, but that would
   * require mutating type definitions, which would cause issues.
   *
   * @internal
   */


  execute$1.defaultFieldResolver = defaultFieldResolver;

  function getFieldDef(schema, parentType, fieldName) {
    if (fieldName === _introspection$5.SchemaMetaFieldDef.name && schema.getQueryType() === parentType) {
      return _introspection$5.SchemaMetaFieldDef;
    } else if (fieldName === _introspection$5.TypeMetaFieldDef.name && schema.getQueryType() === parentType) {
      return _introspection$5.TypeMetaFieldDef;
    } else if (fieldName === _introspection$5.TypeNameMetaFieldDef.name) {
      return _introspection$5.TypeNameMetaFieldDef;
    }

    return parentType.getFields()[fieldName];
  }

  Object.defineProperty(graphql$2, "__esModule", {
    value: true
  });
  graphql$2.graphql = graphql$1;
  graphql$2.graphqlSync = graphqlSync;

  var _isPromise = _interopRequireDefault$a(isPromise$1);

  var _parser$3 = parser;

  var _validate$3 = validate$2;

  var _validate2 = validate$1;

  var _execute$2 = execute$1;

  function _interopRequireDefault$a(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function graphql$1(argsOrSchema, source, rootValue, contextValue, variableValues, operationName, fieldResolver, typeResolver) {
    var _arguments = arguments;

    /* eslint-enable no-redeclare */
    // Always return a Promise for a consistent API.
    return new Promise(function (resolve) {
      return resolve( // Extract arguments from object args if provided.
      _arguments.length === 1 ? graphqlImpl(argsOrSchema) : graphqlImpl({
        schema: argsOrSchema,
        source: source,
        rootValue: rootValue,
        contextValue: contextValue,
        variableValues: variableValues,
        operationName: operationName,
        fieldResolver: fieldResolver,
        typeResolver: typeResolver
      }));
    });
  }
  /**
   * The graphqlSync function also fulfills GraphQL operations by parsing,
   * validating, and executing a GraphQL document along side a GraphQL schema.
   * However, it guarantees to complete synchronously (or throw an error) assuming
   * that all field resolvers are also synchronous.
   */


  function graphqlSync(argsOrSchema, source, rootValue, contextValue, variableValues, operationName, fieldResolver, typeResolver) {
    /* eslint-enable no-redeclare */
    // Extract arguments from object args if provided.
    var result = arguments.length === 1 ? graphqlImpl(argsOrSchema) : graphqlImpl({
      schema: argsOrSchema,
      source: source,
      rootValue: rootValue,
      contextValue: contextValue,
      variableValues: variableValues,
      operationName: operationName,
      fieldResolver: fieldResolver,
      typeResolver: typeResolver
    }); // Assert that the execution was synchronous.

    if ((0, _isPromise.default)(result)) {
      throw new Error('GraphQL execution failed to complete synchronously.');
    }

    return result;
  }

  function graphqlImpl(args) {
    var schema = args.schema,
        source = args.source,
        rootValue = args.rootValue,
        contextValue = args.contextValue,
        variableValues = args.variableValues,
        operationName = args.operationName,
        fieldResolver = args.fieldResolver,
        typeResolver = args.typeResolver; // Validate Schema

    var schemaValidationErrors = (0, _validate2.validateSchema)(schema);

    if (schemaValidationErrors.length > 0) {
      return {
        errors: schemaValidationErrors
      };
    } // Parse


    var document;

    try {
      document = (0, _parser$3.parse)(source);
    } catch (syntaxError) {
      return {
        errors: [syntaxError]
      };
    } // Validate


    var validationErrors = (0, _validate$3.validate)(schema, document);

    if (validationErrors.length > 0) {
      return {
        errors: validationErrors
      };
    } // Execute


    return (0, _execute$2.execute)({
      schema: schema,
      document: document,
      rootValue: rootValue,
      contextValue: contextValue,
      variableValues: variableValues,
      operationName: operationName,
      fieldResolver: fieldResolver,
      typeResolver: typeResolver
    });
  }

  var type = {};

  (function (exports) {

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, "isSchema", {
    enumerable: true,
    get: function get() {
      return _schema.isSchema;
    }
  });
  Object.defineProperty(exports, "assertSchema", {
    enumerable: true,
    get: function get() {
      return _schema.assertSchema;
    }
  });
  Object.defineProperty(exports, "GraphQLSchema", {
    enumerable: true,
    get: function get() {
      return _schema.GraphQLSchema;
    }
  });
  Object.defineProperty(exports, "isType", {
    enumerable: true,
    get: function get() {
      return _definition.isType;
    }
  });
  Object.defineProperty(exports, "isScalarType", {
    enumerable: true,
    get: function get() {
      return _definition.isScalarType;
    }
  });
  Object.defineProperty(exports, "isObjectType", {
    enumerable: true,
    get: function get() {
      return _definition.isObjectType;
    }
  });
  Object.defineProperty(exports, "isInterfaceType", {
    enumerable: true,
    get: function get() {
      return _definition.isInterfaceType;
    }
  });
  Object.defineProperty(exports, "isUnionType", {
    enumerable: true,
    get: function get() {
      return _definition.isUnionType;
    }
  });
  Object.defineProperty(exports, "isEnumType", {
    enumerable: true,
    get: function get() {
      return _definition.isEnumType;
    }
  });
  Object.defineProperty(exports, "isInputObjectType", {
    enumerable: true,
    get: function get() {
      return _definition.isInputObjectType;
    }
  });
  Object.defineProperty(exports, "isListType", {
    enumerable: true,
    get: function get() {
      return _definition.isListType;
    }
  });
  Object.defineProperty(exports, "isNonNullType", {
    enumerable: true,
    get: function get() {
      return _definition.isNonNullType;
    }
  });
  Object.defineProperty(exports, "isInputType", {
    enumerable: true,
    get: function get() {
      return _definition.isInputType;
    }
  });
  Object.defineProperty(exports, "isOutputType", {
    enumerable: true,
    get: function get() {
      return _definition.isOutputType;
    }
  });
  Object.defineProperty(exports, "isLeafType", {
    enumerable: true,
    get: function get() {
      return _definition.isLeafType;
    }
  });
  Object.defineProperty(exports, "isCompositeType", {
    enumerable: true,
    get: function get() {
      return _definition.isCompositeType;
    }
  });
  Object.defineProperty(exports, "isAbstractType", {
    enumerable: true,
    get: function get() {
      return _definition.isAbstractType;
    }
  });
  Object.defineProperty(exports, "isWrappingType", {
    enumerable: true,
    get: function get() {
      return _definition.isWrappingType;
    }
  });
  Object.defineProperty(exports, "isNullableType", {
    enumerable: true,
    get: function get() {
      return _definition.isNullableType;
    }
  });
  Object.defineProperty(exports, "isNamedType", {
    enumerable: true,
    get: function get() {
      return _definition.isNamedType;
    }
  });
  Object.defineProperty(exports, "isRequiredArgument", {
    enumerable: true,
    get: function get() {
      return _definition.isRequiredArgument;
    }
  });
  Object.defineProperty(exports, "isRequiredInputField", {
    enumerable: true,
    get: function get() {
      return _definition.isRequiredInputField;
    }
  });
  Object.defineProperty(exports, "assertType", {
    enumerable: true,
    get: function get() {
      return _definition.assertType;
    }
  });
  Object.defineProperty(exports, "assertScalarType", {
    enumerable: true,
    get: function get() {
      return _definition.assertScalarType;
    }
  });
  Object.defineProperty(exports, "assertObjectType", {
    enumerable: true,
    get: function get() {
      return _definition.assertObjectType;
    }
  });
  Object.defineProperty(exports, "assertInterfaceType", {
    enumerable: true,
    get: function get() {
      return _definition.assertInterfaceType;
    }
  });
  Object.defineProperty(exports, "assertUnionType", {
    enumerable: true,
    get: function get() {
      return _definition.assertUnionType;
    }
  });
  Object.defineProperty(exports, "assertEnumType", {
    enumerable: true,
    get: function get() {
      return _definition.assertEnumType;
    }
  });
  Object.defineProperty(exports, "assertInputObjectType", {
    enumerable: true,
    get: function get() {
      return _definition.assertInputObjectType;
    }
  });
  Object.defineProperty(exports, "assertListType", {
    enumerable: true,
    get: function get() {
      return _definition.assertListType;
    }
  });
  Object.defineProperty(exports, "assertNonNullType", {
    enumerable: true,
    get: function get() {
      return _definition.assertNonNullType;
    }
  });
  Object.defineProperty(exports, "assertInputType", {
    enumerable: true,
    get: function get() {
      return _definition.assertInputType;
    }
  });
  Object.defineProperty(exports, "assertOutputType", {
    enumerable: true,
    get: function get() {
      return _definition.assertOutputType;
    }
  });
  Object.defineProperty(exports, "assertLeafType", {
    enumerable: true,
    get: function get() {
      return _definition.assertLeafType;
    }
  });
  Object.defineProperty(exports, "assertCompositeType", {
    enumerable: true,
    get: function get() {
      return _definition.assertCompositeType;
    }
  });
  Object.defineProperty(exports, "assertAbstractType", {
    enumerable: true,
    get: function get() {
      return _definition.assertAbstractType;
    }
  });
  Object.defineProperty(exports, "assertWrappingType", {
    enumerable: true,
    get: function get() {
      return _definition.assertWrappingType;
    }
  });
  Object.defineProperty(exports, "assertNullableType", {
    enumerable: true,
    get: function get() {
      return _definition.assertNullableType;
    }
  });
  Object.defineProperty(exports, "assertNamedType", {
    enumerable: true,
    get: function get() {
      return _definition.assertNamedType;
    }
  });
  Object.defineProperty(exports, "getNullableType", {
    enumerable: true,
    get: function get() {
      return _definition.getNullableType;
    }
  });
  Object.defineProperty(exports, "getNamedType", {
    enumerable: true,
    get: function get() {
      return _definition.getNamedType;
    }
  });
  Object.defineProperty(exports, "GraphQLScalarType", {
    enumerable: true,
    get: function get() {
      return _definition.GraphQLScalarType;
    }
  });
  Object.defineProperty(exports, "GraphQLObjectType", {
    enumerable: true,
    get: function get() {
      return _definition.GraphQLObjectType;
    }
  });
  Object.defineProperty(exports, "GraphQLInterfaceType", {
    enumerable: true,
    get: function get() {
      return _definition.GraphQLInterfaceType;
    }
  });
  Object.defineProperty(exports, "GraphQLUnionType", {
    enumerable: true,
    get: function get() {
      return _definition.GraphQLUnionType;
    }
  });
  Object.defineProperty(exports, "GraphQLEnumType", {
    enumerable: true,
    get: function get() {
      return _definition.GraphQLEnumType;
    }
  });
  Object.defineProperty(exports, "GraphQLInputObjectType", {
    enumerable: true,
    get: function get() {
      return _definition.GraphQLInputObjectType;
    }
  });
  Object.defineProperty(exports, "GraphQLList", {
    enumerable: true,
    get: function get() {
      return _definition.GraphQLList;
    }
  });
  Object.defineProperty(exports, "GraphQLNonNull", {
    enumerable: true,
    get: function get() {
      return _definition.GraphQLNonNull;
    }
  });
  Object.defineProperty(exports, "isDirective", {
    enumerable: true,
    get: function get() {
      return _directives.isDirective;
    }
  });
  Object.defineProperty(exports, "assertDirective", {
    enumerable: true,
    get: function get() {
      return _directives.assertDirective;
    }
  });
  Object.defineProperty(exports, "GraphQLDirective", {
    enumerable: true,
    get: function get() {
      return _directives.GraphQLDirective;
    }
  });
  Object.defineProperty(exports, "isSpecifiedDirective", {
    enumerable: true,
    get: function get() {
      return _directives.isSpecifiedDirective;
    }
  });
  Object.defineProperty(exports, "specifiedDirectives", {
    enumerable: true,
    get: function get() {
      return _directives.specifiedDirectives;
    }
  });
  Object.defineProperty(exports, "GraphQLIncludeDirective", {
    enumerable: true,
    get: function get() {
      return _directives.GraphQLIncludeDirective;
    }
  });
  Object.defineProperty(exports, "GraphQLSkipDirective", {
    enumerable: true,
    get: function get() {
      return _directives.GraphQLSkipDirective;
    }
  });
  Object.defineProperty(exports, "GraphQLDeprecatedDirective", {
    enumerable: true,
    get: function get() {
      return _directives.GraphQLDeprecatedDirective;
    }
  });
  Object.defineProperty(exports, "GraphQLSpecifiedByDirective", {
    enumerable: true,
    get: function get() {
      return _directives.GraphQLSpecifiedByDirective;
    }
  });
  Object.defineProperty(exports, "DEFAULT_DEPRECATION_REASON", {
    enumerable: true,
    get: function get() {
      return _directives.DEFAULT_DEPRECATION_REASON;
    }
  });
  Object.defineProperty(exports, "isSpecifiedScalarType", {
    enumerable: true,
    get: function get() {
      return _scalars.isSpecifiedScalarType;
    }
  });
  Object.defineProperty(exports, "specifiedScalarTypes", {
    enumerable: true,
    get: function get() {
      return _scalars.specifiedScalarTypes;
    }
  });
  Object.defineProperty(exports, "GraphQLInt", {
    enumerable: true,
    get: function get() {
      return _scalars.GraphQLInt;
    }
  });
  Object.defineProperty(exports, "GraphQLFloat", {
    enumerable: true,
    get: function get() {
      return _scalars.GraphQLFloat;
    }
  });
  Object.defineProperty(exports, "GraphQLString", {
    enumerable: true,
    get: function get() {
      return _scalars.GraphQLString;
    }
  });
  Object.defineProperty(exports, "GraphQLBoolean", {
    enumerable: true,
    get: function get() {
      return _scalars.GraphQLBoolean;
    }
  });
  Object.defineProperty(exports, "GraphQLID", {
    enumerable: true,
    get: function get() {
      return _scalars.GraphQLID;
    }
  });
  Object.defineProperty(exports, "isIntrospectionType", {
    enumerable: true,
    get: function get() {
      return _introspection.isIntrospectionType;
    }
  });
  Object.defineProperty(exports, "introspectionTypes", {
    enumerable: true,
    get: function get() {
      return _introspection.introspectionTypes;
    }
  });
  Object.defineProperty(exports, "__Schema", {
    enumerable: true,
    get: function get() {
      return _introspection.__Schema;
    }
  });
  Object.defineProperty(exports, "__Directive", {
    enumerable: true,
    get: function get() {
      return _introspection.__Directive;
    }
  });
  Object.defineProperty(exports, "__DirectiveLocation", {
    enumerable: true,
    get: function get() {
      return _introspection.__DirectiveLocation;
    }
  });
  Object.defineProperty(exports, "__Type", {
    enumerable: true,
    get: function get() {
      return _introspection.__Type;
    }
  });
  Object.defineProperty(exports, "__Field", {
    enumerable: true,
    get: function get() {
      return _introspection.__Field;
    }
  });
  Object.defineProperty(exports, "__InputValue", {
    enumerable: true,
    get: function get() {
      return _introspection.__InputValue;
    }
  });
  Object.defineProperty(exports, "__EnumValue", {
    enumerable: true,
    get: function get() {
      return _introspection.__EnumValue;
    }
  });
  Object.defineProperty(exports, "__TypeKind", {
    enumerable: true,
    get: function get() {
      return _introspection.__TypeKind;
    }
  });
  Object.defineProperty(exports, "TypeKind", {
    enumerable: true,
    get: function get() {
      return _introspection.TypeKind;
    }
  });
  Object.defineProperty(exports, "SchemaMetaFieldDef", {
    enumerable: true,
    get: function get() {
      return _introspection.SchemaMetaFieldDef;
    }
  });
  Object.defineProperty(exports, "TypeMetaFieldDef", {
    enumerable: true,
    get: function get() {
      return _introspection.TypeMetaFieldDef;
    }
  });
  Object.defineProperty(exports, "TypeNameMetaFieldDef", {
    enumerable: true,
    get: function get() {
      return _introspection.TypeNameMetaFieldDef;
    }
  });
  Object.defineProperty(exports, "validateSchema", {
    enumerable: true,
    get: function get() {
      return _validate.validateSchema;
    }
  });
  Object.defineProperty(exports, "assertValidSchema", {
    enumerable: true,
    get: function get() {
      return _validate.assertValidSchema;
    }
  });

  var _schema = schema;

  var _definition = definition;

  var _directives = directives;

  var _scalars = scalars;

  var _introspection = introspection;

  var _validate = validate$1;
  }(type));

  var language = {};

  (function (exports) {

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, "Source", {
    enumerable: true,
    get: function get() {
      return _source.Source;
    }
  });
  Object.defineProperty(exports, "getLocation", {
    enumerable: true,
    get: function get() {
      return _location.getLocation;
    }
  });
  Object.defineProperty(exports, "printLocation", {
    enumerable: true,
    get: function get() {
      return _printLocation.printLocation;
    }
  });
  Object.defineProperty(exports, "printSourceLocation", {
    enumerable: true,
    get: function get() {
      return _printLocation.printSourceLocation;
    }
  });
  Object.defineProperty(exports, "Kind", {
    enumerable: true,
    get: function get() {
      return _kinds.Kind;
    }
  });
  Object.defineProperty(exports, "TokenKind", {
    enumerable: true,
    get: function get() {
      return _tokenKind.TokenKind;
    }
  });
  Object.defineProperty(exports, "Lexer", {
    enumerable: true,
    get: function get() {
      return _lexer.Lexer;
    }
  });
  Object.defineProperty(exports, "parse", {
    enumerable: true,
    get: function get() {
      return _parser.parse;
    }
  });
  Object.defineProperty(exports, "parseValue", {
    enumerable: true,
    get: function get() {
      return _parser.parseValue;
    }
  });
  Object.defineProperty(exports, "parseType", {
    enumerable: true,
    get: function get() {
      return _parser.parseType;
    }
  });
  Object.defineProperty(exports, "print", {
    enumerable: true,
    get: function get() {
      return _printer.print;
    }
  });
  Object.defineProperty(exports, "visit", {
    enumerable: true,
    get: function get() {
      return _visitor.visit;
    }
  });
  Object.defineProperty(exports, "visitInParallel", {
    enumerable: true,
    get: function get() {
      return _visitor.visitInParallel;
    }
  });
  Object.defineProperty(exports, "getVisitFn", {
    enumerable: true,
    get: function get() {
      return _visitor.getVisitFn;
    }
  });
  Object.defineProperty(exports, "BREAK", {
    enumerable: true,
    get: function get() {
      return _visitor.BREAK;
    }
  });
  Object.defineProperty(exports, "Location", {
    enumerable: true,
    get: function get() {
      return _ast.Location;
    }
  });
  Object.defineProperty(exports, "Token", {
    enumerable: true,
    get: function get() {
      return _ast.Token;
    }
  });
  Object.defineProperty(exports, "isDefinitionNode", {
    enumerable: true,
    get: function get() {
      return _predicates.isDefinitionNode;
    }
  });
  Object.defineProperty(exports, "isExecutableDefinitionNode", {
    enumerable: true,
    get: function get() {
      return _predicates.isExecutableDefinitionNode;
    }
  });
  Object.defineProperty(exports, "isSelectionNode", {
    enumerable: true,
    get: function get() {
      return _predicates.isSelectionNode;
    }
  });
  Object.defineProperty(exports, "isValueNode", {
    enumerable: true,
    get: function get() {
      return _predicates.isValueNode;
    }
  });
  Object.defineProperty(exports, "isTypeNode", {
    enumerable: true,
    get: function get() {
      return _predicates.isTypeNode;
    }
  });
  Object.defineProperty(exports, "isTypeSystemDefinitionNode", {
    enumerable: true,
    get: function get() {
      return _predicates.isTypeSystemDefinitionNode;
    }
  });
  Object.defineProperty(exports, "isTypeDefinitionNode", {
    enumerable: true,
    get: function get() {
      return _predicates.isTypeDefinitionNode;
    }
  });
  Object.defineProperty(exports, "isTypeSystemExtensionNode", {
    enumerable: true,
    get: function get() {
      return _predicates.isTypeSystemExtensionNode;
    }
  });
  Object.defineProperty(exports, "isTypeExtensionNode", {
    enumerable: true,
    get: function get() {
      return _predicates.isTypeExtensionNode;
    }
  });
  Object.defineProperty(exports, "DirectiveLocation", {
    enumerable: true,
    get: function get() {
      return _directiveLocation.DirectiveLocation;
    }
  });

  var _source = source;

  var _location = location$1;

  var _printLocation = printLocation$1;

  var _kinds = kinds;

  var _tokenKind = tokenKind;

  var _lexer = lexer;

  var _parser = parser;

  var _printer = printer;

  var _visitor = visitor;

  var _ast = ast;

  var _predicates = predicates;

  var _directiveLocation = directiveLocation;
  }(language));

  var execution = {};

  (function (exports) {

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, "responsePathAsArray", {
    enumerable: true,
    get: function get() {
      return _Path.pathToArray;
    }
  });
  Object.defineProperty(exports, "execute", {
    enumerable: true,
    get: function get() {
      return _execute.execute;
    }
  });
  Object.defineProperty(exports, "executeSync", {
    enumerable: true,
    get: function get() {
      return _execute.executeSync;
    }
  });
  Object.defineProperty(exports, "defaultFieldResolver", {
    enumerable: true,
    get: function get() {
      return _execute.defaultFieldResolver;
    }
  });
  Object.defineProperty(exports, "defaultTypeResolver", {
    enumerable: true,
    get: function get() {
      return _execute.defaultTypeResolver;
    }
  });
  Object.defineProperty(exports, "getDirectiveValues", {
    enumerable: true,
    get: function get() {
      return _values.getDirectiveValues;
    }
  });

  var _Path = Path;

  var _execute = execute$1;

  var _values = values;
  }(execution));

  var subscription = {};

  var subscribe$1 = {};

  var isAsyncIterable$1 = {};

  Object.defineProperty(isAsyncIterable$1, "__esModule", {
    value: true
  });
  isAsyncIterable$1.default = isAsyncIterable;

  var _symbols$1 = symbols;

  // eslint-disable-next-line no-redeclare
  function isAsyncIterable(maybeAsyncIterable) {
    return typeof (maybeAsyncIterable === null || maybeAsyncIterable === void 0 ? void 0 : maybeAsyncIterable[_symbols$1.SYMBOL_ASYNC_ITERATOR]) === 'function';
  }

  var mapAsyncIterator$1 = {};

  Object.defineProperty(mapAsyncIterator$1, "__esModule", {
    value: true
  });
  mapAsyncIterator$1.default = mapAsyncIterator;

  var _symbols = symbols;

  function _defineProperty$5(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

  /**
   * Given an AsyncIterable and a callback function, return an AsyncIterator
   * which produces values mapped via calling the callback function.
   */
  function mapAsyncIterator(iterable, callback, rejectCallback) {
    // $FlowFixMe[prop-missing]
    var iteratorMethod = iterable[_symbols.SYMBOL_ASYNC_ITERATOR];
    var iterator = iteratorMethod.call(iterable);
    var $return;
    var abruptClose;

    if (typeof iterator.return === 'function') {
      $return = iterator.return;

      abruptClose = function abruptClose(error) {
        var rethrow = function rethrow() {
          return Promise.reject(error);
        };

        return $return.call(iterator).then(rethrow, rethrow);
      };
    }

    function mapResult(result) {
      return result.done ? result : asyncMapValue(result.value, callback).then(iteratorResult, abruptClose);
    }

    var mapReject;

    if (rejectCallback) {
      // Capture rejectCallback to ensure it cannot be null.
      var reject = rejectCallback;

      mapReject = function mapReject(error) {
        return asyncMapValue(error, reject).then(iteratorResult, abruptClose);
      };
    }
    /* TODO: Flow doesn't support symbols as keys:
       https://github.com/facebook/flow/issues/3258 */


    return _defineProperty$5({
      next: function next() {
        return iterator.next().then(mapResult, mapReject);
      },
      return: function _return() {
        return $return ? $return.call(iterator).then(mapResult, mapReject) : Promise.resolve({
          value: undefined,
          done: true
        });
      },
      throw: function _throw(error) {
        if (typeof iterator.throw === 'function') {
          return iterator.throw(error).then(mapResult, mapReject);
        }

        return Promise.reject(error).catch(abruptClose);
      }
    }, _symbols.SYMBOL_ASYNC_ITERATOR, function () {
      return this;
    });
  }

  function asyncMapValue(value, callback) {
    return new Promise(function (resolve) {
      return resolve(callback(value));
    });
  }

  function iteratorResult(value) {
    return {
      value: value,
      done: false
    };
  }

  Object.defineProperty(subscribe$1, "__esModule", {
    value: true
  });
  subscribe$1.subscribe = subscribe;
  subscribe$1.createSourceEventStream = createSourceEventStream;

  var _inspect$5 = _interopRequireDefault$9(inspect$1);

  var _isAsyncIterable = _interopRequireDefault$9(isAsyncIterable$1);

  var _Path = Path;

  var _GraphQLError$2 = GraphQLError$1;

  var _locatedError = locatedError$1;

  var _values$1 = values;

  var _execute$1 = execute$1;

  var _getOperationRootType = getOperationRootType$1;

  var _mapAsyncIterator = _interopRequireDefault$9(mapAsyncIterator$1);

  function _interopRequireDefault$9(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function subscribe(argsOrSchema, document, rootValue, contextValue, variableValues, operationName, fieldResolver, subscribeFieldResolver) {
    /* eslint-enable no-redeclare */
    // Extract arguments from object args if provided.
    return arguments.length === 1 ? subscribeImpl(argsOrSchema) : subscribeImpl({
      schema: argsOrSchema,
      document: document,
      rootValue: rootValue,
      contextValue: contextValue,
      variableValues: variableValues,
      operationName: operationName,
      fieldResolver: fieldResolver,
      subscribeFieldResolver: subscribeFieldResolver
    });
  }
  /**
   * This function checks if the error is a GraphQLError. If it is, report it as
   * an ExecutionResult, containing only errors and no data. Otherwise treat the
   * error as a system-class error and re-throw it.
   */


  function reportGraphQLError(error) {
    if (error instanceof _GraphQLError$2.GraphQLError) {
      return {
        errors: [error]
      };
    }

    throw error;
  }

  function subscribeImpl(args) {
    var schema = args.schema,
        document = args.document,
        rootValue = args.rootValue,
        contextValue = args.contextValue,
        variableValues = args.variableValues,
        operationName = args.operationName,
        fieldResolver = args.fieldResolver,
        subscribeFieldResolver = args.subscribeFieldResolver;
    var sourcePromise = createSourceEventStream(schema, document, rootValue, contextValue, variableValues, operationName, subscribeFieldResolver); // For each payload yielded from a subscription, map it over the normal
    // GraphQL `execute` function, with `payload` as the rootValue.
    // This implements the "MapSourceToResponseEvent" algorithm described in
    // the GraphQL specification. The `execute` function provides the
    // "ExecuteSubscriptionEvent" algorithm, as it is nearly identical to the
    // "ExecuteQuery" algorithm, for which `execute` is also used.

    var mapSourceToResponse = function mapSourceToResponse(payload) {
      return (0, _execute$1.execute)({
        schema: schema,
        document: document,
        rootValue: payload,
        contextValue: contextValue,
        variableValues: variableValues,
        operationName: operationName,
        fieldResolver: fieldResolver
      });
    }; // Resolve the Source Stream, then map every source value to a
    // ExecutionResult value as described above.


    return sourcePromise.then(function (resultOrStream) {
      return (// Note: Flow can't refine isAsyncIterable, so explicit casts are used.
        (0, _isAsyncIterable.default)(resultOrStream) ? (0, _mapAsyncIterator.default)(resultOrStream, mapSourceToResponse, reportGraphQLError) : resultOrStream
      );
    });
  }
  /**
   * Implements the "CreateSourceEventStream" algorithm described in the
   * GraphQL specification, resolving the subscription source event stream.
   *
   * Returns a Promise which resolves to either an AsyncIterable (if successful)
   * or an ExecutionResult (error). The promise will be rejected if the schema or
   * other arguments to this function are invalid, or if the resolved event stream
   * is not an async iterable.
   *
   * If the client-provided arguments to this function do not result in a
   * compliant subscription, a GraphQL Response (ExecutionResult) with
   * descriptive errors and no data will be returned.
   *
   * If the the source stream could not be created due to faulty subscription
   * resolver logic or underlying systems, the promise will resolve to a single
   * ExecutionResult containing `errors` and no `data`.
   *
   * If the operation succeeded, the promise resolves to the AsyncIterable for the
   * event stream returned by the resolver.
   *
   * A Source Event Stream represents a sequence of events, each of which triggers
   * a GraphQL execution for that event.
   *
   * This may be useful when hosting the stateful subscription service in a
   * different process or machine than the stateless GraphQL execution engine,
   * or otherwise separating these two steps. For more on this, see the
   * "Supporting Subscriptions at Scale" information in the GraphQL specification.
   */


  function createSourceEventStream(schema, document, rootValue, contextValue, variableValues, operationName, fieldResolver) {
    // If arguments are missing or incorrectly typed, this is an internal
    // developer mistake which should throw an early error.
    (0, _execute$1.assertValidExecutionArguments)(schema, document, variableValues);
    return new Promise(function (resolve) {
      // If a valid context cannot be created due to incorrect arguments,
      // this will throw an error.
      var exeContext = (0, _execute$1.buildExecutionContext)(schema, document, rootValue, contextValue, variableValues, operationName, fieldResolver);
      resolve( // Return early errors if execution context failed.
      Array.isArray(exeContext) ? {
        errors: exeContext
      } : executeSubscription(exeContext));
    }).catch(reportGraphQLError);
  }

  function executeSubscription(exeContext) {
    var schema = exeContext.schema,
        operation = exeContext.operation,
        variableValues = exeContext.variableValues,
        rootValue = exeContext.rootValue;
    var type = (0, _getOperationRootType.getOperationRootType)(schema, operation);
    var fields = (0, _execute$1.collectFields)(exeContext, type, operation.selectionSet, Object.create(null), Object.create(null));
    var responseNames = Object.keys(fields);
    var responseName = responseNames[0];
    var fieldNodes = fields[responseName];
    var fieldNode = fieldNodes[0];
    var fieldName = fieldNode.name.value;
    var fieldDef = (0, _execute$1.getFieldDef)(schema, type, fieldName);

    if (!fieldDef) {
      throw new _GraphQLError$2.GraphQLError("The subscription field \"".concat(fieldName, "\" is not defined."), fieldNodes);
    }

    var path = (0, _Path.addPath)(undefined, responseName, type.name);
    var info = (0, _execute$1.buildResolveInfo)(exeContext, fieldDef, fieldNodes, type, path); // Coerce to Promise for easier error handling and consistent return type.

    return new Promise(function (resolveResult) {
      var _fieldDef$subscribe;

      // Implements the "ResolveFieldEventStream" algorithm from GraphQL specification.
      // It differs from "ResolveFieldValue" due to providing a different `resolveFn`.
      // Build a JS object of arguments from the field.arguments AST, using the
      // variables scope to fulfill any variable references.
      var args = (0, _values$1.getArgumentValues)(fieldDef, fieldNodes[0], variableValues); // The resolve function's optional third argument is a context value that
      // is provided to every resolve function within an execution. It is commonly
      // used to represent an authenticated user, or request-specific caches.

      var contextValue = exeContext.contextValue; // Call the `subscribe()` resolver or the default resolver to produce an
      // AsyncIterable yielding raw payloads.

      var resolveFn = (_fieldDef$subscribe = fieldDef.subscribe) !== null && _fieldDef$subscribe !== void 0 ? _fieldDef$subscribe : exeContext.fieldResolver;
      resolveResult(resolveFn(rootValue, args, contextValue, info));
    }).then(function (eventStream) {
      if (eventStream instanceof Error) {
        throw (0, _locatedError.locatedError)(eventStream, fieldNodes, (0, _Path.pathToArray)(path));
      } // Assert field returned an event stream, otherwise yield an error.


      if (!(0, _isAsyncIterable.default)(eventStream)) {
        throw new Error('Subscription field must return Async Iterable. ' + "Received: ".concat((0, _inspect$5.default)(eventStream), "."));
      }

      return eventStream;
    }, function (error) {
      throw (0, _locatedError.locatedError)(error, fieldNodes, (0, _Path.pathToArray)(path));
    });
  }

  (function (exports) {

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, "subscribe", {
    enumerable: true,
    get: function get() {
      return _subscribe.subscribe;
    }
  });
  Object.defineProperty(exports, "createSourceEventStream", {
    enumerable: true,
    get: function get() {
      return _subscribe.createSourceEventStream;
    }
  });

  var _subscribe = subscribe$1;
  }(subscription));

  var validation = {};

  var NoDeprecatedCustomRule$1 = {};

  Object.defineProperty(NoDeprecatedCustomRule$1, "__esModule", {
    value: true
  });
  NoDeprecatedCustomRule$1.NoDeprecatedCustomRule = NoDeprecatedCustomRule;

  var _invariant$5 = _interopRequireDefault$8(invariant$1);

  var _GraphQLError$1 = GraphQLError$1;

  var _definition$6 = definition;

  function _interopRequireDefault$8(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  /**
   * No deprecated
   *
   * A GraphQL document is only valid if all selected fields and all used enum values have not been
   * deprecated.
   *
   * Note: This rule is optional and is not part of the Validation section of the GraphQL
   * Specification. The main purpose of this rule is detection of deprecated usages and not
   * necessarily to forbid their use when querying a service.
   */
  function NoDeprecatedCustomRule(context) {
    return {
      Field: function Field(node) {
        var fieldDef = context.getFieldDef();
        var deprecationReason = fieldDef === null || fieldDef === void 0 ? void 0 : fieldDef.deprecationReason;

        if (fieldDef && deprecationReason != null) {
          var parentType = context.getParentType();
          parentType != null || (0, _invariant$5.default)(0);
          context.reportError(new _GraphQLError$1.GraphQLError("The field ".concat(parentType.name, ".").concat(fieldDef.name, " is deprecated. ").concat(deprecationReason), node));
        }
      },
      Argument: function Argument(node) {
        var argDef = context.getArgument();
        var deprecationReason = argDef === null || argDef === void 0 ? void 0 : argDef.deprecationReason;

        if (argDef && deprecationReason != null) {
          var directiveDef = context.getDirective();

          if (directiveDef != null) {
            context.reportError(new _GraphQLError$1.GraphQLError("Directive \"@".concat(directiveDef.name, "\" argument \"").concat(argDef.name, "\" is deprecated. ").concat(deprecationReason), node));
          } else {
            var parentType = context.getParentType();
            var fieldDef = context.getFieldDef();
            parentType != null && fieldDef != null || (0, _invariant$5.default)(0);
            context.reportError(new _GraphQLError$1.GraphQLError("Field \"".concat(parentType.name, ".").concat(fieldDef.name, "\" argument \"").concat(argDef.name, "\" is deprecated. ").concat(deprecationReason), node));
          }
        }
      },
      ObjectField: function ObjectField(node) {
        var inputObjectDef = (0, _definition$6.getNamedType)(context.getParentInputType());

        if ((0, _definition$6.isInputObjectType)(inputObjectDef)) {
          var inputFieldDef = inputObjectDef.getFields()[node.name.value]; // flowlint-next-line unnecessary-optional-chain:off

          var deprecationReason = inputFieldDef === null || inputFieldDef === void 0 ? void 0 : inputFieldDef.deprecationReason;

          if (deprecationReason != null) {
            context.reportError(new _GraphQLError$1.GraphQLError("The input field ".concat(inputObjectDef.name, ".").concat(inputFieldDef.name, " is deprecated. ").concat(deprecationReason), node));
          }
        }
      },
      EnumValue: function EnumValue(node) {
        var enumValueDef = context.getEnumValue();
        var deprecationReason = enumValueDef === null || enumValueDef === void 0 ? void 0 : enumValueDef.deprecationReason;

        if (enumValueDef && deprecationReason != null) {
          var enumTypeDef = (0, _definition$6.getNamedType)(context.getInputType());
          enumTypeDef != null || (0, _invariant$5.default)(0);
          context.reportError(new _GraphQLError$1.GraphQLError("The enum value \"".concat(enumTypeDef.name, ".").concat(enumValueDef.name, "\" is deprecated. ").concat(deprecationReason), node));
        }
      }
    };
  }

  var NoSchemaIntrospectionCustomRule$1 = {};

  Object.defineProperty(NoSchemaIntrospectionCustomRule$1, "__esModule", {
    value: true
  });
  NoSchemaIntrospectionCustomRule$1.NoSchemaIntrospectionCustomRule = NoSchemaIntrospectionCustomRule;

  var _GraphQLError = GraphQLError$1;

  var _definition$5 = definition;

  var _introspection$4 = introspection;

  /**
   * Prohibit introspection queries
   *
   * A GraphQL document is only valid if all fields selected are not fields that
   * return an introspection type.
   *
   * Note: This rule is optional and is not part of the Validation section of the
   * GraphQL Specification. This rule effectively disables introspection, which
   * does not reflect best practices and should only be done if absolutely necessary.
   */
  function NoSchemaIntrospectionCustomRule(context) {
    return {
      Field: function Field(node) {
        var type = (0, _definition$5.getNamedType)(context.getType());

        if (type && (0, _introspection$4.isIntrospectionType)(type)) {
          context.reportError(new _GraphQLError.GraphQLError("GraphQL introspection has been disabled, but the requested query contained the field \"".concat(node.name.value, "\"."), node));
        }
      }
    };
  }

  (function (exports) {

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, "validate", {
    enumerable: true,
    get: function get() {
      return _validate.validate;
    }
  });
  Object.defineProperty(exports, "ValidationContext", {
    enumerable: true,
    get: function get() {
      return _ValidationContext.ValidationContext;
    }
  });
  Object.defineProperty(exports, "specifiedRules", {
    enumerable: true,
    get: function get() {
      return _specifiedRules.specifiedRules;
    }
  });
  Object.defineProperty(exports, "ExecutableDefinitionsRule", {
    enumerable: true,
    get: function get() {
      return _ExecutableDefinitionsRule.ExecutableDefinitionsRule;
    }
  });
  Object.defineProperty(exports, "FieldsOnCorrectTypeRule", {
    enumerable: true,
    get: function get() {
      return _FieldsOnCorrectTypeRule.FieldsOnCorrectTypeRule;
    }
  });
  Object.defineProperty(exports, "FragmentsOnCompositeTypesRule", {
    enumerable: true,
    get: function get() {
      return _FragmentsOnCompositeTypesRule.FragmentsOnCompositeTypesRule;
    }
  });
  Object.defineProperty(exports, "KnownArgumentNamesRule", {
    enumerable: true,
    get: function get() {
      return _KnownArgumentNamesRule.KnownArgumentNamesRule;
    }
  });
  Object.defineProperty(exports, "KnownDirectivesRule", {
    enumerable: true,
    get: function get() {
      return _KnownDirectivesRule.KnownDirectivesRule;
    }
  });
  Object.defineProperty(exports, "KnownFragmentNamesRule", {
    enumerable: true,
    get: function get() {
      return _KnownFragmentNamesRule.KnownFragmentNamesRule;
    }
  });
  Object.defineProperty(exports, "KnownTypeNamesRule", {
    enumerable: true,
    get: function get() {
      return _KnownTypeNamesRule.KnownTypeNamesRule;
    }
  });
  Object.defineProperty(exports, "LoneAnonymousOperationRule", {
    enumerable: true,
    get: function get() {
      return _LoneAnonymousOperationRule.LoneAnonymousOperationRule;
    }
  });
  Object.defineProperty(exports, "NoFragmentCyclesRule", {
    enumerable: true,
    get: function get() {
      return _NoFragmentCyclesRule.NoFragmentCyclesRule;
    }
  });
  Object.defineProperty(exports, "NoUndefinedVariablesRule", {
    enumerable: true,
    get: function get() {
      return _NoUndefinedVariablesRule.NoUndefinedVariablesRule;
    }
  });
  Object.defineProperty(exports, "NoUnusedFragmentsRule", {
    enumerable: true,
    get: function get() {
      return _NoUnusedFragmentsRule.NoUnusedFragmentsRule;
    }
  });
  Object.defineProperty(exports, "NoUnusedVariablesRule", {
    enumerable: true,
    get: function get() {
      return _NoUnusedVariablesRule.NoUnusedVariablesRule;
    }
  });
  Object.defineProperty(exports, "OverlappingFieldsCanBeMergedRule", {
    enumerable: true,
    get: function get() {
      return _OverlappingFieldsCanBeMergedRule.OverlappingFieldsCanBeMergedRule;
    }
  });
  Object.defineProperty(exports, "PossibleFragmentSpreadsRule", {
    enumerable: true,
    get: function get() {
      return _PossibleFragmentSpreadsRule.PossibleFragmentSpreadsRule;
    }
  });
  Object.defineProperty(exports, "ProvidedRequiredArgumentsRule", {
    enumerable: true,
    get: function get() {
      return _ProvidedRequiredArgumentsRule.ProvidedRequiredArgumentsRule;
    }
  });
  Object.defineProperty(exports, "ScalarLeafsRule", {
    enumerable: true,
    get: function get() {
      return _ScalarLeafsRule.ScalarLeafsRule;
    }
  });
  Object.defineProperty(exports, "SingleFieldSubscriptionsRule", {
    enumerable: true,
    get: function get() {
      return _SingleFieldSubscriptionsRule.SingleFieldSubscriptionsRule;
    }
  });
  Object.defineProperty(exports, "UniqueArgumentNamesRule", {
    enumerable: true,
    get: function get() {
      return _UniqueArgumentNamesRule.UniqueArgumentNamesRule;
    }
  });
  Object.defineProperty(exports, "UniqueDirectivesPerLocationRule", {
    enumerable: true,
    get: function get() {
      return _UniqueDirectivesPerLocationRule.UniqueDirectivesPerLocationRule;
    }
  });
  Object.defineProperty(exports, "UniqueFragmentNamesRule", {
    enumerable: true,
    get: function get() {
      return _UniqueFragmentNamesRule.UniqueFragmentNamesRule;
    }
  });
  Object.defineProperty(exports, "UniqueInputFieldNamesRule", {
    enumerable: true,
    get: function get() {
      return _UniqueInputFieldNamesRule.UniqueInputFieldNamesRule;
    }
  });
  Object.defineProperty(exports, "UniqueOperationNamesRule", {
    enumerable: true,
    get: function get() {
      return _UniqueOperationNamesRule.UniqueOperationNamesRule;
    }
  });
  Object.defineProperty(exports, "UniqueVariableNamesRule", {
    enumerable: true,
    get: function get() {
      return _UniqueVariableNamesRule.UniqueVariableNamesRule;
    }
  });
  Object.defineProperty(exports, "ValuesOfCorrectTypeRule", {
    enumerable: true,
    get: function get() {
      return _ValuesOfCorrectTypeRule.ValuesOfCorrectTypeRule;
    }
  });
  Object.defineProperty(exports, "VariablesAreInputTypesRule", {
    enumerable: true,
    get: function get() {
      return _VariablesAreInputTypesRule.VariablesAreInputTypesRule;
    }
  });
  Object.defineProperty(exports, "VariablesInAllowedPositionRule", {
    enumerable: true,
    get: function get() {
      return _VariablesInAllowedPositionRule.VariablesInAllowedPositionRule;
    }
  });
  Object.defineProperty(exports, "LoneSchemaDefinitionRule", {
    enumerable: true,
    get: function get() {
      return _LoneSchemaDefinitionRule.LoneSchemaDefinitionRule;
    }
  });
  Object.defineProperty(exports, "UniqueOperationTypesRule", {
    enumerable: true,
    get: function get() {
      return _UniqueOperationTypesRule.UniqueOperationTypesRule;
    }
  });
  Object.defineProperty(exports, "UniqueTypeNamesRule", {
    enumerable: true,
    get: function get() {
      return _UniqueTypeNamesRule.UniqueTypeNamesRule;
    }
  });
  Object.defineProperty(exports, "UniqueEnumValueNamesRule", {
    enumerable: true,
    get: function get() {
      return _UniqueEnumValueNamesRule.UniqueEnumValueNamesRule;
    }
  });
  Object.defineProperty(exports, "UniqueFieldDefinitionNamesRule", {
    enumerable: true,
    get: function get() {
      return _UniqueFieldDefinitionNamesRule.UniqueFieldDefinitionNamesRule;
    }
  });
  Object.defineProperty(exports, "UniqueDirectiveNamesRule", {
    enumerable: true,
    get: function get() {
      return _UniqueDirectiveNamesRule.UniqueDirectiveNamesRule;
    }
  });
  Object.defineProperty(exports, "PossibleTypeExtensionsRule", {
    enumerable: true,
    get: function get() {
      return _PossibleTypeExtensionsRule.PossibleTypeExtensionsRule;
    }
  });
  Object.defineProperty(exports, "NoDeprecatedCustomRule", {
    enumerable: true,
    get: function get() {
      return _NoDeprecatedCustomRule.NoDeprecatedCustomRule;
    }
  });
  Object.defineProperty(exports, "NoSchemaIntrospectionCustomRule", {
    enumerable: true,
    get: function get() {
      return _NoSchemaIntrospectionCustomRule.NoSchemaIntrospectionCustomRule;
    }
  });

  var _validate = validate$2;

  var _ValidationContext = ValidationContext$1;

  var _specifiedRules = specifiedRules$1;

  var _ExecutableDefinitionsRule = ExecutableDefinitionsRule$1;

  var _FieldsOnCorrectTypeRule = FieldsOnCorrectTypeRule$1;

  var _FragmentsOnCompositeTypesRule = FragmentsOnCompositeTypesRule$1;

  var _KnownArgumentNamesRule = KnownArgumentNamesRule$1;

  var _KnownDirectivesRule = KnownDirectivesRule$1;

  var _KnownFragmentNamesRule = KnownFragmentNamesRule$1;

  var _KnownTypeNamesRule = KnownTypeNamesRule$1;

  var _LoneAnonymousOperationRule = LoneAnonymousOperationRule$1;

  var _NoFragmentCyclesRule = NoFragmentCyclesRule$1;

  var _NoUndefinedVariablesRule = NoUndefinedVariablesRule$1;

  var _NoUnusedFragmentsRule = NoUnusedFragmentsRule$1;

  var _NoUnusedVariablesRule = NoUnusedVariablesRule$1;

  var _OverlappingFieldsCanBeMergedRule = OverlappingFieldsCanBeMergedRule$1;

  var _PossibleFragmentSpreadsRule = PossibleFragmentSpreadsRule$1;

  var _ProvidedRequiredArgumentsRule = ProvidedRequiredArgumentsRule$1;

  var _ScalarLeafsRule = ScalarLeafsRule$1;

  var _SingleFieldSubscriptionsRule = SingleFieldSubscriptionsRule$1;

  var _UniqueArgumentNamesRule = UniqueArgumentNamesRule$1;

  var _UniqueDirectivesPerLocationRule = UniqueDirectivesPerLocationRule$1;

  var _UniqueFragmentNamesRule = UniqueFragmentNamesRule$1;

  var _UniqueInputFieldNamesRule = UniqueInputFieldNamesRule$1;

  var _UniqueOperationNamesRule = UniqueOperationNamesRule$1;

  var _UniqueVariableNamesRule = UniqueVariableNamesRule$1;

  var _ValuesOfCorrectTypeRule = ValuesOfCorrectTypeRule$1;

  var _VariablesAreInputTypesRule = VariablesAreInputTypesRule$1;

  var _VariablesInAllowedPositionRule = VariablesInAllowedPositionRule$1;

  var _LoneSchemaDefinitionRule = LoneSchemaDefinitionRule$1;

  var _UniqueOperationTypesRule = UniqueOperationTypesRule$1;

  var _UniqueTypeNamesRule = UniqueTypeNamesRule$1;

  var _UniqueEnumValueNamesRule = UniqueEnumValueNamesRule$1;

  var _UniqueFieldDefinitionNamesRule = UniqueFieldDefinitionNamesRule$1;

  var _UniqueDirectiveNamesRule = UniqueDirectiveNamesRule$1;

  var _PossibleTypeExtensionsRule = PossibleTypeExtensionsRule$1;

  var _NoDeprecatedCustomRule = NoDeprecatedCustomRule$1;

  var _NoSchemaIntrospectionCustomRule = NoSchemaIntrospectionCustomRule$1;
  }(validation));

  var error = {};

  var formatError$1 = {};

  Object.defineProperty(formatError$1, "__esModule", {
    value: true
  });
  formatError$1.formatError = formatError;

  var _devAssert$3 = _interopRequireDefault$7(devAssert$1);

  function _interopRequireDefault$7(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  /**
   * Given a GraphQLError, format it according to the rules described by the
   * Response Format, Errors section of the GraphQL Specification.
   */
  function formatError(error) {
    var _error$message;

    error || (0, _devAssert$3.default)(0, 'Received null or undefined error.');
    var message = (_error$message = error.message) !== null && _error$message !== void 0 ? _error$message : 'An unknown error occurred.';
    var locations = error.locations;
    var path = error.path;
    var extensions = error.extensions;
    return extensions ? {
      message: message,
      locations: locations,
      path: path,
      extensions: extensions
    } : {
      message: message,
      locations: locations,
      path: path
    };
  }

  (function (exports) {

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, "GraphQLError", {
    enumerable: true,
    get: function get() {
      return _GraphQLError.GraphQLError;
    }
  });
  Object.defineProperty(exports, "printError", {
    enumerable: true,
    get: function get() {
      return _GraphQLError.printError;
    }
  });
  Object.defineProperty(exports, "syntaxError", {
    enumerable: true,
    get: function get() {
      return _syntaxError.syntaxError;
    }
  });
  Object.defineProperty(exports, "locatedError", {
    enumerable: true,
    get: function get() {
      return _locatedError.locatedError;
    }
  });
  Object.defineProperty(exports, "formatError", {
    enumerable: true,
    get: function get() {
      return _formatError.formatError;
    }
  });

  var _GraphQLError = GraphQLError$1;

  var _syntaxError = syntaxError$1;

  var _locatedError = locatedError$1;

  var _formatError = formatError$1;
  }(error));

  var utilities = {};

  var getIntrospectionQuery$1 = {};

  Object.defineProperty(getIntrospectionQuery$1, "__esModule", {
    value: true
  });
  getIntrospectionQuery$1.getIntrospectionQuery = getIntrospectionQuery;

  function ownKeys$4(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$4(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$4(Object(source), true).forEach(function (key) { _defineProperty$4(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$4(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

  function _defineProperty$4(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

  function getIntrospectionQuery(options) {
    var optionsWithDefault = _objectSpread$4({
      descriptions: true,
      specifiedByUrl: false,
      directiveIsRepeatable: false,
      schemaDescription: false,
      inputValueDeprecation: false
    }, options);

    var descriptions = optionsWithDefault.descriptions ? 'description' : '';
    var specifiedByUrl = optionsWithDefault.specifiedByUrl ? 'specifiedByUrl' : '';
    var directiveIsRepeatable = optionsWithDefault.directiveIsRepeatable ? 'isRepeatable' : '';
    var schemaDescription = optionsWithDefault.schemaDescription ? descriptions : '';

    function inputDeprecation(str) {
      return optionsWithDefault.inputValueDeprecation ? str : '';
    }

    return "\n    query IntrospectionQuery {\n      __schema {\n        ".concat(schemaDescription, "\n        queryType { name }\n        mutationType { name }\n        subscriptionType { name }\n        types {\n          ...FullType\n        }\n        directives {\n          name\n          ").concat(descriptions, "\n          ").concat(directiveIsRepeatable, "\n          locations\n          args").concat(inputDeprecation('(includeDeprecated: true)'), " {\n            ...InputValue\n          }\n        }\n      }\n    }\n\n    fragment FullType on __Type {\n      kind\n      name\n      ").concat(descriptions, "\n      ").concat(specifiedByUrl, "\n      fields(includeDeprecated: true) {\n        name\n        ").concat(descriptions, "\n        args").concat(inputDeprecation('(includeDeprecated: true)'), " {\n          ...InputValue\n        }\n        type {\n          ...TypeRef\n        }\n        isDeprecated\n        deprecationReason\n      }\n      inputFields").concat(inputDeprecation('(includeDeprecated: true)'), " {\n        ...InputValue\n      }\n      interfaces {\n        ...TypeRef\n      }\n      enumValues(includeDeprecated: true) {\n        name\n        ").concat(descriptions, "\n        isDeprecated\n        deprecationReason\n      }\n      possibleTypes {\n        ...TypeRef\n      }\n    }\n\n    fragment InputValue on __InputValue {\n      name\n      ").concat(descriptions, "\n      type { ...TypeRef }\n      defaultValue\n      ").concat(inputDeprecation('isDeprecated'), "\n      ").concat(inputDeprecation('deprecationReason'), "\n    }\n\n    fragment TypeRef on __Type {\n      kind\n      name\n      ofType {\n        kind\n        name\n        ofType {\n          kind\n          name\n          ofType {\n            kind\n            name\n            ofType {\n              kind\n              name\n              ofType {\n                kind\n                name\n                ofType {\n                  kind\n                  name\n                  ofType {\n                    kind\n                    name\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  ");
  }

  var getOperationAST$1 = {};

  Object.defineProperty(getOperationAST$1, "__esModule", {
    value: true
  });
  getOperationAST$1.getOperationAST = getOperationAST;

  var _kinds$3 = kinds;

  /**
   * Returns an operation AST given a document AST and optionally an operation
   * name. If a name is not provided, an operation is only returned if only one is
   * provided in the document.
   */
  function getOperationAST(documentAST, operationName) {
    var operation = null;

    for (var _i2 = 0, _documentAST$definiti2 = documentAST.definitions; _i2 < _documentAST$definiti2.length; _i2++) {
      var definition = _documentAST$definiti2[_i2];

      if (definition.kind === _kinds$3.Kind.OPERATION_DEFINITION) {
        var _definition$name;

        if (operationName == null) {
          // If no operation name was provided, only return an Operation if there
          // is one defined in the document. Upon encountering the second, return
          // null.
          if (operation) {
            return null;
          }

          operation = definition;
        } else if (((_definition$name = definition.name) === null || _definition$name === void 0 ? void 0 : _definition$name.value) === operationName) {
          return definition;
        }
      }
    }

    return operation;
  }

  var introspectionFromSchema$1 = {};

  Object.defineProperty(introspectionFromSchema$1, "__esModule", {
    value: true
  });
  introspectionFromSchema$1.introspectionFromSchema = introspectionFromSchema;

  var _invariant$4 = _interopRequireDefault$6(invariant$1);

  var _parser$2 = parser;

  var _execute = execute$1;

  var _getIntrospectionQuery = getIntrospectionQuery$1;

  function _interopRequireDefault$6(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function ownKeys$3(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$3(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$3(Object(source), true).forEach(function (key) { _defineProperty$3(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$3(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

  function _defineProperty$3(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

  /**
   * Build an IntrospectionQuery from a GraphQLSchema
   *
   * IntrospectionQuery is useful for utilities that care about type and field
   * relationships, but do not need to traverse through those relationships.
   *
   * This is the inverse of buildClientSchema. The primary use case is outside
   * of the server context, for instance when doing schema comparisons.
   */
  function introspectionFromSchema(schema, options) {
    var optionsWithDefaults = _objectSpread$3({
      specifiedByUrl: true,
      directiveIsRepeatable: true,
      schemaDescription: true,
      inputValueDeprecation: true
    }, options);

    var document = (0, _parser$2.parse)((0, _getIntrospectionQuery.getIntrospectionQuery)(optionsWithDefaults));
    var result = (0, _execute.executeSync)({
      schema: schema,
      document: document
    });
    !result.errors && result.data || (0, _invariant$4.default)(0);
    return result.data;
  }

  var buildClientSchema$1 = {};

  Object.defineProperty(buildClientSchema$1, "__esModule", {
    value: true
  });
  buildClientSchema$1.buildClientSchema = buildClientSchema;

  var _objectValues$4 = _interopRequireDefault$5(objectValues$1);

  var _inspect$4 = _interopRequireDefault$5(inspect$1);

  var _devAssert$2 = _interopRequireDefault$5(devAssert$1);

  var _keyValMap$1 = _interopRequireDefault$5(keyValMap$1);

  var _isObjectLike = _interopRequireDefault$5(isObjectLike$1);

  var _parser$1 = parser;

  var _schema$3 = schema;

  var _directives$4 = directives;

  var _scalars$3 = scalars;

  var _introspection$3 = introspection;

  var _definition$4 = definition;

  var _valueFromAST$1 = valueFromAST$1;

  function _interopRequireDefault$5(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  /**
   * Build a GraphQLSchema for use by client tools.
   *
   * Given the result of a client running the introspection query, creates and
   * returns a GraphQLSchema instance which can be then used with all graphql-js
   * tools, but cannot be used to execute a query, as introspection does not
   * represent the "resolver", "parse" or "serialize" functions or any other
   * server-internal mechanisms.
   *
   * This function expects a complete introspection result. Don't forget to check
   * the "errors" field of a server response before calling this function.
   */
  function buildClientSchema(introspection, options) {
    (0, _isObjectLike.default)(introspection) && (0, _isObjectLike.default)(introspection.__schema) || (0, _devAssert$2.default)(0, "Invalid or incomplete introspection result. Ensure that you are passing \"data\" property of introspection response and no \"errors\" was returned alongside: ".concat((0, _inspect$4.default)(introspection), ".")); // Get the schema from the introspection result.

    var schemaIntrospection = introspection.__schema; // Iterate through all types, getting the type definition for each.

    var typeMap = (0, _keyValMap$1.default)(schemaIntrospection.types, function (typeIntrospection) {
      return typeIntrospection.name;
    }, function (typeIntrospection) {
      return buildType(typeIntrospection);
    }); // Include standard types only if they are used.

    for (var _i2 = 0, _ref2 = [].concat(_scalars$3.specifiedScalarTypes, _introspection$3.introspectionTypes); _i2 < _ref2.length; _i2++) {
      var stdType = _ref2[_i2];

      if (typeMap[stdType.name]) {
        typeMap[stdType.name] = stdType;
      }
    } // Get the root Query, Mutation, and Subscription types.


    var queryType = schemaIntrospection.queryType ? getObjectType(schemaIntrospection.queryType) : null;
    var mutationType = schemaIntrospection.mutationType ? getObjectType(schemaIntrospection.mutationType) : null;
    var subscriptionType = schemaIntrospection.subscriptionType ? getObjectType(schemaIntrospection.subscriptionType) : null; // Get the directives supported by Introspection, assuming empty-set if
    // directives were not queried for.

    var directives = schemaIntrospection.directives ? schemaIntrospection.directives.map(buildDirective) : []; // Then produce and return a Schema with these types.

    return new _schema$3.GraphQLSchema({
      description: schemaIntrospection.description,
      query: queryType,
      mutation: mutationType,
      subscription: subscriptionType,
      types: (0, _objectValues$4.default)(typeMap),
      directives: directives,
      assumeValid: options === null || options === void 0 ? void 0 : options.assumeValid
    }); // Given a type reference in introspection, return the GraphQLType instance.
    // preferring cached instances before building new instances.

    function getType(typeRef) {
      if (typeRef.kind === _introspection$3.TypeKind.LIST) {
        var itemRef = typeRef.ofType;

        if (!itemRef) {
          throw new Error('Decorated type deeper than introspection query.');
        }

        return new _definition$4.GraphQLList(getType(itemRef));
      }

      if (typeRef.kind === _introspection$3.TypeKind.NON_NULL) {
        var nullableRef = typeRef.ofType;

        if (!nullableRef) {
          throw new Error('Decorated type deeper than introspection query.');
        }

        var nullableType = getType(nullableRef);
        return new _definition$4.GraphQLNonNull((0, _definition$4.assertNullableType)(nullableType));
      }

      return getNamedType(typeRef);
    }

    function getNamedType(typeRef) {
      var typeName = typeRef.name;

      if (!typeName) {
        throw new Error("Unknown type reference: ".concat((0, _inspect$4.default)(typeRef), "."));
      }

      var type = typeMap[typeName];

      if (!type) {
        throw new Error("Invalid or incomplete schema, unknown type: ".concat(typeName, ". Ensure that a full introspection query is used in order to build a client schema."));
      }

      return type;
    }

    function getObjectType(typeRef) {
      return (0, _definition$4.assertObjectType)(getNamedType(typeRef));
    }

    function getInterfaceType(typeRef) {
      return (0, _definition$4.assertInterfaceType)(getNamedType(typeRef));
    } // Given a type's introspection result, construct the correct
    // GraphQLType instance.


    function buildType(type) {
      if (type != null && type.name != null && type.kind != null) {
        switch (type.kind) {
          case _introspection$3.TypeKind.SCALAR:
            return buildScalarDef(type);

          case _introspection$3.TypeKind.OBJECT:
            return buildObjectDef(type);

          case _introspection$3.TypeKind.INTERFACE:
            return buildInterfaceDef(type);

          case _introspection$3.TypeKind.UNION:
            return buildUnionDef(type);

          case _introspection$3.TypeKind.ENUM:
            return buildEnumDef(type);

          case _introspection$3.TypeKind.INPUT_OBJECT:
            return buildInputObjectDef(type);
        }
      }

      var typeStr = (0, _inspect$4.default)(type);
      throw new Error("Invalid or incomplete introspection result. Ensure that a full introspection query is used in order to build a client schema: ".concat(typeStr, "."));
    }

    function buildScalarDef(scalarIntrospection) {
      return new _definition$4.GraphQLScalarType({
        name: scalarIntrospection.name,
        description: scalarIntrospection.description,
        specifiedByUrl: scalarIntrospection.specifiedByUrl
      });
    }

    function buildImplementationsList(implementingIntrospection) {
      // TODO: Temporary workaround until GraphQL ecosystem will fully support
      // 'interfaces' on interface types.
      if (implementingIntrospection.interfaces === null && implementingIntrospection.kind === _introspection$3.TypeKind.INTERFACE) {
        return [];
      }

      if (!implementingIntrospection.interfaces) {
        var implementingIntrospectionStr = (0, _inspect$4.default)(implementingIntrospection);
        throw new Error("Introspection result missing interfaces: ".concat(implementingIntrospectionStr, "."));
      }

      return implementingIntrospection.interfaces.map(getInterfaceType);
    }

    function buildObjectDef(objectIntrospection) {
      return new _definition$4.GraphQLObjectType({
        name: objectIntrospection.name,
        description: objectIntrospection.description,
        interfaces: function interfaces() {
          return buildImplementationsList(objectIntrospection);
        },
        fields: function fields() {
          return buildFieldDefMap(objectIntrospection);
        }
      });
    }

    function buildInterfaceDef(interfaceIntrospection) {
      return new _definition$4.GraphQLInterfaceType({
        name: interfaceIntrospection.name,
        description: interfaceIntrospection.description,
        interfaces: function interfaces() {
          return buildImplementationsList(interfaceIntrospection);
        },
        fields: function fields() {
          return buildFieldDefMap(interfaceIntrospection);
        }
      });
    }

    function buildUnionDef(unionIntrospection) {
      if (!unionIntrospection.possibleTypes) {
        var unionIntrospectionStr = (0, _inspect$4.default)(unionIntrospection);
        throw new Error("Introspection result missing possibleTypes: ".concat(unionIntrospectionStr, "."));
      }

      return new _definition$4.GraphQLUnionType({
        name: unionIntrospection.name,
        description: unionIntrospection.description,
        types: function types() {
          return unionIntrospection.possibleTypes.map(getObjectType);
        }
      });
    }

    function buildEnumDef(enumIntrospection) {
      if (!enumIntrospection.enumValues) {
        var enumIntrospectionStr = (0, _inspect$4.default)(enumIntrospection);
        throw new Error("Introspection result missing enumValues: ".concat(enumIntrospectionStr, "."));
      }

      return new _definition$4.GraphQLEnumType({
        name: enumIntrospection.name,
        description: enumIntrospection.description,
        values: (0, _keyValMap$1.default)(enumIntrospection.enumValues, function (valueIntrospection) {
          return valueIntrospection.name;
        }, function (valueIntrospection) {
          return {
            description: valueIntrospection.description,
            deprecationReason: valueIntrospection.deprecationReason
          };
        })
      });
    }

    function buildInputObjectDef(inputObjectIntrospection) {
      if (!inputObjectIntrospection.inputFields) {
        var inputObjectIntrospectionStr = (0, _inspect$4.default)(inputObjectIntrospection);
        throw new Error("Introspection result missing inputFields: ".concat(inputObjectIntrospectionStr, "."));
      }

      return new _definition$4.GraphQLInputObjectType({
        name: inputObjectIntrospection.name,
        description: inputObjectIntrospection.description,
        fields: function fields() {
          return buildInputValueDefMap(inputObjectIntrospection.inputFields);
        }
      });
    }

    function buildFieldDefMap(typeIntrospection) {
      if (!typeIntrospection.fields) {
        throw new Error("Introspection result missing fields: ".concat((0, _inspect$4.default)(typeIntrospection), "."));
      }

      return (0, _keyValMap$1.default)(typeIntrospection.fields, function (fieldIntrospection) {
        return fieldIntrospection.name;
      }, buildField);
    }

    function buildField(fieldIntrospection) {
      var type = getType(fieldIntrospection.type);

      if (!(0, _definition$4.isOutputType)(type)) {
        var typeStr = (0, _inspect$4.default)(type);
        throw new Error("Introspection must provide output type for fields, but received: ".concat(typeStr, "."));
      }

      if (!fieldIntrospection.args) {
        var fieldIntrospectionStr = (0, _inspect$4.default)(fieldIntrospection);
        throw new Error("Introspection result missing field args: ".concat(fieldIntrospectionStr, "."));
      }

      return {
        description: fieldIntrospection.description,
        deprecationReason: fieldIntrospection.deprecationReason,
        type: type,
        args: buildInputValueDefMap(fieldIntrospection.args)
      };
    }

    function buildInputValueDefMap(inputValueIntrospections) {
      return (0, _keyValMap$1.default)(inputValueIntrospections, function (inputValue) {
        return inputValue.name;
      }, buildInputValue);
    }

    function buildInputValue(inputValueIntrospection) {
      var type = getType(inputValueIntrospection.type);

      if (!(0, _definition$4.isInputType)(type)) {
        var typeStr = (0, _inspect$4.default)(type);
        throw new Error("Introspection must provide input type for arguments, but received: ".concat(typeStr, "."));
      }

      var defaultValue = inputValueIntrospection.defaultValue != null ? (0, _valueFromAST$1.valueFromAST)((0, _parser$1.parseValue)(inputValueIntrospection.defaultValue), type) : undefined;
      return {
        description: inputValueIntrospection.description,
        type: type,
        defaultValue: defaultValue,
        deprecationReason: inputValueIntrospection.deprecationReason
      };
    }

    function buildDirective(directiveIntrospection) {
      if (!directiveIntrospection.args) {
        var directiveIntrospectionStr = (0, _inspect$4.default)(directiveIntrospection);
        throw new Error("Introspection result missing directive args: ".concat(directiveIntrospectionStr, "."));
      }

      if (!directiveIntrospection.locations) {
        var _directiveIntrospectionStr = (0, _inspect$4.default)(directiveIntrospection);

        throw new Error("Introspection result missing directive locations: ".concat(_directiveIntrospectionStr, "."));
      }

      return new _directives$4.GraphQLDirective({
        name: directiveIntrospection.name,
        description: directiveIntrospection.description,
        isRepeatable: directiveIntrospection.isRepeatable,
        locations: directiveIntrospection.locations.slice(),
        args: buildInputValueDefMap(directiveIntrospection.args)
      });
    }
  }

  var buildASTSchema$1 = {};

  var extendSchema$1 = {};

  Object.defineProperty(extendSchema$1, "__esModule", {
    value: true
  });
  extendSchema$1.extendSchema = extendSchema;
  extendSchema$1.extendSchemaImpl = extendSchemaImpl;
  extendSchema$1.getDescription = getDescription;

  var _objectValues$3 = _interopRequireDefault$4(objectValues$1);

  var _keyMap$1 = _interopRequireDefault$4(keyMap$1);

  var _inspect$3 = _interopRequireDefault$4(inspect$1);

  var _mapValue = _interopRequireDefault$4(mapValue$1);

  var _invariant$3 = _interopRequireDefault$4(invariant$1);

  var _devAssert$1 = _interopRequireDefault$4(devAssert$1);

  var _kinds$2 = kinds;

  var _tokenKind$1 = tokenKind;

  var _blockString$2 = blockString;

  var _predicates = predicates;

  var _validate$2 = validate$2;

  var _values = values;

  var _schema$2 = schema;

  var _scalars$2 = scalars;

  var _introspection$2 = introspection;

  var _directives$3 = directives;

  var _definition$3 = definition;

  var _valueFromAST = valueFromAST$1;

  function _interopRequireDefault$4(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function ownKeys$2(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$2(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$2(Object(source), true).forEach(function (key) { _defineProperty$2(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$2(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

  function _defineProperty$2(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

  /**
   * Produces a new schema given an existing schema and a document which may
   * contain GraphQL type extensions and definitions. The original schema will
   * remain unaltered.
   *
   * Because a schema represents a graph of references, a schema cannot be
   * extended without effectively making an entire copy. We do not know until it's
   * too late if subgraphs remain unchanged.
   *
   * This algorithm copies the provided schema, applying extensions while
   * producing the copy. The original schema remains unaltered.
   *
   * Accepts options as a third argument:
   *
   *    - commentDescriptions:
   *        Provide true to use preceding comments as the description.
   *
   */
  function extendSchema(schema, documentAST, options) {
    (0, _schema$2.assertSchema)(schema);
    documentAST != null && documentAST.kind === _kinds$2.Kind.DOCUMENT || (0, _devAssert$1.default)(0, 'Must provide valid Document AST.');

    if ((options === null || options === void 0 ? void 0 : options.assumeValid) !== true && (options === null || options === void 0 ? void 0 : options.assumeValidSDL) !== true) {
      (0, _validate$2.assertValidSDLExtension)(documentAST, schema);
    }

    var schemaConfig = schema.toConfig();
    var extendedConfig = extendSchemaImpl(schemaConfig, documentAST, options);
    return schemaConfig === extendedConfig ? schema : new _schema$2.GraphQLSchema(extendedConfig);
  }
  /**
   * @internal
   */


  function extendSchemaImpl(schemaConfig, documentAST, options) {
    var _schemaDef, _schemaDef$descriptio, _schemaDef2, _options$assumeValid;

    // Collect the type definitions and extensions found in the document.
    var typeDefs = [];
    var typeExtensionsMap = Object.create(null); // New directives and types are separate because a directives and types can
    // have the same name. For example, a type named "skip".

    var directiveDefs = [];
    var schemaDef; // Schema extensions are collected which may add additional operation types.

    var schemaExtensions = [];

    for (var _i2 = 0, _documentAST$definiti2 = documentAST.definitions; _i2 < _documentAST$definiti2.length; _i2++) {
      var def = _documentAST$definiti2[_i2];

      if (def.kind === _kinds$2.Kind.SCHEMA_DEFINITION) {
        schemaDef = def;
      } else if (def.kind === _kinds$2.Kind.SCHEMA_EXTENSION) {
        schemaExtensions.push(def);
      } else if ((0, _predicates.isTypeDefinitionNode)(def)) {
        typeDefs.push(def);
      } else if ((0, _predicates.isTypeExtensionNode)(def)) {
        var extendedTypeName = def.name.value;
        var existingTypeExtensions = typeExtensionsMap[extendedTypeName];
        typeExtensionsMap[extendedTypeName] = existingTypeExtensions ? existingTypeExtensions.concat([def]) : [def];
      } else if (def.kind === _kinds$2.Kind.DIRECTIVE_DEFINITION) {
        directiveDefs.push(def);
      }
    } // If this document contains no new types, extensions, or directives then
    // return the same unmodified GraphQLSchema instance.


    if (Object.keys(typeExtensionsMap).length === 0 && typeDefs.length === 0 && directiveDefs.length === 0 && schemaExtensions.length === 0 && schemaDef == null) {
      return schemaConfig;
    }

    var typeMap = Object.create(null);

    for (var _i4 = 0, _schemaConfig$types2 = schemaConfig.types; _i4 < _schemaConfig$types2.length; _i4++) {
      var existingType = _schemaConfig$types2[_i4];
      typeMap[existingType.name] = extendNamedType(existingType);
    }

    for (var _i6 = 0; _i6 < typeDefs.length; _i6++) {
      var _stdTypeMap$name;

      var typeNode = typeDefs[_i6];
      var name = typeNode.name.value;
      typeMap[name] = (_stdTypeMap$name = stdTypeMap[name]) !== null && _stdTypeMap$name !== void 0 ? _stdTypeMap$name : buildType(typeNode);
    }

    var operationTypes = _objectSpread$2(_objectSpread$2({
      // Get the extended root operation types.
      query: schemaConfig.query && replaceNamedType(schemaConfig.query),
      mutation: schemaConfig.mutation && replaceNamedType(schemaConfig.mutation),
      subscription: schemaConfig.subscription && replaceNamedType(schemaConfig.subscription)
    }, schemaDef && getOperationTypes([schemaDef])), getOperationTypes(schemaExtensions)); // Then produce and return a Schema config with these types.


    return _objectSpread$2(_objectSpread$2({
      description: (_schemaDef = schemaDef) === null || _schemaDef === void 0 ? void 0 : (_schemaDef$descriptio = _schemaDef.description) === null || _schemaDef$descriptio === void 0 ? void 0 : _schemaDef$descriptio.value
    }, operationTypes), {}, {
      types: (0, _objectValues$3.default)(typeMap),
      directives: [].concat(schemaConfig.directives.map(replaceDirective), directiveDefs.map(buildDirective)),
      extensions: undefined,
      astNode: (_schemaDef2 = schemaDef) !== null && _schemaDef2 !== void 0 ? _schemaDef2 : schemaConfig.astNode,
      extensionASTNodes: schemaConfig.extensionASTNodes.concat(schemaExtensions),
      assumeValid: (_options$assumeValid = options === null || options === void 0 ? void 0 : options.assumeValid) !== null && _options$assumeValid !== void 0 ? _options$assumeValid : false
    }); // Below are functions used for producing this schema that have closed over
    // this scope and have access to the schema, cache, and newly defined types.

    function replaceType(type) {
      if ((0, _definition$3.isListType)(type)) {
        // $FlowFixMe[incompatible-return]
        return new _definition$3.GraphQLList(replaceType(type.ofType));
      }

      if ((0, _definition$3.isNonNullType)(type)) {
        // $FlowFixMe[incompatible-return]
        return new _definition$3.GraphQLNonNull(replaceType(type.ofType));
      }

      return replaceNamedType(type);
    }

    function replaceNamedType(type) {
      // Note: While this could make early assertions to get the correctly
      // typed values, that would throw immediately while type system
      // validation with validateSchema() will produce more actionable results.
      return typeMap[type.name];
    }

    function replaceDirective(directive) {
      var config = directive.toConfig();
      return new _directives$3.GraphQLDirective(_objectSpread$2(_objectSpread$2({}, config), {}, {
        args: (0, _mapValue.default)(config.args, extendArg)
      }));
    }

    function extendNamedType(type) {
      if ((0, _introspection$2.isIntrospectionType)(type) || (0, _scalars$2.isSpecifiedScalarType)(type)) {
        // Builtin types are not extended.
        return type;
      }

      if ((0, _definition$3.isScalarType)(type)) {
        return extendScalarType(type);
      }

      if ((0, _definition$3.isObjectType)(type)) {
        return extendObjectType(type);
      }

      if ((0, _definition$3.isInterfaceType)(type)) {
        return extendInterfaceType(type);
      }

      if ((0, _definition$3.isUnionType)(type)) {
        return extendUnionType(type);
      }

      if ((0, _definition$3.isEnumType)(type)) {
        return extendEnumType(type);
      } // istanbul ignore else (See: 'https://github.com/graphql/graphql-js/issues/2618')


      if ((0, _definition$3.isInputObjectType)(type)) {
        return extendInputObjectType(type);
      } // istanbul ignore next (Not reachable. All possible types have been considered)


      (0, _invariant$3.default)(0, 'Unexpected type: ' + (0, _inspect$3.default)(type));
    }

    function extendInputObjectType(type) {
      var _typeExtensionsMap$co;

      var config = type.toConfig();
      var extensions = (_typeExtensionsMap$co = typeExtensionsMap[config.name]) !== null && _typeExtensionsMap$co !== void 0 ? _typeExtensionsMap$co : [];
      return new _definition$3.GraphQLInputObjectType(_objectSpread$2(_objectSpread$2({}, config), {}, {
        fields: function fields() {
          return _objectSpread$2(_objectSpread$2({}, (0, _mapValue.default)(config.fields, function (field) {
            return _objectSpread$2(_objectSpread$2({}, field), {}, {
              type: replaceType(field.type)
            });
          })), buildInputFieldMap(extensions));
        },
        extensionASTNodes: config.extensionASTNodes.concat(extensions)
      }));
    }

    function extendEnumType(type) {
      var _typeExtensionsMap$ty;

      var config = type.toConfig();
      var extensions = (_typeExtensionsMap$ty = typeExtensionsMap[type.name]) !== null && _typeExtensionsMap$ty !== void 0 ? _typeExtensionsMap$ty : [];
      return new _definition$3.GraphQLEnumType(_objectSpread$2(_objectSpread$2({}, config), {}, {
        values: _objectSpread$2(_objectSpread$2({}, config.values), buildEnumValueMap(extensions)),
        extensionASTNodes: config.extensionASTNodes.concat(extensions)
      }));
    }

    function extendScalarType(type) {
      var _typeExtensionsMap$co2;

      var config = type.toConfig();
      var extensions = (_typeExtensionsMap$co2 = typeExtensionsMap[config.name]) !== null && _typeExtensionsMap$co2 !== void 0 ? _typeExtensionsMap$co2 : [];
      var specifiedByUrl = config.specifiedByUrl;

      for (var _i8 = 0; _i8 < extensions.length; _i8++) {
        var _getSpecifiedByUrl;

        var extensionNode = extensions[_i8];
        specifiedByUrl = (_getSpecifiedByUrl = getSpecifiedByUrl(extensionNode)) !== null && _getSpecifiedByUrl !== void 0 ? _getSpecifiedByUrl : specifiedByUrl;
      }

      return new _definition$3.GraphQLScalarType(_objectSpread$2(_objectSpread$2({}, config), {}, {
        specifiedByUrl: specifiedByUrl,
        extensionASTNodes: config.extensionASTNodes.concat(extensions)
      }));
    }

    function extendObjectType(type) {
      var _typeExtensionsMap$co3;

      var config = type.toConfig();
      var extensions = (_typeExtensionsMap$co3 = typeExtensionsMap[config.name]) !== null && _typeExtensionsMap$co3 !== void 0 ? _typeExtensionsMap$co3 : [];
      return new _definition$3.GraphQLObjectType(_objectSpread$2(_objectSpread$2({}, config), {}, {
        interfaces: function interfaces() {
          return [].concat(type.getInterfaces().map(replaceNamedType), buildInterfaces(extensions));
        },
        fields: function fields() {
          return _objectSpread$2(_objectSpread$2({}, (0, _mapValue.default)(config.fields, extendField)), buildFieldMap(extensions));
        },
        extensionASTNodes: config.extensionASTNodes.concat(extensions)
      }));
    }

    function extendInterfaceType(type) {
      var _typeExtensionsMap$co4;

      var config = type.toConfig();
      var extensions = (_typeExtensionsMap$co4 = typeExtensionsMap[config.name]) !== null && _typeExtensionsMap$co4 !== void 0 ? _typeExtensionsMap$co4 : [];
      return new _definition$3.GraphQLInterfaceType(_objectSpread$2(_objectSpread$2({}, config), {}, {
        interfaces: function interfaces() {
          return [].concat(type.getInterfaces().map(replaceNamedType), buildInterfaces(extensions));
        },
        fields: function fields() {
          return _objectSpread$2(_objectSpread$2({}, (0, _mapValue.default)(config.fields, extendField)), buildFieldMap(extensions));
        },
        extensionASTNodes: config.extensionASTNodes.concat(extensions)
      }));
    }

    function extendUnionType(type) {
      var _typeExtensionsMap$co5;

      var config = type.toConfig();
      var extensions = (_typeExtensionsMap$co5 = typeExtensionsMap[config.name]) !== null && _typeExtensionsMap$co5 !== void 0 ? _typeExtensionsMap$co5 : [];
      return new _definition$3.GraphQLUnionType(_objectSpread$2(_objectSpread$2({}, config), {}, {
        types: function types() {
          return [].concat(type.getTypes().map(replaceNamedType), buildUnionTypes(extensions));
        },
        extensionASTNodes: config.extensionASTNodes.concat(extensions)
      }));
    }

    function extendField(field) {
      return _objectSpread$2(_objectSpread$2({}, field), {}, {
        type: replaceType(field.type),
        // $FlowFixMe[incompatible-call]
        args: (0, _mapValue.default)(field.args, extendArg)
      });
    }

    function extendArg(arg) {
      return _objectSpread$2(_objectSpread$2({}, arg), {}, {
        type: replaceType(arg.type)
      });
    }

    function getOperationTypes(nodes) {
      var opTypes = {};

      for (var _i10 = 0; _i10 < nodes.length; _i10++) {
        var _node$operationTypes;

        var node = nodes[_i10];
        // istanbul ignore next (See: 'https://github.com/graphql/graphql-js/issues/2203')
        var operationTypesNodes = (_node$operationTypes = node.operationTypes) !== null && _node$operationTypes !== void 0 ? _node$operationTypes : [];

        for (var _i12 = 0; _i12 < operationTypesNodes.length; _i12++) {
          var operationType = operationTypesNodes[_i12];
          opTypes[operationType.operation] = getNamedType(operationType.type);
        }
      } // Note: While this could make early assertions to get the correctly
      // typed values below, that would throw immediately while type system
      // validation with validateSchema() will produce more actionable results.


      return opTypes;
    }

    function getNamedType(node) {
      var _stdTypeMap$name2;

      var name = node.name.value;
      var type = (_stdTypeMap$name2 = stdTypeMap[name]) !== null && _stdTypeMap$name2 !== void 0 ? _stdTypeMap$name2 : typeMap[name];

      if (type === undefined) {
        throw new Error("Unknown type: \"".concat(name, "\"."));
      }

      return type;
    }

    function getWrappedType(node) {
      if (node.kind === _kinds$2.Kind.LIST_TYPE) {
        return new _definition$3.GraphQLList(getWrappedType(node.type));
      }

      if (node.kind === _kinds$2.Kind.NON_NULL_TYPE) {
        return new _definition$3.GraphQLNonNull(getWrappedType(node.type));
      }

      return getNamedType(node);
    }

    function buildDirective(node) {
      var locations = node.locations.map(function (_ref) {
        var value = _ref.value;
        return value;
      });
      return new _directives$3.GraphQLDirective({
        name: node.name.value,
        description: getDescription(node, options),
        locations: locations,
        isRepeatable: node.repeatable,
        args: buildArgumentMap(node.arguments),
        astNode: node
      });
    }

    function buildFieldMap(nodes) {
      var fieldConfigMap = Object.create(null);

      for (var _i14 = 0; _i14 < nodes.length; _i14++) {
        var _node$fields;

        var node = nodes[_i14];
        // istanbul ignore next (See: 'https://github.com/graphql/graphql-js/issues/2203')
        var nodeFields = (_node$fields = node.fields) !== null && _node$fields !== void 0 ? _node$fields : [];

        for (var _i16 = 0; _i16 < nodeFields.length; _i16++) {
          var field = nodeFields[_i16];
          fieldConfigMap[field.name.value] = {
            // Note: While this could make assertions to get the correctly typed
            // value, that would throw immediately while type system validation
            // with validateSchema() will produce more actionable results.
            type: getWrappedType(field.type),
            description: getDescription(field, options),
            args: buildArgumentMap(field.arguments),
            deprecationReason: getDeprecationReason(field),
            astNode: field
          };
        }
      }

      return fieldConfigMap;
    }

    function buildArgumentMap(args) {
      // istanbul ignore next (See: 'https://github.com/graphql/graphql-js/issues/2203')
      var argsNodes = args !== null && args !== void 0 ? args : [];
      var argConfigMap = Object.create(null);

      for (var _i18 = 0; _i18 < argsNodes.length; _i18++) {
        var arg = argsNodes[_i18];
        // Note: While this could make assertions to get the correctly typed
        // value, that would throw immediately while type system validation
        // with validateSchema() will produce more actionable results.
        var type = getWrappedType(arg.type);
        argConfigMap[arg.name.value] = {
          type: type,
          description: getDescription(arg, options),
          defaultValue: (0, _valueFromAST.valueFromAST)(arg.defaultValue, type),
          deprecationReason: getDeprecationReason(arg),
          astNode: arg
        };
      }

      return argConfigMap;
    }

    function buildInputFieldMap(nodes) {
      var inputFieldMap = Object.create(null);

      for (var _i20 = 0; _i20 < nodes.length; _i20++) {
        var _node$fields2;

        var node = nodes[_i20];
        // istanbul ignore next (See: 'https://github.com/graphql/graphql-js/issues/2203')
        var fieldsNodes = (_node$fields2 = node.fields) !== null && _node$fields2 !== void 0 ? _node$fields2 : [];

        for (var _i22 = 0; _i22 < fieldsNodes.length; _i22++) {
          var field = fieldsNodes[_i22];
          // Note: While this could make assertions to get the correctly typed
          // value, that would throw immediately while type system validation
          // with validateSchema() will produce more actionable results.
          var type = getWrappedType(field.type);
          inputFieldMap[field.name.value] = {
            type: type,
            description: getDescription(field, options),
            defaultValue: (0, _valueFromAST.valueFromAST)(field.defaultValue, type),
            deprecationReason: getDeprecationReason(field),
            astNode: field
          };
        }
      }

      return inputFieldMap;
    }

    function buildEnumValueMap(nodes) {
      var enumValueMap = Object.create(null);

      for (var _i24 = 0; _i24 < nodes.length; _i24++) {
        var _node$values;

        var node = nodes[_i24];
        // istanbul ignore next (See: 'https://github.com/graphql/graphql-js/issues/2203')
        var valuesNodes = (_node$values = node.values) !== null && _node$values !== void 0 ? _node$values : [];

        for (var _i26 = 0; _i26 < valuesNodes.length; _i26++) {
          var value = valuesNodes[_i26];
          enumValueMap[value.name.value] = {
            description: getDescription(value, options),
            deprecationReason: getDeprecationReason(value),
            astNode: value
          };
        }
      }

      return enumValueMap;
    }

    function buildInterfaces(nodes) {
      var interfaces = [];

      for (var _i28 = 0; _i28 < nodes.length; _i28++) {
        var _node$interfaces;

        var node = nodes[_i28];
        // istanbul ignore next (See: 'https://github.com/graphql/graphql-js/issues/2203')
        var interfacesNodes = (_node$interfaces = node.interfaces) !== null && _node$interfaces !== void 0 ? _node$interfaces : [];

        for (var _i30 = 0; _i30 < interfacesNodes.length; _i30++) {
          var type = interfacesNodes[_i30];
          // Note: While this could make assertions to get the correctly typed
          // values below, that would throw immediately while type system
          // validation with validateSchema() will produce more actionable
          // results.
          interfaces.push(getNamedType(type));
        }
      }

      return interfaces;
    }

    function buildUnionTypes(nodes) {
      var types = [];

      for (var _i32 = 0; _i32 < nodes.length; _i32++) {
        var _node$types;

        var node = nodes[_i32];
        // istanbul ignore next (See: 'https://github.com/graphql/graphql-js/issues/2203')
        var typeNodes = (_node$types = node.types) !== null && _node$types !== void 0 ? _node$types : [];

        for (var _i34 = 0; _i34 < typeNodes.length; _i34++) {
          var type = typeNodes[_i34];
          // Note: While this could make assertions to get the correctly typed
          // values below, that would throw immediately while type system
          // validation with validateSchema() will produce more actionable
          // results.
          types.push(getNamedType(type));
        }
      }

      return types;
    }

    function buildType(astNode) {
      var _typeExtensionsMap$na;

      var name = astNode.name.value;
      var description = getDescription(astNode, options);
      var extensionNodes = (_typeExtensionsMap$na = typeExtensionsMap[name]) !== null && _typeExtensionsMap$na !== void 0 ? _typeExtensionsMap$na : [];

      switch (astNode.kind) {
        case _kinds$2.Kind.OBJECT_TYPE_DEFINITION:
          {
            var extensionASTNodes = extensionNodes;
            var allNodes = [astNode].concat(extensionASTNodes);
            return new _definition$3.GraphQLObjectType({
              name: name,
              description: description,
              interfaces: function interfaces() {
                return buildInterfaces(allNodes);
              },
              fields: function fields() {
                return buildFieldMap(allNodes);
              },
              astNode: astNode,
              extensionASTNodes: extensionASTNodes
            });
          }

        case _kinds$2.Kind.INTERFACE_TYPE_DEFINITION:
          {
            var _extensionASTNodes = extensionNodes;

            var _allNodes = [astNode].concat(_extensionASTNodes);

            return new _definition$3.GraphQLInterfaceType({
              name: name,
              description: description,
              interfaces: function interfaces() {
                return buildInterfaces(_allNodes);
              },
              fields: function fields() {
                return buildFieldMap(_allNodes);
              },
              astNode: astNode,
              extensionASTNodes: _extensionASTNodes
            });
          }

        case _kinds$2.Kind.ENUM_TYPE_DEFINITION:
          {
            var _extensionASTNodes2 = extensionNodes;

            var _allNodes2 = [astNode].concat(_extensionASTNodes2);

            return new _definition$3.GraphQLEnumType({
              name: name,
              description: description,
              values: buildEnumValueMap(_allNodes2),
              astNode: astNode,
              extensionASTNodes: _extensionASTNodes2
            });
          }

        case _kinds$2.Kind.UNION_TYPE_DEFINITION:
          {
            var _extensionASTNodes3 = extensionNodes;

            var _allNodes3 = [astNode].concat(_extensionASTNodes3);

            return new _definition$3.GraphQLUnionType({
              name: name,
              description: description,
              types: function types() {
                return buildUnionTypes(_allNodes3);
              },
              astNode: astNode,
              extensionASTNodes: _extensionASTNodes3
            });
          }

        case _kinds$2.Kind.SCALAR_TYPE_DEFINITION:
          {
            var _extensionASTNodes4 = extensionNodes;
            return new _definition$3.GraphQLScalarType({
              name: name,
              description: description,
              specifiedByUrl: getSpecifiedByUrl(astNode),
              astNode: astNode,
              extensionASTNodes: _extensionASTNodes4
            });
          }

        case _kinds$2.Kind.INPUT_OBJECT_TYPE_DEFINITION:
          {
            var _extensionASTNodes5 = extensionNodes;

            var _allNodes4 = [astNode].concat(_extensionASTNodes5);

            return new _definition$3.GraphQLInputObjectType({
              name: name,
              description: description,
              fields: function fields() {
                return buildInputFieldMap(_allNodes4);
              },
              astNode: astNode,
              extensionASTNodes: _extensionASTNodes5
            });
          }
      } // istanbul ignore next (Not reachable. All possible type definition nodes have been considered)


      (0, _invariant$3.default)(0, 'Unexpected type definition node: ' + (0, _inspect$3.default)(astNode));
    }
  }

  var stdTypeMap = (0, _keyMap$1.default)(_scalars$2.specifiedScalarTypes.concat(_introspection$2.introspectionTypes), function (type) {
    return type.name;
  });
  /**
   * Given a field or enum value node, returns the string value for the
   * deprecation reason.
   */

  function getDeprecationReason(node) {
    var deprecated = (0, _values.getDirectiveValues)(_directives$3.GraphQLDeprecatedDirective, node);
    return deprecated === null || deprecated === void 0 ? void 0 : deprecated.reason;
  }
  /**
   * Given a scalar node, returns the string value for the specifiedByUrl.
   */


  function getSpecifiedByUrl(node) {
    var specifiedBy = (0, _values.getDirectiveValues)(_directives$3.GraphQLSpecifiedByDirective, node);
    return specifiedBy === null || specifiedBy === void 0 ? void 0 : specifiedBy.url;
  }
  /**
   * Given an ast node, returns its string description.
   * @deprecated: provided to ease adoption and will be removed in v16.
   *
   * Accepts options as a second argument:
   *
   *    - commentDescriptions:
   *        Provide true to use preceding comments as the description.
   *
   */


  function getDescription(node, options) {
    if (node.description) {
      return node.description.value;
    }

    if ((options === null || options === void 0 ? void 0 : options.commentDescriptions) === true) {
      var rawValue = getLeadingCommentBlock(node);

      if (rawValue !== undefined) {
        return (0, _blockString$2.dedentBlockStringValue)('\n' + rawValue);
      }
    }
  }

  function getLeadingCommentBlock(node) {
    var loc = node.loc;

    if (!loc) {
      return;
    }

    var comments = [];
    var token = loc.startToken.prev;

    while (token != null && token.kind === _tokenKind$1.TokenKind.COMMENT && token.next && token.prev && token.line + 1 === token.next.line && token.line !== token.prev.line) {
      var value = String(token.value);
      comments.push(value);
      token = token.prev;
    }

    return comments.length > 0 ? comments.reverse().join('\n') : undefined;
  }

  Object.defineProperty(buildASTSchema$1, "__esModule", {
    value: true
  });
  buildASTSchema$1.buildASTSchema = buildASTSchema;
  buildASTSchema$1.buildSchema = buildSchema;

  var _devAssert = _interopRequireDefault$3(devAssert$1);

  var _kinds$1 = kinds;

  var _parser = parser;

  var _validate$1 = validate$2;

  var _schema$1 = schema;

  var _directives$2 = directives;

  var _extendSchema = extendSchema$1;

  function _interopRequireDefault$3(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  /**
   * This takes the ast of a schema document produced by the parse function in
   * src/language/parser.js.
   *
   * If no schema definition is provided, then it will look for types named Query
   * and Mutation.
   *
   * Given that AST it constructs a GraphQLSchema. The resulting schema
   * has no resolve methods, so execution will use default resolvers.
   *
   * Accepts options as a second argument:
   *
   *    - commentDescriptions:
   *        Provide true to use preceding comments as the description.
   *
   */
  function buildASTSchema(documentAST, options) {
    documentAST != null && documentAST.kind === _kinds$1.Kind.DOCUMENT || (0, _devAssert.default)(0, 'Must provide valid Document AST.');

    if ((options === null || options === void 0 ? void 0 : options.assumeValid) !== true && (options === null || options === void 0 ? void 0 : options.assumeValidSDL) !== true) {
      (0, _validate$1.assertValidSDL)(documentAST);
    }

    var emptySchemaConfig = {
      description: undefined,
      types: [],
      directives: [],
      extensions: undefined,
      extensionASTNodes: [],
      assumeValid: false
    };
    var config = (0, _extendSchema.extendSchemaImpl)(emptySchemaConfig, documentAST, options);

    if (config.astNode == null) {
      for (var _i2 = 0, _config$types2 = config.types; _i2 < _config$types2.length; _i2++) {
        var type = _config$types2[_i2];

        switch (type.name) {
          // Note: While this could make early assertions to get the correctly
          // typed values below, that would throw immediately while type system
          // validation with validateSchema() will produce more actionable results.
          case 'Query':
            config.query = type;
            break;

          case 'Mutation':
            config.mutation = type;
            break;

          case 'Subscription':
            config.subscription = type;
            break;
        }
      }
    }

    var directives = config.directives; // If specified directives were not explicitly declared, add them.

    var _loop = function _loop(_i4) {
      var stdDirective = _directives$2.specifiedDirectives[_i4];

      if (directives.every(function (directive) {
        return directive.name !== stdDirective.name;
      })) {
        directives.push(stdDirective);
      }
    };

    for (var _i4 = 0; _i4 < _directives$2.specifiedDirectives.length; _i4++) {
      _loop(_i4);
    }

    return new _schema$1.GraphQLSchema(config);
  }
  /**
   * A helper function to build a GraphQLSchema directly from a source
   * document.
   */


  function buildSchema(source, options) {
    var document = (0, _parser.parse)(source, {
      noLocation: options === null || options === void 0 ? void 0 : options.noLocation,
      allowLegacySDLEmptyFields: options === null || options === void 0 ? void 0 : options.allowLegacySDLEmptyFields,
      allowLegacySDLImplementsInterfaces: options === null || options === void 0 ? void 0 : options.allowLegacySDLImplementsInterfaces,
      experimentalFragmentVariables: options === null || options === void 0 ? void 0 : options.experimentalFragmentVariables
    });
    return buildASTSchema(document, {
      commentDescriptions: options === null || options === void 0 ? void 0 : options.commentDescriptions,
      assumeValidSDL: options === null || options === void 0 ? void 0 : options.assumeValidSDL,
      assumeValid: options === null || options === void 0 ? void 0 : options.assumeValid
    });
  }

  var lexicographicSortSchema$1 = {};

  Object.defineProperty(lexicographicSortSchema$1, "__esModule", {
    value: true
  });
  lexicographicSortSchema$1.lexicographicSortSchema = lexicographicSortSchema;

  var _objectValues$2 = _interopRequireDefault$2(objectValues$1);

  var _inspect$2 = _interopRequireDefault$2(inspect$1);

  var _invariant$2 = _interopRequireDefault$2(invariant$1);

  var _keyValMap = _interopRequireDefault$2(keyValMap$1);

  var _naturalCompare$1 = _interopRequireDefault$2(naturalCompare$1);

  var _schema = schema;

  var _directives$1 = directives;

  var _introspection$1 = introspection;

  var _definition$2 = definition;

  function _interopRequireDefault$2(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function ownKeys$1(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$1(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$1(Object(source), true).forEach(function (key) { _defineProperty$1(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$1(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

  function _defineProperty$1(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

  /**
   * Sort GraphQLSchema.
   *
   * This function returns a sorted copy of the given GraphQLSchema.
   */
  function lexicographicSortSchema(schema) {
    var schemaConfig = schema.toConfig();
    var typeMap = (0, _keyValMap.default)(sortByName(schemaConfig.types), function (type) {
      return type.name;
    }, sortNamedType);
    return new _schema.GraphQLSchema(_objectSpread$1(_objectSpread$1({}, schemaConfig), {}, {
      types: (0, _objectValues$2.default)(typeMap),
      directives: sortByName(schemaConfig.directives).map(sortDirective),
      query: replaceMaybeType(schemaConfig.query),
      mutation: replaceMaybeType(schemaConfig.mutation),
      subscription: replaceMaybeType(schemaConfig.subscription)
    }));

    function replaceType(type) {
      if ((0, _definition$2.isListType)(type)) {
        // $FlowFixMe[incompatible-return]
        return new _definition$2.GraphQLList(replaceType(type.ofType));
      } else if ((0, _definition$2.isNonNullType)(type)) {
        // $FlowFixMe[incompatible-return]
        return new _definition$2.GraphQLNonNull(replaceType(type.ofType));
      }

      return replaceNamedType(type);
    }

    function replaceNamedType(type) {
      return typeMap[type.name];
    }

    function replaceMaybeType(maybeType) {
      return maybeType && replaceNamedType(maybeType);
    }

    function sortDirective(directive) {
      var config = directive.toConfig();
      return new _directives$1.GraphQLDirective(_objectSpread$1(_objectSpread$1({}, config), {}, {
        locations: sortBy(config.locations, function (x) {
          return x;
        }),
        args: sortArgs(config.args)
      }));
    }

    function sortArgs(args) {
      return sortObjMap(args, function (arg) {
        return _objectSpread$1(_objectSpread$1({}, arg), {}, {
          type: replaceType(arg.type)
        });
      });
    }

    function sortFields(fieldsMap) {
      return sortObjMap(fieldsMap, function (field) {
        return _objectSpread$1(_objectSpread$1({}, field), {}, {
          type: replaceType(field.type),
          args: sortArgs(field.args)
        });
      });
    }

    function sortInputFields(fieldsMap) {
      return sortObjMap(fieldsMap, function (field) {
        return _objectSpread$1(_objectSpread$1({}, field), {}, {
          type: replaceType(field.type)
        });
      });
    }

    function sortTypes(arr) {
      return sortByName(arr).map(replaceNamedType);
    }

    function sortNamedType(type) {
      if ((0, _definition$2.isScalarType)(type) || (0, _introspection$1.isIntrospectionType)(type)) {
        return type;
      }

      if ((0, _definition$2.isObjectType)(type)) {
        var config = type.toConfig();
        return new _definition$2.GraphQLObjectType(_objectSpread$1(_objectSpread$1({}, config), {}, {
          interfaces: function interfaces() {
            return sortTypes(config.interfaces);
          },
          fields: function fields() {
            return sortFields(config.fields);
          }
        }));
      }

      if ((0, _definition$2.isInterfaceType)(type)) {
        var _config = type.toConfig();

        return new _definition$2.GraphQLInterfaceType(_objectSpread$1(_objectSpread$1({}, _config), {}, {
          interfaces: function interfaces() {
            return sortTypes(_config.interfaces);
          },
          fields: function fields() {
            return sortFields(_config.fields);
          }
        }));
      }

      if ((0, _definition$2.isUnionType)(type)) {
        var _config2 = type.toConfig();

        return new _definition$2.GraphQLUnionType(_objectSpread$1(_objectSpread$1({}, _config2), {}, {
          types: function types() {
            return sortTypes(_config2.types);
          }
        }));
      }

      if ((0, _definition$2.isEnumType)(type)) {
        var _config3 = type.toConfig();

        return new _definition$2.GraphQLEnumType(_objectSpread$1(_objectSpread$1({}, _config3), {}, {
          values: sortObjMap(_config3.values)
        }));
      } // istanbul ignore else (See: 'https://github.com/graphql/graphql-js/issues/2618')


      if ((0, _definition$2.isInputObjectType)(type)) {
        var _config4 = type.toConfig();

        return new _definition$2.GraphQLInputObjectType(_objectSpread$1(_objectSpread$1({}, _config4), {}, {
          fields: function fields() {
            return sortInputFields(_config4.fields);
          }
        }));
      } // istanbul ignore next (Not reachable. All possible types have been considered)


      (0, _invariant$2.default)(0, 'Unexpected type: ' + (0, _inspect$2.default)(type));
    }
  }

  function sortObjMap(map, sortValueFn) {
    var sortedMap = Object.create(null);
    var sortedKeys = sortBy(Object.keys(map), function (x) {
      return x;
    });

    for (var _i2 = 0; _i2 < sortedKeys.length; _i2++) {
      var key = sortedKeys[_i2];
      var value = map[key];
      sortedMap[key] = sortValueFn ? sortValueFn(value) : value;
    }

    return sortedMap;
  }

  function sortByName(array) {
    return sortBy(array, function (obj) {
      return obj.name;
    });
  }

  function sortBy(array, mapToKey) {
    return array.slice().sort(function (obj1, obj2) {
      var key1 = mapToKey(obj1);
      var key2 = mapToKey(obj2);
      return (0, _naturalCompare$1.default)(key1, key2);
    });
  }

  var printSchema$1 = {};

  Object.defineProperty(printSchema$1, "__esModule", {
    value: true
  });
  printSchema$1.printSchema = printSchema;
  printSchema$1.printIntrospectionSchema = printIntrospectionSchema;
  printSchema$1.printType = printType;

  var _objectValues$1 = _interopRequireDefault$1(objectValues$1);

  var _inspect$1 = _interopRequireDefault$1(inspect$1);

  var _invariant$1 = _interopRequireDefault$1(invariant$1);

  var _printer$1 = printer;

  var _blockString$1 = blockString;

  var _introspection = introspection;

  var _scalars$1 = scalars;

  var _directives = directives;

  var _definition$1 = definition;

  var _astFromValue$1 = astFromValue$1;

  function _interopRequireDefault$1(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  /**
   * Accepts options as a second argument:
   *
   *    - commentDescriptions:
   *        Provide true to use preceding comments as the description.
   *
   */
  function printSchema(schema, options) {
    return printFilteredSchema(schema, function (n) {
      return !(0, _directives.isSpecifiedDirective)(n);
    }, isDefinedType, options);
  }

  function printIntrospectionSchema(schema, options) {
    return printFilteredSchema(schema, _directives.isSpecifiedDirective, _introspection.isIntrospectionType, options);
  }

  function isDefinedType(type) {
    return !(0, _scalars$1.isSpecifiedScalarType)(type) && !(0, _introspection.isIntrospectionType)(type);
  }

  function printFilteredSchema(schema, directiveFilter, typeFilter, options) {
    var directives = schema.getDirectives().filter(directiveFilter);
    var types = (0, _objectValues$1.default)(schema.getTypeMap()).filter(typeFilter);
    return [printSchemaDefinition(schema)].concat(directives.map(function (directive) {
      return printDirective(directive, options);
    }), types.map(function (type) {
      return printType(type, options);
    })).filter(Boolean).join('\n\n') + '\n';
  }

  function printSchemaDefinition(schema) {
    if (schema.description == null && isSchemaOfCommonNames(schema)) {
      return;
    }

    var operationTypes = [];
    var queryType = schema.getQueryType();

    if (queryType) {
      operationTypes.push("  query: ".concat(queryType.name));
    }

    var mutationType = schema.getMutationType();

    if (mutationType) {
      operationTypes.push("  mutation: ".concat(mutationType.name));
    }

    var subscriptionType = schema.getSubscriptionType();

    if (subscriptionType) {
      operationTypes.push("  subscription: ".concat(subscriptionType.name));
    }

    return printDescription({}, schema) + "schema {\n".concat(operationTypes.join('\n'), "\n}");
  }
  /**
   * GraphQL schema define root types for each type of operation. These types are
   * the same as any other type and can be named in any manner, however there is
   * a common naming convention:
   *
   *   schema {
   *     query: Query
   *     mutation: Mutation
   *   }
   *
   * When using this naming convention, the schema description can be omitted.
   */


  function isSchemaOfCommonNames(schema) {
    var queryType = schema.getQueryType();

    if (queryType && queryType.name !== 'Query') {
      return false;
    }

    var mutationType = schema.getMutationType();

    if (mutationType && mutationType.name !== 'Mutation') {
      return false;
    }

    var subscriptionType = schema.getSubscriptionType();

    if (subscriptionType && subscriptionType.name !== 'Subscription') {
      return false;
    }

    return true;
  }

  function printType(type, options) {
    if ((0, _definition$1.isScalarType)(type)) {
      return printScalar(type, options);
    }

    if ((0, _definition$1.isObjectType)(type)) {
      return printObject(type, options);
    }

    if ((0, _definition$1.isInterfaceType)(type)) {
      return printInterface(type, options);
    }

    if ((0, _definition$1.isUnionType)(type)) {
      return printUnion(type, options);
    }

    if ((0, _definition$1.isEnumType)(type)) {
      return printEnum(type, options);
    } // istanbul ignore else (See: 'https://github.com/graphql/graphql-js/issues/2618')


    if ((0, _definition$1.isInputObjectType)(type)) {
      return printInputObject(type, options);
    } // istanbul ignore next (Not reachable. All possible types have been considered)


    (0, _invariant$1.default)(0, 'Unexpected type: ' + (0, _inspect$1.default)(type));
  }

  function printScalar(type, options) {
    return printDescription(options, type) + "scalar ".concat(type.name) + printSpecifiedByUrl(type);
  }

  function printImplementedInterfaces(type) {
    var interfaces = type.getInterfaces();
    return interfaces.length ? ' implements ' + interfaces.map(function (i) {
      return i.name;
    }).join(' & ') : '';
  }

  function printObject(type, options) {
    return printDescription(options, type) + "type ".concat(type.name) + printImplementedInterfaces(type) + printFields(options, type);
  }

  function printInterface(type, options) {
    return printDescription(options, type) + "interface ".concat(type.name) + printImplementedInterfaces(type) + printFields(options, type);
  }

  function printUnion(type, options) {
    var types = type.getTypes();
    var possibleTypes = types.length ? ' = ' + types.join(' | ') : '';
    return printDescription(options, type) + 'union ' + type.name + possibleTypes;
  }

  function printEnum(type, options) {
    var values = type.getValues().map(function (value, i) {
      return printDescription(options, value, '  ', !i) + '  ' + value.name + printDeprecated(value.deprecationReason);
    });
    return printDescription(options, type) + "enum ".concat(type.name) + printBlock(values);
  }

  function printInputObject(type, options) {
    var fields = (0, _objectValues$1.default)(type.getFields()).map(function (f, i) {
      return printDescription(options, f, '  ', !i) + '  ' + printInputValue(f);
    });
    return printDescription(options, type) + "input ".concat(type.name) + printBlock(fields);
  }

  function printFields(options, type) {
    var fields = (0, _objectValues$1.default)(type.getFields()).map(function (f, i) {
      return printDescription(options, f, '  ', !i) + '  ' + f.name + printArgs(options, f.args, '  ') + ': ' + String(f.type) + printDeprecated(f.deprecationReason);
    });
    return printBlock(fields);
  }

  function printBlock(items) {
    return items.length !== 0 ? ' {\n' + items.join('\n') + '\n}' : '';
  }

  function printArgs(options, args) {
    var indentation = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';

    if (args.length === 0) {
      return '';
    } // If every arg does not have a description, print them on one line.


    if (args.every(function (arg) {
      return !arg.description;
    })) {
      return '(' + args.map(printInputValue).join(', ') + ')';
    }

    return '(\n' + args.map(function (arg, i) {
      return printDescription(options, arg, '  ' + indentation, !i) + '  ' + indentation + printInputValue(arg);
    }).join('\n') + '\n' + indentation + ')';
  }

  function printInputValue(arg) {
    var defaultAST = (0, _astFromValue$1.astFromValue)(arg.defaultValue, arg.type);
    var argDecl = arg.name + ': ' + String(arg.type);

    if (defaultAST) {
      argDecl += " = ".concat((0, _printer$1.print)(defaultAST));
    }

    return argDecl + printDeprecated(arg.deprecationReason);
  }

  function printDirective(directive, options) {
    return printDescription(options, directive) + 'directive @' + directive.name + printArgs(options, directive.args) + (directive.isRepeatable ? ' repeatable' : '') + ' on ' + directive.locations.join(' | ');
  }

  function printDeprecated(reason) {
    if (reason == null) {
      return '';
    }

    var reasonAST = (0, _astFromValue$1.astFromValue)(reason, _scalars$1.GraphQLString);

    if (reasonAST && reason !== _directives.DEFAULT_DEPRECATION_REASON) {
      return ' @deprecated(reason: ' + (0, _printer$1.print)(reasonAST) + ')';
    }

    return ' @deprecated';
  }

  function printSpecifiedByUrl(scalar) {
    if (scalar.specifiedByUrl == null) {
      return '';
    }

    var url = scalar.specifiedByUrl;
    var urlAST = (0, _astFromValue$1.astFromValue)(url, _scalars$1.GraphQLString);
    urlAST || (0, _invariant$1.default)(0, 'Unexpected null value returned from `astFromValue` for specifiedByUrl');
    return ' @specifiedBy(url: ' + (0, _printer$1.print)(urlAST) + ')';
  }

  function printDescription(options, def) {
    var indentation = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';
    var firstInBlock = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;
    var description = def.description;

    if (description == null) {
      return '';
    }

    if ((options === null || options === void 0 ? void 0 : options.commentDescriptions) === true) {
      return printDescriptionWithComments(description, indentation, firstInBlock);
    }

    var preferMultipleLines = description.length > 70;
    var blockString = (0, _blockString$1.printBlockString)(description, '', preferMultipleLines);
    var prefix = indentation && !firstInBlock ? '\n' + indentation : indentation;
    return prefix + blockString.replace(/\n/g, '\n' + indentation) + '\n';
  }

  function printDescriptionWithComments(description, indentation, firstInBlock) {
    var prefix = indentation && !firstInBlock ? '\n' : '';
    var comment = description.split('\n').map(function (line) {
      return indentation + (line !== '' ? '# ' + line : '#');
    }).join('\n');
    return prefix + comment + '\n';
  }

  var concatAST$1 = {};

  Object.defineProperty(concatAST$1, "__esModule", {
    value: true
  });
  concatAST$1.concatAST = concatAST;

  /**
   * Provided a collection of ASTs, presumably each from different files,
   * concatenate the ASTs together into batched AST, useful for validating many
   * GraphQL source files which together represent one conceptual application.
   */
  function concatAST(documents) {
    var definitions = [];

    for (var _i2 = 0; _i2 < documents.length; _i2++) {
      var doc = documents[_i2];
      definitions = definitions.concat(doc.definitions);
    }

    return {
      kind: 'Document',
      definitions: definitions
    };
  }

  var separateOperations$1 = {};

  Object.defineProperty(separateOperations$1, "__esModule", {
    value: true
  });
  separateOperations$1.separateOperations = separateOperations;

  var _kinds = kinds;

  var _visitor$1 = visitor;

  /**
   * separateOperations accepts a single AST document which may contain many
   * operations and fragments and returns a collection of AST documents each of
   * which contains a single operation as well the fragment definitions it
   * refers to.
   */
  function separateOperations(documentAST) {
    var operations = [];
    var depGraph = Object.create(null); // Populate metadata and build a dependency graph.

    for (var _i2 = 0, _documentAST$definiti2 = documentAST.definitions; _i2 < _documentAST$definiti2.length; _i2++) {
      var definitionNode = _documentAST$definiti2[_i2];

      switch (definitionNode.kind) {
        case _kinds.Kind.OPERATION_DEFINITION:
          operations.push(definitionNode);
          break;

        case _kinds.Kind.FRAGMENT_DEFINITION:
          depGraph[definitionNode.name.value] = collectDependencies(definitionNode.selectionSet);
          break;
      }
    } // For each operation, produce a new synthesized AST which includes only what
    // is necessary for completing that operation.


    var separatedDocumentASTs = Object.create(null);

    var _loop = function _loop(_i4) {
      var operation = operations[_i4];
      var dependencies = new Set();

      for (var _i6 = 0, _collectDependencies2 = collectDependencies(operation.selectionSet); _i6 < _collectDependencies2.length; _i6++) {
        var fragmentName = _collectDependencies2[_i6];
        collectTransitiveDependencies(dependencies, depGraph, fragmentName);
      } // Provides the empty string for anonymous operations.


      var operationName = operation.name ? operation.name.value : ''; // The list of definition nodes to be included for this operation, sorted
      // to retain the same order as the original document.

      separatedDocumentASTs[operationName] = {
        kind: _kinds.Kind.DOCUMENT,
        definitions: documentAST.definitions.filter(function (node) {
          return node === operation || node.kind === _kinds.Kind.FRAGMENT_DEFINITION && dependencies.has(node.name.value);
        })
      };
    };

    for (var _i4 = 0; _i4 < operations.length; _i4++) {
      _loop(_i4);
    }

    return separatedDocumentASTs;
  }

  // From a dependency graph, collects a list of transitive dependencies by
  // recursing through a dependency graph.
  function collectTransitiveDependencies(collected, depGraph, fromName) {
    if (!collected.has(fromName)) {
      collected.add(fromName);
      var immediateDeps = depGraph[fromName];

      if (immediateDeps !== undefined) {
        for (var _i8 = 0; _i8 < immediateDeps.length; _i8++) {
          var toName = immediateDeps[_i8];
          collectTransitiveDependencies(collected, depGraph, toName);
        }
      }
    }
  }

  function collectDependencies(selectionSet) {
    var dependencies = [];
    (0, _visitor$1.visit)(selectionSet, {
      FragmentSpread: function FragmentSpread(node) {
        dependencies.push(node.name.value);
      }
    });
    return dependencies;
  }

  var stripIgnoredCharacters$1 = {};

  Object.defineProperty(stripIgnoredCharacters$1, "__esModule", {
    value: true
  });
  stripIgnoredCharacters$1.stripIgnoredCharacters = stripIgnoredCharacters;

  var _source = source;

  var _tokenKind = tokenKind;

  var _lexer = lexer;

  var _blockString = blockString;

  /**
   * Strips characters that are not significant to the validity or execution
   * of a GraphQL document:
   *   - UnicodeBOM
   *   - WhiteSpace
   *   - LineTerminator
   *   - Comment
   *   - Comma
   *   - BlockString indentation
   *
   * Note: It is required to have a delimiter character between neighboring
   * non-punctuator tokens and this function always uses single space as delimiter.
   *
   * It is guaranteed that both input and output documents if parsed would result
   * in the exact same AST except for nodes location.
   *
   * Warning: It is guaranteed that this function will always produce stable results.
   * However, it's not guaranteed that it will stay the same between different
   * releases due to bugfixes or changes in the GraphQL specification.
   *
   * Query example:
   *
   * query SomeQuery($foo: String!, $bar: String) {
   *   someField(foo: $foo, bar: $bar) {
   *     a
   *     b {
   *       c
   *       d
   *     }
   *   }
   * }
   *
   * Becomes:
   *
   * query SomeQuery($foo:String!$bar:String){someField(foo:$foo bar:$bar){a b{c d}}}
   *
   * SDL example:
   *
   * """
   * Type description
   * """
   * type Foo {
   *   """
   *   Field description
   *   """
   *   bar: String
   * }
   *
   * Becomes:
   *
   * """Type description""" type Foo{"""Field description""" bar:String}
   */
  function stripIgnoredCharacters(source) {
    var sourceObj = (0, _source.isSource)(source) ? source : new _source.Source(source);
    var body = sourceObj.body;
    var lexer = new _lexer.Lexer(sourceObj);
    var strippedBody = '';
    var wasLastAddedTokenNonPunctuator = false;

    while (lexer.advance().kind !== _tokenKind.TokenKind.EOF) {
      var currentToken = lexer.token;
      var tokenKind = currentToken.kind;
      /**
       * Every two non-punctuator tokens should have space between them.
       * Also prevent case of non-punctuator token following by spread resulting
       * in invalid token (e.g. `1...` is invalid Float token).
       */

      var isNonPunctuator = !(0, _lexer.isPunctuatorTokenKind)(currentToken.kind);

      if (wasLastAddedTokenNonPunctuator) {
        if (isNonPunctuator || currentToken.kind === _tokenKind.TokenKind.SPREAD) {
          strippedBody += ' ';
        }
      }

      var tokenBody = body.slice(currentToken.start, currentToken.end);

      if (tokenKind === _tokenKind.TokenKind.BLOCK_STRING) {
        strippedBody += dedentBlockString(tokenBody);
      } else {
        strippedBody += tokenBody;
      }

      wasLastAddedTokenNonPunctuator = isNonPunctuator;
    }

    return strippedBody;
  }

  function dedentBlockString(blockStr) {
    // skip leading and trailing triple quotations
    var rawStr = blockStr.slice(3, -3);
    var body = (0, _blockString.dedentBlockStringValue)(rawStr);

    if ((0, _blockString.getBlockStringIndentation)(body) > 0) {
      body = '\n' + body;
    }

    var lastChar = body[body.length - 1];
    var hasTrailingQuote = lastChar === '"' && body.slice(-4) !== '\\"""';

    if (hasTrailingQuote || lastChar === '\\') {
      body += '\n';
    }

    return '"""' + body + '"""';
  }

  var findBreakingChanges$1 = {};

  Object.defineProperty(findBreakingChanges$1, "__esModule", {
    value: true
  });
  findBreakingChanges$1.findBreakingChanges = findBreakingChanges;
  findBreakingChanges$1.findDangerousChanges = findDangerousChanges;
  findBreakingChanges$1.DangerousChangeType = findBreakingChanges$1.BreakingChangeType = void 0;

  var _objectValues = _interopRequireDefault(objectValues$1);

  var _keyMap = _interopRequireDefault(keyMap$1);

  var _inspect = _interopRequireDefault(inspect$1);

  var _invariant = _interopRequireDefault(invariant$1);

  var _naturalCompare = _interopRequireDefault(naturalCompare$1);

  var _printer = printer;

  var _visitor = visitor;

  var _scalars = scalars;

  var _definition = definition;

  var _astFromValue = astFromValue$1;

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

  function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

  var BreakingChangeType = Object.freeze({
    TYPE_REMOVED: 'TYPE_REMOVED',
    TYPE_CHANGED_KIND: 'TYPE_CHANGED_KIND',
    TYPE_REMOVED_FROM_UNION: 'TYPE_REMOVED_FROM_UNION',
    VALUE_REMOVED_FROM_ENUM: 'VALUE_REMOVED_FROM_ENUM',
    REQUIRED_INPUT_FIELD_ADDED: 'REQUIRED_INPUT_FIELD_ADDED',
    IMPLEMENTED_INTERFACE_REMOVED: 'IMPLEMENTED_INTERFACE_REMOVED',
    FIELD_REMOVED: 'FIELD_REMOVED',
    FIELD_CHANGED_KIND: 'FIELD_CHANGED_KIND',
    REQUIRED_ARG_ADDED: 'REQUIRED_ARG_ADDED',
    ARG_REMOVED: 'ARG_REMOVED',
    ARG_CHANGED_KIND: 'ARG_CHANGED_KIND',
    DIRECTIVE_REMOVED: 'DIRECTIVE_REMOVED',
    DIRECTIVE_ARG_REMOVED: 'DIRECTIVE_ARG_REMOVED',
    REQUIRED_DIRECTIVE_ARG_ADDED: 'REQUIRED_DIRECTIVE_ARG_ADDED',
    DIRECTIVE_REPEATABLE_REMOVED: 'DIRECTIVE_REPEATABLE_REMOVED',
    DIRECTIVE_LOCATION_REMOVED: 'DIRECTIVE_LOCATION_REMOVED'
  });
  findBreakingChanges$1.BreakingChangeType = BreakingChangeType;
  var DangerousChangeType = Object.freeze({
    VALUE_ADDED_TO_ENUM: 'VALUE_ADDED_TO_ENUM',
    TYPE_ADDED_TO_UNION: 'TYPE_ADDED_TO_UNION',
    OPTIONAL_INPUT_FIELD_ADDED: 'OPTIONAL_INPUT_FIELD_ADDED',
    OPTIONAL_ARG_ADDED: 'OPTIONAL_ARG_ADDED',
    IMPLEMENTED_INTERFACE_ADDED: 'IMPLEMENTED_INTERFACE_ADDED',
    ARG_DEFAULT_VALUE_CHANGE: 'ARG_DEFAULT_VALUE_CHANGE'
  });
  findBreakingChanges$1.DangerousChangeType = DangerousChangeType;

  /**
   * Given two schemas, returns an Array containing descriptions of all the types
   * of breaking changes covered by the other functions down below.
   */
  function findBreakingChanges(oldSchema, newSchema) {
    var breakingChanges = findSchemaChanges(oldSchema, newSchema).filter(function (change) {
      return change.type in BreakingChangeType;
    });
    return breakingChanges;
  }
  /**
   * Given two schemas, returns an Array containing descriptions of all the types
   * of potentially dangerous changes covered by the other functions down below.
   */


  function findDangerousChanges(oldSchema, newSchema) {
    var dangerousChanges = findSchemaChanges(oldSchema, newSchema).filter(function (change) {
      return change.type in DangerousChangeType;
    });
    return dangerousChanges;
  }

  function findSchemaChanges(oldSchema, newSchema) {
    return [].concat(findTypeChanges(oldSchema, newSchema), findDirectiveChanges(oldSchema, newSchema));
  }

  function findDirectiveChanges(oldSchema, newSchema) {
    var schemaChanges = [];
    var directivesDiff = diff(oldSchema.getDirectives(), newSchema.getDirectives());

    for (var _i2 = 0, _directivesDiff$remov2 = directivesDiff.removed; _i2 < _directivesDiff$remov2.length; _i2++) {
      var oldDirective = _directivesDiff$remov2[_i2];
      schemaChanges.push({
        type: BreakingChangeType.DIRECTIVE_REMOVED,
        description: "".concat(oldDirective.name, " was removed.")
      });
    }

    for (var _i4 = 0, _directivesDiff$persi2 = directivesDiff.persisted; _i4 < _directivesDiff$persi2.length; _i4++) {
      var _ref2 = _directivesDiff$persi2[_i4];
      var _oldDirective = _ref2[0];
      var newDirective = _ref2[1];
      var argsDiff = diff(_oldDirective.args, newDirective.args);

      for (var _i6 = 0, _argsDiff$added2 = argsDiff.added; _i6 < _argsDiff$added2.length; _i6++) {
        var newArg = _argsDiff$added2[_i6];

        if ((0, _definition.isRequiredArgument)(newArg)) {
          schemaChanges.push({
            type: BreakingChangeType.REQUIRED_DIRECTIVE_ARG_ADDED,
            description: "A required arg ".concat(newArg.name, " on directive ").concat(_oldDirective.name, " was added.")
          });
        }
      }

      for (var _i8 = 0, _argsDiff$removed2 = argsDiff.removed; _i8 < _argsDiff$removed2.length; _i8++) {
        var oldArg = _argsDiff$removed2[_i8];
        schemaChanges.push({
          type: BreakingChangeType.DIRECTIVE_ARG_REMOVED,
          description: "".concat(oldArg.name, " was removed from ").concat(_oldDirective.name, ".")
        });
      }

      if (_oldDirective.isRepeatable && !newDirective.isRepeatable) {
        schemaChanges.push({
          type: BreakingChangeType.DIRECTIVE_REPEATABLE_REMOVED,
          description: "Repeatable flag was removed from ".concat(_oldDirective.name, ".")
        });
      }

      for (var _i10 = 0, _oldDirective$locatio2 = _oldDirective.locations; _i10 < _oldDirective$locatio2.length; _i10++) {
        var location = _oldDirective$locatio2[_i10];

        if (newDirective.locations.indexOf(location) === -1) {
          schemaChanges.push({
            type: BreakingChangeType.DIRECTIVE_LOCATION_REMOVED,
            description: "".concat(location, " was removed from ").concat(_oldDirective.name, ".")
          });
        }
      }
    }

    return schemaChanges;
  }

  function findTypeChanges(oldSchema, newSchema) {
    var schemaChanges = [];
    var typesDiff = diff((0, _objectValues.default)(oldSchema.getTypeMap()), (0, _objectValues.default)(newSchema.getTypeMap()));

    for (var _i12 = 0, _typesDiff$removed2 = typesDiff.removed; _i12 < _typesDiff$removed2.length; _i12++) {
      var oldType = _typesDiff$removed2[_i12];
      schemaChanges.push({
        type: BreakingChangeType.TYPE_REMOVED,
        description: (0, _scalars.isSpecifiedScalarType)(oldType) ? "Standard scalar ".concat(oldType.name, " was removed because it is not referenced anymore.") : "".concat(oldType.name, " was removed.")
      });
    }

    for (var _i14 = 0, _typesDiff$persisted2 = typesDiff.persisted; _i14 < _typesDiff$persisted2.length; _i14++) {
      var _ref4 = _typesDiff$persisted2[_i14];
      var _oldType = _ref4[0];
      var newType = _ref4[1];

      if ((0, _definition.isEnumType)(_oldType) && (0, _definition.isEnumType)(newType)) {
        schemaChanges.push.apply(schemaChanges, findEnumTypeChanges(_oldType, newType));
      } else if ((0, _definition.isUnionType)(_oldType) && (0, _definition.isUnionType)(newType)) {
        schemaChanges.push.apply(schemaChanges, findUnionTypeChanges(_oldType, newType));
      } else if ((0, _definition.isInputObjectType)(_oldType) && (0, _definition.isInputObjectType)(newType)) {
        schemaChanges.push.apply(schemaChanges, findInputObjectTypeChanges(_oldType, newType));
      } else if ((0, _definition.isObjectType)(_oldType) && (0, _definition.isObjectType)(newType)) {
        schemaChanges.push.apply(schemaChanges, findFieldChanges(_oldType, newType).concat(findImplementedInterfacesChanges(_oldType, newType)));
      } else if ((0, _definition.isInterfaceType)(_oldType) && (0, _definition.isInterfaceType)(newType)) {
        schemaChanges.push.apply(schemaChanges, findFieldChanges(_oldType, newType).concat(findImplementedInterfacesChanges(_oldType, newType)));
      } else if (_oldType.constructor !== newType.constructor) {
        schemaChanges.push({
          type: BreakingChangeType.TYPE_CHANGED_KIND,
          description: "".concat(_oldType.name, " changed from ") + "".concat(typeKindName(_oldType), " to ").concat(typeKindName(newType), ".")
        });
      }
    }

    return schemaChanges;
  }

  function findInputObjectTypeChanges(oldType, newType) {
    var schemaChanges = [];
    var fieldsDiff = diff((0, _objectValues.default)(oldType.getFields()), (0, _objectValues.default)(newType.getFields()));

    for (var _i16 = 0, _fieldsDiff$added2 = fieldsDiff.added; _i16 < _fieldsDiff$added2.length; _i16++) {
      var newField = _fieldsDiff$added2[_i16];

      if ((0, _definition.isRequiredInputField)(newField)) {
        schemaChanges.push({
          type: BreakingChangeType.REQUIRED_INPUT_FIELD_ADDED,
          description: "A required field ".concat(newField.name, " on input type ").concat(oldType.name, " was added.")
        });
      } else {
        schemaChanges.push({
          type: DangerousChangeType.OPTIONAL_INPUT_FIELD_ADDED,
          description: "An optional field ".concat(newField.name, " on input type ").concat(oldType.name, " was added.")
        });
      }
    }

    for (var _i18 = 0, _fieldsDiff$removed2 = fieldsDiff.removed; _i18 < _fieldsDiff$removed2.length; _i18++) {
      var oldField = _fieldsDiff$removed2[_i18];
      schemaChanges.push({
        type: BreakingChangeType.FIELD_REMOVED,
        description: "".concat(oldType.name, ".").concat(oldField.name, " was removed.")
      });
    }

    for (var _i20 = 0, _fieldsDiff$persisted2 = fieldsDiff.persisted; _i20 < _fieldsDiff$persisted2.length; _i20++) {
      var _ref6 = _fieldsDiff$persisted2[_i20];
      var _oldField = _ref6[0];
      var _newField = _ref6[1];
      var isSafe = isChangeSafeForInputObjectFieldOrFieldArg(_oldField.type, _newField.type);

      if (!isSafe) {
        schemaChanges.push({
          type: BreakingChangeType.FIELD_CHANGED_KIND,
          description: "".concat(oldType.name, ".").concat(_oldField.name, " changed type from ") + "".concat(String(_oldField.type), " to ").concat(String(_newField.type), ".")
        });
      }
    }

    return schemaChanges;
  }

  function findUnionTypeChanges(oldType, newType) {
    var schemaChanges = [];
    var possibleTypesDiff = diff(oldType.getTypes(), newType.getTypes());

    for (var _i22 = 0, _possibleTypesDiff$ad2 = possibleTypesDiff.added; _i22 < _possibleTypesDiff$ad2.length; _i22++) {
      var newPossibleType = _possibleTypesDiff$ad2[_i22];
      schemaChanges.push({
        type: DangerousChangeType.TYPE_ADDED_TO_UNION,
        description: "".concat(newPossibleType.name, " was added to union type ").concat(oldType.name, ".")
      });
    }

    for (var _i24 = 0, _possibleTypesDiff$re2 = possibleTypesDiff.removed; _i24 < _possibleTypesDiff$re2.length; _i24++) {
      var oldPossibleType = _possibleTypesDiff$re2[_i24];
      schemaChanges.push({
        type: BreakingChangeType.TYPE_REMOVED_FROM_UNION,
        description: "".concat(oldPossibleType.name, " was removed from union type ").concat(oldType.name, ".")
      });
    }

    return schemaChanges;
  }

  function findEnumTypeChanges(oldType, newType) {
    var schemaChanges = [];
    var valuesDiff = diff(oldType.getValues(), newType.getValues());

    for (var _i26 = 0, _valuesDiff$added2 = valuesDiff.added; _i26 < _valuesDiff$added2.length; _i26++) {
      var newValue = _valuesDiff$added2[_i26];
      schemaChanges.push({
        type: DangerousChangeType.VALUE_ADDED_TO_ENUM,
        description: "".concat(newValue.name, " was added to enum type ").concat(oldType.name, ".")
      });
    }

    for (var _i28 = 0, _valuesDiff$removed2 = valuesDiff.removed; _i28 < _valuesDiff$removed2.length; _i28++) {
      var oldValue = _valuesDiff$removed2[_i28];
      schemaChanges.push({
        type: BreakingChangeType.VALUE_REMOVED_FROM_ENUM,
        description: "".concat(oldValue.name, " was removed from enum type ").concat(oldType.name, ".")
      });
    }

    return schemaChanges;
  }

  function findImplementedInterfacesChanges(oldType, newType) {
    var schemaChanges = [];
    var interfacesDiff = diff(oldType.getInterfaces(), newType.getInterfaces());

    for (var _i30 = 0, _interfacesDiff$added2 = interfacesDiff.added; _i30 < _interfacesDiff$added2.length; _i30++) {
      var newInterface = _interfacesDiff$added2[_i30];
      schemaChanges.push({
        type: DangerousChangeType.IMPLEMENTED_INTERFACE_ADDED,
        description: "".concat(newInterface.name, " added to interfaces implemented by ").concat(oldType.name, ".")
      });
    }

    for (var _i32 = 0, _interfacesDiff$remov2 = interfacesDiff.removed; _i32 < _interfacesDiff$remov2.length; _i32++) {
      var oldInterface = _interfacesDiff$remov2[_i32];
      schemaChanges.push({
        type: BreakingChangeType.IMPLEMENTED_INTERFACE_REMOVED,
        description: "".concat(oldType.name, " no longer implements interface ").concat(oldInterface.name, ".")
      });
    }

    return schemaChanges;
  }

  function findFieldChanges(oldType, newType) {
    var schemaChanges = [];
    var fieldsDiff = diff((0, _objectValues.default)(oldType.getFields()), (0, _objectValues.default)(newType.getFields()));

    for (var _i34 = 0, _fieldsDiff$removed4 = fieldsDiff.removed; _i34 < _fieldsDiff$removed4.length; _i34++) {
      var oldField = _fieldsDiff$removed4[_i34];
      schemaChanges.push({
        type: BreakingChangeType.FIELD_REMOVED,
        description: "".concat(oldType.name, ".").concat(oldField.name, " was removed.")
      });
    }

    for (var _i36 = 0, _fieldsDiff$persisted4 = fieldsDiff.persisted; _i36 < _fieldsDiff$persisted4.length; _i36++) {
      var _ref8 = _fieldsDiff$persisted4[_i36];
      var _oldField2 = _ref8[0];
      var newField = _ref8[1];
      schemaChanges.push.apply(schemaChanges, findArgChanges(oldType, _oldField2, newField));
      var isSafe = isChangeSafeForObjectOrInterfaceField(_oldField2.type, newField.type);

      if (!isSafe) {
        schemaChanges.push({
          type: BreakingChangeType.FIELD_CHANGED_KIND,
          description: "".concat(oldType.name, ".").concat(_oldField2.name, " changed type from ") + "".concat(String(_oldField2.type), " to ").concat(String(newField.type), ".")
        });
      }
    }

    return schemaChanges;
  }

  function findArgChanges(oldType, oldField, newField) {
    var schemaChanges = [];
    var argsDiff = diff(oldField.args, newField.args);

    for (var _i38 = 0, _argsDiff$removed4 = argsDiff.removed; _i38 < _argsDiff$removed4.length; _i38++) {
      var oldArg = _argsDiff$removed4[_i38];
      schemaChanges.push({
        type: BreakingChangeType.ARG_REMOVED,
        description: "".concat(oldType.name, ".").concat(oldField.name, " arg ").concat(oldArg.name, " was removed.")
      });
    }

    for (var _i40 = 0, _argsDiff$persisted2 = argsDiff.persisted; _i40 < _argsDiff$persisted2.length; _i40++) {
      var _ref10 = _argsDiff$persisted2[_i40];
      var _oldArg = _ref10[0];
      var newArg = _ref10[1];
      var isSafe = isChangeSafeForInputObjectFieldOrFieldArg(_oldArg.type, newArg.type);

      if (!isSafe) {
        schemaChanges.push({
          type: BreakingChangeType.ARG_CHANGED_KIND,
          description: "".concat(oldType.name, ".").concat(oldField.name, " arg ").concat(_oldArg.name, " has changed type from ") + "".concat(String(_oldArg.type), " to ").concat(String(newArg.type), ".")
        });
      } else if (_oldArg.defaultValue !== undefined) {
        if (newArg.defaultValue === undefined) {
          schemaChanges.push({
            type: DangerousChangeType.ARG_DEFAULT_VALUE_CHANGE,
            description: "".concat(oldType.name, ".").concat(oldField.name, " arg ").concat(_oldArg.name, " defaultValue was removed.")
          });
        } else {
          // Since we looking only for client's observable changes we should
          // compare default values in the same representation as they are
          // represented inside introspection.
          var oldValueStr = stringifyValue(_oldArg.defaultValue, _oldArg.type);
          var newValueStr = stringifyValue(newArg.defaultValue, newArg.type);

          if (oldValueStr !== newValueStr) {
            schemaChanges.push({
              type: DangerousChangeType.ARG_DEFAULT_VALUE_CHANGE,
              description: "".concat(oldType.name, ".").concat(oldField.name, " arg ").concat(_oldArg.name, " has changed defaultValue from ").concat(oldValueStr, " to ").concat(newValueStr, ".")
            });
          }
        }
      }
    }

    for (var _i42 = 0, _argsDiff$added4 = argsDiff.added; _i42 < _argsDiff$added4.length; _i42++) {
      var _newArg = _argsDiff$added4[_i42];

      if ((0, _definition.isRequiredArgument)(_newArg)) {
        schemaChanges.push({
          type: BreakingChangeType.REQUIRED_ARG_ADDED,
          description: "A required arg ".concat(_newArg.name, " on ").concat(oldType.name, ".").concat(oldField.name, " was added.")
        });
      } else {
        schemaChanges.push({
          type: DangerousChangeType.OPTIONAL_ARG_ADDED,
          description: "An optional arg ".concat(_newArg.name, " on ").concat(oldType.name, ".").concat(oldField.name, " was added.")
        });
      }
    }

    return schemaChanges;
  }

  function isChangeSafeForObjectOrInterfaceField(oldType, newType) {
    if ((0, _definition.isListType)(oldType)) {
      return (// if they're both lists, make sure the underlying types are compatible
        (0, _definition.isListType)(newType) && isChangeSafeForObjectOrInterfaceField(oldType.ofType, newType.ofType) || // moving from nullable to non-null of the same underlying type is safe
        (0, _definition.isNonNullType)(newType) && isChangeSafeForObjectOrInterfaceField(oldType, newType.ofType)
      );
    }

    if ((0, _definition.isNonNullType)(oldType)) {
      // if they're both non-null, make sure the underlying types are compatible
      return (0, _definition.isNonNullType)(newType) && isChangeSafeForObjectOrInterfaceField(oldType.ofType, newType.ofType);
    }

    return (// if they're both named types, see if their names are equivalent
      (0, _definition.isNamedType)(newType) && oldType.name === newType.name || // moving from nullable to non-null of the same underlying type is safe
      (0, _definition.isNonNullType)(newType) && isChangeSafeForObjectOrInterfaceField(oldType, newType.ofType)
    );
  }

  function isChangeSafeForInputObjectFieldOrFieldArg(oldType, newType) {
    if ((0, _definition.isListType)(oldType)) {
      // if they're both lists, make sure the underlying types are compatible
      return (0, _definition.isListType)(newType) && isChangeSafeForInputObjectFieldOrFieldArg(oldType.ofType, newType.ofType);
    }

    if ((0, _definition.isNonNullType)(oldType)) {
      return (// if they're both non-null, make sure the underlying types are
        // compatible
        (0, _definition.isNonNullType)(newType) && isChangeSafeForInputObjectFieldOrFieldArg(oldType.ofType, newType.ofType) || // moving from non-null to nullable of the same underlying type is safe
        !(0, _definition.isNonNullType)(newType) && isChangeSafeForInputObjectFieldOrFieldArg(oldType.ofType, newType)
      );
    } // if they're both named types, see if their names are equivalent


    return (0, _definition.isNamedType)(newType) && oldType.name === newType.name;
  }

  function typeKindName(type) {
    if ((0, _definition.isScalarType)(type)) {
      return 'a Scalar type';
    }

    if ((0, _definition.isObjectType)(type)) {
      return 'an Object type';
    }

    if ((0, _definition.isInterfaceType)(type)) {
      return 'an Interface type';
    }

    if ((0, _definition.isUnionType)(type)) {
      return 'a Union type';
    }

    if ((0, _definition.isEnumType)(type)) {
      return 'an Enum type';
    } // istanbul ignore else (See: 'https://github.com/graphql/graphql-js/issues/2618')


    if ((0, _definition.isInputObjectType)(type)) {
      return 'an Input type';
    } // istanbul ignore next (Not reachable. All possible named types have been considered)


    (0, _invariant.default)(0, 'Unexpected type: ' + (0, _inspect.default)(type));
  }

  function stringifyValue(value, type) {
    var ast = (0, _astFromValue.astFromValue)(value, type);
    ast != null || (0, _invariant.default)(0);
    var sortedAST = (0, _visitor.visit)(ast, {
      ObjectValue: function ObjectValue(objectNode) {
        // Make a copy since sort mutates array
        var fields = [].concat(objectNode.fields);
        fields.sort(function (fieldA, fieldB) {
          return (0, _naturalCompare.default)(fieldA.name.value, fieldB.name.value);
        });
        return _objectSpread(_objectSpread({}, objectNode), {}, {
          fields: fields
        });
      }
    });
    return (0, _printer.print)(sortedAST);
  }

  function diff(oldArray, newArray) {
    var added = [];
    var removed = [];
    var persisted = [];
    var oldMap = (0, _keyMap.default)(oldArray, function (_ref11) {
      var name = _ref11.name;
      return name;
    });
    var newMap = (0, _keyMap.default)(newArray, function (_ref12) {
      var name = _ref12.name;
      return name;
    });

    for (var _i44 = 0; _i44 < oldArray.length; _i44++) {
      var oldItem = oldArray[_i44];
      var newItem = newMap[oldItem.name];

      if (newItem === undefined) {
        removed.push(oldItem);
      } else {
        persisted.push([oldItem, newItem]);
      }
    }

    for (var _i46 = 0; _i46 < newArray.length; _i46++) {
      var _newItem = newArray[_i46];

      if (oldMap[_newItem.name] === undefined) {
        added.push(_newItem);
      }
    }

    return {
      added: added,
      persisted: persisted,
      removed: removed
    };
  }

  var findDeprecatedUsages$1 = {};

  Object.defineProperty(findDeprecatedUsages$1, "__esModule", {
    value: true
  });
  findDeprecatedUsages$1.findDeprecatedUsages = findDeprecatedUsages;

  var _validate = validate$2;

  var _NoDeprecatedCustomRule = NoDeprecatedCustomRule$1;

  /**
   * A validation rule which reports deprecated usages.
   *
   * Returns a list of GraphQLError instances describing each deprecated use.
   *
   * @deprecated Please use `validate` with `NoDeprecatedCustomRule` instead:
   *
   * ```
   * import { validate, NoDeprecatedCustomRule } from 'graphql'
   *
   * const errors = validate(schema, document, [NoDeprecatedCustomRule])
   * ```
   */
  function findDeprecatedUsages(schema, ast) {
    return (0, _validate.validate)(schema, ast, [_NoDeprecatedCustomRule.NoDeprecatedCustomRule]);
  }

  (function (exports) {

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, "getIntrospectionQuery", {
    enumerable: true,
    get: function get() {
      return _getIntrospectionQuery.getIntrospectionQuery;
    }
  });
  Object.defineProperty(exports, "getOperationAST", {
    enumerable: true,
    get: function get() {
      return _getOperationAST.getOperationAST;
    }
  });
  Object.defineProperty(exports, "getOperationRootType", {
    enumerable: true,
    get: function get() {
      return _getOperationRootType.getOperationRootType;
    }
  });
  Object.defineProperty(exports, "introspectionFromSchema", {
    enumerable: true,
    get: function get() {
      return _introspectionFromSchema.introspectionFromSchema;
    }
  });
  Object.defineProperty(exports, "buildClientSchema", {
    enumerable: true,
    get: function get() {
      return _buildClientSchema.buildClientSchema;
    }
  });
  Object.defineProperty(exports, "buildASTSchema", {
    enumerable: true,
    get: function get() {
      return _buildASTSchema.buildASTSchema;
    }
  });
  Object.defineProperty(exports, "buildSchema", {
    enumerable: true,
    get: function get() {
      return _buildASTSchema.buildSchema;
    }
  });
  Object.defineProperty(exports, "extendSchema", {
    enumerable: true,
    get: function get() {
      return _extendSchema.extendSchema;
    }
  });
  Object.defineProperty(exports, "getDescription", {
    enumerable: true,
    get: function get() {
      return _extendSchema.getDescription;
    }
  });
  Object.defineProperty(exports, "lexicographicSortSchema", {
    enumerable: true,
    get: function get() {
      return _lexicographicSortSchema.lexicographicSortSchema;
    }
  });
  Object.defineProperty(exports, "printSchema", {
    enumerable: true,
    get: function get() {
      return _printSchema.printSchema;
    }
  });
  Object.defineProperty(exports, "printType", {
    enumerable: true,
    get: function get() {
      return _printSchema.printType;
    }
  });
  Object.defineProperty(exports, "printIntrospectionSchema", {
    enumerable: true,
    get: function get() {
      return _printSchema.printIntrospectionSchema;
    }
  });
  Object.defineProperty(exports, "typeFromAST", {
    enumerable: true,
    get: function get() {
      return _typeFromAST.typeFromAST;
    }
  });
  Object.defineProperty(exports, "valueFromAST", {
    enumerable: true,
    get: function get() {
      return _valueFromAST.valueFromAST;
    }
  });
  Object.defineProperty(exports, "valueFromASTUntyped", {
    enumerable: true,
    get: function get() {
      return _valueFromASTUntyped.valueFromASTUntyped;
    }
  });
  Object.defineProperty(exports, "astFromValue", {
    enumerable: true,
    get: function get() {
      return _astFromValue.astFromValue;
    }
  });
  Object.defineProperty(exports, "TypeInfo", {
    enumerable: true,
    get: function get() {
      return _TypeInfo.TypeInfo;
    }
  });
  Object.defineProperty(exports, "visitWithTypeInfo", {
    enumerable: true,
    get: function get() {
      return _TypeInfo.visitWithTypeInfo;
    }
  });
  Object.defineProperty(exports, "coerceInputValue", {
    enumerable: true,
    get: function get() {
      return _coerceInputValue.coerceInputValue;
    }
  });
  Object.defineProperty(exports, "concatAST", {
    enumerable: true,
    get: function get() {
      return _concatAST.concatAST;
    }
  });
  Object.defineProperty(exports, "separateOperations", {
    enumerable: true,
    get: function get() {
      return _separateOperations.separateOperations;
    }
  });
  Object.defineProperty(exports, "stripIgnoredCharacters", {
    enumerable: true,
    get: function get() {
      return _stripIgnoredCharacters.stripIgnoredCharacters;
    }
  });
  Object.defineProperty(exports, "isEqualType", {
    enumerable: true,
    get: function get() {
      return _typeComparators.isEqualType;
    }
  });
  Object.defineProperty(exports, "isTypeSubTypeOf", {
    enumerable: true,
    get: function get() {
      return _typeComparators.isTypeSubTypeOf;
    }
  });
  Object.defineProperty(exports, "doTypesOverlap", {
    enumerable: true,
    get: function get() {
      return _typeComparators.doTypesOverlap;
    }
  });
  Object.defineProperty(exports, "assertValidName", {
    enumerable: true,
    get: function get() {
      return _assertValidName.assertValidName;
    }
  });
  Object.defineProperty(exports, "isValidNameError", {
    enumerable: true,
    get: function get() {
      return _assertValidName.isValidNameError;
    }
  });
  Object.defineProperty(exports, "BreakingChangeType", {
    enumerable: true,
    get: function get() {
      return _findBreakingChanges.BreakingChangeType;
    }
  });
  Object.defineProperty(exports, "DangerousChangeType", {
    enumerable: true,
    get: function get() {
      return _findBreakingChanges.DangerousChangeType;
    }
  });
  Object.defineProperty(exports, "findBreakingChanges", {
    enumerable: true,
    get: function get() {
      return _findBreakingChanges.findBreakingChanges;
    }
  });
  Object.defineProperty(exports, "findDangerousChanges", {
    enumerable: true,
    get: function get() {
      return _findBreakingChanges.findDangerousChanges;
    }
  });
  Object.defineProperty(exports, "findDeprecatedUsages", {
    enumerable: true,
    get: function get() {
      return _findDeprecatedUsages.findDeprecatedUsages;
    }
  });

  var _getIntrospectionQuery = getIntrospectionQuery$1;

  var _getOperationAST = getOperationAST$1;

  var _getOperationRootType = getOperationRootType$1;

  var _introspectionFromSchema = introspectionFromSchema$1;

  var _buildClientSchema = buildClientSchema$1;

  var _buildASTSchema = buildASTSchema$1;

  var _extendSchema = extendSchema$1;

  var _lexicographicSortSchema = lexicographicSortSchema$1;

  var _printSchema = printSchema$1;

  var _typeFromAST = typeFromAST$1;

  var _valueFromAST = valueFromAST$1;

  var _valueFromASTUntyped = valueFromASTUntyped$1;

  var _astFromValue = astFromValue$1;

  var _TypeInfo = TypeInfo$1;

  var _coerceInputValue = coerceInputValue$1;

  var _concatAST = concatAST$1;

  var _separateOperations = separateOperations$1;

  var _stripIgnoredCharacters = stripIgnoredCharacters$1;

  var _typeComparators = typeComparators;

  var _assertValidName = assertValidName$1;

  var _findBreakingChanges = findBreakingChanges$1;

  var _findDeprecatedUsages = findDeprecatedUsages$1;
  }(utilities));

  (function (exports) {

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, "version", {
    enumerable: true,
    get: function get() {
      return _version.version;
    }
  });
  Object.defineProperty(exports, "versionInfo", {
    enumerable: true,
    get: function get() {
      return _version.versionInfo;
    }
  });
  Object.defineProperty(exports, "graphql", {
    enumerable: true,
    get: function get() {
      return _graphql.graphql;
    }
  });
  Object.defineProperty(exports, "graphqlSync", {
    enumerable: true,
    get: function get() {
      return _graphql.graphqlSync;
    }
  });
  Object.defineProperty(exports, "GraphQLSchema", {
    enumerable: true,
    get: function get() {
      return _index.GraphQLSchema;
    }
  });
  Object.defineProperty(exports, "GraphQLDirective", {
    enumerable: true,
    get: function get() {
      return _index.GraphQLDirective;
    }
  });
  Object.defineProperty(exports, "GraphQLScalarType", {
    enumerable: true,
    get: function get() {
      return _index.GraphQLScalarType;
    }
  });
  Object.defineProperty(exports, "GraphQLObjectType", {
    enumerable: true,
    get: function get() {
      return _index.GraphQLObjectType;
    }
  });
  Object.defineProperty(exports, "GraphQLInterfaceType", {
    enumerable: true,
    get: function get() {
      return _index.GraphQLInterfaceType;
    }
  });
  Object.defineProperty(exports, "GraphQLUnionType", {
    enumerable: true,
    get: function get() {
      return _index.GraphQLUnionType;
    }
  });
  Object.defineProperty(exports, "GraphQLEnumType", {
    enumerable: true,
    get: function get() {
      return _index.GraphQLEnumType;
    }
  });
  Object.defineProperty(exports, "GraphQLInputObjectType", {
    enumerable: true,
    get: function get() {
      return _index.GraphQLInputObjectType;
    }
  });
  Object.defineProperty(exports, "GraphQLList", {
    enumerable: true,
    get: function get() {
      return _index.GraphQLList;
    }
  });
  Object.defineProperty(exports, "GraphQLNonNull", {
    enumerable: true,
    get: function get() {
      return _index.GraphQLNonNull;
    }
  });
  Object.defineProperty(exports, "specifiedScalarTypes", {
    enumerable: true,
    get: function get() {
      return _index.specifiedScalarTypes;
    }
  });
  Object.defineProperty(exports, "GraphQLInt", {
    enumerable: true,
    get: function get() {
      return _index.GraphQLInt;
    }
  });
  Object.defineProperty(exports, "GraphQLFloat", {
    enumerable: true,
    get: function get() {
      return _index.GraphQLFloat;
    }
  });
  Object.defineProperty(exports, "GraphQLString", {
    enumerable: true,
    get: function get() {
      return _index.GraphQLString;
    }
  });
  Object.defineProperty(exports, "GraphQLBoolean", {
    enumerable: true,
    get: function get() {
      return _index.GraphQLBoolean;
    }
  });
  Object.defineProperty(exports, "GraphQLID", {
    enumerable: true,
    get: function get() {
      return _index.GraphQLID;
    }
  });
  Object.defineProperty(exports, "specifiedDirectives", {
    enumerable: true,
    get: function get() {
      return _index.specifiedDirectives;
    }
  });
  Object.defineProperty(exports, "GraphQLIncludeDirective", {
    enumerable: true,
    get: function get() {
      return _index.GraphQLIncludeDirective;
    }
  });
  Object.defineProperty(exports, "GraphQLSkipDirective", {
    enumerable: true,
    get: function get() {
      return _index.GraphQLSkipDirective;
    }
  });
  Object.defineProperty(exports, "GraphQLDeprecatedDirective", {
    enumerable: true,
    get: function get() {
      return _index.GraphQLDeprecatedDirective;
    }
  });
  Object.defineProperty(exports, "GraphQLSpecifiedByDirective", {
    enumerable: true,
    get: function get() {
      return _index.GraphQLSpecifiedByDirective;
    }
  });
  Object.defineProperty(exports, "TypeKind", {
    enumerable: true,
    get: function get() {
      return _index.TypeKind;
    }
  });
  Object.defineProperty(exports, "DEFAULT_DEPRECATION_REASON", {
    enumerable: true,
    get: function get() {
      return _index.DEFAULT_DEPRECATION_REASON;
    }
  });
  Object.defineProperty(exports, "introspectionTypes", {
    enumerable: true,
    get: function get() {
      return _index.introspectionTypes;
    }
  });
  Object.defineProperty(exports, "__Schema", {
    enumerable: true,
    get: function get() {
      return _index.__Schema;
    }
  });
  Object.defineProperty(exports, "__Directive", {
    enumerable: true,
    get: function get() {
      return _index.__Directive;
    }
  });
  Object.defineProperty(exports, "__DirectiveLocation", {
    enumerable: true,
    get: function get() {
      return _index.__DirectiveLocation;
    }
  });
  Object.defineProperty(exports, "__Type", {
    enumerable: true,
    get: function get() {
      return _index.__Type;
    }
  });
  Object.defineProperty(exports, "__Field", {
    enumerable: true,
    get: function get() {
      return _index.__Field;
    }
  });
  Object.defineProperty(exports, "__InputValue", {
    enumerable: true,
    get: function get() {
      return _index.__InputValue;
    }
  });
  Object.defineProperty(exports, "__EnumValue", {
    enumerable: true,
    get: function get() {
      return _index.__EnumValue;
    }
  });
  Object.defineProperty(exports, "__TypeKind", {
    enumerable: true,
    get: function get() {
      return _index.__TypeKind;
    }
  });
  Object.defineProperty(exports, "SchemaMetaFieldDef", {
    enumerable: true,
    get: function get() {
      return _index.SchemaMetaFieldDef;
    }
  });
  Object.defineProperty(exports, "TypeMetaFieldDef", {
    enumerable: true,
    get: function get() {
      return _index.TypeMetaFieldDef;
    }
  });
  Object.defineProperty(exports, "TypeNameMetaFieldDef", {
    enumerable: true,
    get: function get() {
      return _index.TypeNameMetaFieldDef;
    }
  });
  Object.defineProperty(exports, "isSchema", {
    enumerable: true,
    get: function get() {
      return _index.isSchema;
    }
  });
  Object.defineProperty(exports, "isDirective", {
    enumerable: true,
    get: function get() {
      return _index.isDirective;
    }
  });
  Object.defineProperty(exports, "isType", {
    enumerable: true,
    get: function get() {
      return _index.isType;
    }
  });
  Object.defineProperty(exports, "isScalarType", {
    enumerable: true,
    get: function get() {
      return _index.isScalarType;
    }
  });
  Object.defineProperty(exports, "isObjectType", {
    enumerable: true,
    get: function get() {
      return _index.isObjectType;
    }
  });
  Object.defineProperty(exports, "isInterfaceType", {
    enumerable: true,
    get: function get() {
      return _index.isInterfaceType;
    }
  });
  Object.defineProperty(exports, "isUnionType", {
    enumerable: true,
    get: function get() {
      return _index.isUnionType;
    }
  });
  Object.defineProperty(exports, "isEnumType", {
    enumerable: true,
    get: function get() {
      return _index.isEnumType;
    }
  });
  Object.defineProperty(exports, "isInputObjectType", {
    enumerable: true,
    get: function get() {
      return _index.isInputObjectType;
    }
  });
  Object.defineProperty(exports, "isListType", {
    enumerable: true,
    get: function get() {
      return _index.isListType;
    }
  });
  Object.defineProperty(exports, "isNonNullType", {
    enumerable: true,
    get: function get() {
      return _index.isNonNullType;
    }
  });
  Object.defineProperty(exports, "isInputType", {
    enumerable: true,
    get: function get() {
      return _index.isInputType;
    }
  });
  Object.defineProperty(exports, "isOutputType", {
    enumerable: true,
    get: function get() {
      return _index.isOutputType;
    }
  });
  Object.defineProperty(exports, "isLeafType", {
    enumerable: true,
    get: function get() {
      return _index.isLeafType;
    }
  });
  Object.defineProperty(exports, "isCompositeType", {
    enumerable: true,
    get: function get() {
      return _index.isCompositeType;
    }
  });
  Object.defineProperty(exports, "isAbstractType", {
    enumerable: true,
    get: function get() {
      return _index.isAbstractType;
    }
  });
  Object.defineProperty(exports, "isWrappingType", {
    enumerable: true,
    get: function get() {
      return _index.isWrappingType;
    }
  });
  Object.defineProperty(exports, "isNullableType", {
    enumerable: true,
    get: function get() {
      return _index.isNullableType;
    }
  });
  Object.defineProperty(exports, "isNamedType", {
    enumerable: true,
    get: function get() {
      return _index.isNamedType;
    }
  });
  Object.defineProperty(exports, "isRequiredArgument", {
    enumerable: true,
    get: function get() {
      return _index.isRequiredArgument;
    }
  });
  Object.defineProperty(exports, "isRequiredInputField", {
    enumerable: true,
    get: function get() {
      return _index.isRequiredInputField;
    }
  });
  Object.defineProperty(exports, "isSpecifiedScalarType", {
    enumerable: true,
    get: function get() {
      return _index.isSpecifiedScalarType;
    }
  });
  Object.defineProperty(exports, "isIntrospectionType", {
    enumerable: true,
    get: function get() {
      return _index.isIntrospectionType;
    }
  });
  Object.defineProperty(exports, "isSpecifiedDirective", {
    enumerable: true,
    get: function get() {
      return _index.isSpecifiedDirective;
    }
  });
  Object.defineProperty(exports, "assertSchema", {
    enumerable: true,
    get: function get() {
      return _index.assertSchema;
    }
  });
  Object.defineProperty(exports, "assertDirective", {
    enumerable: true,
    get: function get() {
      return _index.assertDirective;
    }
  });
  Object.defineProperty(exports, "assertType", {
    enumerable: true,
    get: function get() {
      return _index.assertType;
    }
  });
  Object.defineProperty(exports, "assertScalarType", {
    enumerable: true,
    get: function get() {
      return _index.assertScalarType;
    }
  });
  Object.defineProperty(exports, "assertObjectType", {
    enumerable: true,
    get: function get() {
      return _index.assertObjectType;
    }
  });
  Object.defineProperty(exports, "assertInterfaceType", {
    enumerable: true,
    get: function get() {
      return _index.assertInterfaceType;
    }
  });
  Object.defineProperty(exports, "assertUnionType", {
    enumerable: true,
    get: function get() {
      return _index.assertUnionType;
    }
  });
  Object.defineProperty(exports, "assertEnumType", {
    enumerable: true,
    get: function get() {
      return _index.assertEnumType;
    }
  });
  Object.defineProperty(exports, "assertInputObjectType", {
    enumerable: true,
    get: function get() {
      return _index.assertInputObjectType;
    }
  });
  Object.defineProperty(exports, "assertListType", {
    enumerable: true,
    get: function get() {
      return _index.assertListType;
    }
  });
  Object.defineProperty(exports, "assertNonNullType", {
    enumerable: true,
    get: function get() {
      return _index.assertNonNullType;
    }
  });
  Object.defineProperty(exports, "assertInputType", {
    enumerable: true,
    get: function get() {
      return _index.assertInputType;
    }
  });
  Object.defineProperty(exports, "assertOutputType", {
    enumerable: true,
    get: function get() {
      return _index.assertOutputType;
    }
  });
  Object.defineProperty(exports, "assertLeafType", {
    enumerable: true,
    get: function get() {
      return _index.assertLeafType;
    }
  });
  Object.defineProperty(exports, "assertCompositeType", {
    enumerable: true,
    get: function get() {
      return _index.assertCompositeType;
    }
  });
  Object.defineProperty(exports, "assertAbstractType", {
    enumerable: true,
    get: function get() {
      return _index.assertAbstractType;
    }
  });
  Object.defineProperty(exports, "assertWrappingType", {
    enumerable: true,
    get: function get() {
      return _index.assertWrappingType;
    }
  });
  Object.defineProperty(exports, "assertNullableType", {
    enumerable: true,
    get: function get() {
      return _index.assertNullableType;
    }
  });
  Object.defineProperty(exports, "assertNamedType", {
    enumerable: true,
    get: function get() {
      return _index.assertNamedType;
    }
  });
  Object.defineProperty(exports, "getNullableType", {
    enumerable: true,
    get: function get() {
      return _index.getNullableType;
    }
  });
  Object.defineProperty(exports, "getNamedType", {
    enumerable: true,
    get: function get() {
      return _index.getNamedType;
    }
  });
  Object.defineProperty(exports, "validateSchema", {
    enumerable: true,
    get: function get() {
      return _index.validateSchema;
    }
  });
  Object.defineProperty(exports, "assertValidSchema", {
    enumerable: true,
    get: function get() {
      return _index.assertValidSchema;
    }
  });
  Object.defineProperty(exports, "Token", {
    enumerable: true,
    get: function get() {
      return _index2.Token;
    }
  });
  Object.defineProperty(exports, "Source", {
    enumerable: true,
    get: function get() {
      return _index2.Source;
    }
  });
  Object.defineProperty(exports, "Location", {
    enumerable: true,
    get: function get() {
      return _index2.Location;
    }
  });
  Object.defineProperty(exports, "getLocation", {
    enumerable: true,
    get: function get() {
      return _index2.getLocation;
    }
  });
  Object.defineProperty(exports, "printLocation", {
    enumerable: true,
    get: function get() {
      return _index2.printLocation;
    }
  });
  Object.defineProperty(exports, "printSourceLocation", {
    enumerable: true,
    get: function get() {
      return _index2.printSourceLocation;
    }
  });
  Object.defineProperty(exports, "Lexer", {
    enumerable: true,
    get: function get() {
      return _index2.Lexer;
    }
  });
  Object.defineProperty(exports, "TokenKind", {
    enumerable: true,
    get: function get() {
      return _index2.TokenKind;
    }
  });
  Object.defineProperty(exports, "parse", {
    enumerable: true,
    get: function get() {
      return _index2.parse;
    }
  });
  Object.defineProperty(exports, "parseValue", {
    enumerable: true,
    get: function get() {
      return _index2.parseValue;
    }
  });
  Object.defineProperty(exports, "parseType", {
    enumerable: true,
    get: function get() {
      return _index2.parseType;
    }
  });
  Object.defineProperty(exports, "print", {
    enumerable: true,
    get: function get() {
      return _index2.print;
    }
  });
  Object.defineProperty(exports, "visit", {
    enumerable: true,
    get: function get() {
      return _index2.visit;
    }
  });
  Object.defineProperty(exports, "visitInParallel", {
    enumerable: true,
    get: function get() {
      return _index2.visitInParallel;
    }
  });
  Object.defineProperty(exports, "getVisitFn", {
    enumerable: true,
    get: function get() {
      return _index2.getVisitFn;
    }
  });
  Object.defineProperty(exports, "BREAK", {
    enumerable: true,
    get: function get() {
      return _index2.BREAK;
    }
  });
  Object.defineProperty(exports, "Kind", {
    enumerable: true,
    get: function get() {
      return _index2.Kind;
    }
  });
  Object.defineProperty(exports, "DirectiveLocation", {
    enumerable: true,
    get: function get() {
      return _index2.DirectiveLocation;
    }
  });
  Object.defineProperty(exports, "isDefinitionNode", {
    enumerable: true,
    get: function get() {
      return _index2.isDefinitionNode;
    }
  });
  Object.defineProperty(exports, "isExecutableDefinitionNode", {
    enumerable: true,
    get: function get() {
      return _index2.isExecutableDefinitionNode;
    }
  });
  Object.defineProperty(exports, "isSelectionNode", {
    enumerable: true,
    get: function get() {
      return _index2.isSelectionNode;
    }
  });
  Object.defineProperty(exports, "isValueNode", {
    enumerable: true,
    get: function get() {
      return _index2.isValueNode;
    }
  });
  Object.defineProperty(exports, "isTypeNode", {
    enumerable: true,
    get: function get() {
      return _index2.isTypeNode;
    }
  });
  Object.defineProperty(exports, "isTypeSystemDefinitionNode", {
    enumerable: true,
    get: function get() {
      return _index2.isTypeSystemDefinitionNode;
    }
  });
  Object.defineProperty(exports, "isTypeDefinitionNode", {
    enumerable: true,
    get: function get() {
      return _index2.isTypeDefinitionNode;
    }
  });
  Object.defineProperty(exports, "isTypeSystemExtensionNode", {
    enumerable: true,
    get: function get() {
      return _index2.isTypeSystemExtensionNode;
    }
  });
  Object.defineProperty(exports, "isTypeExtensionNode", {
    enumerable: true,
    get: function get() {
      return _index2.isTypeExtensionNode;
    }
  });
  Object.defineProperty(exports, "execute", {
    enumerable: true,
    get: function get() {
      return _index3.execute;
    }
  });
  Object.defineProperty(exports, "executeSync", {
    enumerable: true,
    get: function get() {
      return _index3.executeSync;
    }
  });
  Object.defineProperty(exports, "defaultFieldResolver", {
    enumerable: true,
    get: function get() {
      return _index3.defaultFieldResolver;
    }
  });
  Object.defineProperty(exports, "defaultTypeResolver", {
    enumerable: true,
    get: function get() {
      return _index3.defaultTypeResolver;
    }
  });
  Object.defineProperty(exports, "responsePathAsArray", {
    enumerable: true,
    get: function get() {
      return _index3.responsePathAsArray;
    }
  });
  Object.defineProperty(exports, "getDirectiveValues", {
    enumerable: true,
    get: function get() {
      return _index3.getDirectiveValues;
    }
  });
  Object.defineProperty(exports, "subscribe", {
    enumerable: true,
    get: function get() {
      return _index4.subscribe;
    }
  });
  Object.defineProperty(exports, "createSourceEventStream", {
    enumerable: true,
    get: function get() {
      return _index4.createSourceEventStream;
    }
  });
  Object.defineProperty(exports, "validate", {
    enumerable: true,
    get: function get() {
      return _index5.validate;
    }
  });
  Object.defineProperty(exports, "ValidationContext", {
    enumerable: true,
    get: function get() {
      return _index5.ValidationContext;
    }
  });
  Object.defineProperty(exports, "specifiedRules", {
    enumerable: true,
    get: function get() {
      return _index5.specifiedRules;
    }
  });
  Object.defineProperty(exports, "ExecutableDefinitionsRule", {
    enumerable: true,
    get: function get() {
      return _index5.ExecutableDefinitionsRule;
    }
  });
  Object.defineProperty(exports, "FieldsOnCorrectTypeRule", {
    enumerable: true,
    get: function get() {
      return _index5.FieldsOnCorrectTypeRule;
    }
  });
  Object.defineProperty(exports, "FragmentsOnCompositeTypesRule", {
    enumerable: true,
    get: function get() {
      return _index5.FragmentsOnCompositeTypesRule;
    }
  });
  Object.defineProperty(exports, "KnownArgumentNamesRule", {
    enumerable: true,
    get: function get() {
      return _index5.KnownArgumentNamesRule;
    }
  });
  Object.defineProperty(exports, "KnownDirectivesRule", {
    enumerable: true,
    get: function get() {
      return _index5.KnownDirectivesRule;
    }
  });
  Object.defineProperty(exports, "KnownFragmentNamesRule", {
    enumerable: true,
    get: function get() {
      return _index5.KnownFragmentNamesRule;
    }
  });
  Object.defineProperty(exports, "KnownTypeNamesRule", {
    enumerable: true,
    get: function get() {
      return _index5.KnownTypeNamesRule;
    }
  });
  Object.defineProperty(exports, "LoneAnonymousOperationRule", {
    enumerable: true,
    get: function get() {
      return _index5.LoneAnonymousOperationRule;
    }
  });
  Object.defineProperty(exports, "NoFragmentCyclesRule", {
    enumerable: true,
    get: function get() {
      return _index5.NoFragmentCyclesRule;
    }
  });
  Object.defineProperty(exports, "NoUndefinedVariablesRule", {
    enumerable: true,
    get: function get() {
      return _index5.NoUndefinedVariablesRule;
    }
  });
  Object.defineProperty(exports, "NoUnusedFragmentsRule", {
    enumerable: true,
    get: function get() {
      return _index5.NoUnusedFragmentsRule;
    }
  });
  Object.defineProperty(exports, "NoUnusedVariablesRule", {
    enumerable: true,
    get: function get() {
      return _index5.NoUnusedVariablesRule;
    }
  });
  Object.defineProperty(exports, "OverlappingFieldsCanBeMergedRule", {
    enumerable: true,
    get: function get() {
      return _index5.OverlappingFieldsCanBeMergedRule;
    }
  });
  Object.defineProperty(exports, "PossibleFragmentSpreadsRule", {
    enumerable: true,
    get: function get() {
      return _index5.PossibleFragmentSpreadsRule;
    }
  });
  Object.defineProperty(exports, "ProvidedRequiredArgumentsRule", {
    enumerable: true,
    get: function get() {
      return _index5.ProvidedRequiredArgumentsRule;
    }
  });
  Object.defineProperty(exports, "ScalarLeafsRule", {
    enumerable: true,
    get: function get() {
      return _index5.ScalarLeafsRule;
    }
  });
  Object.defineProperty(exports, "SingleFieldSubscriptionsRule", {
    enumerable: true,
    get: function get() {
      return _index5.SingleFieldSubscriptionsRule;
    }
  });
  Object.defineProperty(exports, "UniqueArgumentNamesRule", {
    enumerable: true,
    get: function get() {
      return _index5.UniqueArgumentNamesRule;
    }
  });
  Object.defineProperty(exports, "UniqueDirectivesPerLocationRule", {
    enumerable: true,
    get: function get() {
      return _index5.UniqueDirectivesPerLocationRule;
    }
  });
  Object.defineProperty(exports, "UniqueFragmentNamesRule", {
    enumerable: true,
    get: function get() {
      return _index5.UniqueFragmentNamesRule;
    }
  });
  Object.defineProperty(exports, "UniqueInputFieldNamesRule", {
    enumerable: true,
    get: function get() {
      return _index5.UniqueInputFieldNamesRule;
    }
  });
  Object.defineProperty(exports, "UniqueOperationNamesRule", {
    enumerable: true,
    get: function get() {
      return _index5.UniqueOperationNamesRule;
    }
  });
  Object.defineProperty(exports, "UniqueVariableNamesRule", {
    enumerable: true,
    get: function get() {
      return _index5.UniqueVariableNamesRule;
    }
  });
  Object.defineProperty(exports, "ValuesOfCorrectTypeRule", {
    enumerable: true,
    get: function get() {
      return _index5.ValuesOfCorrectTypeRule;
    }
  });
  Object.defineProperty(exports, "VariablesAreInputTypesRule", {
    enumerable: true,
    get: function get() {
      return _index5.VariablesAreInputTypesRule;
    }
  });
  Object.defineProperty(exports, "VariablesInAllowedPositionRule", {
    enumerable: true,
    get: function get() {
      return _index5.VariablesInAllowedPositionRule;
    }
  });
  Object.defineProperty(exports, "LoneSchemaDefinitionRule", {
    enumerable: true,
    get: function get() {
      return _index5.LoneSchemaDefinitionRule;
    }
  });
  Object.defineProperty(exports, "UniqueOperationTypesRule", {
    enumerable: true,
    get: function get() {
      return _index5.UniqueOperationTypesRule;
    }
  });
  Object.defineProperty(exports, "UniqueTypeNamesRule", {
    enumerable: true,
    get: function get() {
      return _index5.UniqueTypeNamesRule;
    }
  });
  Object.defineProperty(exports, "UniqueEnumValueNamesRule", {
    enumerable: true,
    get: function get() {
      return _index5.UniqueEnumValueNamesRule;
    }
  });
  Object.defineProperty(exports, "UniqueFieldDefinitionNamesRule", {
    enumerable: true,
    get: function get() {
      return _index5.UniqueFieldDefinitionNamesRule;
    }
  });
  Object.defineProperty(exports, "UniqueDirectiveNamesRule", {
    enumerable: true,
    get: function get() {
      return _index5.UniqueDirectiveNamesRule;
    }
  });
  Object.defineProperty(exports, "PossibleTypeExtensionsRule", {
    enumerable: true,
    get: function get() {
      return _index5.PossibleTypeExtensionsRule;
    }
  });
  Object.defineProperty(exports, "NoDeprecatedCustomRule", {
    enumerable: true,
    get: function get() {
      return _index5.NoDeprecatedCustomRule;
    }
  });
  Object.defineProperty(exports, "NoSchemaIntrospectionCustomRule", {
    enumerable: true,
    get: function get() {
      return _index5.NoSchemaIntrospectionCustomRule;
    }
  });
  Object.defineProperty(exports, "GraphQLError", {
    enumerable: true,
    get: function get() {
      return _index6.GraphQLError;
    }
  });
  Object.defineProperty(exports, "syntaxError", {
    enumerable: true,
    get: function get() {
      return _index6.syntaxError;
    }
  });
  Object.defineProperty(exports, "locatedError", {
    enumerable: true,
    get: function get() {
      return _index6.locatedError;
    }
  });
  Object.defineProperty(exports, "printError", {
    enumerable: true,
    get: function get() {
      return _index6.printError;
    }
  });
  Object.defineProperty(exports, "formatError", {
    enumerable: true,
    get: function get() {
      return _index6.formatError;
    }
  });
  Object.defineProperty(exports, "getIntrospectionQuery", {
    enumerable: true,
    get: function get() {
      return _index7.getIntrospectionQuery;
    }
  });
  Object.defineProperty(exports, "getOperationAST", {
    enumerable: true,
    get: function get() {
      return _index7.getOperationAST;
    }
  });
  Object.defineProperty(exports, "getOperationRootType", {
    enumerable: true,
    get: function get() {
      return _index7.getOperationRootType;
    }
  });
  Object.defineProperty(exports, "introspectionFromSchema", {
    enumerable: true,
    get: function get() {
      return _index7.introspectionFromSchema;
    }
  });
  Object.defineProperty(exports, "buildClientSchema", {
    enumerable: true,
    get: function get() {
      return _index7.buildClientSchema;
    }
  });
  Object.defineProperty(exports, "buildASTSchema", {
    enumerable: true,
    get: function get() {
      return _index7.buildASTSchema;
    }
  });
  Object.defineProperty(exports, "buildSchema", {
    enumerable: true,
    get: function get() {
      return _index7.buildSchema;
    }
  });
  Object.defineProperty(exports, "getDescription", {
    enumerable: true,
    get: function get() {
      return _index7.getDescription;
    }
  });
  Object.defineProperty(exports, "extendSchema", {
    enumerable: true,
    get: function get() {
      return _index7.extendSchema;
    }
  });
  Object.defineProperty(exports, "lexicographicSortSchema", {
    enumerable: true,
    get: function get() {
      return _index7.lexicographicSortSchema;
    }
  });
  Object.defineProperty(exports, "printSchema", {
    enumerable: true,
    get: function get() {
      return _index7.printSchema;
    }
  });
  Object.defineProperty(exports, "printType", {
    enumerable: true,
    get: function get() {
      return _index7.printType;
    }
  });
  Object.defineProperty(exports, "printIntrospectionSchema", {
    enumerable: true,
    get: function get() {
      return _index7.printIntrospectionSchema;
    }
  });
  Object.defineProperty(exports, "typeFromAST", {
    enumerable: true,
    get: function get() {
      return _index7.typeFromAST;
    }
  });
  Object.defineProperty(exports, "valueFromAST", {
    enumerable: true,
    get: function get() {
      return _index7.valueFromAST;
    }
  });
  Object.defineProperty(exports, "valueFromASTUntyped", {
    enumerable: true,
    get: function get() {
      return _index7.valueFromASTUntyped;
    }
  });
  Object.defineProperty(exports, "astFromValue", {
    enumerable: true,
    get: function get() {
      return _index7.astFromValue;
    }
  });
  Object.defineProperty(exports, "TypeInfo", {
    enumerable: true,
    get: function get() {
      return _index7.TypeInfo;
    }
  });
  Object.defineProperty(exports, "visitWithTypeInfo", {
    enumerable: true,
    get: function get() {
      return _index7.visitWithTypeInfo;
    }
  });
  Object.defineProperty(exports, "coerceInputValue", {
    enumerable: true,
    get: function get() {
      return _index7.coerceInputValue;
    }
  });
  Object.defineProperty(exports, "concatAST", {
    enumerable: true,
    get: function get() {
      return _index7.concatAST;
    }
  });
  Object.defineProperty(exports, "separateOperations", {
    enumerable: true,
    get: function get() {
      return _index7.separateOperations;
    }
  });
  Object.defineProperty(exports, "stripIgnoredCharacters", {
    enumerable: true,
    get: function get() {
      return _index7.stripIgnoredCharacters;
    }
  });
  Object.defineProperty(exports, "isEqualType", {
    enumerable: true,
    get: function get() {
      return _index7.isEqualType;
    }
  });
  Object.defineProperty(exports, "isTypeSubTypeOf", {
    enumerable: true,
    get: function get() {
      return _index7.isTypeSubTypeOf;
    }
  });
  Object.defineProperty(exports, "doTypesOverlap", {
    enumerable: true,
    get: function get() {
      return _index7.doTypesOverlap;
    }
  });
  Object.defineProperty(exports, "assertValidName", {
    enumerable: true,
    get: function get() {
      return _index7.assertValidName;
    }
  });
  Object.defineProperty(exports, "isValidNameError", {
    enumerable: true,
    get: function get() {
      return _index7.isValidNameError;
    }
  });
  Object.defineProperty(exports, "BreakingChangeType", {
    enumerable: true,
    get: function get() {
      return _index7.BreakingChangeType;
    }
  });
  Object.defineProperty(exports, "DangerousChangeType", {
    enumerable: true,
    get: function get() {
      return _index7.DangerousChangeType;
    }
  });
  Object.defineProperty(exports, "findBreakingChanges", {
    enumerable: true,
    get: function get() {
      return _index7.findBreakingChanges;
    }
  });
  Object.defineProperty(exports, "findDangerousChanges", {
    enumerable: true,
    get: function get() {
      return _index7.findDangerousChanges;
    }
  });
  Object.defineProperty(exports, "findDeprecatedUsages", {
    enumerable: true,
    get: function get() {
      return _index7.findDeprecatedUsages;
    }
  });

  var _version = version$1;

  var _graphql = graphql$2;

  var _index = type;

  var _index2 = language;

  var _index3 = execution;

  var _index4 = subscription;

  var _index5 = validation;

  var _index6 = error;

  var _index7 = utilities;
  }(graphql$3));

  /**
   * Returns a relative URL if the given request URL is relative to the current origin.
   * Otherwise returns an absolute URL.
   */
  const getPublicUrlFromRequest = (request) => {
      return request.referrer.startsWith(request.url.origin)
          ? request.url.pathname
          : new URL(request.url.pathname, `${request.url.protocol}//${request.url.host}`).href;
  };

  function parseDocumentNode(node) {
      var _a;
      const operationDef = node.definitions.find((def) => {
          return def.kind === 'OperationDefinition';
      });
      return {
          operationType: operationDef === null || operationDef === void 0 ? void 0 : operationDef.operation,
          operationName: (_a = operationDef === null || operationDef === void 0 ? void 0 : operationDef.name) === null || _a === void 0 ? void 0 : _a.value,
      };
  }
  function parseQuery(query) {
      try {
          const ast = graphql$3.parse(query);
          return parseDocumentNode(ast);
      }
      catch (error) {
          return error;
      }
  }
  function extractMultipartVariables(variables, map, files) {
      const operations = { variables };
      for (const [key, pathArray] of Object.entries(map)) {
          if (!(key in files)) {
              throw new Error(`Given files do not have a key '${key}' .`);
          }
          for (const dotPath of pathArray) {
              const [lastPath, ...reversedPaths] = dotPath.split('.').reverse();
              const paths = reversedPaths.reverse();
              let target = operations;
              for (const path of paths) {
                  if (!(path in target)) {
                      throw new Error(`Property '${paths}' is not in operations.`);
                  }
                  target = target[path];
              }
              target[lastPath] = files[key];
          }
      }
      return operations.variables;
  }
  function getGraphQLInput(request) {
      var _a, _b;
      switch (request.method) {
          case 'GET': {
              const query = request.url.searchParams.get('query');
              const variables = request.url.searchParams.get('variables') || '';
              return {
                  query,
                  variables: jsonParse(variables),
              };
          }
          case 'POST': {
              if ((_a = request.body) === null || _a === void 0 ? void 0 : _a.query) {
                  const { query, variables } = request.body;
                  return {
                      query,
                      variables,
                  };
              }
              // Handle multipart body operations.
              if ((_b = request.body) === null || _b === void 0 ? void 0 : _b.operations) {
                  const _c = request.body, { operations, map } = _c, files = __rest(_c, ["operations", "map"]);
                  const parsedOperations = jsonParse(operations) || {};
                  if (!parsedOperations.query) {
                      return null;
                  }
                  const parsedMap = jsonParse(map || '') || {};
                  const variables = parsedOperations.variables
                      ? extractMultipartVariables(parsedOperations.variables, parsedMap, files)
                      : {};
                  return {
                      query: parsedOperations.query,
                      variables,
                  };
              }
          }
          default:
              return null;
      }
  }
  /**
   * Determines if a given request can be considered a GraphQL request.
   * Does not parse the query and does not guarantee its validity.
   */
  function parseGraphQLRequest(request) {
      const input = getGraphQLInput(request);
      if (!input || !input.query) {
          return undefined;
      }
      const { query, variables } = input;
      const parsedResult = parseQuery(query);
      if (parsedResult instanceof Error) {
          const requestPublicUrl = getPublicUrlFromRequest(request);
          throw new Error(devUtils.formatMessage('Failed to intercept a GraphQL request to "%s %s": cannot parse query. See the error message from the parser below.\n\n%s', request.method, requestPublicUrl, parsedResult.message));
      }
      return {
          operationType: parsedResult.operationType,
          operationName: parsedResult.operationName,
          variables,
      };
  }

  var StatusCodeColor;
  (function (StatusCodeColor) {
      StatusCodeColor["Success"] = "#69AB32";
      StatusCodeColor["Warning"] = "#F0BB4B";
      StatusCodeColor["Danger"] = "#E95F5D";
  })(StatusCodeColor || (StatusCodeColor = {}));
  /**
   * Returns a HEX color for a given response status code number.
   */
  function getStatusCodeColor(status) {
      if (status < 300) {
          return StatusCodeColor.Success;
      }
      if (status < 400) {
          return StatusCodeColor.Warning;
      }
      return StatusCodeColor.Danger;
  }

  /**
   * Returns a timestamp string in a "HH:MM:SS" format.
   */
  function getTimestamp() {
      const now = new Date();
      return [now.getHours(), now.getMinutes(), now.getSeconds()]
          .map(String)
          .map((chunk) => chunk.slice(0, 2))
          .map((chunk) => chunk.padStart(2, '0'))
          .join(':');
  }

  /**
   * Formats a mocked request for introspection in browser's console.
   */
  function prepareRequest(request) {
      return Object.assign(Object.assign({}, request), { headers: request.headers.all() });
  }

  /**
   * Formats a mocked response for introspection in the browser's console.
   */
  function prepareResponse(res) {
      const responseHeaders = lib$6.objectToHeaders(res.headers);
      return Object.assign(Object.assign({}, res), { 
          // Parse a response JSON body for preview in the logs
          body: parseBody(res.body, responseHeaders) });
  }

  var cjs = {};

  Object.defineProperty(cjs, '__esModule', { value: true });

  /**
   * Converts a string path to a Regular Expression.
   * Transforms path parameters into named RegExp groups.
   */
  const pathToRegExp = (path) => {
      const pattern = path
          // Escape literal dots
          .replace(/\./g, '\\.')
          // Escape literal slashes
          .replace(/\//g, '/')
          // Escape literal question marks
          .replace(/\?/g, '\\?')
          // Ignore trailing slashes
          .replace(/\/+$/, '')
          // Replace wildcard with any zero-to-any character sequence
          .replace(/\*+/g, '.*')
          // Replace parameters with named capturing groups
          .replace(/:([^\d|^\/][a-zA-Z0-9_]*(?=(?:\/|\\.)|$))/g, (_, paramName) => `(?<${paramName}>[^\/]+?)`)
          // Allow optional trailing slash
          .concat('(\\/|$)');
      return new RegExp(pattern, 'gi');
  };

  /**
   * Matches a given url against a path.
   */
  const match = (path, url) => {
      const expression = path instanceof RegExp ? path : pathToRegExp(path);
      const match = expression.exec(url) || false;
      // Matches in strict mode: match string should equal to input (url)
      // Otherwise loose matches will be considered truthy:
      // match('/messages/:id', '/messages/123/users') // true
      const matches = path instanceof RegExp ? !!match : !!match && match[0] === match.input;
      return {
          matches,
          params: match && matches ? match.groups || null : null,
      };
  };

  var match_1 = cjs.match = match;
  cjs.pathToRegExp = pathToRegExp;

  var getCleanUrl$1 = {};

  Object.defineProperty(getCleanUrl$1, "__esModule", { value: true });
  var getCleanUrl_2 = getCleanUrl$1.getCleanUrl = void 0;
  /**
   * Removes query parameters and hashes from a given URL.
   */
  function getCleanUrl(url, isAbsolute) {
      if (isAbsolute === void 0) { isAbsolute = true; }
      return [isAbsolute && url.origin, url.pathname].filter(Boolean).join('');
  }
  getCleanUrl_2 = getCleanUrl$1.getCleanUrl = getCleanUrl;

  const REDUNDANT_CHARACTERS_EXP = /[\?|#].*$/g;
  function getSearchParams(path) {
      return new URL(`/${path}`, 'http://localhost').searchParams;
  }
  /**
   * Removes query parameters and hashes from a given URL string.
   */
  function cleanUrl(path) {
      return path.replace(REDUNDANT_CHARACTERS_EXP, '');
  }

  /**
   * Returns an absolute URL based on the given path.
   */
  function getAbsoluteUrl(path, baseUrl) {
      // Ignore absolute URLs.
      if (!path.startsWith('/')) {
          return path;
      }
      // Resolve a relative request URL against a given custom "baseUrl"
      // or the current location (in the case of browser/browser-like environments).
      const origin = baseUrl || (typeof location !== 'undefined' && location.origin);
      return origin
          ? // Encode and decode the path to preserve escaped characters.
              decodeURI(new URL(encodeURI(path), origin).href)
          : path;
  }

  /**
   * Normalizes a given request handler path:
   * - Preserves RegExp.
   * - Removes query parameters and hashes.
   * - Rebases relative URLs against the "baseUrl" or the current location.
   * - Preserves relative URLs in Node.js, unless specified otherwise.
   */
  function normalizePath(path, baseUrl) {
      // RegExp paths do not need normalization.
      if (path instanceof RegExp) {
          return path;
      }
      const maybeAbsoluteUrl = getAbsoluteUrl(path, baseUrl);
      return cleanUrl(maybeAbsoluteUrl);
  }

  /**
   * Returns the result of matching given request URL against a mask.
   */
  function matchRequestUrl(url, path, baseUrl) {
      const normalizedPath = normalizePath(path, baseUrl);
      return match_1(normalizedPath, getCleanUrl_2(url));
  }

  /**
   * Composes a given list of functions into a new function that
   * executes from right to left.
   */
  function compose(...fns) {
      return (...args) => {
          return fns.reduceRight((leftFn, rightFn) => {
              return leftFn instanceof Promise
                  ? Promise.resolve(leftFn).then(rightFn)
                  : rightFn(leftFn);
          }, args[0]);
      };
  }

  const defaultResponse = {
      status: 200,
      statusText: 'OK',
      body: null,
      delay: 0,
      once: false,
  };
  const defaultResponseTransformers = [];
  function createResponseComposition(responseOverrides, defaultTransformers = defaultResponseTransformers) {
      return (...transformers) => __awaiter$3(this, void 0, void 0, function* () {
          const initialResponse = Object.assign({}, defaultResponse, {
              headers: new lib$6.Headers({
                  'x-powered-by': 'msw',
              }),
          }, responseOverrides);
          const resolvedTransformers = [
              ...defaultTransformers,
              ...transformers,
          ].filter(Boolean);
          const resolvedResponse = resolvedTransformers.length > 0
              ? compose(...resolvedTransformers)(initialResponse)
              : initialResponse;
          return resolvedResponse;
      });
  }
  const response = Object.assign(createResponseComposition(), {
      once: createResponseComposition({ once: true }),
      networkError(message) {
          throw new NetworkError(message);
      },
  });

  /**
   * Return the stack trace frame of a function's invocation.
   */
  function getCallFrame() {
      // In <IE11, new Error may return an undefined stack
      const stack = (new Error().stack || '');
      const frames = stack.split('\n');
      // Get the first frame that doesn't reference the library's internal trace.
      // Assume that frame is the invocation frame.
      const ignoreFrameRegExp = /(node_modules)?[\/\\]lib[\/\\](umd|esm|iief|cjs)[\/\\]|^[^\/\\]*$/;
      const declarationFrame = frames.slice(1).find((frame) => {
          return !ignoreFrameRegExp.test(frame);
      });
      if (!declarationFrame) {
          return;
      }
      // Extract file reference from the stack frame.
      const declarationPath = declarationFrame
          .replace(/\s*at [^()]*\(([^)]+)\)/, '$1')
          .replace(/^@/, '');
      return declarationPath;
  }

  /**
   * Determines if the given function is an iterator.
   */
  function isIterable(fn) {
      if (!fn) {
          return false;
      }
      return typeof fn[Symbol.iterator] == 'function';
  }

  const defaultContext = {
      status,
      set,
      delay,
      fetch: fetch$1,
  };
  class RequestHandler {
      constructor(options) {
          this.shouldSkip = false;
          this.ctx = options.ctx || defaultContext;
          this.resolver = options.resolver;
          const callFrame = getCallFrame();
          this.info = Object.assign(Object.assign({}, options.info), { callFrame });
      }
      /**
       * Parse the captured request to extract additional information from it.
       * Parsed result is then exposed to other methods of this request handler.
       */
      parse(_request, _resolutionContext) {
          return null;
      }
      /**
       * Test if this handler matches the given request.
       */
      test(request, resolutionContext) {
          return this.predicate(request, this.parse(request, resolutionContext), resolutionContext);
      }
      /**
       * Derive the publicly exposed request (`req`) instance of the response resolver
       * from the captured request and its parsed result.
       */
      getPublicRequest(request, _parsedResult) {
          return request;
      }
      markAsSkipped(shouldSkip = true) {
          this.shouldSkip = shouldSkip;
      }
      /**
       * Execute this request handler and produce a mocked response
       * using the given resolver function.
       */
      run(request, resolutionContext) {
          return __awaiter$3(this, void 0, void 0, function* () {
              if (this.shouldSkip) {
                  return null;
              }
              const parsedResult = this.parse(request, resolutionContext);
              const shouldIntercept = this.predicate(request, parsedResult, resolutionContext);
              if (!shouldIntercept) {
                  return null;
              }
              const publicRequest = this.getPublicRequest(request, parsedResult);
              // Create a response extraction wrapper around the resolver
              // since it can be both an async function and a generator.
              const executeResolver = this.wrapResolver(this.resolver);
              const mockedResponse = yield executeResolver(publicRequest, response, this.ctx);
              return this.createExecutionResult(parsedResult, publicRequest, mockedResponse);
          });
      }
      wrapResolver(resolver) {
          return (req, res, ctx) => __awaiter$3(this, void 0, void 0, function* () {
              const result = this.resolverGenerator || (yield resolver(req, res, ctx));
              if (isIterable(result)) {
                  const { value, done } = result[Symbol.iterator]().next();
                  const nextResponse = yield value;
                  // If the generator is done and there is no next value,
                  // return the previous generator's value.
                  if (!nextResponse && done) {
                      return this.resolverGeneratorResult;
                  }
                  if (!this.resolverGenerator) {
                      this.resolverGenerator = result;
                  }
                  this.resolverGeneratorResult = nextResponse;
                  return nextResponse;
              }
              return result;
          });
      }
      createExecutionResult(parsedResult, request, response) {
          return {
              handler: this,
              parsedResult: parsedResult || null,
              request,
              response: response || null,
          };
      }
  }

  exports.RESTMethods = void 0;
  (function (RESTMethods) {
      RESTMethods["HEAD"] = "HEAD";
      RESTMethods["GET"] = "GET";
      RESTMethods["POST"] = "POST";
      RESTMethods["PUT"] = "PUT";
      RESTMethods["PATCH"] = "PATCH";
      RESTMethods["OPTIONS"] = "OPTIONS";
      RESTMethods["DELETE"] = "DELETE";
  })(exports.RESTMethods || (exports.RESTMethods = {}));
  const restContext = {
      set,
      status,
      cookie,
      body,
      text,
      json,
      xml,
      delay,
      fetch: fetch$1,
  };
  /**
   * Request handler for REST API requests.
   * Provides request matching based on method and URL.
   */
  class RestHandler extends RequestHandler {
      constructor(method, path, resolver) {
          super({
              info: {
                  header: `${method} ${path}`,
                  path,
                  method,
              },
              ctx: restContext,
              resolver,
          });
          this.checkRedundantQueryParameters();
      }
      checkRedundantQueryParameters() {
          const { method, path } = this.info;
          if (path instanceof RegExp) {
              return;
          }
          const url = cleanUrl(path);
          // Bypass request handler URLs that have no redundant characters.
          if (url === path) {
              return;
          }
          const searchParams = getSearchParams(path);
          const queryParams = [];
          searchParams.forEach((_, paramName) => {
              queryParams.push(paramName);
          });
          devUtils.warn(`\
Found a redundant usage of query parameters in the request handler URL for "${method} ${path}". Please match against a path instead, and access query parameters in the response resolver function:

rest.${method.toLowerCase()}("${url}", (req, res, ctx) => {
  const query = req.url.searchParams
${queryParams
            .map((paramName) => `\
  const ${paramName} = query.get("${paramName}")`)
            .join('\n')}
})\
      `);
      }
      parse(request, resolutionContext) {
          return matchRequestUrl(request.url, this.info.path, resolutionContext === null || resolutionContext === void 0 ? void 0 : resolutionContext.baseUrl);
      }
      getPublicRequest(request, parsedResult) {
          return Object.assign(Object.assign({}, request), { params: parsedResult.params || {} });
      }
      predicate(request, parsedResult) {
          return (isStringEqual(this.info.method, request.method) && parsedResult.matches);
      }
      log(request, response) {
          const publicUrl = getPublicUrlFromRequest(request);
          const loggedRequest = prepareRequest(request);
          const loggedResponse = prepareResponse(response);
          const statusColor = getStatusCodeColor(response.status);
          console.groupCollapsed(devUtils.formatMessage('%s %s %s (%c%s%c)'), getTimestamp(), request.method, publicUrl, `color:${statusColor}`, `${response.status} ${response.statusText}`, 'color:inherit');
          console.log('Request', loggedRequest);
          console.log('Handler:', {
              mask: this.info.path,
              resolver: this.resolver,
          });
          console.log('Response', loggedResponse);
          console.groupEnd();
      }
  }

  function tryCatch(fn, onException) {
      try {
          const result = fn();
          return result;
      }
      catch (error) {
          onException === null || onException === void 0 ? void 0 : onException(error);
      }
  }

  const graphqlContext = {
      set,
      status,
      delay,
      fetch: fetch$1,
      data,
      errors,
      cookie,
  };
  function isDocumentNode(value) {
      if (value == null) {
          return false;
      }
      return typeof value === 'object' && 'kind' in value && 'definitions' in value;
  }
  class GraphQLHandler extends RequestHandler {
      constructor(operationType, operationName, endpoint, resolver) {
          let resolvedOperationName = operationName;
          if (isDocumentNode(operationName)) {
              const parsedNode = parseDocumentNode(operationName);
              if (parsedNode.operationType !== operationType) {
                  throw new Error(`Failed to create a GraphQL handler: provided a DocumentNode with a mismatched operation type (expected "${operationType}", but got "${parsedNode.operationType}").`);
              }
              if (!parsedNode.operationName) {
                  throw new Error(`Failed to create a GraphQL handler: provided a DocumentNode with no operation name.`);
              }
              resolvedOperationName = parsedNode.operationName;
          }
          const header = operationType === 'all'
              ? `${operationType} (origin: ${endpoint.toString()})`
              : `${operationType} ${resolvedOperationName} (origin: ${endpoint.toString()})`;
          super({
              info: {
                  header,
                  operationType,
                  operationName: resolvedOperationName,
              },
              ctx: graphqlContext,
              resolver,
          });
          this.endpoint = endpoint;
      }
      parse(request) {
          return tryCatch(() => parseGraphQLRequest(request), (error) => console.error(error.message));
      }
      getPublicRequest(request, parsedResult) {
          return Object.assign(Object.assign({}, request), { variables: (parsedResult === null || parsedResult === void 0 ? void 0 : parsedResult.variables) || {} });
      }
      predicate(request, parsedResult) {
          if (!parsedResult) {
              return false;
          }
          if (!parsedResult.operationName) {
              const publicUrl = getPublicUrlFromRequest(request);
              devUtils.warn(`\
Failed to intercept a GraphQL request at "${request.method} ${publicUrl}": unnamed GraphQL operations are not supported.

Consider naming this operation or using "graphql.operation" request handler to intercept GraphQL requests regardless of their operation name/type. Read more: https://mswjs.io/docs/api/graphql/operation\
      `);
              return false;
          }
          const hasMatchingUrl = matchRequestUrl(request.url, this.endpoint);
          const hasMatchingOperationType = this.info.operationType === 'all' ||
              parsedResult.operationType === this.info.operationType;
          const hasMatchingOperationName = this.info.operationName instanceof RegExp
              ? this.info.operationName.test(parsedResult.operationName)
              : parsedResult.operationName === this.info.operationName;
          return (hasMatchingUrl.matches &&
              hasMatchingOperationType &&
              hasMatchingOperationName);
      }
      log(request, response, handler, parsedRequest) {
          const loggedRequest = prepareRequest(request);
          const loggedResponse = prepareResponse(response);
          const statusColor = getStatusCodeColor(response.status);
          console.groupCollapsed(devUtils.formatMessage('%s %s (%c%s%c)'), getTimestamp(), `${parsedRequest === null || parsedRequest === void 0 ? void 0 : parsedRequest.operationType} ${parsedRequest === null || parsedRequest === void 0 ? void 0 : parsedRequest.operationName}`, `color:${statusColor}`, `${response.status} ${response.statusText}`, 'color:inherit');
          console.log('Request:', loggedRequest);
          console.log('Handler:', this);
          console.log('Response:', loggedResponse);
          console.groupEnd();
      }
  }

  const MAX_MATCH_SCORE = 3;
  const MAX_SUGGESTION_COUNT = 4;
  const TYPE_MATCH_DELTA = 0.5;
  function groupHandlersByType(handlers) {
      return handlers.reduce((groups, handler) => {
          if (handler instanceof RestHandler) {
              groups.rest.push(handler);
          }
          if (handler instanceof GraphQLHandler) {
              groups.graphql.push(handler);
          }
          return groups;
      }, {
          rest: [],
          graphql: [],
      });
  }
  function getScoreForRestHandler() {
      return (request, handler) => {
          const { path, method } = handler.info;
          if (path instanceof RegExp) {
              return Infinity;
          }
          const hasSameMethod = isStringEqual(request.method, method);
          // Always treat a handler with the same method as a more similar one.
          const methodScoreDelta = hasSameMethod ? TYPE_MATCH_DELTA : 0;
          const requestPublicUrl = getPublicUrlFromRequest(request);
          const score = jsLevenshtein(requestPublicUrl, path);
          return score - methodScoreDelta;
      };
  }
  function getScoreForGraphQLHandler(parsedQuery) {
      return (_, handler) => {
          if (typeof parsedQuery.operationName === 'undefined') {
              return Infinity;
          }
          const { operationType, operationName } = handler.info;
          const hasSameOperationType = parsedQuery.operationType === operationType;
          // Always treat a handler with the same operation type as a more similar one.
          const operationTypeScoreDelta = hasSameOperationType ? TYPE_MATCH_DELTA : 0;
          const score = jsLevenshtein(parsedQuery.operationName, operationName);
          return score - operationTypeScoreDelta;
      };
  }
  function getSuggestedHandler(request, handlers, getScore) {
      const suggestedHandlers = handlers
          .reduce((acc, handler) => {
          const score = getScore(request, handler);
          return acc.concat([[score, handler]]);
      }, [])
          .sort(([leftScore], [rightScore]) => {
          return leftScore - rightScore;
      })
          .filter(([score]) => {
          return score <= MAX_MATCH_SCORE;
      })
          .slice(0, MAX_SUGGESTION_COUNT)
          .map(([, handler]) => handler);
      return suggestedHandlers;
  }
  function getSuggestedHandlersMessage(handlers) {
      if (handlers.length > 1) {
          return `\
Did you mean to request one of the following resources instead?

${handlers.map((handler) => `  • ${handler.info.header}`).join('\n')}`;
      }
      return `Did you mean to request "${handlers[0].info.header}" instead?`;
  }
  function onUnhandledRequest(request, handlers, strategy = 'warn') {
      if (typeof strategy === 'function') {
          strategy(request);
          return;
      }
      /**
       * @note Ignore exceptions during GraphQL request parsing because at this point
       * we cannot assume the unhandled request is a valid GraphQL request.
       * If the GraphQL parsing fails, just don't treat it as a GraphQL request.
       */
      const parsedGraphQLQuery = tryCatch(() => parseGraphQLRequest(request));
      const handlerGroups = groupHandlersByType(handlers);
      const relevantHandlers = parsedGraphQLQuery
          ? handlerGroups.graphql
          : handlerGroups.rest;
      const suggestedHandlers = getSuggestedHandler(request, relevantHandlers, parsedGraphQLQuery
          ? getScoreForGraphQLHandler(parsedGraphQLQuery)
          : getScoreForRestHandler());
      const handlerSuggestion = suggestedHandlers.length > 0
          ? getSuggestedHandlersMessage(suggestedHandlers)
          : '';
      const publicUrl = getPublicUrlFromRequest(request);
      const requestHeader = parsedGraphQLQuery
          ? `${parsedGraphQLQuery.operationType} ${parsedGraphQLQuery.operationName} (${request.method} ${publicUrl})`
          : `${request.method} ${publicUrl}`;
      const messageTemplate = [
          `captured a request without a matching request handler:`,
          `  \u2022 ${requestHeader}`,
          handlerSuggestion,
          `\
If you still wish to intercept this unhandled request, please create a request handler for it.
Read more: https://mswjs.io/docs/getting-started/mocks\
`,
      ].filter(Boolean);
      const message = messageTemplate.join('\n\n');
      switch (strategy) {
          case 'error': {
              // Print a developer-friendly error.
              devUtils.error('Error: %s', message);
              // Throw an exception to halt request processing and not perform the original request.
              throw new Error('Cannot bypass a request when using the "error" strategy for the "onUnhandledRequest" option.');
          }
          case 'warn': {
              devUtils.warn('Warning: %s', message);
              break;
          }
          case 'bypass':
              break;
          default:
              throw new Error(devUtils.formatMessage('Failed to react to an unhandled request: unknown strategy "%s". Please provide one of the supported strategies ("bypass", "warn", "error") or a custom callback function as the value of the "onUnhandledRequest" option.', strategy));
      }
  }

  function readResponseCookies(request, response) {
      lib$1.store.add(Object.assign(Object.assign({}, request), { url: request.url.toString() }), response);
      lib$1.store.persist();
  }

  function handleRequest(request, handlers, options, emitter, handleRequestOptions) {
      var _a, _b, _c;
      return __awaiter$3(this, void 0, void 0, function* () {
          emitter.emit('request:start', request);
          // Perform bypassed requests (i.e. issued via "ctx.fetch") as-is.
          if (request.headers.get('x-msw-bypass')) {
              emitter.emit('request:end', request);
              (_a = handleRequestOptions === null || handleRequestOptions === void 0 ? void 0 : handleRequestOptions.onBypassResponse) === null || _a === void 0 ? void 0 : _a.call(handleRequestOptions, request);
              return;
          }
          // Resolve a mocked response from the list of request handlers.
          const lookupResult = yield getResponse(request, handlers, handleRequestOptions === null || handleRequestOptions === void 0 ? void 0 : handleRequestOptions.resolutionContext);
          const { handler, response } = lookupResult;
          // When there's no handler for the request, consider it unhandled.
          // Allow the developer to react to such cases.
          if (!handler) {
              onUnhandledRequest(request, handlers, options.onUnhandledRequest);
              emitter.emit('request:unhandled', request);
              emitter.emit('request:end', request);
              (_b = handleRequestOptions === null || handleRequestOptions === void 0 ? void 0 : handleRequestOptions.onBypassResponse) === null || _b === void 0 ? void 0 : _b.call(handleRequestOptions, request);
              return;
          }
          // When the handled request returned no mocked response, warn the developer,
          // as it may be an oversight on their part. Perform the request as-is.
          if (!response) {
              devUtils.warn('Expected a mocking resolver function to return a mocked response Object, but got: %s. Original response is going to be used instead.', response);
              emitter.emit('request:end', request);
              (_c = handleRequestOptions === null || handleRequestOptions === void 0 ? void 0 : handleRequestOptions.onBypassResponse) === null || _c === void 0 ? void 0 : _c.call(handleRequestOptions, request);
              return;
          }
          // Store all the received response cookies in the virtual cookie store.
          readResponseCookies(request, response);
          emitter.emit('request:match', request);
          return new Promise((resolve) => {
              var _a, _b, _c;
              const requiredLookupResult = lookupResult;
              const transformedResponse = ((_a = handleRequestOptions === null || handleRequestOptions === void 0 ? void 0 : handleRequestOptions.transformResponse) === null || _a === void 0 ? void 0 : _a.call(handleRequestOptions, response)) ||
                  response;
              (_b = handleRequestOptions === null || handleRequestOptions === void 0 ? void 0 : handleRequestOptions.onMockedResponse) === null || _b === void 0 ? void 0 : _b.call(handleRequestOptions, transformedResponse, requiredLookupResult);
              setTimeout(() => {
                  var _a;
                  (_a = handleRequestOptions === null || handleRequestOptions === void 0 ? void 0 : handleRequestOptions.onMockedResponseSent) === null || _a === void 0 ? void 0 : _a.call(handleRequestOptions, transformedResponse, requiredLookupResult);
                  emitter.emit('request:end', request);
                  resolve(transformedResponse);
              }, (_c = response.delay) !== null && _c !== void 0 ? _c : 0);
          });
      });
  }

  const createRequestListener = (context, options) => {
      return (event, message) => __awaiter$3(void 0, void 0, void 0, function* () {
          const channel = createBroadcastChannel(event);
          try {
              const request = parseWorkerRequest(message.payload);
              yield handleRequest(request, context.requestHandlers, options, context.emitter, {
                  transformResponse(response) {
                      return Object.assign(Object.assign({}, response), { headers: response.headers.all() });
                  },
                  onBypassResponse() {
                      return channel.send({
                          type: 'MOCK_NOT_FOUND',
                      });
                  },
                  onMockedResponse(response) {
                      channel.send({
                          type: 'MOCK_SUCCESS',
                          payload: response,
                      });
                  },
                  onMockedResponseSent(response, { handler, publicRequest, parsedRequest }) {
                      if (!options.quiet) {
                          handler.log(publicRequest, response, handler, parsedRequest);
                      }
                  },
              });
          }
          catch (error) {
              if (error instanceof NetworkError) {
                  // Treat emulated network error differently,
                  // as it is an intended exception in a request handler.
                  return channel.send({
                      type: 'NETWORK_ERROR',
                      payload: {
                          name: error.name,
                          message: error.message,
                      },
                  });
              }
              // Treat all the other exceptions in a request handler
              // as unintended, alerting that there is a problem needs fixing.
              channel.send({
                  type: 'INTERNAL_ERROR',
                  payload: {
                      status: 500,
                      body: JSON.stringify({
                          errorType: error.constructor.name,
                          message: error.message,
                          location: error.stack,
                      }),
                  },
              });
          }
      });
  };

  function requestIntegrityCheck(context, serviceWorker) {
      return __awaiter$3(this, void 0, void 0, function* () {
          // Signal Service Worker to report back its integrity
          context.workerChannel.send('INTEGRITY_CHECK_REQUEST');
          const { payload: actualChecksum } = yield context.events.once('INTEGRITY_CHECK_RESPONSE');
          // Compare the response from the Service Worker and the
          // global variable set by Rollup during the build.
          if (actualChecksum !== "f0a916b13c8acc2b526a03a6d26df85f") {
              throw new Error(`Currently active Service Worker (${actualChecksum}) is behind the latest published one (${"f0a916b13c8acc2b526a03a6d26df85f"}).`);
          }
          return serviceWorker;
      });
  }

  /**
   * Intercepts and defers any requests on the page
   * until the Service Worker instance is ready.
   * Must only be used in a browser.
   */
  function deferNetworkRequestsUntil(predicatePromise) {
      // Defer any `XMLHttpRequest` requests until the Service Worker is ready.
      const originalXhrSend = window.XMLHttpRequest.prototype.send;
      window.XMLHttpRequest.prototype.send = function (...args) {
          // Keep this function synchronous to comply with `XMLHttpRequest.prototype.send`,
          // because that method is always synchronous.
          until(() => predicatePromise).then(() => {
              window.XMLHttpRequest.prototype.send = originalXhrSend;
              this.send(...args);
          });
      };
      // Defer any `fetch` requests until the Service Worker is ready.
      const originalFetch = window.fetch;
      window.fetch = (...args) => __awaiter$3(this, void 0, void 0, function* () {
          yield until(() => predicatePromise);
          window.fetch = originalFetch;
          return window.fetch(...args);
      });
  }

  function createResponseListener(context) {
      return (_, message) => {
          var _a;
          const { payload: responseJson } = message;
          /**
           * CORS requests with `mode: "no-cors"` result in "opaque" responses.
           * That kind of responses cannot be manipulated in JavaScript due
           * to the security considerations.
           * @see https://fetch.spec.whatwg.org/#concept-filtered-response-opaque
           * @see https://github.com/mswjs/msw/issues/529
           */
          if ((_a = responseJson.type) === null || _a === void 0 ? void 0 : _a.includes('opaque')) {
              return;
          }
          const response = new Response(responseJson.body || null, responseJson);
          const isMockedResponse = response.headers.get('x-powered-by') === 'msw';
          if (isMockedResponse) {
              context.emitter.emit('response:mocked', response, responseJson.requestId);
          }
          else {
              context.emitter.emit('response:bypass', response, responseJson.requestId);
          }
      };
  }

  function validateWorkerScope(registration, options) {
      if (!(options === null || options === void 0 ? void 0 : options.quiet) && !location.href.startsWith(registration.scope)) {
          devUtils.warn(`\
Cannot intercept requests on this page because it's outside of the worker's scope ("${registration.scope}"). If you wish to mock API requests on this page, you must resolve this scope issue.

- (Recommended) Register the worker at the root level ("/") of your application.
- Set the "Service-Worker-Allowed" response header to allow out-of-scope workers.\
`);
      }
  }

  const createStartHandler = (context) => {
      return function start(options, customOptions) {
          const startWorkerInstance = () => __awaiter$3(this, void 0, void 0, function* () {
              // Remove all previously existing event listeners.
              // This way none of the listeners persists between Fast refresh
              // of the application's code.
              context.events.removeAllListeners();
              // Handle requests signaled by the worker.
              context.workerChannel.on('REQUEST', createRequestListener(context, options));
              context.workerChannel.on('RESPONSE', createResponseListener(context));
              const instance = yield getWorkerInstance(options.serviceWorker.url, options.serviceWorker.options, options.findWorker);
              const [worker, registration] = instance;
              if (!worker) {
                  const missingWorkerMessage = (customOptions === null || customOptions === void 0 ? void 0 : customOptions.findWorker)
                      ? devUtils.formatMessage(`Failed to locate the Service Worker registration using a custom "findWorker" predicate.

Please ensure that the custom predicate properly locates the Service Worker registration at "%s".
More details: https://mswjs.io/docs/api/setup-worker/start#findworker
`, options.serviceWorker.url)
                      : devUtils.formatMessage(`Failed to locate the Service Worker registration.

This most likely means that the worker script URL "%s" cannot resolve against the actual public hostname (%s). This may happen if your application runs behind a proxy, or has a dynamic hostname.

Please consider using a custom "serviceWorker.url" option to point to the actual worker script location, or a custom "findWorker" option to resolve the Service Worker registration manually. More details: https://mswjs.io/docs/api/setup-worker/start`, options.serviceWorker.url, location.host);
                  throw new Error(missingWorkerMessage);
              }
              context.worker = worker;
              context.registration = registration;
              context.events.addListener(window, 'beforeunload', () => {
                  if (worker.state !== 'redundant') {
                      // Notify the Service Worker that this client has closed.
                      // Internally, it's similar to disabling the mocking, only
                      // client close event has a handler that self-terminates
                      // the Service Worker when there are no open clients.
                      context.workerChannel.send('CLIENT_CLOSED');
                  }
                  // Make sure we're always clearing the interval - there are reports that not doing this can
                  // cause memory leaks in headless browser environments.
                  window.clearInterval(context.keepAliveInterval);
              });
              // Check if the active Service Worker is the latest published one
              const [integrityError] = yield until(() => requestIntegrityCheck(context, worker));
              if (integrityError) {
                  devUtils.error(`\
Detected outdated Service Worker: ${integrityError.message}

The mocking is still enabled, but it's highly recommended that you update your Service Worker by running:

$ npx msw init <PUBLIC_DIR>

This is necessary to ensure that the Service Worker is in sync with the library to guarantee its stability.
If this message still persists after updating, please report an issue: https://github.com/open-draft/msw/issues\
      `);
              }
              yield enableMocking(context, options).catch((err) => {
                  throw new Error(`Failed to enable mocking: ${err === null || err === void 0 ? void 0 : err.message}`);
              });
              context.keepAliveInterval = window.setInterval(() => context.workerChannel.send('KEEPALIVE_REQUEST'), 5000);
              // Warn the user when loading the page that lies outside
              // of the worker's scope.
              validateWorkerScope(registration, context.startOptions);
              return registration;
          });
          const workerRegistration = startWorkerInstance();
          // Defer any network requests until the Service Worker instance is ready.
          // This prevents a race condition between the Service Worker registration
          // and application's runtime requests (i.e. requests on mount).
          if (options.waitUntilReady) {
              deferNetworkRequestsUntil(workerRegistration);
          }
          return workerRegistration;
      };
  };

  function printStopMessage(args = {}) {
      if (args.quiet) {
          return;
      }
      console.log(`%c${devUtils.formatMessage('Mocking disabled.')}`, 'color:orangered;font-weight:bold;');
  }

  const createStop = (context) => {
      return function stop() {
          var _a;
          /**
           * Signal the Service Worker to disable mocking for this client.
           * Use this an an explicit way to stop the mocking, while preserving
           * the worker-client relation. Does not affect the worker's lifecycle.
           */
          context.workerChannel.send('MOCK_DEACTIVATE');
          window.clearInterval(context.keepAliveInterval);
          printStopMessage({ quiet: (_a = context.startOptions) === null || _a === void 0 ? void 0 : _a.quiet });
      };
  };

  function use(currentHandlers, ...handlers) {
      currentHandlers.unshift(...handlers);
  }
  function restoreHandlers(handlers) {
      handlers.forEach((handler) => {
          handler.markAsSkipped(false);
      });
  }
  function resetHandlers(initialHandlers, ...nextHandlers) {
      return nextHandlers.length > 0 ? [...nextHandlers] : [...initialHandlers];
  }

  const DEFAULT_START_OPTIONS = {
      serviceWorker: {
          url: '/mockServiceWorker.js',
          options: null,
      },
      quiet: false,
      waitUntilReady: true,
      onUnhandledRequest: 'warn',
      findWorker(scriptURL, mockServiceWorkerUrl) {
          return scriptURL === mockServiceWorkerUrl;
      },
  };
  /**
   * Returns resolved worker start options, merging the default options
   * with the given custom options.
   */
  function resolveStartOptions(initialOptions) {
      return mergeRight(DEFAULT_START_OPTIONS, initialOptions || {});
  }
  function prepareStartHandler(handler, context) {
      return (initialOptions) => {
          context.startOptions = resolveStartOptions(initialOptions);
          return handler(context.startOptions, initialOptions || {});
      };
  }

  var lib = {};

  var createInterceptor$1 = {};

  Object.defineProperty(createInterceptor$1, "__esModule", { value: true });
  createInterceptor$1.createInterceptor = void 0;
  var strict_event_emitter_1$1 = lib$4;
  function createInterceptor(options) {
      var observer = new strict_event_emitter_1$1.StrictEventEmitter();
      var cleanupFns = [];
      return {
          apply: function () {
              cleanupFns = options.modules.map(function (interceptor) {
                  return interceptor(observer, options.resolver);
              });
          },
          on: function (event, listener) {
              observer.addListener(event, listener);
          },
          restore: function () {
              observer.removeAllListeners();
              if (cleanupFns.length === 0) {
                  throw new Error("Failed to restore patched modules: no patches found. Did you forget to run \".apply()\"?");
              }
              cleanupFns.forEach(function (restore) { return restore(); });
          },
      };
  }
  createInterceptor$1.createInterceptor = createInterceptor;

  var remote = {};

  var toIsoResponse$1 = {};

  Object.defineProperty(toIsoResponse$1, "__esModule", { value: true });
  toIsoResponse$1.toIsoResponse = void 0;
  var headers_utils_1$3 = lib$6;
  /**
   * Converts a given mocked response object into an isomorphic response.
   */
  function toIsoResponse(response) {
      return {
          status: response.status || 200,
          statusText: response.statusText || 'OK',
          headers: headers_utils_1$3.objectToHeaders(response.headers || {}),
          body: response.body,
      };
  }
  toIsoResponse$1.toIsoResponse = toIsoResponse;

  var __assign$1 = (commonjsGlobal && commonjsGlobal.__assign) || function () {
      __assign$1 = Object.assign || function(t) {
          for (var s, i = 1, n = arguments.length; i < n; i++) {
              s = arguments[i];
              for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                  t[p] = s[p];
          }
          return t;
      };
      return __assign$1.apply(this, arguments);
  };
  var __awaiter$2 = (commonjsGlobal && commonjsGlobal.__awaiter) || function (thisArg, _arguments, P, generator) {
      function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
      return new (P || (P = Promise))(function (resolve, reject) {
          function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
          function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
          function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
          step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
  };
  var __generator$2 = (commonjsGlobal && commonjsGlobal.__generator) || function (thisArg, body) {
      var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
      return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
      function verb(n) { return function (v) { return step([n, v]); }; }
      function step(op) {
          if (f) throw new TypeError("Generator is already executing.");
          while (_) try {
              if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
              if (y = 0, t) op = [op[0] & 2, t.value];
              switch (op[0]) {
                  case 0: case 1: t = op; break;
                  case 4: _.label++; return { value: op[1], done: false };
                  case 5: _.label++; y = op[1]; op = [0]; continue;
                  case 7: op = _.ops.pop(); _.trys.pop(); continue;
                  default:
                      if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                      if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                      if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                      if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                      if (t[2]) _.ops.pop();
                      _.trys.pop(); continue;
              }
              op = body.call(thisArg, _);
          } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
          if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
      }
  };
  var __read$1 = (commonjsGlobal && commonjsGlobal.__read) || function (o, n) {
      var m = typeof Symbol === "function" && o[Symbol.iterator];
      if (!m) return o;
      var i = m.call(o), r, ar = [], e;
      try {
          while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
      }
      catch (error) { e = { error: error }; }
      finally {
          try {
              if (r && !r.done && (m = i["return"])) m.call(i);
          }
          finally { if (e) throw e.error; }
      }
      return ar;
  };
  Object.defineProperty(remote, "__esModule", { value: true });
  remote.createRemoteResolver = remote.createRemoteInterceptor = void 0;
  var headers_utils_1$2 = lib$6;
  var outvariant_1 = lib$2;
  var strict_event_emitter_1 = lib$4;
  var createInterceptor_1 = createInterceptor$1;
  var toIsoResponse_1$2 = toIsoResponse$1;
  function requestReviver(key, value) {
      switch (key) {
          case 'url':
              return new URL(value);
          case 'headers':
              return new headers_utils_1$2.Headers(value);
          default:
              return value;
      }
  }
  /**
   * Creates a remote request interceptor that delegates
   * the mocked response resolution to the parent process.
   * The parent process must establish a remote resolver
   * by calling `createRemoteResolver` function.
   */
  function createRemoteInterceptor(options) {
      outvariant_1.invariant(process.connected, "Failed to create a remote interceptor: the current process (%s) does not have a parent. Please make sure you're spawning this process as a child process in order to use remote request interception.", process.pid);
      if (typeof process.send === 'undefined') {
          throw new Error("Failed to create a remote interceptor: the current process (" + process.pid + ") does not have the IPC enabled. Please make sure you're spawning this process with the \"ipc\" stdio value set:\n\nspawn('node', ['module.js'], { stdio: ['ipc'] })");
      }
      var handleParentMessage;
      var interceptor = createInterceptor_1.createInterceptor(__assign$1(__assign$1({}, options), { resolver: function (request) {
              var _a;
              var serializedRequest = JSON.stringify(request);
              (_a = process.send) === null || _a === void 0 ? void 0 : _a.call(process, "request:" + serializedRequest);
              return new Promise(function (resolve) {
                  handleParentMessage = function (message) {
                      if (typeof message !== 'string') {
                          return;
                      }
                      if (message.startsWith("response:" + request.id)) {
                          var _a = __read$1(message.match(/^response:.+?:(.+)$/) || [], 2), responseString = _a[1];
                          if (!responseString) {
                              return resolve();
                          }
                          var mockedResponse = JSON.parse(responseString);
                          return resolve(mockedResponse);
                      }
                  };
                  process.addListener('message', handleParentMessage);
              });
          } }));
      return __assign$1(__assign$1({}, interceptor), { restore: function () {
              interceptor.restore();
              process.removeListener('message', handleParentMessage);
          } });
  }
  remote.createRemoteInterceptor = createRemoteInterceptor;
  /**
   * Creates a response resolver function attached to the given `ChildProcess`.
   * The child process must establish a remote interceptor by calling `createRemoteInterceptor` function.
   */
  function createRemoteResolver(options) {
      var _this = this;
      var observer = new strict_event_emitter_1.StrictEventEmitter();
      var handleChildMessage = function (message) { return __awaiter$2(_this, void 0, void 0, function () {
          var _a, requestString, isoRequest_1, mockedResponse_1, serializedResponse;
          return __generator$2(this, function (_b) {
              switch (_b.label) {
                  case 0:
                      if (typeof message !== 'string') {
                          return [2 /*return*/];
                      }
                      if (!message.startsWith('request:')) return [3 /*break*/, 2];
                      _a = __read$1(message.match(/^request:(.+)$/) || [], 2), requestString = _a[1];
                      if (!requestString) {
                          return [2 /*return*/];
                      }
                      isoRequest_1 = JSON.parse(requestString, requestReviver);
                      observer.emit('request', isoRequest_1);
                      return [4 /*yield*/, options.resolver(isoRequest_1, undefined)
                          // Send the mocked response to the child process.
                      ];
                  case 1:
                      mockedResponse_1 = _b.sent();
                      serializedResponse = JSON.stringify(mockedResponse_1);
                      options.process.send("response:" + isoRequest_1.id + ":" + serializedResponse, function (error) {
                          if (error) {
                              return;
                          }
                          if (mockedResponse_1) {
                              // Emit an optimisting "response" event at this point,
                              // not to rely on the back-and-forth signaling for the sake of the event.
                              observer.emit('response', isoRequest_1, toIsoResponse_1$2.toIsoResponse(mockedResponse_1));
                          }
                      });
                      _b.label = 2;
                  case 2: return [2 /*return*/];
              }
          });
      }); };
      var cleanup = function () {
          options.process.removeListener('message', handleChildMessage);
      };
      options.process.addListener('message', handleChildMessage);
      options.process.addListener('disconnect', cleanup);
      options.process.addListener('error', cleanup);
      options.process.addListener('exit', cleanup);
      return {
          on: function (event, listener) {
              observer.addListener(event, listener);
          },
      };
  }
  remote.createRemoteResolver = createRemoteResolver;

  (function (exports) {
  var __createBinding = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
      if (k2 === undefined) k2 = k;
      Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
  }) : (function(o, m, k, k2) {
      if (k2 === undefined) k2 = k;
      o[k2] = m[k];
  }));
  var __exportStar = (commonjsGlobal && commonjsGlobal.__exportStar) || function(m, exports) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
  };
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.getCleanUrl = void 0;
  __exportStar(createInterceptor$1, exports);
  __exportStar(remote, exports);
  /* Utils */
  var getCleanUrl_1 = getCleanUrl$1;
  Object.defineProperty(exports, "getCleanUrl", { enumerable: true, get: function () { return getCleanUrl_1.getCleanUrl; } });

  }(lib));

  var fetch = {};

  var uuid = {};

  Object.defineProperty(uuid, "__esModule", { value: true });
  uuid.uuidv4 = void 0;
  function uuidv4$1() {
      return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
          var r = (Math.random() * 16) | 0;
          var v = c == 'x' ? r : (r & 0x3) | 0x8;
          return v.toString(16);
      });
  }
  uuid.uuidv4 = uuidv4$1;

  var browser = {exports: {}};

  /**
   * Helpers.
   */

  var s = 1000;
  var m = s * 60;
  var h = m * 60;
  var d = h * 24;
  var w = d * 7;
  var y = d * 365.25;

  /**
   * Parse or format the given `val`.
   *
   * Options:
   *
   *  - `long` verbose formatting [false]
   *
   * @param {String|Number} val
   * @param {Object} [options]
   * @throws {Error} throw an error if val is not a non-empty string or a number
   * @return {String|Number}
   * @api public
   */

  var ms = function(val, options) {
    options = options || {};
    var type = typeof val;
    if (type === 'string' && val.length > 0) {
      return parse$1(val);
    } else if (type === 'number' && isFinite(val)) {
      return options.long ? fmtLong(val) : fmtShort(val);
    }
    throw new Error(
      'val is not a non-empty string or a valid number. val=' +
        JSON.stringify(val)
    );
  };

  /**
   * Parse the given `str` and return milliseconds.
   *
   * @param {String} str
   * @return {Number}
   * @api private
   */

  function parse$1(str) {
    str = String(str);
    if (str.length > 100) {
      return;
    }
    var match = /^(-?(?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(
      str
    );
    if (!match) {
      return;
    }
    var n = parseFloat(match[1]);
    var type = (match[2] || 'ms').toLowerCase();
    switch (type) {
      case 'years':
      case 'year':
      case 'yrs':
      case 'yr':
      case 'y':
        return n * y;
      case 'weeks':
      case 'week':
      case 'w':
        return n * w;
      case 'days':
      case 'day':
      case 'd':
        return n * d;
      case 'hours':
      case 'hour':
      case 'hrs':
      case 'hr':
      case 'h':
        return n * h;
      case 'minutes':
      case 'minute':
      case 'mins':
      case 'min':
      case 'm':
        return n * m;
      case 'seconds':
      case 'second':
      case 'secs':
      case 'sec':
      case 's':
        return n * s;
      case 'milliseconds':
      case 'millisecond':
      case 'msecs':
      case 'msec':
      case 'ms':
        return n;
      default:
        return undefined;
    }
  }

  /**
   * Short format for `ms`.
   *
   * @param {Number} ms
   * @return {String}
   * @api private
   */

  function fmtShort(ms) {
    var msAbs = Math.abs(ms);
    if (msAbs >= d) {
      return Math.round(ms / d) + 'd';
    }
    if (msAbs >= h) {
      return Math.round(ms / h) + 'h';
    }
    if (msAbs >= m) {
      return Math.round(ms / m) + 'm';
    }
    if (msAbs >= s) {
      return Math.round(ms / s) + 's';
    }
    return ms + 'ms';
  }

  /**
   * Long format for `ms`.
   *
   * @param {Number} ms
   * @return {String}
   * @api private
   */

  function fmtLong(ms) {
    var msAbs = Math.abs(ms);
    if (msAbs >= d) {
      return plural(ms, msAbs, d, 'day');
    }
    if (msAbs >= h) {
      return plural(ms, msAbs, h, 'hour');
    }
    if (msAbs >= m) {
      return plural(ms, msAbs, m, 'minute');
    }
    if (msAbs >= s) {
      return plural(ms, msAbs, s, 'second');
    }
    return ms + ' ms';
  }

  /**
   * Pluralization helper.
   */

  function plural(ms, msAbs, n, name) {
    var isPlural = msAbs >= n * 1.5;
    return Math.round(ms / n) + ' ' + name + (isPlural ? 's' : '');
  }

  /**
   * This is the common logic for both the Node.js and web browser
   * implementations of `debug()`.
   */

  function setup(env) {
  	createDebug.debug = createDebug;
  	createDebug.default = createDebug;
  	createDebug.coerce = coerce;
  	createDebug.disable = disable;
  	createDebug.enable = enable;
  	createDebug.enabled = enabled;
  	createDebug.humanize = ms;
  	createDebug.destroy = destroy;

  	Object.keys(env).forEach(key => {
  		createDebug[key] = env[key];
  	});

  	/**
  	* The currently active debug mode names, and names to skip.
  	*/

  	createDebug.names = [];
  	createDebug.skips = [];

  	/**
  	* Map of special "%n" handling functions, for the debug "format" argument.
  	*
  	* Valid key names are a single, lower or upper-case letter, i.e. "n" and "N".
  	*/
  	createDebug.formatters = {};

  	/**
  	* Selects a color for a debug namespace
  	* @param {String} namespace The namespace string for the for the debug instance to be colored
  	* @return {Number|String} An ANSI color code for the given namespace
  	* @api private
  	*/
  	function selectColor(namespace) {
  		let hash = 0;

  		for (let i = 0; i < namespace.length; i++) {
  			hash = ((hash << 5) - hash) + namespace.charCodeAt(i);
  			hash |= 0; // Convert to 32bit integer
  		}

  		return createDebug.colors[Math.abs(hash) % createDebug.colors.length];
  	}
  	createDebug.selectColor = selectColor;

  	/**
  	* Create a debugger with the given `namespace`.
  	*
  	* @param {String} namespace
  	* @return {Function}
  	* @api public
  	*/
  	function createDebug(namespace) {
  		let prevTime;
  		let enableOverride = null;
  		let namespacesCache;
  		let enabledCache;

  		function debug(...args) {
  			// Disabled?
  			if (!debug.enabled) {
  				return;
  			}

  			const self = debug;

  			// Set `diff` timestamp
  			const curr = Number(new Date());
  			const ms = curr - (prevTime || curr);
  			self.diff = ms;
  			self.prev = prevTime;
  			self.curr = curr;
  			prevTime = curr;

  			args[0] = createDebug.coerce(args[0]);

  			if (typeof args[0] !== 'string') {
  				// Anything else let's inspect with %O
  				args.unshift('%O');
  			}

  			// Apply any `formatters` transformations
  			let index = 0;
  			args[0] = args[0].replace(/%([a-zA-Z%])/g, (match, format) => {
  				// If we encounter an escaped % then don't increase the array index
  				if (match === '%%') {
  					return '%';
  				}
  				index++;
  				const formatter = createDebug.formatters[format];
  				if (typeof formatter === 'function') {
  					const val = args[index];
  					match = formatter.call(self, val);

  					// Now we need to remove `args[index]` since it's inlined in the `format`
  					args.splice(index, 1);
  					index--;
  				}
  				return match;
  			});

  			// Apply env-specific formatting (colors, etc.)
  			createDebug.formatArgs.call(self, args);

  			const logFn = self.log || createDebug.log;
  			logFn.apply(self, args);
  		}

  		debug.namespace = namespace;
  		debug.useColors = createDebug.useColors();
  		debug.color = createDebug.selectColor(namespace);
  		debug.extend = extend;
  		debug.destroy = createDebug.destroy; // XXX Temporary. Will be removed in the next major release.

  		Object.defineProperty(debug, 'enabled', {
  			enumerable: true,
  			configurable: false,
  			get: () => {
  				if (enableOverride !== null) {
  					return enableOverride;
  				}
  				if (namespacesCache !== createDebug.namespaces) {
  					namespacesCache = createDebug.namespaces;
  					enabledCache = createDebug.enabled(namespace);
  				}

  				return enabledCache;
  			},
  			set: v => {
  				enableOverride = v;
  			}
  		});

  		// Env-specific initialization logic for debug instances
  		if (typeof createDebug.init === 'function') {
  			createDebug.init(debug);
  		}

  		return debug;
  	}

  	function extend(namespace, delimiter) {
  		const newDebug = createDebug(this.namespace + (typeof delimiter === 'undefined' ? ':' : delimiter) + namespace);
  		newDebug.log = this.log;
  		return newDebug;
  	}

  	/**
  	* Enables a debug mode by namespaces. This can include modes
  	* separated by a colon and wildcards.
  	*
  	* @param {String} namespaces
  	* @api public
  	*/
  	function enable(namespaces) {
  		createDebug.save(namespaces);
  		createDebug.namespaces = namespaces;

  		createDebug.names = [];
  		createDebug.skips = [];

  		let i;
  		const split = (typeof namespaces === 'string' ? namespaces : '').split(/[\s,]+/);
  		const len = split.length;

  		for (i = 0; i < len; i++) {
  			if (!split[i]) {
  				// ignore empty strings
  				continue;
  			}

  			namespaces = split[i].replace(/\*/g, '.*?');

  			if (namespaces[0] === '-') {
  				createDebug.skips.push(new RegExp('^' + namespaces.substr(1) + '$'));
  			} else {
  				createDebug.names.push(new RegExp('^' + namespaces + '$'));
  			}
  		}
  	}

  	/**
  	* Disable debug output.
  	*
  	* @return {String} namespaces
  	* @api public
  	*/
  	function disable() {
  		const namespaces = [
  			...createDebug.names.map(toNamespace),
  			...createDebug.skips.map(toNamespace).map(namespace => '-' + namespace)
  		].join(',');
  		createDebug.enable('');
  		return namespaces;
  	}

  	/**
  	* Returns true if the given mode name is enabled, false otherwise.
  	*
  	* @param {String} name
  	* @return {Boolean}
  	* @api public
  	*/
  	function enabled(name) {
  		if (name[name.length - 1] === '*') {
  			return true;
  		}

  		let i;
  		let len;

  		for (i = 0, len = createDebug.skips.length; i < len; i++) {
  			if (createDebug.skips[i].test(name)) {
  				return false;
  			}
  		}

  		for (i = 0, len = createDebug.names.length; i < len; i++) {
  			if (createDebug.names[i].test(name)) {
  				return true;
  			}
  		}

  		return false;
  	}

  	/**
  	* Convert regexp to namespace
  	*
  	* @param {RegExp} regxep
  	* @return {String} namespace
  	* @api private
  	*/
  	function toNamespace(regexp) {
  		return regexp.toString()
  			.substring(2, regexp.toString().length - 2)
  			.replace(/\.\*\?$/, '*');
  	}

  	/**
  	* Coerce `val`.
  	*
  	* @param {Mixed} val
  	* @return {Mixed}
  	* @api private
  	*/
  	function coerce(val) {
  		if (val instanceof Error) {
  			return val.stack || val.message;
  		}
  		return val;
  	}

  	/**
  	* XXX DO NOT USE. This is a temporary stub function.
  	* XXX It WILL be removed in the next major release.
  	*/
  	function destroy() {
  		console.warn('Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.');
  	}

  	createDebug.enable(createDebug.load());

  	return createDebug;
  }

  var common = setup;

  /* eslint-env browser */

  (function (module, exports) {
  /**
   * This is the web browser implementation of `debug()`.
   */

  exports.formatArgs = formatArgs;
  exports.save = save;
  exports.load = load;
  exports.useColors = useColors;
  exports.storage = localstorage();
  exports.destroy = (() => {
  	let warned = false;

  	return () => {
  		if (!warned) {
  			warned = true;
  			console.warn('Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.');
  		}
  	};
  })();

  /**
   * Colors.
   */

  exports.colors = [
  	'#0000CC',
  	'#0000FF',
  	'#0033CC',
  	'#0033FF',
  	'#0066CC',
  	'#0066FF',
  	'#0099CC',
  	'#0099FF',
  	'#00CC00',
  	'#00CC33',
  	'#00CC66',
  	'#00CC99',
  	'#00CCCC',
  	'#00CCFF',
  	'#3300CC',
  	'#3300FF',
  	'#3333CC',
  	'#3333FF',
  	'#3366CC',
  	'#3366FF',
  	'#3399CC',
  	'#3399FF',
  	'#33CC00',
  	'#33CC33',
  	'#33CC66',
  	'#33CC99',
  	'#33CCCC',
  	'#33CCFF',
  	'#6600CC',
  	'#6600FF',
  	'#6633CC',
  	'#6633FF',
  	'#66CC00',
  	'#66CC33',
  	'#9900CC',
  	'#9900FF',
  	'#9933CC',
  	'#9933FF',
  	'#99CC00',
  	'#99CC33',
  	'#CC0000',
  	'#CC0033',
  	'#CC0066',
  	'#CC0099',
  	'#CC00CC',
  	'#CC00FF',
  	'#CC3300',
  	'#CC3333',
  	'#CC3366',
  	'#CC3399',
  	'#CC33CC',
  	'#CC33FF',
  	'#CC6600',
  	'#CC6633',
  	'#CC9900',
  	'#CC9933',
  	'#CCCC00',
  	'#CCCC33',
  	'#FF0000',
  	'#FF0033',
  	'#FF0066',
  	'#FF0099',
  	'#FF00CC',
  	'#FF00FF',
  	'#FF3300',
  	'#FF3333',
  	'#FF3366',
  	'#FF3399',
  	'#FF33CC',
  	'#FF33FF',
  	'#FF6600',
  	'#FF6633',
  	'#FF9900',
  	'#FF9933',
  	'#FFCC00',
  	'#FFCC33'
  ];

  /**
   * Currently only WebKit-based Web Inspectors, Firefox >= v31,
   * and the Firebug extension (any Firefox version) are known
   * to support "%c" CSS customizations.
   *
   * TODO: add a `localStorage` variable to explicitly enable/disable colors
   */

  // eslint-disable-next-line complexity
  function useColors() {
  	// NB: In an Electron preload script, document will be defined but not fully
  	// initialized. Since we know we're in Chrome, we'll just detect this case
  	// explicitly
  	if (typeof window !== 'undefined' && window.process && (window.process.type === 'renderer' || window.process.__nwjs)) {
  		return true;
  	}

  	// Internet Explorer and Edge do not support colors.
  	if (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/)) {
  		return false;
  	}

  	// Is webkit? http://stackoverflow.com/a/16459606/376773
  	// document is undefined in react-native: https://github.com/facebook/react-native/pull/1632
  	return (typeof document !== 'undefined' && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance) ||
  		// Is firebug? http://stackoverflow.com/a/398120/376773
  		(typeof window !== 'undefined' && window.console && (window.console.firebug || (window.console.exception && window.console.table))) ||
  		// Is firefox >= v31?
  		// https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages
  		(typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/) && parseInt(RegExp.$1, 10) >= 31) ||
  		// Double check webkit in userAgent just in case we are in a worker
  		(typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/));
  }

  /**
   * Colorize log arguments if enabled.
   *
   * @api public
   */

  function formatArgs(args) {
  	args[0] = (this.useColors ? '%c' : '') +
  		this.namespace +
  		(this.useColors ? ' %c' : ' ') +
  		args[0] +
  		(this.useColors ? '%c ' : ' ') +
  		'+' + module.exports.humanize(this.diff);

  	if (!this.useColors) {
  		return;
  	}

  	const c = 'color: ' + this.color;
  	args.splice(1, 0, c, 'color: inherit');

  	// The final "%c" is somewhat tricky, because there could be other
  	// arguments passed either before or after the %c, so we need to
  	// figure out the correct index to insert the CSS into
  	let index = 0;
  	let lastC = 0;
  	args[0].replace(/%[a-zA-Z%]/g, match => {
  		if (match === '%%') {
  			return;
  		}
  		index++;
  		if (match === '%c') {
  			// We only are interested in the *last* %c
  			// (the user may have provided their own)
  			lastC = index;
  		}
  	});

  	args.splice(lastC, 0, c);
  }

  /**
   * Invokes `console.debug()` when available.
   * No-op when `console.debug` is not a "function".
   * If `console.debug` is not available, falls back
   * to `console.log`.
   *
   * @api public
   */
  exports.log = console.debug || console.log || (() => {});

  /**
   * Save `namespaces`.
   *
   * @param {String} namespaces
   * @api private
   */
  function save(namespaces) {
  	try {
  		if (namespaces) {
  			exports.storage.setItem('debug', namespaces);
  		} else {
  			exports.storage.removeItem('debug');
  		}
  	} catch (error) {
  		// Swallow
  		// XXX (@Qix-) should we be logging these?
  	}
  }

  /**
   * Load `namespaces`.
   *
   * @return {String} returns the previously persisted debug modes
   * @api private
   */
  function load() {
  	let r;
  	try {
  		r = exports.storage.getItem('debug');
  	} catch (error) {
  		// Swallow
  		// XXX (@Qix-) should we be logging these?
  	}

  	// If debug isn't set in LS, and we're in Electron, try to load $DEBUG
  	if (!r && typeof process !== 'undefined' && 'env' in process) {
  		r = process.env.DEBUG;
  	}

  	return r;
  }

  /**
   * Localstorage attempts to return the localstorage.
   *
   * This is necessary because safari throws
   * when a user disables cookies/localstorage
   * and you attempt to access it.
   *
   * @return {LocalStorage}
   * @api private
   */

  function localstorage() {
  	try {
  		// TVMLKit (Apple TV JS Runtime) does not have a window object, just localStorage in the global context
  		// The Browser also has localStorage in the global context.
  		return localStorage;
  	} catch (error) {
  		// Swallow
  		// XXX (@Qix-) should we be logging these?
  	}
  }

  module.exports = common(exports);

  const {formatters} = module.exports;

  /**
   * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.
   */

  formatters.j = function (v) {
  	try {
  		return JSON.stringify(v);
  	} catch (error) {
  		return '[UnexpectedJSONParseError]: ' + error.message;
  	}
  };
  }(browser, browser.exports));

  var __assign = (commonjsGlobal && commonjsGlobal.__assign) || function () {
      __assign = Object.assign || function(t) {
          for (var s, i = 1, n = arguments.length; i < n; i++) {
              s = arguments[i];
              for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                  t[p] = s[p];
          }
          return t;
      };
      return __assign.apply(this, arguments);
  };
  var __awaiter$1 = (commonjsGlobal && commonjsGlobal.__awaiter) || function (thisArg, _arguments, P, generator) {
      function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
      return new (P || (P = Promise))(function (resolve, reject) {
          function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
          function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
          function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
          step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
  };
  var __generator$1 = (commonjsGlobal && commonjsGlobal.__generator) || function (thisArg, body) {
      var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
      return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
      function verb(n) { return function (v) { return step([n, v]); }; }
      function step(op) {
          if (f) throw new TypeError("Generator is already executing.");
          while (_) try {
              if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
              if (y = 0, t) op = [op[0] & 2, t.value];
              switch (op[0]) {
                  case 0: case 1: t = op; break;
                  case 4: _.label++; return { value: op[1], done: false };
                  case 5: _.label++; y = op[1]; op = [0]; continue;
                  case 7: op = _.ops.pop(); _.trys.pop(); continue;
                  default:
                      if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                      if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                      if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                      if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                      if (t[2]) _.ops.pop();
                      _.trys.pop(); continue;
              }
              op = body.call(thisArg, _);
          } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
          if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
      }
  };
  Object.defineProperty(fetch, "__esModule", { value: true });
  var interceptFetch_1 = fetch.interceptFetch = void 0;
  var headers_utils_1$1 = lib$6;
  var toIsoResponse_1$1 = toIsoResponse$1;
  var uuid_1$1 = uuid;
  var debug$1 = browser.exports('fetch');
  var interceptFetch = function (observer, resolver) {
      var pureFetch = window.fetch;
      debug$1('replacing "window.fetch"...');
      window.fetch = function (input, init) { return __awaiter$1(void 0, void 0, void 0, function () {
          var ref, url, method, isoRequest, response, isomorphicResponse;
          var _a;
          return __generator$1(this, function (_b) {
              switch (_b.label) {
                  case 0:
                      ref = new Request(input, init);
                      url = typeof input === 'string' ? input : input.url;
                      method = (init === null || init === void 0 ? void 0 : init.method) || 'GET';
                      debug$1('[%s] %s', method, url);
                      _a = {
                          id: uuid_1$1.uuidv4(),
                          url: new URL(url, location.origin),
                          method: method,
                          headers: new headers_utils_1$1.Headers((init === null || init === void 0 ? void 0 : init.headers) || {})
                      };
                      return [4 /*yield*/, ref.text()];
                  case 1:
                      isoRequest = (_a.body = _b.sent(),
                          _a);
                      debug$1('isomorphic request', isoRequest);
                      observer.emit('request', isoRequest);
                      debug$1('awaiting for the mocked response...');
                      return [4 /*yield*/, resolver(isoRequest, ref)];
                  case 2:
                      response = _b.sent();
                      debug$1('mocked response', response);
                      if (response) {
                          isomorphicResponse = toIsoResponse_1$1.toIsoResponse(response);
                          debug$1('derived isomorphic response', isomorphicResponse);
                          observer.emit('response', isoRequest, isomorphicResponse);
                          return [2 /*return*/, new Response(response.body, __assign(__assign({}, isomorphicResponse), { 
                                  // `Response.headers` cannot be instantiated with the `Headers` polyfill.
                                  // Apparently, it halts if the `Headers` class contains unknown properties
                                  // (i.e. the internal `Headers.map`).
                                  headers: headers_utils_1$1.flattenHeadersObject(response.headers || {}) }))];
                      }
                      debug$1('no mocked response found, bypassing...');
                      return [2 /*return*/, pureFetch(input, init).then(function (response) { return __awaiter$1(void 0, void 0, void 0, function () {
                              var _a, _b, _c;
                              return __generator$1(this, function (_d) {
                                  switch (_d.label) {
                                      case 0:
                                          debug$1('original fetch performed', response);
                                          _b = (_a = observer).emit;
                                          _c = ['response',
                                              isoRequest];
                                          return [4 /*yield*/, normalizeFetchResponse(response)];
                                      case 1:
                                          _b.apply(_a, _c.concat([_d.sent()]));
                                          return [2 /*return*/, response];
                                  }
                              });
                          }); })];
              }
          });
      }); };
      return function () {
          debug$1('restoring modules...');
          window.fetch = pureFetch;
      };
  };
  interceptFetch_1 = fetch.interceptFetch = interceptFetch;
  function normalizeFetchResponse(response) {
      return __awaiter$1(this, void 0, void 0, function () {
          var _a;
          return __generator$1(this, function (_b) {
              switch (_b.label) {
                  case 0:
                      _a = {
                          status: response.status,
                          statusText: response.statusText,
                          headers: headers_utils_1$1.objectToHeaders(headers_utils_1$1.headersToObject(response.headers))
                      };
                      return [4 /*yield*/, response.text()];
                  case 1: return [2 /*return*/, (_a.body = _b.sent(),
                          _a)];
              }
          });
      });
  }

  var XMLHttpRequest = {};

  var XMLHttpRequestOverride = {};

  var domParser = {};

  var conventions$2 = {};

  /**
   * "Shallow freezes" an object to render it immutable.
   * Uses `Object.freeze` if available,
   * otherwise the immutability is only in the type.
   *
   * Is used to create "enum like" objects.
   *
   * @template T
   * @param {T} object the object to freeze
   * @param {Pick<ObjectConstructor, 'freeze'> = Object} oc `Object` by default,
   * 				allows to inject custom object constructor for tests
   * @returns {Readonly<T>}
   *
   * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/freeze
   */
  function freeze(object, oc) {
  	if (oc === undefined) {
  		oc = Object;
  	}
  	return oc && typeof oc.freeze === 'function' ? oc.freeze(object) : object
  }

  /**
   * All mime types that are allowed as input to `DOMParser.parseFromString`
   *
   * @see https://developer.mozilla.org/en-US/docs/Web/API/DOMParser/parseFromString#Argument02 MDN
   * @see https://html.spec.whatwg.org/multipage/dynamic-markup-insertion.html#domparsersupportedtype WHATWG HTML Spec
   * @see DOMParser.prototype.parseFromString
   */
  var MIME_TYPE = freeze({
  	/**
  	 * `text/html`, the only mime type that triggers treating an XML document as HTML.
  	 *
  	 * @see DOMParser.SupportedType.isHTML
  	 * @see https://www.iana.org/assignments/media-types/text/html IANA MimeType registration
  	 * @see https://en.wikipedia.org/wiki/HTML Wikipedia
  	 * @see https://developer.mozilla.org/en-US/docs/Web/API/DOMParser/parseFromString MDN
  	 * @see https://html.spec.whatwg.org/multipage/dynamic-markup-insertion.html#dom-domparser-parsefromstring WHATWG HTML Spec
  	 */
  	HTML: 'text/html',

  	/**
  	 * Helper method to check a mime type if it indicates an HTML document
  	 *
  	 * @param {string} [value]
  	 * @returns {boolean}
  	 *
  	 * @see https://www.iana.org/assignments/media-types/text/html IANA MimeType registration
  	 * @see https://en.wikipedia.org/wiki/HTML Wikipedia
  	 * @see https://developer.mozilla.org/en-US/docs/Web/API/DOMParser/parseFromString MDN
  	 * @see https://html.spec.whatwg.org/multipage/dynamic-markup-insertion.html#dom-domparser-parsefromstring 	 */
  	isHTML: function (value) {
  		return value === MIME_TYPE.HTML
  	},

  	/**
  	 * `application/xml`, the standard mime type for XML documents.
  	 *
  	 * @see https://www.iana.org/assignments/media-types/application/xml IANA MimeType registration
  	 * @see https://tools.ietf.org/html/rfc7303#section-9.1 RFC 7303
  	 * @see https://en.wikipedia.org/wiki/XML_and_MIME Wikipedia
  	 */
  	XML_APPLICATION: 'application/xml',

  	/**
  	 * `text/html`, an alias for `application/xml`.
  	 *
  	 * @see https://tools.ietf.org/html/rfc7303#section-9.2 RFC 7303
  	 * @see https://www.iana.org/assignments/media-types/text/xml IANA MimeType registration
  	 * @see https://en.wikipedia.org/wiki/XML_and_MIME Wikipedia
  	 */
  	XML_TEXT: 'text/xml',

  	/**
  	 * `application/xhtml+xml`, indicates an XML document that has the default HTML namespace,
  	 * but is parsed as an XML document.
  	 *
  	 * @see https://www.iana.org/assignments/media-types/application/xhtml+xml IANA MimeType registration
  	 * @see https://dom.spec.whatwg.org/#dom-domimplementation-createdocument WHATWG DOM Spec
  	 * @see https://en.wikipedia.org/wiki/XHTML Wikipedia
  	 */
  	XML_XHTML_APPLICATION: 'application/xhtml+xml',

  	/**
  	 * `image/svg+xml`,
  	 *
  	 * @see https://www.iana.org/assignments/media-types/image/svg+xml IANA MimeType registration
  	 * @see https://www.w3.org/TR/SVG11/ W3C SVG 1.1
  	 * @see https://en.wikipedia.org/wiki/Scalable_Vector_Graphics Wikipedia
  	 */
  	XML_SVG_IMAGE: 'image/svg+xml',
  });

  /**
   * Namespaces that are used in this code base.
   *
   * @see http://www.w3.org/TR/REC-xml-names
   */
  var NAMESPACE$3 = freeze({
  	/**
  	 * The XHTML namespace.
  	 *
  	 * @see http://www.w3.org/1999/xhtml
  	 */
  	HTML: 'http://www.w3.org/1999/xhtml',

  	/**
  	 * Checks if `uri` equals `NAMESPACE.HTML`.
  	 *
  	 * @param {string} [uri]
  	 *
  	 * @see NAMESPACE.HTML
  	 */
  	isHTML: function (uri) {
  		return uri === NAMESPACE$3.HTML
  	},

  	/**
  	 * The SVG namespace.
  	 *
  	 * @see http://www.w3.org/2000/svg
  	 */
  	SVG: 'http://www.w3.org/2000/svg',

  	/**
  	 * The `xml:` namespace.
  	 *
  	 * @see http://www.w3.org/XML/1998/namespace
  	 */
  	XML: 'http://www.w3.org/XML/1998/namespace',

  	/**
  	 * The `xmlns:` namespace
  	 *
  	 * @see https://www.w3.org/2000/xmlns/
  	 */
  	XMLNS: 'http://www.w3.org/2000/xmlns/',
  });

  conventions$2.freeze = freeze;
  conventions$2.MIME_TYPE = MIME_TYPE;
  conventions$2.NAMESPACE = NAMESPACE$3;

  var entities$1 = {};

  (function (exports) {
  var freeze = conventions$2.freeze;

  /**
   * The entities that are predefined in every XML document.
   *
   * @see https://www.w3.org/TR/2006/REC-xml11-20060816/#sec-predefined-ent W3C XML 1.1
   * @see https://www.w3.org/TR/2008/REC-xml-20081126/#sec-predefined-ent W3C XML 1.0
   * @see https://en.wikipedia.org/wiki/List_of_XML_and_HTML_character_entity_references#Predefined_entities_in_XML Wikipedia
   */
  exports.XML_ENTITIES = freeze({amp:'&', apos:"'", gt:'>', lt:'<', quot:'"'});

  /**
   * A map of currently 241 entities that are detected in an HTML document.
   * They contain all entries from `XML_ENTITIES`.
   *
   * @see XML_ENTITIES
   * @see DOMParser.parseFromString
   * @see DOMImplementation.prototype.createHTMLDocument
   * @see https://html.spec.whatwg.org/#named-character-references WHATWG HTML(5) Spec
   * @see https://www.w3.org/TR/xml-entity-names/ W3C XML Entity Names
   * @see https://www.w3.org/TR/html4/sgml/entities.html W3C HTML4/SGML
   * @see https://en.wikipedia.org/wiki/List_of_XML_and_HTML_character_entity_references#Character_entity_references_in_HTML Wikipedia (HTML)
   * @see https://en.wikipedia.org/wiki/List_of_XML_and_HTML_character_entity_references#Entities_representing_special_characters_in_XHTML Wikpedia (XHTML)
   */
  exports.HTML_ENTITIES = freeze({
         lt: '<',
         gt: '>',
         amp: '&',
         quot: '"',
         apos: "'",
         Agrave: "À",
         Aacute: "Á",
         Acirc: "Â",
         Atilde: "Ã",
         Auml: "Ä",
         Aring: "Å",
         AElig: "Æ",
         Ccedil: "Ç",
         Egrave: "È",
         Eacute: "É",
         Ecirc: "Ê",
         Euml: "Ë",
         Igrave: "Ì",
         Iacute: "Í",
         Icirc: "Î",
         Iuml: "Ï",
         ETH: "Ð",
         Ntilde: "Ñ",
         Ograve: "Ò",
         Oacute: "Ó",
         Ocirc: "Ô",
         Otilde: "Õ",
         Ouml: "Ö",
         Oslash: "Ø",
         Ugrave: "Ù",
         Uacute: "Ú",
         Ucirc: "Û",
         Uuml: "Ü",
         Yacute: "Ý",
         THORN: "Þ",
         szlig: "ß",
         agrave: "à",
         aacute: "á",
         acirc: "â",
         atilde: "ã",
         auml: "ä",
         aring: "å",
         aelig: "æ",
         ccedil: "ç",
         egrave: "è",
         eacute: "é",
         ecirc: "ê",
         euml: "ë",
         igrave: "ì",
         iacute: "í",
         icirc: "î",
         iuml: "ï",
         eth: "ð",
         ntilde: "ñ",
         ograve: "ò",
         oacute: "ó",
         ocirc: "ô",
         otilde: "õ",
         ouml: "ö",
         oslash: "ø",
         ugrave: "ù",
         uacute: "ú",
         ucirc: "û",
         uuml: "ü",
         yacute: "ý",
         thorn: "þ",
         yuml: "ÿ",
         nbsp: "\u00a0",
         iexcl: "¡",
         cent: "¢",
         pound: "£",
         curren: "¤",
         yen: "¥",
         brvbar: "¦",
         sect: "§",
         uml: "¨",
         copy: "©",
         ordf: "ª",
         laquo: "«",
         not: "¬",
         shy: "­­",
         reg: "®",
         macr: "¯",
         deg: "°",
         plusmn: "±",
         sup2: "²",
         sup3: "³",
         acute: "´",
         micro: "µ",
         para: "¶",
         middot: "·",
         cedil: "¸",
         sup1: "¹",
         ordm: "º",
         raquo: "»",
         frac14: "¼",
         frac12: "½",
         frac34: "¾",
         iquest: "¿",
         times: "×",
         divide: "÷",
         forall: "∀",
         part: "∂",
         exist: "∃",
         empty: "∅",
         nabla: "∇",
         isin: "∈",
         notin: "∉",
         ni: "∋",
         prod: "∏",
         sum: "∑",
         minus: "−",
         lowast: "∗",
         radic: "√",
         prop: "∝",
         infin: "∞",
         ang: "∠",
         and: "∧",
         or: "∨",
         cap: "∩",
         cup: "∪",
         'int': "∫",
         there4: "∴",
         sim: "∼",
         cong: "≅",
         asymp: "≈",
         ne: "≠",
         equiv: "≡",
         le: "≤",
         ge: "≥",
         sub: "⊂",
         sup: "⊃",
         nsub: "⊄",
         sube: "⊆",
         supe: "⊇",
         oplus: "⊕",
         otimes: "⊗",
         perp: "⊥",
         sdot: "⋅",
         Alpha: "Α",
         Beta: "Β",
         Gamma: "Γ",
         Delta: "Δ",
         Epsilon: "Ε",
         Zeta: "Ζ",
         Eta: "Η",
         Theta: "Θ",
         Iota: "Ι",
         Kappa: "Κ",
         Lambda: "Λ",
         Mu: "Μ",
         Nu: "Ν",
         Xi: "Ξ",
         Omicron: "Ο",
         Pi: "Π",
         Rho: "Ρ",
         Sigma: "Σ",
         Tau: "Τ",
         Upsilon: "Υ",
         Phi: "Φ",
         Chi: "Χ",
         Psi: "Ψ",
         Omega: "Ω",
         alpha: "α",
         beta: "β",
         gamma: "γ",
         delta: "δ",
         epsilon: "ε",
         zeta: "ζ",
         eta: "η",
         theta: "θ",
         iota: "ι",
         kappa: "κ",
         lambda: "λ",
         mu: "μ",
         nu: "ν",
         xi: "ξ",
         omicron: "ο",
         pi: "π",
         rho: "ρ",
         sigmaf: "ς",
         sigma: "σ",
         tau: "τ",
         upsilon: "υ",
         phi: "φ",
         chi: "χ",
         psi: "ψ",
         omega: "ω",
         thetasym: "ϑ",
         upsih: "ϒ",
         piv: "ϖ",
         OElig: "Œ",
         oelig: "œ",
         Scaron: "Š",
         scaron: "š",
         Yuml: "Ÿ",
         fnof: "ƒ",
         circ: "ˆ",
         tilde: "˜",
         ensp: " ",
         emsp: " ",
         thinsp: " ",
         zwnj: "‌",
         zwj: "‍",
         lrm: "‎",
         rlm: "‏",
         ndash: "–",
         mdash: "—",
         lsquo: "‘",
         rsquo: "’",
         sbquo: "‚",
         ldquo: "“",
         rdquo: "”",
         bdquo: "„",
         dagger: "†",
         Dagger: "‡",
         bull: "•",
         hellip: "…",
         permil: "‰",
         prime: "′",
         Prime: "″",
         lsaquo: "‹",
         rsaquo: "›",
         oline: "‾",
         euro: "€",
         trade: "™",
         larr: "←",
         uarr: "↑",
         rarr: "→",
         darr: "↓",
         harr: "↔",
         crarr: "↵",
         lceil: "⌈",
         rceil: "⌉",
         lfloor: "⌊",
         rfloor: "⌋",
         loz: "◊",
         spades: "♠",
         clubs: "♣",
         hearts: "♥",
         diams: "♦"
  });

  /**
   * @deprecated use `HTML_ENTITIES` instead
   * @see HTML_ENTITIES
   */
  exports.entityMap = exports.HTML_ENTITIES;
  }(entities$1));

  var sax$1 = {};

  var NAMESPACE$2 = conventions$2.NAMESPACE;

  //[4]   	NameStartChar	   ::=   	":" | [A-Z] | "_" | [a-z] | [#xC0-#xD6] | [#xD8-#xF6] | [#xF8-#x2FF] | [#x370-#x37D] | [#x37F-#x1FFF] | [#x200C-#x200D] | [#x2070-#x218F] | [#x2C00-#x2FEF] | [#x3001-#xD7FF] | [#xF900-#xFDCF] | [#xFDF0-#xFFFD] | [#x10000-#xEFFFF]
  //[4a]   	NameChar	   ::=   	NameStartChar | "-" | "." | [0-9] | #xB7 | [#x0300-#x036F] | [#x203F-#x2040]
  //[5]   	Name	   ::=   	NameStartChar (NameChar)*
  var nameStartChar = /[A-Z_a-z\xC0-\xD6\xD8-\xF6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]/;//\u10000-\uEFFFF
  var nameChar = new RegExp("[\\-\\.0-9"+nameStartChar.source.slice(1,-1)+"\\u00B7\\u0300-\\u036F\\u203F-\\u2040]");
  var tagNamePattern = new RegExp('^'+nameStartChar.source+nameChar.source+'*(?:\:'+nameStartChar.source+nameChar.source+'*)?$');
  //var tagNamePattern = /^[a-zA-Z_][\w\-\.]*(?:\:[a-zA-Z_][\w\-\.]*)?$/
  //var handlers = 'resolveEntity,getExternalSubset,characters,endDocument,endElement,endPrefixMapping,ignorableWhitespace,processingInstruction,setDocumentLocator,skippedEntity,startDocument,startElement,startPrefixMapping,notationDecl,unparsedEntityDecl,error,fatalError,warning,attributeDecl,elementDecl,externalEntityDecl,internalEntityDecl,comment,endCDATA,endDTD,endEntity,startCDATA,startDTD,startEntity'.split(',')

  //S_TAG,	S_ATTR,	S_EQ,	S_ATTR_NOQUOT_VALUE
  //S_ATTR_SPACE,	S_ATTR_END,	S_TAG_SPACE, S_TAG_CLOSE
  var S_TAG = 0;//tag name offerring
  var S_ATTR = 1;//attr name offerring 
  var S_ATTR_SPACE=2;//attr name end and space offer
  var S_EQ = 3;//=space?
  var S_ATTR_NOQUOT_VALUE = 4;//attr value(no quot value only)
  var S_ATTR_END = 5;//attr value end and no space(quot end)
  var S_TAG_SPACE = 6;//(attr value end || tag end ) && (space offer)
  var S_TAG_CLOSE = 7;//closed el<el />

  /**
   * Creates an error that will not be caught by XMLReader aka the SAX parser.
   *
   * @param {string} message
   * @param {any?} locator Optional, can provide details about the location in the source
   * @constructor
   */
  function ParseError$1(message, locator) {
  	this.message = message;
  	this.locator = locator;
  	if(Error.captureStackTrace) Error.captureStackTrace(this, ParseError$1);
  }
  ParseError$1.prototype = new Error();
  ParseError$1.prototype.name = ParseError$1.name;

  function XMLReader$1(){
  	
  }

  XMLReader$1.prototype = {
  	parse:function(source,defaultNSMap,entityMap){
  		var domBuilder = this.domBuilder;
  		domBuilder.startDocument();
  		_copy(defaultNSMap ,defaultNSMap = {});
  		parse(source,defaultNSMap,entityMap,
  				domBuilder,this.errorHandler);
  		domBuilder.endDocument();
  	}
  };
  function parse(source,defaultNSMapCopy,entityMap,domBuilder,errorHandler){
  	function fixedFromCharCode(code) {
  		// String.prototype.fromCharCode does not supports
  		// > 2 bytes unicode chars directly
  		if (code > 0xffff) {
  			code -= 0x10000;
  			var surrogate1 = 0xd800 + (code >> 10)
  				, surrogate2 = 0xdc00 + (code & 0x3ff);

  			return String.fromCharCode(surrogate1, surrogate2);
  		} else {
  			return String.fromCharCode(code);
  		}
  	}
  	function entityReplacer(a){
  		var k = a.slice(1,-1);
  		if(k in entityMap){
  			return entityMap[k]; 
  		}else if(k.charAt(0) === '#'){
  			return fixedFromCharCode(parseInt(k.substr(1).replace('x','0x')))
  		}else {
  			errorHandler.error('entity not found:'+a);
  			return a;
  		}
  	}
  	function appendText(end){//has some bugs
  		if(end>start){
  			var xt = source.substring(start,end).replace(/&#?\w+;/g,entityReplacer);
  			locator&&position(start);
  			domBuilder.characters(xt,0,end-start);
  			start = end;
  		}
  	}
  	function position(p,m){
  		while(p>=lineEnd && (m = linePattern.exec(source))){
  			lineStart = m.index;
  			lineEnd = lineStart + m[0].length;
  			locator.lineNumber++;
  			//console.log('line++:',locator,startPos,endPos)
  		}
  		locator.columnNumber = p-lineStart+1;
  	}
  	var lineStart = 0;
  	var lineEnd = 0;
  	var linePattern = /.*(?:\r\n?|\n)|.*$/g;
  	var locator = domBuilder.locator;
  	
  	var parseStack = [{currentNSMap:defaultNSMapCopy}];
  	var closeMap = {};
  	var start = 0;
  	while(true){
  		try{
  			var tagStart = source.indexOf('<',start);
  			if(tagStart<0){
  				if(!source.substr(start).match(/^\s*$/)){
  					var doc = domBuilder.doc;
  	    			var text = doc.createTextNode(source.substr(start));
  	    			doc.appendChild(text);
  	    			domBuilder.currentElement = text;
  				}
  				return;
  			}
  			if(tagStart>start){
  				appendText(tagStart);
  			}
  			switch(source.charAt(tagStart+1)){
  			case '/':
  				var end = source.indexOf('>',tagStart+3);
  				var tagName = source.substring(tagStart + 2, end).replace(/[ \t\n\r]+$/g, '');
  				var config = parseStack.pop();
  				if(end<0){
  					
  	        		tagName = source.substring(tagStart+2).replace(/[\s<].*/,'');
  	        		errorHandler.error("end tag name: "+tagName+' is not complete:'+config.tagName);
  	        		end = tagStart+1+tagName.length;
  	        	}else if(tagName.match(/\s</)){
  	        		tagName = tagName.replace(/[\s<].*/,'');
  	        		errorHandler.error("end tag name: "+tagName+' maybe not complete');
  	        		end = tagStart+1+tagName.length;
  				}
  				var localNSMap = config.localNSMap;
  				var endMatch = config.tagName == tagName;
  				var endIgnoreCaseMach = endMatch || config.tagName&&config.tagName.toLowerCase() == tagName.toLowerCase();
  		        if(endIgnoreCaseMach){
  		        	domBuilder.endElement(config.uri,config.localName,tagName);
  					if(localNSMap){
  						for(var prefix in localNSMap){
  							domBuilder.endPrefixMapping(prefix) ;
  						}
  					}
  					if(!endMatch){
  		            	errorHandler.fatalError("end tag name: "+tagName+' is not match the current start tagName:'+config.tagName ); // No known test case
  					}
  		        }else {
  		        	parseStack.push(config);
  		        }
  				
  				end++;
  				break;
  				// end elment
  			case '?':// <?...?>
  				locator&&position(tagStart);
  				end = parseInstruction(source,tagStart,domBuilder);
  				break;
  			case '!':// <!doctype,<![CDATA,<!--
  				locator&&position(tagStart);
  				end = parseDCC(source,tagStart,domBuilder,errorHandler);
  				break;
  			default:
  				locator&&position(tagStart);
  				var el = new ElementAttributes();
  				var currentNSMap = parseStack[parseStack.length-1].currentNSMap;
  				//elStartEnd
  				var end = parseElementStartPart(source,tagStart,el,currentNSMap,entityReplacer,errorHandler);
  				var len = el.length;
  				
  				
  				if(!el.closed && fixSelfClosed(source,end,el.tagName,closeMap)){
  					el.closed = true;
  					if(!entityMap.nbsp){
  						errorHandler.warning('unclosed xml attribute');
  					}
  				}
  				if(locator && len){
  					var locator2 = copyLocator(locator,{});
  					//try{//attribute position fixed
  					for(var i = 0;i<len;i++){
  						var a = el[i];
  						position(a.offset);
  						a.locator = copyLocator(locator,{});
  					}
  					domBuilder.locator = locator2;
  					if(appendElement$1(el,domBuilder,currentNSMap)){
  						parseStack.push(el);
  					}
  					domBuilder.locator = locator;
  				}else {
  					if(appendElement$1(el,domBuilder,currentNSMap)){
  						parseStack.push(el);
  					}
  				}

  				if (NAMESPACE$2.isHTML(el.uri) && !el.closed) {
  					end = parseHtmlSpecialContent(source,end,el.tagName,entityReplacer,domBuilder);
  				} else {
  					end++;
  				}
  			}
  		}catch(e){
  			if (e instanceof ParseError$1) {
  				throw e;
  			}
  			errorHandler.error('element parse error: '+e);
  			end = -1;
  		}
  		if(end>start){
  			start = end;
  		}else {
  			//TODO: 这里有可能sax回退，有位置错误风险
  			appendText(Math.max(tagStart,start)+1);
  		}
  	}
  }
  function copyLocator(f,t){
  	t.lineNumber = f.lineNumber;
  	t.columnNumber = f.columnNumber;
  	return t;
  }

  /**
   * @see #appendElement(source,elStartEnd,el,selfClosed,entityReplacer,domBuilder,parseStack);
   * @return end of the elementStartPart(end of elementEndPart for selfClosed el)
   */
  function parseElementStartPart(source,start,el,currentNSMap,entityReplacer,errorHandler){

  	/**
  	 * @param {string} qname
  	 * @param {string} value
  	 * @param {number} startIndex
  	 */
  	function addAttribute(qname, value, startIndex) {
  		if (qname in el.attributeNames) errorHandler.fatalError('Attribute ' + qname + ' redefined');
  		el.addValue(qname, value, startIndex);
  	}
  	var attrName;
  	var value;
  	var p = ++start;
  	var s = S_TAG;//status
  	while(true){
  		var c = source.charAt(p);
  		switch(c){
  		case '=':
  			if(s === S_ATTR){//attrName
  				attrName = source.slice(start,p);
  				s = S_EQ;
  			}else if(s === S_ATTR_SPACE){
  				s = S_EQ;
  			}else {
  				//fatalError: equal must after attrName or space after attrName
  				throw new Error('attribute equal must after attrName'); // No known test case
  			}
  			break;
  		case '\'':
  		case '"':
  			if(s === S_EQ || s === S_ATTR //|| s == S_ATTR_SPACE
  				){//equal
  				if(s === S_ATTR){
  					errorHandler.warning('attribute value must after "="');
  					attrName = source.slice(start,p);
  				}
  				start = p+1;
  				p = source.indexOf(c,start);
  				if(p>0){
  					value = source.slice(start,p).replace(/&#?\w+;/g,entityReplacer);
  					addAttribute(attrName, value, start-1);
  					s = S_ATTR_END;
  				}else {
  					//fatalError: no end quot match
  					throw new Error('attribute value no end \''+c+'\' match');
  				}
  			}else if(s == S_ATTR_NOQUOT_VALUE){
  				value = source.slice(start,p).replace(/&#?\w+;/g,entityReplacer);
  				//console.log(attrName,value,start,p)
  				addAttribute(attrName, value, start);
  				//console.dir(el)
  				errorHandler.warning('attribute "'+attrName+'" missed start quot('+c+')!!');
  				start = p+1;
  				s = S_ATTR_END;
  			}else {
  				//fatalError: no equal before
  				throw new Error('attribute value must after "="'); // No known test case
  			}
  			break;
  		case '/':
  			switch(s){
  			case S_TAG:
  				el.setTagName(source.slice(start,p));
  			case S_ATTR_END:
  			case S_TAG_SPACE:
  			case S_TAG_CLOSE:
  				s =S_TAG_CLOSE;
  				el.closed = true;
  			case S_ATTR_NOQUOT_VALUE:
  			case S_ATTR:
  			case S_ATTR_SPACE:
  				break;
  			//case S_EQ:
  			default:
  				throw new Error("attribute invalid close char('/')") // No known test case
  			}
  			break;
  		case ''://end document
  			errorHandler.error('unexpected end of input');
  			if(s == S_TAG){
  				el.setTagName(source.slice(start,p));
  			}
  			return p;
  		case '>':
  			switch(s){
  			case S_TAG:
  				el.setTagName(source.slice(start,p));
  			case S_ATTR_END:
  			case S_TAG_SPACE:
  			case S_TAG_CLOSE:
  				break;//normal
  			case S_ATTR_NOQUOT_VALUE://Compatible state
  			case S_ATTR:
  				value = source.slice(start,p);
  				if(value.slice(-1) === '/'){
  					el.closed  = true;
  					value = value.slice(0,-1);
  				}
  			case S_ATTR_SPACE:
  				if(s === S_ATTR_SPACE){
  					value = attrName;
  				}
  				if(s == S_ATTR_NOQUOT_VALUE){
  					errorHandler.warning('attribute "'+value+'" missed quot(")!');
  					addAttribute(attrName, value.replace(/&#?\w+;/g,entityReplacer), start);
  				}else {
  					if(!NAMESPACE$2.isHTML(currentNSMap['']) || !value.match(/^(?:disabled|checked|selected)$/i)){
  						errorHandler.warning('attribute "'+value+'" missed value!! "'+value+'" instead!!');
  					}
  					addAttribute(value, value, start);
  				}
  				break;
  			case S_EQ:
  				throw new Error('attribute value missed!!');
  			}
  //			console.log(tagName,tagNamePattern,tagNamePattern.test(tagName))
  			return p;
  		/*xml space '\x20' | #x9 | #xD | #xA; */
  		case '\u0080':
  			c = ' ';
  		default:
  			if(c<= ' '){//space
  				switch(s){
  				case S_TAG:
  					el.setTagName(source.slice(start,p));//tagName
  					s = S_TAG_SPACE;
  					break;
  				case S_ATTR:
  					attrName = source.slice(start,p);
  					s = S_ATTR_SPACE;
  					break;
  				case S_ATTR_NOQUOT_VALUE:
  					var value = source.slice(start,p).replace(/&#?\w+;/g,entityReplacer);
  					errorHandler.warning('attribute "'+value+'" missed quot(")!!');
  					addAttribute(attrName, value, start);
  				case S_ATTR_END:
  					s = S_TAG_SPACE;
  					break;
  				//case S_TAG_SPACE:
  				//case S_EQ:
  				//case S_ATTR_SPACE:
  				//	void();break;
  				//case S_TAG_CLOSE:
  					//ignore warning
  				}
  			}else {//not space
  //S_TAG,	S_ATTR,	S_EQ,	S_ATTR_NOQUOT_VALUE
  //S_ATTR_SPACE,	S_ATTR_END,	S_TAG_SPACE, S_TAG_CLOSE
  				switch(s){
  				//case S_TAG:void();break;
  				//case S_ATTR:void();break;
  				//case S_ATTR_NOQUOT_VALUE:void();break;
  				case S_ATTR_SPACE:
  					el.tagName;
  					if (!NAMESPACE$2.isHTML(currentNSMap['']) || !attrName.match(/^(?:disabled|checked|selected)$/i)) {
  						errorHandler.warning('attribute "'+attrName+'" missed value!! "'+attrName+'" instead2!!');
  					}
  					addAttribute(attrName, attrName, start);
  					start = p;
  					s = S_ATTR;
  					break;
  				case S_ATTR_END:
  					errorHandler.warning('attribute space is required"'+attrName+'"!!');
  				case S_TAG_SPACE:
  					s = S_ATTR;
  					start = p;
  					break;
  				case S_EQ:
  					s = S_ATTR_NOQUOT_VALUE;
  					start = p;
  					break;
  				case S_TAG_CLOSE:
  					throw new Error("elements closed character '/' and '>' must be connected to");
  				}
  			}
  		}//end outer switch
  		//console.log('p++',p)
  		p++;
  	}
  }
  /**
   * @return true if has new namespace define
   */
  function appendElement$1(el,domBuilder,currentNSMap){
  	var tagName = el.tagName;
  	var localNSMap = null;
  	//var currentNSMap = parseStack[parseStack.length-1].currentNSMap;
  	var i = el.length;
  	while(i--){
  		var a = el[i];
  		var qName = a.qName;
  		var value = a.value;
  		var nsp = qName.indexOf(':');
  		if(nsp>0){
  			var prefix = a.prefix = qName.slice(0,nsp);
  			var localName = qName.slice(nsp+1);
  			var nsPrefix = prefix === 'xmlns' && localName;
  		}else {
  			localName = qName;
  			prefix = null;
  			nsPrefix = qName === 'xmlns' && '';
  		}
  		//can not set prefix,because prefix !== ''
  		a.localName = localName ;
  		//prefix == null for no ns prefix attribute 
  		if(nsPrefix !== false){//hack!!
  			if(localNSMap == null){
  				localNSMap = {};
  				//console.log(currentNSMap,0)
  				_copy(currentNSMap,currentNSMap={});
  				//console.log(currentNSMap,1)
  			}
  			currentNSMap[nsPrefix] = localNSMap[nsPrefix] = value;
  			a.uri = NAMESPACE$2.XMLNS;
  			domBuilder.startPrefixMapping(nsPrefix, value); 
  		}
  	}
  	var i = el.length;
  	while(i--){
  		a = el[i];
  		var prefix = a.prefix;
  		if(prefix){//no prefix attribute has no namespace
  			if(prefix === 'xml'){
  				a.uri = NAMESPACE$2.XML;
  			}if(prefix !== 'xmlns'){
  				a.uri = currentNSMap[prefix || ''];
  				
  				//{console.log('###'+a.qName,domBuilder.locator.systemId+'',currentNSMap,a.uri)}
  			}
  		}
  	}
  	var nsp = tagName.indexOf(':');
  	if(nsp>0){
  		prefix = el.prefix = tagName.slice(0,nsp);
  		localName = el.localName = tagName.slice(nsp+1);
  	}else {
  		prefix = null;//important!!
  		localName = el.localName = tagName;
  	}
  	//no prefix element has default namespace
  	var ns = el.uri = currentNSMap[prefix || ''];
  	domBuilder.startElement(ns,localName,tagName,el);
  	//endPrefixMapping and startPrefixMapping have not any help for dom builder
  	//localNSMap = null
  	if(el.closed){
  		domBuilder.endElement(ns,localName,tagName);
  		if(localNSMap){
  			for(prefix in localNSMap){
  				domBuilder.endPrefixMapping(prefix); 
  			}
  		}
  	}else {
  		el.currentNSMap = currentNSMap;
  		el.localNSMap = localNSMap;
  		//parseStack.push(el);
  		return true;
  	}
  }
  function parseHtmlSpecialContent(source,elStartEnd,tagName,entityReplacer,domBuilder){
  	if(/^(?:script|textarea)$/i.test(tagName)){
  		var elEndStart =  source.indexOf('</'+tagName+'>',elStartEnd);
  		var text = source.substring(elStartEnd+1,elEndStart);
  		if(/[&<]/.test(text)){
  			if(/^script$/i.test(tagName)){
  				//if(!/\]\]>/.test(text)){
  					//lexHandler.startCDATA();
  					domBuilder.characters(text,0,text.length);
  					//lexHandler.endCDATA();
  					return elEndStart;
  				//}
  			}//}else{//text area
  				text = text.replace(/&#?\w+;/g,entityReplacer);
  				domBuilder.characters(text,0,text.length);
  				return elEndStart;
  			//}
  			
  		}
  	}
  	return elStartEnd+1;
  }
  function fixSelfClosed(source,elStartEnd,tagName,closeMap){
  	//if(tagName in closeMap){
  	var pos = closeMap[tagName];
  	if(pos == null){
  		//console.log(tagName)
  		pos =  source.lastIndexOf('</'+tagName+'>');
  		if(pos<elStartEnd){//忘记闭合
  			pos = source.lastIndexOf('</'+tagName);
  		}
  		closeMap[tagName] =pos;
  	}
  	return pos<elStartEnd;
  	//} 
  }
  function _copy(source,target){
  	for(var n in source){target[n] = source[n];}
  }
  function parseDCC(source,start,domBuilder,errorHandler){//sure start with '<!'
  	var next= source.charAt(start+2);
  	switch(next){
  	case '-':
  		if(source.charAt(start + 3) === '-'){
  			var end = source.indexOf('-->',start+4);
  			//append comment source.substring(4,end)//<!--
  			if(end>start){
  				domBuilder.comment(source,start+4,end-start-4);
  				return end+3;
  			}else {
  				errorHandler.error("Unclosed comment");
  				return -1;
  			}
  		}else {
  			//error
  			return -1;
  		}
  	default:
  		if(source.substr(start+3,6) == 'CDATA['){
  			var end = source.indexOf(']]>',start+9);
  			domBuilder.startCDATA();
  			domBuilder.characters(source,start+9,end-start-9);
  			domBuilder.endCDATA(); 
  			return end+3;
  		}
  		//<!DOCTYPE
  		//startDTD(java.lang.String name, java.lang.String publicId, java.lang.String systemId) 
  		var matchs = split(source,start);
  		var len = matchs.length;
  		if(len>1 && /!doctype/i.test(matchs[0][0])){
  			var name = matchs[1][0];
  			var pubid = false;
  			var sysid = false;
  			if(len>3){
  				if(/^public$/i.test(matchs[2][0])){
  					pubid = matchs[3][0];
  					sysid = len>4 && matchs[4][0];
  				}else if(/^system$/i.test(matchs[2][0])){
  					sysid = matchs[3][0];
  				}
  			}
  			var lastMatch = matchs[len-1];
  			domBuilder.startDTD(name, pubid, sysid);
  			domBuilder.endDTD();
  			
  			return lastMatch.index+lastMatch[0].length
  		}
  	}
  	return -1;
  }



  function parseInstruction(source,start,domBuilder){
  	var end = source.indexOf('?>',start);
  	if(end){
  		var match = source.substring(start,end).match(/^<\?(\S*)\s*([\s\S]*?)\s*$/);
  		if(match){
  			match[0].length;
  			domBuilder.processingInstruction(match[1], match[2]) ;
  			return end+2;
  		}else {//error
  			return -1;
  		}
  	}
  	return -1;
  }

  function ElementAttributes(){
  	this.attributeNames = {};
  }
  ElementAttributes.prototype = {
  	setTagName:function(tagName){
  		if(!tagNamePattern.test(tagName)){
  			throw new Error('invalid tagName:'+tagName)
  		}
  		this.tagName = tagName;
  	},
  	addValue:function(qName, value, offset) {
  		if(!tagNamePattern.test(qName)){
  			throw new Error('invalid attribute:'+qName)
  		}
  		this.attributeNames[qName] = this.length;
  		this[this.length++] = {qName:qName,value:value,offset:offset};
  	},
  	length:0,
  	getLocalName:function(i){return this[i].localName},
  	getLocator:function(i){return this[i].locator},
  	getQName:function(i){return this[i].qName},
  	getURI:function(i){return this[i].uri},
  	getValue:function(i){return this[i].value}
  //	,getIndex:function(uri, localName)){
  //		if(localName){
  //			
  //		}else{
  //			var qName = uri
  //		}
  //	},
  //	getValue:function(){return this.getValue(this.getIndex.apply(this,arguments))},
  //	getType:function(uri,localName){}
  //	getType:function(i){},
  };



  function split(source,start){
  	var match;
  	var buf = [];
  	var reg = /'[^']+'|"[^"]+"|[^\s<>\/=]+=?|(\/?\s*>|<)/g;
  	reg.lastIndex = start;
  	reg.exec(source);//skip <
  	while(match = reg.exec(source)){
  		buf.push(match);
  		if(match[1])return buf;
  	}
  }

  sax$1.XMLReader = XMLReader$1;
  sax$1.ParseError = ParseError$1;

  var dom = {};

  var conventions$1 = conventions$2;

  var NAMESPACE$1 = conventions$1.NAMESPACE;

  /**
   * A prerequisite for `[].filter`, to drop elements that are empty
   * @param {string} input
   * @returns {boolean}
   */
  function notEmptyString (input) {
  	return input !== ''
  }
  /**
   * @see https://infra.spec.whatwg.org/#split-on-ascii-whitespace
   * @see https://infra.spec.whatwg.org/#ascii-whitespace
   *
   * @param {string} input
   * @returns {string[]} (can be empty)
   */
  function splitOnASCIIWhitespace(input) {
  	// U+0009 TAB, U+000A LF, U+000C FF, U+000D CR, U+0020 SPACE
  	return input ? input.split(/[\t\n\f\r ]+/).filter(notEmptyString) : []
  }

  /**
   * Adds element as a key to current if it is not already present.
   *
   * @param {Record<string, boolean | undefined>} current
   * @param {string} element
   * @returns {Record<string, boolean | undefined>}
   */
  function orderedSetReducer (current, element) {
  	if (!current.hasOwnProperty(element)) {
  		current[element] = true;
  	}
  	return current;
  }

  /**
   * @see https://infra.spec.whatwg.org/#ordered-set
   * @param {string} input
   * @returns {string[]}
   */
  function toOrderedSet(input) {
  	if (!input) return [];
  	var list = splitOnASCIIWhitespace(input);
  	return Object.keys(list.reduce(orderedSetReducer, {}))
  }

  /**
   * Uses `list.indexOf` to implement something like `Array.prototype.includes`,
   * which we can not rely on being available.
   *
   * @param {any[]} list
   * @returns {function(any): boolean}
   */
  function arrayIncludes (list) {
  	return function(element) {
  		return list && list.indexOf(element) !== -1;
  	}
  }

  function copy(src,dest){
  	for(var p in src){
  		dest[p] = src[p];
  	}
  }

  /**
  ^\w+\.prototype\.([_\w]+)\s*=\s*((?:.*\{\s*?[\r\n][\s\S]*?^})|\S.*?(?=[;\r\n]));?
  ^\w+\.prototype\.([_\w]+)\s*=\s*(\S.*?(?=[;\r\n]));?
   */
  function _extends(Class,Super){
  	var pt = Class.prototype;
  	if(!(pt instanceof Super)){
  		function t(){}		t.prototype = Super.prototype;
  		t = new t();
  		copy(pt,t);
  		Class.prototype = pt = t;
  	}
  	if(pt.constructor != Class){
  		if(typeof Class != 'function'){
  			console.error("unknow Class:"+Class);
  		}
  		pt.constructor = Class;
  	}
  }

  // Node Types
  var NodeType = {};
  var ELEMENT_NODE                = NodeType.ELEMENT_NODE                = 1;
  var ATTRIBUTE_NODE              = NodeType.ATTRIBUTE_NODE              = 2;
  var TEXT_NODE                   = NodeType.TEXT_NODE                   = 3;
  var CDATA_SECTION_NODE          = NodeType.CDATA_SECTION_NODE          = 4;
  var ENTITY_REFERENCE_NODE       = NodeType.ENTITY_REFERENCE_NODE       = 5;
  var ENTITY_NODE                 = NodeType.ENTITY_NODE                 = 6;
  var PROCESSING_INSTRUCTION_NODE = NodeType.PROCESSING_INSTRUCTION_NODE = 7;
  var COMMENT_NODE                = NodeType.COMMENT_NODE                = 8;
  var DOCUMENT_NODE               = NodeType.DOCUMENT_NODE               = 9;
  var DOCUMENT_TYPE_NODE          = NodeType.DOCUMENT_TYPE_NODE          = 10;
  var DOCUMENT_FRAGMENT_NODE      = NodeType.DOCUMENT_FRAGMENT_NODE      = 11;
  var NOTATION_NODE               = NodeType.NOTATION_NODE               = 12;

  // ExceptionCode
  var ExceptionCode = {};
  var ExceptionMessage = {};
  ExceptionCode.INDEX_SIZE_ERR              = ((ExceptionMessage[1]="Index size error"),1);
  ExceptionCode.DOMSTRING_SIZE_ERR          = ((ExceptionMessage[2]="DOMString size error"),2);
  var HIERARCHY_REQUEST_ERR       = ExceptionCode.HIERARCHY_REQUEST_ERR       = ((ExceptionMessage[3]="Hierarchy request error"),3);
  ExceptionCode.WRONG_DOCUMENT_ERR          = ((ExceptionMessage[4]="Wrong document"),4);
  ExceptionCode.INVALID_CHARACTER_ERR       = ((ExceptionMessage[5]="Invalid character"),5);
  ExceptionCode.NO_DATA_ALLOWED_ERR         = ((ExceptionMessage[6]="No data allowed"),6);
  ExceptionCode.NO_MODIFICATION_ALLOWED_ERR = ((ExceptionMessage[7]="No modification allowed"),7);
  var NOT_FOUND_ERR               = ExceptionCode.NOT_FOUND_ERR               = ((ExceptionMessage[8]="Not found"),8);
  ExceptionCode.NOT_SUPPORTED_ERR           = ((ExceptionMessage[9]="Not supported"),9);
  var INUSE_ATTRIBUTE_ERR         = ExceptionCode.INUSE_ATTRIBUTE_ERR         = ((ExceptionMessage[10]="Attribute in use"),10);
  //level2
  ExceptionCode.INVALID_STATE_ERR        	= ((ExceptionMessage[11]="Invalid state"),11);
  ExceptionCode.SYNTAX_ERR               	= ((ExceptionMessage[12]="Syntax error"),12);
  ExceptionCode.INVALID_MODIFICATION_ERR 	= ((ExceptionMessage[13]="Invalid modification"),13);
  ExceptionCode.NAMESPACE_ERR           	= ((ExceptionMessage[14]="Invalid namespace"),14);
  ExceptionCode.INVALID_ACCESS_ERR      	= ((ExceptionMessage[15]="Invalid access"),15);

  /**
   * DOM Level 2
   * Object DOMException
   * @see http://www.w3.org/TR/2000/REC-DOM-Level-2-Core-20001113/ecma-script-binding.html
   * @see http://www.w3.org/TR/REC-DOM-Level-1/ecma-script-language-binding.html
   */
  function DOMException(code, message) {
  	if(message instanceof Error){
  		var error = message;
  	}else {
  		error = this;
  		Error.call(this, ExceptionMessage[code]);
  		this.message = ExceptionMessage[code];
  		if(Error.captureStackTrace) Error.captureStackTrace(this, DOMException);
  	}
  	error.code = code;
  	if(message) this.message = this.message + ": " + message;
  	return error;
  }DOMException.prototype = Error.prototype;
  copy(ExceptionCode,DOMException);

  /**
   * @see http://www.w3.org/TR/2000/REC-DOM-Level-2-Core-20001113/core.html#ID-536297177
   * The NodeList interface provides the abstraction of an ordered collection of nodes, without defining or constraining how this collection is implemented. NodeList objects in the DOM are live.
   * The items in the NodeList are accessible via an integral index, starting from 0.
   */
  function NodeList() {
  }NodeList.prototype = {
  	/**
  	 * The number of nodes in the list. The range of valid child node indices is 0 to length-1 inclusive.
  	 * @standard level1
  	 */
  	length:0, 
  	/**
  	 * Returns the indexth item in the collection. If index is greater than or equal to the number of nodes in the list, this returns null.
  	 * @standard level1
  	 * @param index  unsigned long 
  	 *   Index into the collection.
  	 * @return Node
  	 * 	The node at the indexth position in the NodeList, or null if that is not a valid index. 
  	 */
  	item: function(index) {
  		return this[index] || null;
  	},
  	toString:function(isHTML,nodeFilter){
  		for(var buf = [], i = 0;i<this.length;i++){
  			serializeToString(this[i],buf,isHTML,nodeFilter);
  		}
  		return buf.join('');
  	}
  };

  function LiveNodeList(node,refresh){
  	this._node = node;
  	this._refresh = refresh;
  	_updateLiveList(this);
  }
  function _updateLiveList(list){
  	var inc = list._node._inc || list._node.ownerDocument._inc;
  	if(list._inc != inc){
  		var ls = list._refresh(list._node);
  		//console.log(ls.length)
  		__set__(list,'length',ls.length);
  		copy(ls,list);
  		list._inc = inc;
  	}
  }
  LiveNodeList.prototype.item = function(i){
  	_updateLiveList(this);
  	return this[i];
  };

  _extends(LiveNodeList,NodeList);

  /**
   * Objects implementing the NamedNodeMap interface are used
   * to represent collections of nodes that can be accessed by name.
   * Note that NamedNodeMap does not inherit from NodeList;
   * NamedNodeMaps are not maintained in any particular order.
   * Objects contained in an object implementing NamedNodeMap may also be accessed by an ordinal index,
   * but this is simply to allow convenient enumeration of the contents of a NamedNodeMap,
   * and does not imply that the DOM specifies an order to these Nodes.
   * NamedNodeMap objects in the DOM are live.
   * used for attributes or DocumentType entities 
   */
  function NamedNodeMap() {
  }
  function _findNodeIndex(list,node){
  	var i = list.length;
  	while(i--){
  		if(list[i] === node){return i}
  	}
  }

  function _addNamedNode(el,list,newAttr,oldAttr){
  	if(oldAttr){
  		list[_findNodeIndex(list,oldAttr)] = newAttr;
  	}else {
  		list[list.length++] = newAttr;
  	}
  	if(el){
  		newAttr.ownerElement = el;
  		var doc = el.ownerDocument;
  		if(doc){
  			oldAttr && _onRemoveAttribute(doc,el,oldAttr);
  			_onAddAttribute(doc,el,newAttr);
  		}
  	}
  }
  function _removeNamedNode(el,list,attr){
  	//console.log('remove attr:'+attr)
  	var i = _findNodeIndex(list,attr);
  	if(i>=0){
  		var lastIndex = list.length-1;
  		while(i<lastIndex){
  			list[i] = list[++i];
  		}
  		list.length = lastIndex;
  		if(el){
  			var doc = el.ownerDocument;
  			if(doc){
  				_onRemoveAttribute(doc,el,attr);
  				attr.ownerElement = null;
  			}
  		}
  	}else {
  		throw DOMException(NOT_FOUND_ERR,new Error(el.tagName+'@'+attr))
  	}
  }
  NamedNodeMap.prototype = {
  	length:0,
  	item:NodeList.prototype.item,
  	getNamedItem: function(key) {
  //		if(key.indexOf(':')>0 || key == 'xmlns'){
  //			return null;
  //		}
  		//console.log()
  		var i = this.length;
  		while(i--){
  			var attr = this[i];
  			//console.log(attr.nodeName,key)
  			if(attr.nodeName == key){
  				return attr;
  			}
  		}
  	},
  	setNamedItem: function(attr) {
  		var el = attr.ownerElement;
  		if(el && el!=this._ownerElement){
  			throw new DOMException(INUSE_ATTRIBUTE_ERR);
  		}
  		var oldAttr = this.getNamedItem(attr.nodeName);
  		_addNamedNode(this._ownerElement,this,attr,oldAttr);
  		return oldAttr;
  	},
  	/* returns Node */
  	setNamedItemNS: function(attr) {// raises: WRONG_DOCUMENT_ERR,NO_MODIFICATION_ALLOWED_ERR,INUSE_ATTRIBUTE_ERR
  		var el = attr.ownerElement, oldAttr;
  		if(el && el!=this._ownerElement){
  			throw new DOMException(INUSE_ATTRIBUTE_ERR);
  		}
  		oldAttr = this.getNamedItemNS(attr.namespaceURI,attr.localName);
  		_addNamedNode(this._ownerElement,this,attr,oldAttr);
  		return oldAttr;
  	},

  	/* returns Node */
  	removeNamedItem: function(key) {
  		var attr = this.getNamedItem(key);
  		_removeNamedNode(this._ownerElement,this,attr);
  		return attr;
  		
  		
  	},// raises: NOT_FOUND_ERR,NO_MODIFICATION_ALLOWED_ERR
  	
  	//for level2
  	removeNamedItemNS:function(namespaceURI,localName){
  		var attr = this.getNamedItemNS(namespaceURI,localName);
  		_removeNamedNode(this._ownerElement,this,attr);
  		return attr;
  	},
  	getNamedItemNS: function(namespaceURI, localName) {
  		var i = this.length;
  		while(i--){
  			var node = this[i];
  			if(node.localName == localName && node.namespaceURI == namespaceURI){
  				return node;
  			}
  		}
  		return null;
  	}
  };

  /**
   * The DOMImplementation interface represents an object providing methods
   * which are not dependent on any particular document.
   * Such an object is returned by the `Document.implementation` property.
   *
   * __The individual methods describe the differences compared to the specs.__
   *
   * @constructor
   *
   * @see https://developer.mozilla.org/en-US/docs/Web/API/DOMImplementation MDN
   * @see https://www.w3.org/TR/REC-DOM-Level-1/level-one-core.html#ID-102161490 DOM Level 1 Core (Initial)
   * @see https://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-102161490 DOM Level 2 Core
   * @see https://www.w3.org/TR/DOM-Level-3-Core/core.html#ID-102161490 DOM Level 3 Core
   * @see https://dom.spec.whatwg.org/#domimplementation DOM Living Standard
   */
  function DOMImplementation$1() {
  }

  DOMImplementation$1.prototype = {
  	/**
  	 * The DOMImplementation.hasFeature() method returns a Boolean flag indicating if a given feature is supported.
  	 * The different implementations fairly diverged in what kind of features were reported.
  	 * The latest version of the spec settled to force this method to always return true, where the functionality was accurate and in use.
  	 *
  	 * @deprecated It is deprecated and modern browsers return true in all cases.
  	 *
  	 * @param {string} feature
  	 * @param {string} [version]
  	 * @returns {boolean} always true
  	 *
  	 * @see https://developer.mozilla.org/en-US/docs/Web/API/DOMImplementation/hasFeature MDN
  	 * @see https://www.w3.org/TR/REC-DOM-Level-1/level-one-core.html#ID-5CED94D7 DOM Level 1 Core
  	 * @see https://dom.spec.whatwg.org/#dom-domimplementation-hasfeature DOM Living Standard
  	 */
  	hasFeature: function(feature, version) {
  			return true;
  	},
  	/**
  	 * Creates an XML Document object of the specified type with its document element.
  	 *
  	 * __It behaves slightly different from the description in the living standard__:
  	 * - There is no interface/class `XMLDocument`, it returns a `Document` instance.
  	 * - `contentType`, `encoding`, `mode`, `origin`, `url` fields are currently not declared.
  	 * - this implementation is not validating names or qualified names
  	 *   (when parsing XML strings, the SAX parser takes care of that)
  	 *
  	 * @param {string|null} namespaceURI
  	 * @param {string} qualifiedName
  	 * @param {DocumentType=null} doctype
  	 * @returns {Document}
  	 *
  	 * @see https://developer.mozilla.org/en-US/docs/Web/API/DOMImplementation/createDocument MDN
  	 * @see https://www.w3.org/TR/DOM-Level-2-Core/core.html#Level-2-Core-DOM-createDocument DOM Level 2 Core (initial)
  	 * @see https://dom.spec.whatwg.org/#dom-domimplementation-createdocument  DOM Level 2 Core
  	 *
  	 * @see https://dom.spec.whatwg.org/#validate-and-extract DOM: Validate and extract
  	 * @see https://www.w3.org/TR/xml/#NT-NameStartChar XML Spec: Names
  	 * @see https://www.w3.org/TR/xml-names/#ns-qualnames XML Namespaces: Qualified names
  	 */
  	createDocument: function(namespaceURI,  qualifiedName, doctype){
  		var doc = new Document();
  		doc.implementation = this;
  		doc.childNodes = new NodeList();
  		doc.doctype = doctype || null;
  		if (doctype){
  			doc.appendChild(doctype);
  		}
  		if (qualifiedName){
  			var root = doc.createElementNS(namespaceURI, qualifiedName);
  			doc.appendChild(root);
  		}
  		return doc;
  	},
  	/**
  	 * Returns a doctype, with the given `qualifiedName`, `publicId`, and `systemId`.
  	 *
  	 * __This behavior is slightly different from the in the specs__:
  	 * - this implementation is not validating names or qualified names
  	 *   (when parsing XML strings, the SAX parser takes care of that)
  	 *
  	 * @param {string} qualifiedName
  	 * @param {string} [publicId]
  	 * @param {string} [systemId]
  	 * @returns {DocumentType} which can either be used with `DOMImplementation.createDocument` upon document creation
  	 * 				  or can be put into the document via methods like `Node.insertBefore()` or `Node.replaceChild()`
  	 *
  	 * @see https://developer.mozilla.org/en-US/docs/Web/API/DOMImplementation/createDocumentType MDN
  	 * @see https://www.w3.org/TR/DOM-Level-2-Core/core.html#Level-2-Core-DOM-createDocType DOM Level 2 Core
  	 * @see https://dom.spec.whatwg.org/#dom-domimplementation-createdocumenttype DOM Living Standard
  	 *
  	 * @see https://dom.spec.whatwg.org/#validate-and-extract DOM: Validate and extract
  	 * @see https://www.w3.org/TR/xml/#NT-NameStartChar XML Spec: Names
  	 * @see https://www.w3.org/TR/xml-names/#ns-qualnames XML Namespaces: Qualified names
  	 */
  	createDocumentType: function(qualifiedName, publicId, systemId){
  		var node = new DocumentType();
  		node.name = qualifiedName;
  		node.nodeName = qualifiedName;
  		node.publicId = publicId || '';
  		node.systemId = systemId || '';

  		return node;
  	}
  };


  /**
   * @see http://www.w3.org/TR/2000/REC-DOM-Level-2-Core-20001113/core.html#ID-1950641247
   */

  function Node() {
  }
  Node.prototype = {
  	firstChild : null,
  	lastChild : null,
  	previousSibling : null,
  	nextSibling : null,
  	attributes : null,
  	parentNode : null,
  	childNodes : null,
  	ownerDocument : null,
  	nodeValue : null,
  	namespaceURI : null,
  	prefix : null,
  	localName : null,
  	// Modified in DOM Level 2:
  	insertBefore:function(newChild, refChild){//raises 
  		return _insertBefore(this,newChild,refChild);
  	},
  	replaceChild:function(newChild, oldChild){//raises 
  		this.insertBefore(newChild,oldChild);
  		if(oldChild){
  			this.removeChild(oldChild);
  		}
  	},
  	removeChild:function(oldChild){
  		return _removeChild(this,oldChild);
  	},
  	appendChild:function(newChild){
  		return this.insertBefore(newChild,null);
  	},
  	hasChildNodes:function(){
  		return this.firstChild != null;
  	},
  	cloneNode:function(deep){
  		return cloneNode(this.ownerDocument||this,this,deep);
  	},
  	// Modified in DOM Level 2:
  	normalize:function(){
  		var child = this.firstChild;
  		while(child){
  			var next = child.nextSibling;
  			if(next && next.nodeType == TEXT_NODE && child.nodeType == TEXT_NODE){
  				this.removeChild(next);
  				child.appendData(next.data);
  			}else {
  				child.normalize();
  				child = next;
  			}
  		}
  	},
    	// Introduced in DOM Level 2:
  	isSupported:function(feature, version){
  		return this.ownerDocument.implementation.hasFeature(feature,version);
  	},
      // Introduced in DOM Level 2:
      hasAttributes:function(){
      	return this.attributes.length>0;
      },
      lookupPrefix:function(namespaceURI){
      	var el = this;
      	while(el){
      		var map = el._nsMap;
      		//console.dir(map)
      		if(map){
      			for(var n in map){
      				if(map[n] == namespaceURI){
      					return n;
      				}
      			}
      		}
      		el = el.nodeType == ATTRIBUTE_NODE?el.ownerDocument : el.parentNode;
      	}
      	return null;
      },
      // Introduced in DOM Level 3:
      lookupNamespaceURI:function(prefix){
      	var el = this;
      	while(el){
      		var map = el._nsMap;
      		//console.dir(map)
      		if(map){
      			if(prefix in map){
      				return map[prefix] ;
      			}
      		}
      		el = el.nodeType == ATTRIBUTE_NODE?el.ownerDocument : el.parentNode;
      	}
      	return null;
      },
      // Introduced in DOM Level 3:
      isDefaultNamespace:function(namespaceURI){
      	var prefix = this.lookupPrefix(namespaceURI);
      	return prefix == null;
      }
  };


  function _xmlEncoder(c){
  	return c == '<' && '&lt;' ||
           c == '>' && '&gt;' ||
           c == '&' && '&amp;' ||
           c == '"' && '&quot;' ||
           '&#'+c.charCodeAt()+';'
  }


  copy(NodeType,Node);
  copy(NodeType,Node.prototype);

  /**
   * @param callback return true for continue,false for break
   * @return boolean true: break visit;
   */
  function _visitNode(node,callback){
  	if(callback(node)){
  		return true;
  	}
  	if(node = node.firstChild){
  		do{
  			if(_visitNode(node,callback)){return true}
          }while(node=node.nextSibling)
      }
  }



  function Document(){
  }

  function _onAddAttribute(doc,el,newAttr){
  	doc && doc._inc++;
  	var ns = newAttr.namespaceURI ;
  	if(ns === NAMESPACE$1.XMLNS){
  		//update namespace
  		el._nsMap[newAttr.prefix?newAttr.localName:''] = newAttr.value;
  	}
  }

  function _onRemoveAttribute(doc,el,newAttr,remove){
  	doc && doc._inc++;
  	var ns = newAttr.namespaceURI ;
  	if(ns === NAMESPACE$1.XMLNS){
  		//update namespace
  		delete el._nsMap[newAttr.prefix?newAttr.localName:''];
  	}
  }

  function _onUpdateChild(doc,el,newChild){
  	if(doc && doc._inc){
  		doc._inc++;
  		//update childNodes
  		var cs = el.childNodes;
  		if(newChild){
  			cs[cs.length++] = newChild;
  		}else {
  			//console.log(1)
  			var child = el.firstChild;
  			var i = 0;
  			while(child){
  				cs[i++] = child;
  				child =child.nextSibling;
  			}
  			cs.length = i;
  		}
  	}
  }

  /**
   * attributes;
   * children;
   * 
   * writeable properties:
   * nodeValue,Attr:value,CharacterData:data
   * prefix
   */
  function _removeChild(parentNode,child){
  	var previous = child.previousSibling;
  	var next = child.nextSibling;
  	if(previous){
  		previous.nextSibling = next;
  	}else {
  		parentNode.firstChild = next;
  	}
  	if(next){
  		next.previousSibling = previous;
  	}else {
  		parentNode.lastChild = previous;
  	}
  	_onUpdateChild(parentNode.ownerDocument,parentNode);
  	return child;
  }
  /**
   * preformance key(refChild == null)
   */
  function _insertBefore(parentNode,newChild,nextChild){
  	var cp = newChild.parentNode;
  	if(cp){
  		cp.removeChild(newChild);//remove and update
  	}
  	if(newChild.nodeType === DOCUMENT_FRAGMENT_NODE){
  		var newFirst = newChild.firstChild;
  		if (newFirst == null) {
  			return newChild;
  		}
  		var newLast = newChild.lastChild;
  	}else {
  		newFirst = newLast = newChild;
  	}
  	var pre = nextChild ? nextChild.previousSibling : parentNode.lastChild;

  	newFirst.previousSibling = pre;
  	newLast.nextSibling = nextChild;
  	
  	
  	if(pre){
  		pre.nextSibling = newFirst;
  	}else {
  		parentNode.firstChild = newFirst;
  	}
  	if(nextChild == null){
  		parentNode.lastChild = newLast;
  	}else {
  		nextChild.previousSibling = newLast;
  	}
  	do{
  		newFirst.parentNode = parentNode;
  	}while(newFirst !== newLast && (newFirst= newFirst.nextSibling))
  	_onUpdateChild(parentNode.ownerDocument||parentNode,parentNode);
  	//console.log(parentNode.lastChild.nextSibling == null)
  	if (newChild.nodeType == DOCUMENT_FRAGMENT_NODE) {
  		newChild.firstChild = newChild.lastChild = null;
  	}
  	return newChild;
  }
  function _appendSingleChild(parentNode,newChild){
  	var cp = newChild.parentNode;
  	if(cp){
  		var pre = parentNode.lastChild;
  		cp.removeChild(newChild);//remove and update
  		var pre = parentNode.lastChild;
  	}
  	var pre = parentNode.lastChild;
  	newChild.parentNode = parentNode;
  	newChild.previousSibling = pre;
  	newChild.nextSibling = null;
  	if(pre){
  		pre.nextSibling = newChild;
  	}else {
  		parentNode.firstChild = newChild;
  	}
  	parentNode.lastChild = newChild;
  	_onUpdateChild(parentNode.ownerDocument,parentNode,newChild);
  	return newChild;
  	//console.log("__aa",parentNode.lastChild.nextSibling == null)
  }
  Document.prototype = {
  	//implementation : null,
  	nodeName :  '#document',
  	nodeType :  DOCUMENT_NODE,
  	doctype :  null,
  	documentElement :  null,
  	_inc : 1,

  	insertBefore :  function(newChild, refChild){//raises
  		if(newChild.nodeType == DOCUMENT_FRAGMENT_NODE){
  			var child = newChild.firstChild;
  			while(child){
  				var next = child.nextSibling;
  				this.insertBefore(child,refChild);
  				child = next;
  			}
  			return newChild;
  		}
  		if(this.documentElement == null && newChild.nodeType == ELEMENT_NODE){
  			this.documentElement = newChild;
  		}

  		return _insertBefore(this,newChild,refChild),(newChild.ownerDocument = this),newChild;
  	},
  	removeChild :  function(oldChild){
  		if(this.documentElement == oldChild){
  			this.documentElement = null;
  		}
  		return _removeChild(this,oldChild);
  	},
  	// Introduced in DOM Level 2:
  	importNode : function(importedNode,deep){
  		return importNode(this,importedNode,deep);
  	},
  	// Introduced in DOM Level 2:
  	getElementById :	function(id){
  		var rtv = null;
  		_visitNode(this.documentElement,function(node){
  			if(node.nodeType == ELEMENT_NODE){
  				if(node.getAttribute('id') == id){
  					rtv = node;
  					return true;
  				}
  			}
  		});
  		return rtv;
  	},

  	/**
  	 * The `getElementsByClassName` method of `Document` interface returns an array-like object
  	 * of all child elements which have **all** of the given class name(s).
  	 *
  	 * Returns an empty list if `classeNames` is an empty string or only contains HTML white space characters.
  	 *
  	 *
  	 * Warning: This is a live LiveNodeList.
  	 * Changes in the DOM will reflect in the array as the changes occur.
  	 * If an element selected by this array no longer qualifies for the selector,
  	 * it will automatically be removed. Be aware of this for iteration purposes.
  	 *
  	 * @param {string} classNames is a string representing the class name(s) to match; multiple class names are separated by (ASCII-)whitespace
  	 *
  	 * @see https://developer.mozilla.org/en-US/docs/Web/API/Document/getElementsByClassName
  	 * @see https://dom.spec.whatwg.org/#concept-getelementsbyclassname
  	 */
  	getElementsByClassName: function(classNames) {
  		var classNamesSet = toOrderedSet(classNames);
  		return new LiveNodeList(this, function(base) {
  			var ls = [];
  			if (classNamesSet.length > 0) {
  				_visitNode(base.documentElement, function(node) {
  					if(node !== base && node.nodeType === ELEMENT_NODE) {
  						var nodeClassNames = node.getAttribute('class');
  						// can be null if the attribute does not exist
  						if (nodeClassNames) {
  							// before splitting and iterating just compare them for the most common case
  							var matches = classNames === nodeClassNames;
  							if (!matches) {
  								var nodeClassNamesSet = toOrderedSet(nodeClassNames);
  								matches = classNamesSet.every(arrayIncludes(nodeClassNamesSet));
  							}
  							if(matches) {
  								ls.push(node);
  							}
  						}
  					}
  				});
  			}
  			return ls;
  		});
  	},

  	//document factory method:
  	createElement :	function(tagName){
  		var node = new Element();
  		node.ownerDocument = this;
  		node.nodeName = tagName;
  		node.tagName = tagName;
  		node.localName = tagName;
  		node.childNodes = new NodeList();
  		var attrs	= node.attributes = new NamedNodeMap();
  		attrs._ownerElement = node;
  		return node;
  	},
  	createDocumentFragment :	function(){
  		var node = new DocumentFragment();
  		node.ownerDocument = this;
  		node.childNodes = new NodeList();
  		return node;
  	},
  	createTextNode :	function(data){
  		var node = new Text();
  		node.ownerDocument = this;
  		node.appendData(data);
  		return node;
  	},
  	createComment :	function(data){
  		var node = new Comment();
  		node.ownerDocument = this;
  		node.appendData(data);
  		return node;
  	},
  	createCDATASection :	function(data){
  		var node = new CDATASection();
  		node.ownerDocument = this;
  		node.appendData(data);
  		return node;
  	},
  	createProcessingInstruction :	function(target,data){
  		var node = new ProcessingInstruction();
  		node.ownerDocument = this;
  		node.tagName = node.target = target;
  		node.nodeValue= node.data = data;
  		return node;
  	},
  	createAttribute :	function(name){
  		var node = new Attr();
  		node.ownerDocument	= this;
  		node.name = name;
  		node.nodeName	= name;
  		node.localName = name;
  		node.specified = true;
  		return node;
  	},
  	createEntityReference :	function(name){
  		var node = new EntityReference();
  		node.ownerDocument	= this;
  		node.nodeName	= name;
  		return node;
  	},
  	// Introduced in DOM Level 2:
  	createElementNS :	function(namespaceURI,qualifiedName){
  		var node = new Element();
  		var pl = qualifiedName.split(':');
  		var attrs	= node.attributes = new NamedNodeMap();
  		node.childNodes = new NodeList();
  		node.ownerDocument = this;
  		node.nodeName = qualifiedName;
  		node.tagName = qualifiedName;
  		node.namespaceURI = namespaceURI;
  		if(pl.length == 2){
  			node.prefix = pl[0];
  			node.localName = pl[1];
  		}else {
  			//el.prefix = null;
  			node.localName = qualifiedName;
  		}
  		attrs._ownerElement = node;
  		return node;
  	},
  	// Introduced in DOM Level 2:
  	createAttributeNS :	function(namespaceURI,qualifiedName){
  		var node = new Attr();
  		var pl = qualifiedName.split(':');
  		node.ownerDocument = this;
  		node.nodeName = qualifiedName;
  		node.name = qualifiedName;
  		node.namespaceURI = namespaceURI;
  		node.specified = true;
  		if(pl.length == 2){
  			node.prefix = pl[0];
  			node.localName = pl[1];
  		}else {
  			//el.prefix = null;
  			node.localName = qualifiedName;
  		}
  		return node;
  	}
  };
  _extends(Document,Node);


  function Element() {
  	this._nsMap = {};
  }Element.prototype = {
  	nodeType : ELEMENT_NODE,
  	hasAttribute : function(name){
  		return this.getAttributeNode(name)!=null;
  	},
  	getAttribute : function(name){
  		var attr = this.getAttributeNode(name);
  		return attr && attr.value || '';
  	},
  	getAttributeNode : function(name){
  		return this.attributes.getNamedItem(name);
  	},
  	setAttribute : function(name, value){
  		var attr = this.ownerDocument.createAttribute(name);
  		attr.value = attr.nodeValue = "" + value;
  		this.setAttributeNode(attr);
  	},
  	removeAttribute : function(name){
  		var attr = this.getAttributeNode(name);
  		attr && this.removeAttributeNode(attr);
  	},
  	
  	//four real opeartion method
  	appendChild:function(newChild){
  		if(newChild.nodeType === DOCUMENT_FRAGMENT_NODE){
  			return this.insertBefore(newChild,null);
  		}else {
  			return _appendSingleChild(this,newChild);
  		}
  	},
  	setAttributeNode : function(newAttr){
  		return this.attributes.setNamedItem(newAttr);
  	},
  	setAttributeNodeNS : function(newAttr){
  		return this.attributes.setNamedItemNS(newAttr);
  	},
  	removeAttributeNode : function(oldAttr){
  		//console.log(this == oldAttr.ownerElement)
  		return this.attributes.removeNamedItem(oldAttr.nodeName);
  	},
  	//get real attribute name,and remove it by removeAttributeNode
  	removeAttributeNS : function(namespaceURI, localName){
  		var old = this.getAttributeNodeNS(namespaceURI, localName);
  		old && this.removeAttributeNode(old);
  	},
  	
  	hasAttributeNS : function(namespaceURI, localName){
  		return this.getAttributeNodeNS(namespaceURI, localName)!=null;
  	},
  	getAttributeNS : function(namespaceURI, localName){
  		var attr = this.getAttributeNodeNS(namespaceURI, localName);
  		return attr && attr.value || '';
  	},
  	setAttributeNS : function(namespaceURI, qualifiedName, value){
  		var attr = this.ownerDocument.createAttributeNS(namespaceURI, qualifiedName);
  		attr.value = attr.nodeValue = "" + value;
  		this.setAttributeNode(attr);
  	},
  	getAttributeNodeNS : function(namespaceURI, localName){
  		return this.attributes.getNamedItemNS(namespaceURI, localName);
  	},
  	
  	getElementsByTagName : function(tagName){
  		return new LiveNodeList(this,function(base){
  			var ls = [];
  			_visitNode(base,function(node){
  				if(node !== base && node.nodeType == ELEMENT_NODE && (tagName === '*' || node.tagName == tagName)){
  					ls.push(node);
  				}
  			});
  			return ls;
  		});
  	},
  	getElementsByTagNameNS : function(namespaceURI, localName){
  		return new LiveNodeList(this,function(base){
  			var ls = [];
  			_visitNode(base,function(node){
  				if(node !== base && node.nodeType === ELEMENT_NODE && (namespaceURI === '*' || node.namespaceURI === namespaceURI) && (localName === '*' || node.localName == localName)){
  					ls.push(node);
  				}
  			});
  			return ls;
  			
  		});
  	}
  };
  Document.prototype.getElementsByTagName = Element.prototype.getElementsByTagName;
  Document.prototype.getElementsByTagNameNS = Element.prototype.getElementsByTagNameNS;


  _extends(Element,Node);
  function Attr() {
  }Attr.prototype.nodeType = ATTRIBUTE_NODE;
  _extends(Attr,Node);


  function CharacterData() {
  }CharacterData.prototype = {
  	data : '',
  	substringData : function(offset, count) {
  		return this.data.substring(offset, offset+count);
  	},
  	appendData: function(text) {
  		text = this.data+text;
  		this.nodeValue = this.data = text;
  		this.length = text.length;
  	},
  	insertData: function(offset,text) {
  		this.replaceData(offset,0,text);
  	
  	},
  	appendChild:function(newChild){
  		throw new Error(ExceptionMessage[HIERARCHY_REQUEST_ERR])
  	},
  	deleteData: function(offset, count) {
  		this.replaceData(offset,count,"");
  	},
  	replaceData: function(offset, count, text) {
  		var start = this.data.substring(0,offset);
  		var end = this.data.substring(offset+count);
  		text = start + text + end;
  		this.nodeValue = this.data = text;
  		this.length = text.length;
  	}
  };
  _extends(CharacterData,Node);
  function Text() {
  }Text.prototype = {
  	nodeName : "#text",
  	nodeType : TEXT_NODE,
  	splitText : function(offset) {
  		var text = this.data;
  		var newText = text.substring(offset);
  		text = text.substring(0, offset);
  		this.data = this.nodeValue = text;
  		this.length = text.length;
  		var newNode = this.ownerDocument.createTextNode(newText);
  		if(this.parentNode){
  			this.parentNode.insertBefore(newNode, this.nextSibling);
  		}
  		return newNode;
  	}
  };
  _extends(Text,CharacterData);
  function Comment() {
  }Comment.prototype = {
  	nodeName : "#comment",
  	nodeType : COMMENT_NODE
  };
  _extends(Comment,CharacterData);

  function CDATASection() {
  }CDATASection.prototype = {
  	nodeName : "#cdata-section",
  	nodeType : CDATA_SECTION_NODE
  };
  _extends(CDATASection,CharacterData);


  function DocumentType() {
  }DocumentType.prototype.nodeType = DOCUMENT_TYPE_NODE;
  _extends(DocumentType,Node);

  function Notation() {
  }Notation.prototype.nodeType = NOTATION_NODE;
  _extends(Notation,Node);

  function Entity() {
  }Entity.prototype.nodeType = ENTITY_NODE;
  _extends(Entity,Node);

  function EntityReference() {
  }EntityReference.prototype.nodeType = ENTITY_REFERENCE_NODE;
  _extends(EntityReference,Node);

  function DocumentFragment() {
  }DocumentFragment.prototype.nodeName =	"#document-fragment";
  DocumentFragment.prototype.nodeType =	DOCUMENT_FRAGMENT_NODE;
  _extends(DocumentFragment,Node);


  function ProcessingInstruction() {
  }
  ProcessingInstruction.prototype.nodeType = PROCESSING_INSTRUCTION_NODE;
  _extends(ProcessingInstruction,Node);
  function XMLSerializer(){}
  XMLSerializer.prototype.serializeToString = function(node,isHtml,nodeFilter){
  	return nodeSerializeToString.call(node,isHtml,nodeFilter);
  };
  Node.prototype.toString = nodeSerializeToString;
  function nodeSerializeToString(isHtml,nodeFilter){
  	var buf = [];
  	var refNode = this.nodeType == 9 && this.documentElement || this;
  	var prefix = refNode.prefix;
  	var uri = refNode.namespaceURI;
  	
  	if(uri && prefix == null){
  		//console.log(prefix)
  		var prefix = refNode.lookupPrefix(uri);
  		if(prefix == null){
  			//isHTML = true;
  			var visibleNamespaces=[
  			{namespace:uri,prefix:null}
  			//{namespace:uri,prefix:''}
  			];
  		}
  	}
  	serializeToString(this,buf,isHtml,nodeFilter,visibleNamespaces);
  	//console.log('###',this.nodeType,uri,prefix,buf.join(''))
  	return buf.join('');
  }

  function needNamespaceDefine(node, isHTML, visibleNamespaces) {
  	var prefix = node.prefix || '';
  	var uri = node.namespaceURI;
  	// According to [Namespaces in XML 1.0](https://www.w3.org/TR/REC-xml-names/#ns-using) ,
  	// and more specifically https://www.w3.org/TR/REC-xml-names/#nsc-NoPrefixUndecl :
  	// > In a namespace declaration for a prefix [...], the attribute value MUST NOT be empty.
  	// in a similar manner [Namespaces in XML 1.1](https://www.w3.org/TR/xml-names11/#ns-using)
  	// and more specifically https://www.w3.org/TR/xml-names11/#nsc-NSDeclared :
  	// > [...] Furthermore, the attribute value [...] must not be an empty string.
  	// so serializing empty namespace value like xmlns:ds="" would produce an invalid XML document.
  	if (!uri) {
  		return false;
  	}
  	if (prefix === "xml" && uri === NAMESPACE$1.XML || uri === NAMESPACE$1.XMLNS) {
  		return false;
  	}
  	
  	var i = visibleNamespaces.length; 
  	while (i--) {
  		var ns = visibleNamespaces[i];
  		// get namespace prefix
  		if (ns.prefix === prefix) {
  			return ns.namespace !== uri;
  		}
  	}
  	return true;
  }
  /**
   * Well-formed constraint: No < in Attribute Values
   * The replacement text of any entity referred to directly or indirectly in an attribute value must not contain a <.
   * @see https://www.w3.org/TR/xml/#CleanAttrVals
   * @see https://www.w3.org/TR/xml/#NT-AttValue
   */
  function addSerializedAttribute(buf, qualifiedName, value) {
  	buf.push(' ', qualifiedName, '="', value.replace(/[<&"]/g,_xmlEncoder), '"');
  }

  function serializeToString(node,buf,isHTML,nodeFilter,visibleNamespaces){
  	if (!visibleNamespaces) {
  		visibleNamespaces = [];
  	}

  	if(nodeFilter){
  		node = nodeFilter(node);
  		if(node){
  			if(typeof node == 'string'){
  				buf.push(node);
  				return;
  			}
  		}else {
  			return;
  		}
  		//buf.sort.apply(attrs, attributeSorter);
  	}

  	switch(node.nodeType){
  	case ELEMENT_NODE:
  		var attrs = node.attributes;
  		var len = attrs.length;
  		var child = node.firstChild;
  		var nodeName = node.tagName;
  		
  		isHTML = NAMESPACE$1.isHTML(node.namespaceURI) || isHTML;

  		var prefixedNodeName = nodeName;
  		if (!isHTML && !node.prefix && node.namespaceURI) {
  			var defaultNS;
  			for (var ai = 0; ai < attrs.length; ai++) {
  				if (attrs.item(ai).name === 'xmlns') {
  					defaultNS = attrs.item(ai).value;
  					break
  				}
  			}
  			if (defaultNS !== node.namespaceURI) {
  				for (var nsi = visibleNamespaces.length - 1; nsi >= 0; nsi--) {
  					var namespace = visibleNamespaces[nsi];
  					if (namespace.namespace === node.namespaceURI) {
  						if (namespace.prefix) {
  							prefixedNodeName = namespace.prefix + ':' + nodeName;
  						}
  						break
  					}
  				}
  			}
  		}

  		buf.push('<', prefixedNodeName);

  		for(var i=0;i<len;i++){
  			// add namespaces for attributes
  			var attr = attrs.item(i);
  			if (attr.prefix == 'xmlns') {
  				visibleNamespaces.push({ prefix: attr.localName, namespace: attr.value });
  			}else if(attr.nodeName == 'xmlns'){
  				visibleNamespaces.push({ prefix: '', namespace: attr.value });
  			}
  		}

  		for(var i=0;i<len;i++){
  			var attr = attrs.item(i);
  			if (needNamespaceDefine(attr,isHTML, visibleNamespaces)) {
  				var prefix = attr.prefix||'';
  				var uri = attr.namespaceURI;
  				addSerializedAttribute(buf, prefix ? 'xmlns:' + prefix : "xmlns", uri);
  				visibleNamespaces.push({ prefix: prefix, namespace:uri });
  			}
  			serializeToString(attr,buf,isHTML,nodeFilter,visibleNamespaces);
  		}

  		// add namespace for current node		
  		if (nodeName === prefixedNodeName && needNamespaceDefine(node, isHTML, visibleNamespaces)) {
  			var prefix = node.prefix||'';
  			var uri = node.namespaceURI;
  			addSerializedAttribute(buf, prefix ? 'xmlns:' + prefix : "xmlns", uri);
  			visibleNamespaces.push({ prefix: prefix, namespace:uri });
  		}
  		
  		if(child || isHTML && !/^(?:meta|link|img|br|hr|input)$/i.test(nodeName)){
  			buf.push('>');
  			//if is cdata child node
  			if(isHTML && /^script$/i.test(nodeName)){
  				while(child){
  					if(child.data){
  						buf.push(child.data);
  					}else {
  						serializeToString(child, buf, isHTML, nodeFilter, visibleNamespaces.slice());
  					}
  					child = child.nextSibling;
  				}
  			}else
  			{
  				while(child){
  					serializeToString(child, buf, isHTML, nodeFilter, visibleNamespaces.slice());
  					child = child.nextSibling;
  				}
  			}
  			buf.push('</',prefixedNodeName,'>');
  		}else {
  			buf.push('/>');
  		}
  		// remove added visible namespaces
  		//visibleNamespaces.length = startVisibleNamespaces;
  		return;
  	case DOCUMENT_NODE:
  	case DOCUMENT_FRAGMENT_NODE:
  		var child = node.firstChild;
  		while(child){
  			serializeToString(child, buf, isHTML, nodeFilter, visibleNamespaces.slice());
  			child = child.nextSibling;
  		}
  		return;
  	case ATTRIBUTE_NODE:
  		return addSerializedAttribute(buf, node.name, node.value);
  	case TEXT_NODE:
  		/**
  		 * The ampersand character (&) and the left angle bracket (<) must not appear in their literal form,
  		 * except when used as markup delimiters, or within a comment, a processing instruction, or a CDATA section.
  		 * If they are needed elsewhere, they must be escaped using either numeric character references or the strings
  		 * `&amp;` and `&lt;` respectively.
  		 * The right angle bracket (>) may be represented using the string " &gt; ", and must, for compatibility,
  		 * be escaped using either `&gt;` or a character reference when it appears in the string `]]>` in content,
  		 * when that string is not marking the end of a CDATA section.
  		 *
  		 * In the content of elements, character data is any string of characters
  		 * which does not contain the start-delimiter of any markup
  		 * and does not include the CDATA-section-close delimiter, `]]>`.
  		 *
  		 * @see https://www.w3.org/TR/xml/#NT-CharData
  		 */
  		return buf.push(node.data
  			.replace(/[<&]/g,_xmlEncoder)
  			.replace(/]]>/g, ']]&gt;')
  		);
  	case CDATA_SECTION_NODE:
  		return buf.push( '<![CDATA[',node.data,']]>');
  	case COMMENT_NODE:
  		return buf.push( "<!--",node.data,"-->");
  	case DOCUMENT_TYPE_NODE:
  		var pubid = node.publicId;
  		var sysid = node.systemId;
  		buf.push('<!DOCTYPE ',node.name);
  		if(pubid){
  			buf.push(' PUBLIC ', pubid);
  			if (sysid && sysid!='.') {
  				buf.push(' ', sysid);
  			}
  			buf.push('>');
  		}else if(sysid && sysid!='.'){
  			buf.push(' SYSTEM ', sysid, '>');
  		}else {
  			var sub = node.internalSubset;
  			if(sub){
  				buf.push(" [",sub,"]");
  			}
  			buf.push(">");
  		}
  		return;
  	case PROCESSING_INSTRUCTION_NODE:
  		return buf.push( "<?",node.target," ",node.data,"?>");
  	case ENTITY_REFERENCE_NODE:
  		return buf.push( '&',node.nodeName,';');
  	//case ENTITY_NODE:
  	//case NOTATION_NODE:
  	default:
  		buf.push('??',node.nodeName);
  	}
  }
  function importNode(doc,node,deep){
  	var node2;
  	switch (node.nodeType) {
  	case ELEMENT_NODE:
  		node2 = node.cloneNode(false);
  		node2.ownerDocument = doc;
  		//var attrs = node2.attributes;
  		//var len = attrs.length;
  		//for(var i=0;i<len;i++){
  			//node2.setAttributeNodeNS(importNode(doc,attrs.item(i),deep));
  		//}
  	case DOCUMENT_FRAGMENT_NODE:
  		break;
  	case ATTRIBUTE_NODE:
  		deep = true;
  		break;
  	//case ENTITY_REFERENCE_NODE:
  	//case PROCESSING_INSTRUCTION_NODE:
  	////case TEXT_NODE:
  	//case CDATA_SECTION_NODE:
  	//case COMMENT_NODE:
  	//	deep = false;
  	//	break;
  	//case DOCUMENT_NODE:
  	//case DOCUMENT_TYPE_NODE:
  	//cannot be imported.
  	//case ENTITY_NODE:
  	//case NOTATION_NODE：
  	//can not hit in level3
  	//default:throw e;
  	}
  	if(!node2){
  		node2 = node.cloneNode(false);//false
  	}
  	node2.ownerDocument = doc;
  	node2.parentNode = null;
  	if(deep){
  		var child = node.firstChild;
  		while(child){
  			node2.appendChild(importNode(doc,child,deep));
  			child = child.nextSibling;
  		}
  	}
  	return node2;
  }
  //
  //var _relationMap = {firstChild:1,lastChild:1,previousSibling:1,nextSibling:1,
  //					attributes:1,childNodes:1,parentNode:1,documentElement:1,doctype,};
  function cloneNode(doc,node,deep){
  	var node2 = new node.constructor();
  	for(var n in node){
  		var v = node[n];
  		if(typeof v != 'object' ){
  			if(v != node2[n]){
  				node2[n] = v;
  			}
  		}
  	}
  	if(node.childNodes){
  		node2.childNodes = new NodeList();
  	}
  	node2.ownerDocument = doc;
  	switch (node2.nodeType) {
  	case ELEMENT_NODE:
  		var attrs	= node.attributes;
  		var attrs2	= node2.attributes = new NamedNodeMap();
  		var len = attrs.length;
  		attrs2._ownerElement = node2;
  		for(var i=0;i<len;i++){
  			node2.setAttributeNode(cloneNode(doc,attrs.item(i),true));
  		}
  		break;	case ATTRIBUTE_NODE:
  		deep = true;
  	}
  	if(deep){
  		var child = node.firstChild;
  		while(child){
  			node2.appendChild(cloneNode(doc,child,deep));
  			child = child.nextSibling;
  		}
  	}
  	return node2;
  }

  function __set__(object,key,value){
  	object[key] = value;
  }
  //do dynamic
  try{
  	if(Object.defineProperty){
  		Object.defineProperty(LiveNodeList.prototype,'length',{
  			get:function(){
  				_updateLiveList(this);
  				return this.$$length;
  			}
  		});

  		Object.defineProperty(Node.prototype,'textContent',{
  			get:function(){
  				return getTextContent(this);
  			},

  			set:function(data){
  				switch(this.nodeType){
  				case ELEMENT_NODE:
  				case DOCUMENT_FRAGMENT_NODE:
  					while(this.firstChild){
  						this.removeChild(this.firstChild);
  					}
  					if(data || String(data)){
  						this.appendChild(this.ownerDocument.createTextNode(data));
  					}
  					break;

  				default:
  					this.data = data;
  					this.value = data;
  					this.nodeValue = data;
  				}
  			}
  		});
  		
  		function getTextContent(node){
  			switch(node.nodeType){
  			case ELEMENT_NODE:
  			case DOCUMENT_FRAGMENT_NODE:
  				var buf = [];
  				node = node.firstChild;
  				while(node){
  					if(node.nodeType!==7 && node.nodeType !==8){
  						buf.push(getTextContent(node));
  					}
  					node = node.nextSibling;
  				}
  				return buf.join('');
  			default:
  				return node.nodeValue;
  			}
  		}

  		__set__ = function(object,key,value){
  			//console.log(value)
  			object['$$'+key] = value;
  		};
  	}
  }catch(e){//ie8
  }

  //if(typeof require == 'function'){
  	dom.DocumentType = DocumentType;
  	dom.DOMException = DOMException;
  	dom.DOMImplementation = DOMImplementation$1;
  	dom.Element = Element;
  	dom.Node = Node;
  	dom.NodeList = NodeList;
  	dom.XMLSerializer = XMLSerializer;

  var conventions = conventions$2;
  var entities = entities$1;

  var NAMESPACE = conventions.NAMESPACE;

  function DOMParser(options){
  	this.options = options ||{locator:{}};
  }

  DOMParser.prototype.parseFromString = function(source,mimeType){
  	var options = this.options;
  	var sax =  new XMLReader();
  	var domBuilder = options.domBuilder || new DOMHandler();//contentHandler and LexicalHandler
  	var errorHandler = options.errorHandler;
  	var locator = options.locator;
  	var defaultNSMap = options.xmlns||{};
  	var isHTML = /\/x?html?$/.test(mimeType);//mimeType.toLowerCase().indexOf('html') > -1;
    	var entityMap = isHTML ? entities.HTML_ENTITIES : entities.XML_ENTITIES;
  	if(locator){
  		domBuilder.setDocumentLocator(locator);
  	}

  	sax.errorHandler = buildErrorHandler(errorHandler,domBuilder,locator);
  	sax.domBuilder = options.domBuilder || domBuilder;
  	if(isHTML){
  		defaultNSMap[''] = NAMESPACE.HTML;
  	}
  	defaultNSMap.xml = defaultNSMap.xml || NAMESPACE.XML;
  	if(source && typeof source === 'string'){
  		sax.parse(source,defaultNSMap,entityMap);
  	}else {
  		sax.errorHandler.error("invalid doc source");
  	}
  	return domBuilder.doc;
  };
  function buildErrorHandler(errorImpl,domBuilder,locator){
  	if(!errorImpl){
  		if(domBuilder instanceof DOMHandler){
  			return domBuilder;
  		}
  		errorImpl = domBuilder ;
  	}
  	var errorHandler = {};
  	var isCallback = errorImpl instanceof Function;
  	locator = locator||{};
  	function build(key){
  		var fn = errorImpl[key];
  		if(!fn && isCallback){
  			fn = errorImpl.length == 2?function(msg){errorImpl(key,msg);}:errorImpl;
  		}
  		errorHandler[key] = fn && function(msg){
  			fn('[xmldom '+key+']\t'+msg+_locator(locator));
  		}||function(){};
  	}
  	build('warning');
  	build('error');
  	build('fatalError');
  	return errorHandler;
  }

  //console.log('#\n\n\n\n\n\n\n####')
  /**
   * +ContentHandler+ErrorHandler
   * +LexicalHandler+EntityResolver2
   * -DeclHandler-DTDHandler
   *
   * DefaultHandler:EntityResolver, DTDHandler, ContentHandler, ErrorHandler
   * DefaultHandler2:DefaultHandler,LexicalHandler, DeclHandler, EntityResolver2
   * @link http://www.saxproject.org/apidoc/org/xml/sax/helpers/DefaultHandler.html
   */
  function DOMHandler() {
      this.cdata = false;
  }
  function position(locator,node){
  	node.lineNumber = locator.lineNumber;
  	node.columnNumber = locator.columnNumber;
  }
  /**
   * @see org.xml.sax.ContentHandler#startDocument
   * @link http://www.saxproject.org/apidoc/org/xml/sax/ContentHandler.html
   */
  DOMHandler.prototype = {
  	startDocument : function() {
      	this.doc = new DOMImplementation().createDocument(null, null, null);
      	if (this.locator) {
          	this.doc.documentURI = this.locator.systemId;
      	}
  	},
  	startElement:function(namespaceURI, localName, qName, attrs) {
  		var doc = this.doc;
  	    var el = doc.createElementNS(namespaceURI, qName||localName);
  	    var len = attrs.length;
  	    appendElement(this, el);
  	    this.currentElement = el;

  		this.locator && position(this.locator,el);
  	    for (var i = 0 ; i < len; i++) {
  	        var namespaceURI = attrs.getURI(i);
  	        var value = attrs.getValue(i);
  	        var qName = attrs.getQName(i);
  			var attr = doc.createAttributeNS(namespaceURI, qName);
  			this.locator &&position(attrs.getLocator(i),attr);
  			attr.value = attr.nodeValue = value;
  			el.setAttributeNode(attr);
  	    }
  	},
  	endElement:function(namespaceURI, localName, qName) {
  		var current = this.currentElement;
  		current.tagName;
  		this.currentElement = current.parentNode;
  	},
  	startPrefixMapping:function(prefix, uri) {
  	},
  	endPrefixMapping:function(prefix) {
  	},
  	processingInstruction:function(target, data) {
  	    var ins = this.doc.createProcessingInstruction(target, data);
  	    this.locator && position(this.locator,ins);
  	    appendElement(this, ins);
  	},
  	ignorableWhitespace:function(ch, start, length) {
  	},
  	characters:function(chars, start, length) {
  		chars = _toString.apply(this,arguments);
  		//console.log(chars)
  		if(chars){
  			if (this.cdata) {
  				var charNode = this.doc.createCDATASection(chars);
  			} else {
  				var charNode = this.doc.createTextNode(chars);
  			}
  			if(this.currentElement){
  				this.currentElement.appendChild(charNode);
  			}else if(/^\s*$/.test(chars)){
  				this.doc.appendChild(charNode);
  				//process xml
  			}
  			this.locator && position(this.locator,charNode);
  		}
  	},
  	skippedEntity:function(name) {
  	},
  	endDocument:function() {
  		this.doc.normalize();
  	},
  	setDocumentLocator:function (locator) {
  	    if(this.locator = locator){// && !('lineNumber' in locator)){
  	    	locator.lineNumber = 0;
  	    }
  	},
  	//LexicalHandler
  	comment:function(chars, start, length) {
  		chars = _toString.apply(this,arguments);
  	    var comm = this.doc.createComment(chars);
  	    this.locator && position(this.locator,comm);
  	    appendElement(this, comm);
  	},

  	startCDATA:function() {
  	    //used in characters() methods
  	    this.cdata = true;
  	},
  	endCDATA:function() {
  	    this.cdata = false;
  	},

  	startDTD:function(name, publicId, systemId) {
  		var impl = this.doc.implementation;
  	    if (impl && impl.createDocumentType) {
  	        var dt = impl.createDocumentType(name, publicId, systemId);
  	        this.locator && position(this.locator,dt);
  	        appendElement(this, dt);
  	    }
  	},
  	/**
  	 * @see org.xml.sax.ErrorHandler
  	 * @link http://www.saxproject.org/apidoc/org/xml/sax/ErrorHandler.html
  	 */
  	warning:function(error) {
  		console.warn('[xmldom warning]\t'+error,_locator(this.locator));
  	},
  	error:function(error) {
  		console.error('[xmldom error]\t'+error,_locator(this.locator));
  	},
  	fatalError:function(error) {
  		throw new ParseError(error, this.locator);
  	}
  };
  function _locator(l){
  	if(l){
  		return '\n@'+(l.systemId ||'')+'#[line:'+l.lineNumber+',col:'+l.columnNumber+']'
  	}
  }
  function _toString(chars,start,length){
  	if(typeof chars == 'string'){
  		return chars.substr(start,length)
  	}else {//java sax connect width xmldom on rhino(what about: "? && !(chars instanceof String)")
  		if(chars.length >= start+length || start){
  			return new java.lang.String(chars,start,length)+'';
  		}
  		return chars;
  	}
  }

  /*
   * @link http://www.saxproject.org/apidoc/org/xml/sax/ext/LexicalHandler.html
   * used method of org.xml.sax.ext.LexicalHandler:
   *  #comment(chars, start, length)
   *  #startCDATA()
   *  #endCDATA()
   *  #startDTD(name, publicId, systemId)
   *
   *
   * IGNORED method of org.xml.sax.ext.LexicalHandler:
   *  #endDTD()
   *  #startEntity(name)
   *  #endEntity(name)
   *
   *
   * @link http://www.saxproject.org/apidoc/org/xml/sax/ext/DeclHandler.html
   * IGNORED method of org.xml.sax.ext.DeclHandler
   * 	#attributeDecl(eName, aName, type, mode, value)
   *  #elementDecl(name, model)
   *  #externalEntityDecl(name, publicId, systemId)
   *  #internalEntityDecl(name, value)
   * @link http://www.saxproject.org/apidoc/org/xml/sax/ext/EntityResolver2.html
   * IGNORED method of org.xml.sax.EntityResolver2
   *  #resolveEntity(String name,String publicId,String baseURI,String systemId)
   *  #resolveEntity(publicId, systemId)
   *  #getExternalSubset(name, baseURI)
   * @link http://www.saxproject.org/apidoc/org/xml/sax/DTDHandler.html
   * IGNORED method of org.xml.sax.DTDHandler
   *  #notationDecl(name, publicId, systemId) {};
   *  #unparsedEntityDecl(name, publicId, systemId, notationName) {};
   */
  "endDTD,startEntity,endEntity,attributeDecl,elementDecl,externalEntityDecl,internalEntityDecl,resolveEntity,getExternalSubset,notationDecl,unparsedEntityDecl".replace(/\w+/g,function(key){
  	DOMHandler.prototype[key] = function(){return null};
  });

  /* Private static helpers treated below as private instance methods, so don't need to add these to the public API; we might use a Relator to also get rid of non-standard public properties */
  function appendElement (hander,node) {
      if (!hander.currentElement) {
          hander.doc.appendChild(node);
      } else {
          hander.currentElement.appendChild(node);
      }
  }//appendChild and setAttributeNS are preformance key

  //if(typeof require == 'function'){
  var sax = sax$1;
  var XMLReader = sax.XMLReader;
  var ParseError = sax.ParseError;
  var DOMImplementation = domParser.DOMImplementation = dom.DOMImplementation;
  domParser.XMLSerializer = dom.XMLSerializer ;
  domParser.DOMParser = DOMParser;
  domParser.__DOMHandler = DOMHandler;

  var parseJson$1 = {};

  Object.defineProperty(parseJson$1, "__esModule", { value: true });
  parseJson$1.parseJson = void 0;
  /**
   * Parses a given string into JSON.
   * Gracefully handles invalid JSON by returning `null`.
   */
  function parseJson(data) {
      try {
          var json = JSON.parse(data);
          return json;
      }
      catch (_) {
          return null;
      }
  }
  parseJson$1.parseJson = parseJson;

  var bufferFrom$1 = {};

  Object.defineProperty(bufferFrom$1, "__esModule", { value: true });
  bufferFrom$1.bufferFrom = void 0;
  /**
   * Convert a given string into a `Uint8Array`.
   * We don't use `TextEncoder` because it's unavailable in some environments.
   */
  function bufferFrom(init) {
      var encodedString = encodeURIComponent(init);
      var binaryString = encodedString.replace(/%([0-9A-F]{2})/g, function (_, char) {
          return String.fromCharCode(('0x' + char));
      });
      var buffer = new Uint8Array(binaryString.length);
      Array.prototype.forEach.call(binaryString, function (char, index) {
          buffer[index] = char.charCodeAt(0);
      });
      return buffer;
  }
  bufferFrom$1.bufferFrom = bufferFrom;

  var createEvent$1 = {};

  var EventPolyfill$1 = {};

  Object.defineProperty(EventPolyfill$1, "__esModule", { value: true });
  EventPolyfill$1.EventPolyfill = void 0;
  var EventPolyfill = /** @class */ (function () {
      function EventPolyfill(type, options) {
          this.AT_TARGET = 0;
          this.BUBBLING_PHASE = 0;
          this.CAPTURING_PHASE = 0;
          this.NONE = 0;
          this.type = '';
          this.srcElement = null;
          this.currentTarget = null;
          this.eventPhase = 0;
          this.isTrusted = true;
          this.composed = false;
          this.cancelable = true;
          this.defaultPrevented = false;
          this.bubbles = true;
          this.lengthComputable = true;
          this.loaded = 0;
          this.total = 0;
          this.cancelBubble = false;
          this.returnValue = true;
          this.type = type;
          this.target = (options === null || options === void 0 ? void 0 : options.target) || null;
          this.currentTarget = (options === null || options === void 0 ? void 0 : options.currentTarget) || null;
          this.timeStamp = Date.now();
      }
      EventPolyfill.prototype.composedPath = function () {
          return [];
      };
      EventPolyfill.prototype.initEvent = function (type, bubbles, cancelable) {
          this.type = type;
          this.bubbles = !!bubbles;
          this.cancelable = !!cancelable;
      };
      EventPolyfill.prototype.preventDefault = function () {
          this.defaultPrevented = true;
      };
      EventPolyfill.prototype.stopPropagation = function () { };
      EventPolyfill.prototype.stopImmediatePropagation = function () { };
      return EventPolyfill;
  }());
  EventPolyfill$1.EventPolyfill = EventPolyfill;

  var ProgressEventPolyfill$1 = {};

  var __extends = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
      var extendStatics = function (d, b) {
          extendStatics = Object.setPrototypeOf ||
              ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
              function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
          return extendStatics(d, b);
      };
      return function (d, b) {
          if (typeof b !== "function" && b !== null)
              throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
          extendStatics(d, b);
          function __() { this.constructor = d; }
          d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
  })();
  Object.defineProperty(ProgressEventPolyfill$1, "__esModule", { value: true });
  ProgressEventPolyfill$1.ProgressEventPolyfill = void 0;
  var EventPolyfill_1$1 = EventPolyfill$1;
  var ProgressEventPolyfill = /** @class */ (function (_super) {
      __extends(ProgressEventPolyfill, _super);
      function ProgressEventPolyfill(type, init) {
          var _this = _super.call(this, type) || this;
          _this.lengthComputable = (init === null || init === void 0 ? void 0 : init.lengthComputable) || false;
          _this.composed = (init === null || init === void 0 ? void 0 : init.composed) || false;
          _this.loaded = (init === null || init === void 0 ? void 0 : init.loaded) || 0;
          _this.total = (init === null || init === void 0 ? void 0 : init.total) || 0;
          return _this;
      }
      return ProgressEventPolyfill;
  }(EventPolyfill_1$1.EventPolyfill));
  ProgressEventPolyfill$1.ProgressEventPolyfill = ProgressEventPolyfill;

  Object.defineProperty(createEvent$1, "__esModule", { value: true });
  createEvent$1.createEvent = void 0;
  var EventPolyfill_1 = EventPolyfill$1;
  var ProgressEventPolyfill_1 = ProgressEventPolyfill$1;
  var SUPPORTS_PROGRESS_EVENT = typeof ProgressEvent !== 'undefined';
  function createEvent(target, type, init) {
      var progressEvents = [
          'error',
          'progress',
          'loadstart',
          'loadend',
          'load',
          'timeout',
          'abort',
      ];
      /**
       * `ProgressEvent` is not supported in React Native.
       * @see https://github.com/mswjs/interceptors/issues/40
       */
      var ProgressEventClass = SUPPORTS_PROGRESS_EVENT
          ? ProgressEvent
          : ProgressEventPolyfill_1.ProgressEventPolyfill;
      var event = progressEvents.includes(type)
          ? new ProgressEventClass(type, {
              lengthComputable: true,
              loaded: (init === null || init === void 0 ? void 0 : init.loaded) || 0,
              total: (init === null || init === void 0 ? void 0 : init.total) || 0,
          })
          : new EventPolyfill_1.EventPolyfill(type, {
              target: target,
              currentTarget: target,
          });
      return event;
  }
  createEvent$1.createEvent = createEvent;

  var __awaiter = (commonjsGlobal && commonjsGlobal.__awaiter) || function (thisArg, _arguments, P, generator) {
      function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
      return new (P || (P = Promise))(function (resolve, reject) {
          function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
          function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
          function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
          step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
  };
  var __generator = (commonjsGlobal && commonjsGlobal.__generator) || function (thisArg, body) {
      var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
      return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
      function verb(n) { return function (v) { return step([n, v]); }; }
      function step(op) {
          if (f) throw new TypeError("Generator is already executing.");
          while (_) try {
              if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
              if (y = 0, t) op = [op[0] & 2, t.value];
              switch (op[0]) {
                  case 0: case 1: t = op; break;
                  case 4: _.label++; return { value: op[1], done: false };
                  case 5: _.label++; y = op[1]; op = [0]; continue;
                  case 7: op = _.ops.pop(); _.trys.pop(); continue;
                  default:
                      if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                      if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                      if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                      if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                      if (t[2]) _.ops.pop();
                      _.trys.pop(); continue;
              }
              op = body.call(thisArg, _);
          } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
          if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
      }
  };
  var __values = (commonjsGlobal && commonjsGlobal.__values) || function(o) {
      var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
      if (m) return m.call(o);
      if (o && typeof o.length === "number") return {
          next: function () {
              if (o && i >= o.length) o = void 0;
              return { value: o && o[i++], done: !o };
          }
      };
      throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
  };
  var __read = (commonjsGlobal && commonjsGlobal.__read) || function (o, n) {
      var m = typeof Symbol === "function" && o[Symbol.iterator];
      if (!m) return o;
      var i = m.call(o), r, ar = [], e;
      try {
          while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
      }
      catch (error) { e = { error: error }; }
      finally {
          try {
              if (r && !r.done && (m = i["return"])) m.call(i);
          }
          finally { if (e) throw e.error; }
      }
      return ar;
  };
  Object.defineProperty(XMLHttpRequestOverride, "__esModule", { value: true });
  XMLHttpRequestOverride.createXMLHttpRequestOverride = void 0;
  /**
   * XMLHttpRequest override class.
   * Inspired by https://github.com/marvinhagemeister/xhr-mocklet.
   */
  var until_1 = lib$3;
  var headers_utils_1 = lib$6;
  var xmldom_1 = domParser;
  var parseJson_1 = parseJson$1;
  var toIsoResponse_1 = toIsoResponse$1;
  var uuid_1 = uuid;
  var bufferFrom_1 = bufferFrom$1;
  var createEvent_1 = createEvent$1;
  var createDebug = browser.exports;
  var createXMLHttpRequestOverride = function (options) {
      var _a;
      var pureXMLHttpRequest = options.pureXMLHttpRequest, observer = options.observer, resolver = options.resolver;
      var debug = createDebug('XHR');
      return _a = /** @class */ (function () {
              function XMLHttpRequestOverride() {
                  // Collection of events modified by `addEventListener`/`removeEventListener` calls.
                  this._events = [];
                  this.UNSENT = 0;
                  this.OPENED = 1;
                  this.HEADERS_RECEIVED = 2;
                  this.LOADING = 3;
                  this.DONE = 4;
                  this.onreadystatechange = null;
                  /* Events */
                  this.onabort = null;
                  this.onerror = null;
                  this.onload = null;
                  this.onloadend = null;
                  this.onloadstart = null;
                  this.onprogress = null;
                  this.ontimeout = null;
                  this.url = '';
                  this.method = 'GET';
                  this.readyState = this.UNSENT;
                  this.withCredentials = false;
                  this.status = 200;
                  this.statusText = 'OK';
                  this.data = '';
                  this.response = '';
                  this.responseType = 'text';
                  this.responseText = '';
                  this.responseXML = null;
                  this.responseURL = '';
                  this.upload = null;
                  this.timeout = 0;
                  this._requestHeaders = new headers_utils_1.Headers();
                  this._responseHeaders = new headers_utils_1.Headers();
              }
              XMLHttpRequestOverride.prototype.setReadyState = function (nextState) {
                  if (nextState === this.readyState) {
                      return;
                  }
                  debug('readyState change %d -> %d', this.readyState, nextState);
                  this.readyState = nextState;
                  if (nextState !== this.UNSENT) {
                      debug('triggerring readystate change...');
                      this.trigger('readystatechange');
                  }
              };
              /**
               * Triggers both direct callback and attached event listeners
               * for the given event.
               */
              XMLHttpRequestOverride.prototype.trigger = function (eventName, options) {
                  var e_1, _a;
                  debug('trigger "%s" (%d)', eventName, this.readyState);
                  debug('resolve listener for event "%s"', eventName);
                  // @ts-expect-error XMLHttpRequest class has no index signature.
                  var callback = this["on" + eventName];
                  callback === null || callback === void 0 ? void 0 : callback.call(this, createEvent_1.createEvent(this, eventName, options));
                  try {
                      for (var _b = __values(this._events), _c = _b.next(); !_c.done; _c = _b.next()) {
                          var event_1 = _c.value;
                          if (event_1.name === eventName) {
                              debug('calling mock event listener "%s" (%d)', eventName, this.readyState);
                              event_1.listener.call(this, createEvent_1.createEvent(this, eventName, options));
                          }
                      }
                  }
                  catch (e_1_1) { e_1 = { error: e_1_1 }; }
                  finally {
                      try {
                          if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                      }
                      finally { if (e_1) throw e_1.error; }
                  }
                  return this;
              };
              XMLHttpRequestOverride.prototype.reset = function () {
                  debug('reset');
                  this.setReadyState(this.UNSENT);
                  this.status = 200;
                  this.statusText = 'OK';
                  this.data = '';
                  this.response = null;
                  this.responseText = null;
                  this.responseXML = null;
                  this._requestHeaders = new headers_utils_1.Headers();
                  this._responseHeaders = new headers_utils_1.Headers();
              };
              XMLHttpRequestOverride.prototype.open = function (method, url, async, user, password) {
                  if (async === void 0) { async = true; }
                  return __awaiter(this, void 0, void 0, function () {
                      return __generator(this, function (_a) {
                          debug = createDebug("XHR " + method + " " + url);
                          debug('open', { method: method, url: url, async: async, user: user, password: password });
                          this.reset();
                          this.setReadyState(this.OPENED);
                          if (typeof url === 'undefined') {
                              this.url = method;
                              this.method = 'GET';
                          }
                          else {
                              this.url = url;
                              this.method = method;
                              this.async = async;
                              this.user = user;
                              this.password = password;
                          }
                          return [2 /*return*/];
                      });
                  });
              };
              XMLHttpRequestOverride.prototype.send = function (data) {
                  var _this = this;
                  debug('send %s %s', this.method, this.url);
                  this.data = data || '';
                  var url;
                  try {
                      url = new URL(this.url);
                  }
                  catch (error) {
                      // Assume a relative URL, if construction of a new `URL` instance fails.
                      // Since `XMLHttpRequest` always executed in a DOM-like environment,
                      // resolve the relative request URL against the current window location.
                      url = new URL(this.url, window.location.href);
                  }
                  debug('request headers', this._requestHeaders);
                  // Create an intercepted request instance exposed to the request intercepting middleware.
                  var isoRequest = {
                      id: uuid_1.uuidv4(),
                      url: url,
                      method: this.method,
                      body: this.data,
                      headers: this._requestHeaders,
                  };
                  observer.emit('request', isoRequest);
                  debug('awaiting mocked response...');
                  Promise.resolve(until_1.until(function () { return __awaiter(_this, void 0, void 0, function () { return __generator(this, function (_a) {
                      return [2 /*return*/, resolver(isoRequest, this)];
                  }); }); })).then(function (_a) {
                      var _b;
                      var _c = __read(_a, 2), middlewareException = _c[0], mockedResponse = _c[1];
                      // When the request middleware throws an exception, error the request.
                      // This cancels the request and is similar to a network error.
                      if (middlewareException) {
                          debug('middleware function threw an exception!', middlewareException);
                          // No way to propagate the actual error message.
                          _this.trigger('error');
                          _this.abort();
                          return;
                      }
                      // Return a mocked response, if provided in the middleware.
                      if (mockedResponse) {
                          debug('received mocked response', mockedResponse);
                          // Trigger a loadstart event to indicate the initialization of the fetch.
                          _this.trigger('loadstart');
                          _this.status = mockedResponse.status || 200;
                          _this.statusText = mockedResponse.statusText || 'OK';
                          _this._responseHeaders = mockedResponse.headers
                              ? headers_utils_1.objectToHeaders(mockedResponse.headers)
                              : new headers_utils_1.Headers();
                          debug('set response status', _this.status, _this.statusText);
                          debug('set response headers', _this._responseHeaders);
                          // Mark that response headers has been received
                          // and trigger a ready state event to reflect received headers
                          // in a custom `onreadystatechange` callback.
                          _this.setReadyState(_this.HEADERS_RECEIVED);
                          debug('response type', _this.responseType);
                          _this.response = _this.getResponseBody(mockedResponse.body);
                          _this.responseText = mockedResponse.body || '';
                          _this.responseXML = _this.getResponseXML();
                          debug('set response body', _this.response);
                          if (mockedResponse.body && _this.response) {
                              _this.setReadyState(_this.LOADING);
                              // Presense of the mocked response implies a response body (not null).
                              // Presense of the coerced `this.response` implies the mocked body is valid.
                              var bodyBuffer = bufferFrom_1.bufferFrom(mockedResponse.body);
                              // Trigger a progress event based on the mocked response body.
                              _this.trigger('progress', {
                                  loaded: bodyBuffer.length,
                                  total: bodyBuffer.length,
                              });
                          }
                          /**
                           * Explicitly mark the request as done so its response never hangs.
                           * @see https://github.com/mswjs/interceptors/issues/13
                           */
                          _this.setReadyState(_this.DONE);
                          // Trigger a load event to indicate the fetch has succeeded.
                          _this.trigger('load');
                          // Trigger a loadend event to indicate the fetch has completed.
                          _this.trigger('loadend');
                          observer.emit('response', isoRequest, toIsoResponse_1.toIsoResponse(mockedResponse));
                      }
                      else {
                          debug('no mocked response received!');
                          // Perform an original request, when the request middleware returned no mocked response.
                          var originalRequest_1 = new pureXMLHttpRequest();
                          debug('opening an original request %s %s', _this.method, _this.url);
                          originalRequest_1.open(_this.method, _this.url, (_b = _this.async) !== null && _b !== void 0 ? _b : true, _this.user, _this.password);
                          // Reflect a successful state of the original request
                          // on the patched instance.
                          originalRequest_1.addEventListener('load', function () {
                              debug('original "onload"');
                              _this.status = originalRequest_1.status;
                              _this.statusText = originalRequest_1.statusText;
                              _this.responseURL = originalRequest_1.responseURL;
                              _this.responseType = originalRequest_1.responseType;
                              _this.response = originalRequest_1.response;
                              _this.responseText = originalRequest_1.responseText;
                              _this.responseXML = originalRequest_1.responseXML;
                              debug('set mock request readyState to DONE');
                              // Explicitly mark the mocked request instance as done
                              // so the response never hangs.
                              /**
                               * @note `readystatechange` listener is called TWICE
                               * in the case of unhandled request.
                               */
                              _this.setReadyState(_this.DONE);
                              debug('received original response', _this.status, _this.statusText);
                              debug('original response body:', _this.response);
                              var responseHeaders = originalRequest_1.getAllResponseHeaders();
                              debug('original response headers:\n', responseHeaders);
                              _this._responseHeaders = headers_utils_1.stringToHeaders(responseHeaders);
                              debug('original response headers (normalized)', _this._responseHeaders);
                              debug('original response finished');
                              observer.emit('response', isoRequest, {
                                  status: originalRequest_1.status,
                                  statusText: originalRequest_1.statusText,
                                  headers: _this._responseHeaders,
                                  body: originalRequest_1.response,
                              });
                          });
                          // Assign callbacks and event listeners from the intercepted XHR instance
                          // to the original XHR instance.
                          _this.propagateCallbacks(originalRequest_1);
                          _this.propagateListeners(originalRequest_1);
                          _this.propagateHeaders(originalRequest_1, _this._requestHeaders);
                          if (_this.async) {
                              originalRequest_1.timeout = _this.timeout;
                          }
                          debug('send', _this.data);
                          originalRequest_1.send(_this.data);
                      }
                  });
              };
              XMLHttpRequestOverride.prototype.abort = function () {
                  debug('abort');
                  if (this.readyState > this.UNSENT && this.readyState < this.DONE) {
                      this.setReadyState(this.UNSENT);
                      this.trigger('abort');
                  }
              };
              XMLHttpRequestOverride.prototype.dispatchEvent = function () {
                  return false;
              };
              XMLHttpRequestOverride.prototype.setRequestHeader = function (name, value) {
                  debug('set request header "%s" to "%s"', name, value);
                  this._requestHeaders.append(name, value);
              };
              XMLHttpRequestOverride.prototype.getResponseHeader = function (name) {
                  debug('get response header "%s"', name);
                  if (this.readyState < this.HEADERS_RECEIVED) {
                      debug('cannot return a header: headers not received (state: %s)', this.readyState);
                      return null;
                  }
                  var headerValue = this._responseHeaders.get(name);
                  debug('resolved response header "%s" to "%s"', name, headerValue, this._responseHeaders);
                  return headerValue;
              };
              XMLHttpRequestOverride.prototype.getAllResponseHeaders = function () {
                  debug('get all response headers');
                  if (this.readyState < this.HEADERS_RECEIVED) {
                      debug('cannot return headers: headers not received (state: %s)', this.readyState);
                      return '';
                  }
                  return headers_utils_1.headersToString(this._responseHeaders);
              };
              XMLHttpRequestOverride.prototype.addEventListener = function (name, listener) {
                  debug('addEventListener', name, listener);
                  this._events.push({
                      name: name,
                      listener: listener,
                  });
              };
              XMLHttpRequestOverride.prototype.removeEventListener = function (name, listener) {
                  debug('removeEventListener', name, listener);
                  this._events = this._events.filter(function (storedEvent) {
                      return storedEvent.name !== name && storedEvent.listener !== listener;
                  });
              };
              XMLHttpRequestOverride.prototype.overrideMimeType = function () { };
              /**
               * Resolves the response based on the `responseType` value.
               */
              XMLHttpRequestOverride.prototype.getResponseBody = function (body) {
                  // Handle an improperly set "null" value of the mocked response body.
                  var textBody = body !== null && body !== void 0 ? body : '';
                  debug('coerced response body to', textBody);
                  switch (this.responseType) {
                      case 'json': {
                          debug('resolving response body as JSON');
                          return parseJson_1.parseJson(textBody);
                      }
                      case 'blob': {
                          var blobType = this.getResponseHeader('content-type') || 'text/plain';
                          debug('resolving response body as Blob', { type: blobType });
                          return new Blob([textBody], {
                              type: blobType,
                          });
                      }
                      case 'arraybuffer': {
                          debug('resolving response body as ArrayBuffer');
                          var arrayBuffer = bufferFrom_1.bufferFrom(textBody);
                          return arrayBuffer;
                      }
                      default:
                          return textBody;
                  }
              };
              XMLHttpRequestOverride.prototype.getResponseXML = function () {
                  var contentType = this.getResponseHeader('Content-Type');
                  if (contentType === 'application/xml' || contentType === 'text/xml') {
                      return new xmldom_1.DOMParser().parseFromString(this.responseText, contentType);
                  }
                  return null;
              };
              /**
               * Propagates mock XMLHttpRequest instance callbacks
               * to the given XMLHttpRequest instance.
               */
              XMLHttpRequestOverride.prototype.propagateCallbacks = function (request) {
                  request.onabort = this.abort;
                  request.onerror = this.onerror;
                  request.ontimeout = this.ontimeout;
                  request.onload = this.onload;
                  request.onloadstart = this.onloadstart;
                  request.onloadend = this.onloadend;
                  request.onprogress = this.onprogress;
                  request.onreadystatechange = this.onreadystatechange;
              };
              /**
               * Propagates the mock XMLHttpRequest instance listeners
               * to the given XMLHttpRequest instance.
               */
              XMLHttpRequestOverride.prototype.propagateListeners = function (request) {
                  debug('propagating request listeners (%d) to the original request', this._events.length, this._events);
                  this._events.forEach(function (_a) {
                      var name = _a.name, listener = _a.listener;
                      request.addEventListener(name, listener);
                  });
              };
              XMLHttpRequestOverride.prototype.propagateHeaders = function (request, headers) {
                  debug('propagating request headers to the original request', headers);
                  // Preserve the request headers casing.
                  Object.entries(headers.raw()).forEach(function (_a) {
                      var _b = __read(_a, 2), name = _b[0], value = _b[1];
                      debug('setting "%s" (%s) header on the original request', name, value);
                      request.setRequestHeader(name, value);
                  });
              };
              return XMLHttpRequestOverride;
          }()),
          /* Request state */
          _a.UNSENT = 0,
          _a.OPENED = 1,
          _a.HEADERS_RECEIVED = 2,
          _a.LOADING = 3,
          _a.DONE = 4,
          _a;
  };
  XMLHttpRequestOverride.createXMLHttpRequestOverride = createXMLHttpRequestOverride;

  Object.defineProperty(XMLHttpRequest, "__esModule", { value: true });
  var interceptXMLHttpRequest_1 = XMLHttpRequest.interceptXMLHttpRequest = void 0;
  var XMLHttpRequestOverride_1 = XMLHttpRequestOverride;
  var debug = browser.exports('XHR');
  var pureXMLHttpRequest = 
  // Although executed in node, certain processes emulate the DOM-like environment
  // (i.e. `js-dom` in Jest). The `window` object would be avilable in such environments.
  typeof window === 'undefined' ? undefined : window.XMLHttpRequest;
  /**
   * Intercepts requests issued via `XMLHttpRequest`.
   */
  var interceptXMLHttpRequest = function (observer, resolver) {
      if (pureXMLHttpRequest) {
          debug('patching "XMLHttpRequest" module...');
          var XMLHttpRequestOverride = XMLHttpRequestOverride_1.createXMLHttpRequestOverride({
              pureXMLHttpRequest: pureXMLHttpRequest,
              observer: observer,
              resolver: resolver,
          });
          window.XMLHttpRequest = XMLHttpRequestOverride;
      }
      return function () {
          if (pureXMLHttpRequest) {
              debug('restoring modules...');
              window.XMLHttpRequest = pureXMLHttpRequest;
          }
      };
  };
  interceptXMLHttpRequest_1 = XMLHttpRequest.interceptXMLHttpRequest = interceptXMLHttpRequest;

  function uuidv4() {
      return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
          const r = (Math.random() * 16) | 0;
          const v = c == 'x' ? r : (r & 0x3) | 0x8;
          return v.toString(16);
      });
  }

  /**
   * Converts a given isomorphic request to a `MockedRequest` instance.
   */
  function parseIsomorphicRequest(request) {
      const requestId = uuidv4();
      request.headers.set('x-msw-request-id', requestId);
      const mockedRequest = {
          id: requestId,
          url: request.url,
          method: request.method,
          body: parseBody(request.body, request.headers),
          headers: request.headers,
          cookies: {},
          redirect: 'manual',
          referrer: '',
          keepalive: false,
          cache: 'default',
          mode: 'cors',
          referrerPolicy: 'no-referrer',
          integrity: '',
          destination: 'document',
          bodyUsed: false,
          credentials: 'same-origin',
      };
      // Set mocked request cookies from the `cookie` header of the original request.
      // No need to take `credentials` into account, because in Node.js requests are intercepted
      // _after_ they happen. Request issuer should have already taken care of sending relevant cookies.
      // Unlike browser, where interception is on the worker level, _before_ the request happens.
      const requestCookiesString = request.headers.get('cookie');
      // Attach all the cookies from the virtual cookie store.
      setRequestCookies(mockedRequest);
      const requestCookies = requestCookiesString
          ? parse_1(requestCookiesString)
          : {};
      // Merge both direct request cookies and the cookies inherited
      // from other same-origin requests in the cookie store.
      mockedRequest.cookies = Object.assign(Object.assign({}, mockedRequest.cookies), requestCookies);
      return mockedRequest;
  }

  function createFallbackRequestListener(context, options) {
      const interceptor = lib.createInterceptor({
          modules: [interceptFetch_1, interceptXMLHttpRequest_1],
          resolver(request) {
              return __awaiter$3(this, void 0, void 0, function* () {
                  const mockedRequest = parseIsomorphicRequest(request);
                  return handleRequest(mockedRequest, context.requestHandlers, options, context.emitter, {
                      transformResponse(response) {
                          return {
                              status: response.status,
                              statusText: response.statusText,
                              headers: response.headers.all(),
                              body: response.body,
                          };
                      },
                      onMockedResponseSent(response, { handler, publicRequest, parsedRequest }) {
                          if (!options.quiet) {
                              handler.log(publicRequest, response, handler, parsedRequest);
                          }
                      },
                  });
              });
          },
      });
      interceptor.apply();
      return interceptor;
  }

  function createFallbackStart(context) {
      return function start(options) {
          return __awaiter$3(this, void 0, void 0, function* () {
              context.fallbackInterceptor = createFallbackRequestListener(context, options);
              printStartMessage({
                  message: 'Mocking enabled (fallback mode).',
                  quiet: options.quiet,
              });
              return undefined;
          });
      };
  }

  function createFallbackStop(context) {
      return function stop() {
          var _a, _b;
          (_a = context.fallbackInterceptor) === null || _a === void 0 ? void 0 : _a.restore();
          printStopMessage({ quiet: (_b = context.startOptions) === null || _b === void 0 ? void 0 : _b.quiet });
      };
  }

  /**
   * Pipes all emitted events from one emitter to another.
   */
  function pipeEvents(source, destination) {
      const rawEmit = source.emit;
      // @ts-ignore
      if (rawEmit._isPiped) {
          return;
      }
      source.emit = function (event, ...data) {
          destination.emit(event, ...data);
          return rawEmit.call(this, event, ...data);
      };
      // @ts-ignore
      source.emit._isPiped = true;
  }

  // Declare the list of event handlers on the module's scope
  // so it persists between Fash refreshes of the application's code.
  let listeners = [];
  /**
   * Creates a new mock Service Worker registration
   * with the given request handlers.
   * @param {RequestHandler[]} requestHandlers List of request handlers
   * @see {@link https://mswjs.io/docs/api/setup-worker `setupWorker`}
   */
  function setupWorker(...requestHandlers) {
      requestHandlers.forEach((handler) => {
          if (Array.isArray(handler))
              throw new Error(devUtils.formatMessage('Failed to call "setupWorker" given an Array of request handlers (setupWorker([a, b])), expected to receive each handler individually: setupWorker(a, b).'));
      });
      // Error when attempting to run this function in a Node.js environment.
      if (lib$5.exports.isNodeProcess()) {
          throw new Error(devUtils.formatMessage('Failed to execute `setupWorker` in a non-browser environment. Consider using `setupServer` for Node.js environment instead.'));
      }
      const emitter = new lib$4.StrictEventEmitter();
      const publicEmitter = new lib$4.StrictEventEmitter();
      pipeEvents(emitter, publicEmitter);
      const context = {
          startOptions: undefined,
          worker: null,
          registration: null,
          requestHandlers: [...requestHandlers],
          emitter,
          workerChannel: {
              on(eventType, callback) {
                  context.events.addListener(navigator.serviceWorker, 'message', (event) => {
                      // Avoid messages broadcasted from unrelated workers.
                      if (event.source !== context.worker) {
                          return;
                      }
                      const message = jsonParse(event.data);
                      if (!message) {
                          return;
                      }
                      if (message.type === eventType) {
                          callback(event, message);
                      }
                  });
              },
              send(type) {
                  var _a;
                  (_a = context.worker) === null || _a === void 0 ? void 0 : _a.postMessage(type);
              },
          },
          events: {
              addListener(target, eventType, callback) {
                  target.addEventListener(eventType, callback);
                  listeners.push({ eventType, target, callback });
                  return () => {
                      target.removeEventListener(eventType, callback);
                  };
              },
              removeAllListeners() {
                  for (const { target, eventType, callback } of listeners) {
                      target.removeEventListener(eventType, callback);
                  }
                  listeners = [];
              },
              once(eventType) {
                  const bindings = [];
                  return new Promise((resolve, reject) => {
                      const handleIncomingMessage = (event) => {
                          try {
                              const message = JSON.parse(event.data);
                              if (message.type === eventType) {
                                  resolve(message);
                              }
                          }
                          catch (error) {
                              reject(error);
                          }
                      };
                      bindings.push(context.events.addListener(navigator.serviceWorker, 'message', handleIncomingMessage), context.events.addListener(navigator.serviceWorker, 'messageerror', reject));
                  }).finally(() => {
                      bindings.forEach((unbind) => unbind());
                  });
              },
          },
          useFallbackMode: !('serviceWorker' in navigator) || location.protocol === 'file:',
      };
      const startHandler = context.useFallbackMode
          ? createFallbackStart(context)
          : createStartHandler(context);
      const stopHandler = context.useFallbackMode
          ? createFallbackStop(context)
          : createStop(context);
      return {
          start: prepareStartHandler(startHandler, context),
          stop() {
              context.events.removeAllListeners();
              context.emitter.removeAllListeners();
              publicEmitter.removeAllListeners();
              stopHandler();
          },
          use(...handlers) {
              use(context.requestHandlers, ...handlers);
          },
          restoreHandlers() {
              restoreHandlers(context.requestHandlers);
          },
          resetHandlers(...nextHandlers) {
              context.requestHandlers = resetHandlers(requestHandlers, ...nextHandlers);
          },
          printHandlers() {
              context.requestHandlers.forEach((handler) => {
                  const { header, callFrame } = handler.info;
                  const pragma = handler.info.hasOwnProperty('operationType')
                      ? '[graphql]'
                      : '[rest]';
                  console.groupCollapsed(`${pragma} ${header}`);
                  if (callFrame) {
                      console.log(`Declaration: ${callFrame}`);
                  }
                  console.log('Handler:', handler);
                  if (handler instanceof RestHandler) {
                      console.log('Match:', `https://mswjs.io/repl?path=${handler.info.path}`);
                  }
                  console.groupEnd();
              });
          },
          events: {
              on(...args) {
                  return publicEmitter.on(...args);
              },
              removeListener(...args) {
                  return publicEmitter.removeListener(...args);
              },
              removeAllListeners(...args) {
                  return publicEmitter.removeAllListeners(...args);
              },
          },
      };
  }

  function createRestHandler(method) {
      return (path, resolver) => {
          return new RestHandler(method, path, resolver);
      };
  }
  const rest = {
      head: createRestHandler(exports.RESTMethods.HEAD),
      get: createRestHandler(exports.RESTMethods.GET),
      post: createRestHandler(exports.RESTMethods.POST),
      put: createRestHandler(exports.RESTMethods.PUT),
      delete: createRestHandler(exports.RESTMethods.DELETE),
      patch: createRestHandler(exports.RESTMethods.PATCH),
      options: createRestHandler(exports.RESTMethods.OPTIONS),
  };

  function createScopedGraphQLHandler(operationType, url) {
      return (operationName, resolver) => {
          return new GraphQLHandler(operationType, operationName, url, resolver);
      };
  }
  function createGraphQLOperationHandler(url) {
      return (resolver) => {
          return new GraphQLHandler('all', new RegExp('.*'), url, resolver);
      };
  }
  const standardGraphQLHandlers = {
      /**
       * Captures any GraphQL operation, regardless of its name, under the current scope.
       * @example
       * graphql.operation((req, res, ctx) => {
       *   return res(ctx.data({ name: 'John' }))
       * })
       * @see {@link https://mswjs.io/docs/api/graphql/operation `graphql.operation()`}
       */
      operation: createGraphQLOperationHandler('*'),
      /**
       * Captures a GraphQL query by a given name.
       * @example
       * graphql.query('GetUser', (req, res, ctx) => {
       *   return res(ctx.data({ user: { name: 'John' } }))
       * })
       * @see {@link https://mswjs.io/docs/api/graphql/query `graphql.query()`}
       */
      query: createScopedGraphQLHandler('query', '*'),
      /**
       * Captures a GraphQL mutation by a given name.
       * @example
       * graphql.mutation('SavePost', (req, res, ctx) => {
       *   return res(ctx.data({ post: { id: 'abc-123' } }))
       * })
       * @see {@link https://mswjs.io/docs/api/graphql/mutation `graphql.mutation()`}
       */
      mutation: createScopedGraphQLHandler('mutation', '*'),
  };
  function createGraphQLLink(url) {
      return {
          operation: createGraphQLOperationHandler(url),
          query: createScopedGraphQLHandler('query', url),
          mutation: createScopedGraphQLHandler('mutation', url),
      };
  }
  const graphql = Object.assign(Object.assign({}, standardGraphQLHandlers), { link: createGraphQLLink });

  exports.GraphQLHandler = GraphQLHandler;
  exports.RequestHandler = RequestHandler;
  exports.RestHandler = RestHandler;
  exports.compose = compose;
  exports.context = index;
  exports.createResponseComposition = createResponseComposition;
  exports.defaultContext = defaultContext;
  exports.defaultResponse = defaultResponse;
  exports.graphql = graphql;
  exports.graphqlContext = graphqlContext;
  exports.handleRequest = handleRequest;
  exports.matchRequestUrl = matchRequestUrl;
  exports.parseIsomorphicRequest = parseIsomorphicRequest;
  exports.response = response;
  exports.rest = rest;
  exports.restContext = restContext;
  exports.setupWorker = setupWorker;

})));
